{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"about","text":""},{"location":"#welcome","title":"welcome","text":"<p>luxe is an easy to use game engine.   There should probably be some more useful info here later.</p>"},{"location":"#the-luxe-user-guide","title":"the luxe user guide","text":"<p>This guide has a progression, it's ideal if you read the sections in order.  They're all quick to read, but build important foundations for learning to work with luxe.</p> <ul> <li>Get started by viewing the guide.<ul> <li>The guide covers the broad strokes of workflow and concepts in the engine</li> </ul> </li> <li>Once you get the big picture, the tutorials are next.<ul> <li>These teach you the basics of interacting with the engine.</li> </ul> </li> <li>And from there, you can learn more about luxe from the manual.<ul> <li>The manual includes in depth information about the engine and systems.</li> </ul> </li> <li>Finally, there is the API reference.<ul> <li>This is the place to search for API usage and documentation.</li> </ul> </li> </ul> <p>&lt;3</p>"},{"location":"api/","title":"API","text":""},{"location":"api/#luxe-api-documentation","title":"luxe API documentation","text":""},{"location":"api/#latest","title":"latest","text":"<ul> <li>latest</li> </ul>"},{"location":"api/#next-git-latest","title":"next (git latest)","text":"<ul> <li>next</li> </ul>"},{"location":"get/","title":"Install","text":""},{"location":"get/#installing-luxe","title":"Installing luxe","text":"<ul> <li>Get the luxe launcher</li> <li>Run the launcher, it'll offer to install the latest version</li> <li>This will install the engine, editor and agent</li> </ul> <ul> <li>Progress will be shown under the install button</li> </ul> <ul> <li>After installing, you should see this</li> </ul> <ul> <li>Once you've created or added projects, it will look like this</li> </ul>"},{"location":"get/#installing-ide-support","title":"Installing IDE support","text":"<p>Currently the primary supported IDE is Visual Studio Code.  It's a free cross platform editor with great support for custom extensions. The extension includes features like code completion, jump to definition, and so on.</p> <p>Install Visual Studio Code</p> <p>Download and install Visual Studio Code from the above link for your platform if you haven't.</p> <p>To install support for luxe, open the extensions panel.  This is an icon on the side bar, or found via the <code>View -&gt; Extensions</code> menu.  </p> <p>Search the extensions for 'luxe' and when found, select 'install'.  (Make sure it's the official one). View the extension in the marketplace..</p> <p></p>"},{"location":"guide/","title":"intro","text":""},{"location":"guide/#luxe-user-guide","title":"luxe user guide","text":""},{"location":"guide/#luxe-101","title":"luxe 101","text":"<p>Below we'll briefly cover some concepts you need to get started with luxe.  As you go further into the guide, all of the concepts will be expanded in detail. </p>"},{"location":"guide/#world","title":"World","text":"<p>In luxe, things in your game are represented inside of a world.  A player character, level elements, UI elements, all of these typically exist in a world. </p> <p>The world gives you the tools to manage your things, and lets you create spaces where your game can happen. You also often have more than one world, like a UI world and a game world. </p>"},{"location":"guide/#entity","title":"Entity","text":"<p>In luxe we call a thing an entity.  Entities are the things that exist in a <code>World</code>, like the player or even a menu item.   </p> <p>An <code>Entity</code> is how we talk about a unique thing, which makes it the basic building block of making games in luxe!   </p>"},{"location":"guide/#modifiers","title":"Modifiers","text":"<p>An entity just exists, it can't do anything yet.  To make an entity do something, we attach modifiers to it!  A modifier describes something you want the entity to be able to do.</p> <p>If you want your entity to look like a triangle, you attach a modifier to describe that. If you want it to bounce around with some physics too, another modifier is added.</p> <p>This allows an entity to change at any time, which is very flexible. What it looks like, how it behaves, and what it actually is can change during the game, just by attaching and detaching modifiers. </p>"},{"location":"guide/#systems","title":"Systems","text":"<p>Systems are what power the modifiers.  A modifier is added to an entity through a world system. </p> <p>When you talk about a modifier, you talk to the system that gives it to you. A modifier describes what you want, but the system is what actually makes it happen. </p> <p>For example, attaching a <code>Transform</code> gives an entity a position in a world. You ask the <code>Transform</code> system to attach it, and then you can ask the system to move it around.</p> <p>Entity based design</p> <p>This may seem familiar, as there are many different varieties (and names) for this concept! The concept has been around for a very long time and are really common in games.</p>"},{"location":"guide/#services","title":"Services","text":"<p>Some systems exist at a lower level, powering everything, and some exist outside the world at a higher level.    </p> <p>We call these systems a service API.</p> <p>These are systems that serve a general need beneath the other systems. For example, rendering (drawing things) is a system that acts as a service. It is used by higher level world systems to provide your game with drawing. The random number generator, is also a service API.</p>"},{"location":"guide/#modules","title":"Modules","text":"<p>luxe is designed as a rich set of systems - ready to make games - but it couldn't possibly provide all systems that all different types of games may need without becoming too big and unfocused.</p> <p>With luxe, modules solve this by providing a way for you to expand the tools, systems and services that are available to you as a user. </p> <p>luxe is designed for modules to serve this need, which makes them a fundamental part of using luxe. In fact, the luxe API itself is a module too!    </p>"},{"location":"guide/#your-luxe-project","title":"Your luxe project","text":""},{"location":"guide/#code-vs-editor","title":"Code vs Editor","text":"<p>With luxe, if you prefer working through code only, you can. The code focused workflow is complemented by the editor tools. They help you create assets that would be faster to create in a tool, but is optional.</p> <p></p> <p>The same will eventually be true for editor focused workflows. Right now the engine leans a little toward code focused, because the editor is a work in progress and higher level modules which provide those workflows are being made now. In the future it would be possible to work only from the editor and make a wide range of content without opening the code.</p>"},{"location":"guide/#project-anatomy","title":"Project anatomy","text":"<p>How to start a new project?</p> <p>Use the luxe launcher, and from the project page, select new project at the top.  From there you can select which project outline you want to use as the starting point.</p> <p>Project file  A luxe project is a folder with a <code>project.luxe</code> file inside it. This is the project file. Inside your <code>project.luxe</code> file, you can set the project <code>name</code>, but it usually is set when created.</p> <p>Project config  There's also a project config folder, <code>luxe.project/</code>, which is typically where project configuration goes. This holds files like the modules used, asset manifest, version info and more.</p> <p>Entry  There's also typically a <code>game.wren</code> file, this is your entry point for the game code.</p> <p>Outline  Your project will often be created from a template, called a project <code>outline</code>. Your project probably contains an <code>outline/</code> folder, this is the template part. The project template gives you an easy starting point ready to go. </p>"},{"location":"guide/#running-a-project","title":"Running a project","text":"<p>Running via the luxe editor or code editor </p> <p>You can learn how to run the project via code and via the luxe editor from this page in the tutorial.</p> <p>Running from a command line </p> <p>You can also run your project from a terminal using <code>luxe run</code> from inside the project folder. </p> <p>A shortcut is installed to the last installed version of luxe at <code>&lt;home&gt;/.luxe/bin/luxe</code>. </p> <p>setting the shortcut version</p> <p>You can set the version using the launcher, by right clicking on an installed version of the engine. The tools + settings page also has an option to set to an explicit path (e.g dev build mode).</p> <p>mac + linux: <code>~/.luxe/bin/luxe run</code> windows: <code>c:\\Users\\&lt;USER&gt;\\.luxe\\bin\\luxe run</code></p>"},{"location":"guide/#workflow","title":"Workflow","text":"<p>With this basic understanding of our project, the next step is to see how you manage your content, where to put it, and how to create a basic game!</p>"},{"location":"modules/","title":"Modules","text":""},{"location":"modules/#module-documentation","title":"module documentation","text":"<p>For now, documentation for select modules will be displayed here as a convenience.</p>"},{"location":"api/v/2024.12.3/","title":"Index","text":""},{"location":"api/v/2024.12.3/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":"<ul> <li>luxe: assert </li> <li>luxe: asset </li> <li>luxe: asset/type </li> <li>luxe: assets </li> <li>luxe: astar </li> <li>luxe: audio </li> <li>luxe: bytes </li> <li>luxe: cable </li> <li>luxe: color </li> <li>luxe: containers </li> <li>luxe: debug/alloc.block </li> <li>luxe: docgen </li> <li>luxe: draw </li> <li>luxe: editor </li> <li>luxe: events </li> <li>luxe: fuzzy </li> <li>luxe: game </li> <li>luxe: id </li> <li>luxe: input </li> <li>luxe: io </li> <li>luxe: lx </li> <li>luxe: mat4 </li> <li>luxe: math </li> <li>luxe: noise </li> <li>luxe: plot </li> <li>luxe: pose/blend.pose_node </li> <li>luxe: pose/ccdik.pose_node </li> <li>luxe: pose/clip.pose_node </li> <li>luxe: pose/look_at_ik.pose_node </li> <li>luxe: pose/two_bone_ik.pose_node </li> <li>luxe: pqueue </li> <li>luxe: regex </li> <li>luxe: render </li> <li>luxe: render/font </li> <li>luxe: sat2D </li> <li>luxe: save </li> <li>luxe: selection </li> <li>luxe: semver </li> <li>luxe: settings </li> <li>luxe: shape2D </li> <li>luxe: string </li> <li>luxe: string/po </li> <li>luxe: system/anim.modifier </li> <li>luxe: system/camera.modifier </li> <li>luxe: system/mesh.modifier </li> <li>luxe: system/nav.modifier </li> <li>luxe: system/physics/body3D.modifier </li> <li>luxe: system/physics/box_collider3D.modifier </li> <li>luxe: system/physics/capsule_collider3D.modifier </li> <li>luxe: system/physics/cast_ray.block </li> <li>luxe: system/physics/character3D.modifier </li> <li>luxe: system/physics/contact.block </li> <li>luxe: system/physics/mesh_collider3D.modifier </li> <li>luxe: system/physics/physics3D.modifier </li> <li>luxe: system/physics/sphere_collider3D.modifier </li> <li>luxe: system/skeleton.modifier </li> <li>luxe: system/skin.modifier </li> <li>luxe: system/sound.modifier </li> <li>luxe: system/sprite.modifier </li> <li>luxe: system/tags.modifier </li> <li>luxe: system/text.modifier </li> <li>luxe: system/tiles.modifier </li> <li>luxe: system/transform.change.block </li> <li>luxe: system/transform.modifier </li> <li>luxe: system/values.modifier </li> <li>luxe: system/vfx.modifier </li> <li>luxe: system/wires.modifier </li> <li>luxe: terminal </li> <li>luxe: test </li> <li>luxe: toggle </li> <li>luxe: topograph </li> <li>luxe: triangulate </li> <li>luxe: ui </li> <li>luxe: ui/block </li> <li>luxe: ui/button </li> <li>luxe: ui/check </li> <li>luxe: ui/color_picker </li> <li>luxe: ui/control </li> <li>luxe: ui/field/choice </li> <li>luxe: ui/field/color </li> <li>luxe: ui/field/framemarks </li> <li>luxe: ui/field/number </li> <li>luxe: ui/field/path </li> <li>luxe: ui/field/vector </li> <li>luxe: ui/image </li> <li>luxe: ui/label </li> <li>luxe: ui/list </li> <li>luxe: ui/list_filtered </li> <li>luxe: ui/panel </li> <li>luxe: ui/progress </li> <li>luxe: ui/scroll </li> <li>luxe: ui/slider </li> <li>luxe: ui/tabs </li> <li>luxe: ui/text </li> <li>luxe: ui/window </li> <li>luxe: ui/world </li> <li>luxe: version </li> <li>luxe: world </li> <li>luxe: world/modifier </li> <li>luxe: world/prototype </li> <li>luxe: world/scene </li> <li>luxe: world/world </li> </ul>"},{"location":"api/v/2024.12.3/assert/","title":"Assert","text":""},{"location":"api/v/2024.12.3/assert/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/assert/#luxe-assert-module","title":"<code>luxe: assert</code> module","text":"<ul> <li>Assert </li> </ul>"},{"location":"api/v/2024.12.3/assert/#assert","title":"Assert","text":"<p><code>import \"luxe: assert\" for Assert</code></p> <p>Simple assertions.</p> <p>An assertion is a statement in code that is a strict rule. They prevent code from behaving in unexpected ways, by asserting that the code is acting in the way you intended. This can catch a lot of bugs, because it can enforce correct usage of code.</p> <p>For example, if your function does not allow null for an argument, that is something you can assert. Then the user of your code knows that they've used your API incorrectly and can correct the issue.</p> <p>An assertion calls <code>Fiber.abort()</code>, ending execution (unless handled higher up).</p> <ul> <li>is_true(condition: <code>Bool</code>)</li> <li>is_true(condition: <code>Bool</code>, message: <code>String</code>)</li> <li>is_false(condition: <code>Bool</code>)</li> <li>is_false(condition: <code>Bool</code>, message: <code>String</code>)</li> <li>not_null(value: <code>Any</code>)</li> <li>not_null(value: <code>Any</code>, message: <code>String</code>)</li> <li>is_null(value: <code>Any</code>)</li> <li>is_null(value: <code>Any</code>, message: <code>String</code>)</li> <li>equal(one: <code>Any</code>, other: <code>Any</code>)</li> <li>equal(one: <code>Any</code>, other: <code>Any</code>, message: <code>String</code>)</li> </ul> <p> Assert.is_true(condition: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Assert that a particular condition is true.</p> <pre><code>//In this code, we expect that the player\n//should never be here if they are not flying.\nAssert.is_true(player.flying)\n</code></pre> <p> Assert.is_true(condition: <code>Bool</code>, message: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Assert that a particular condition is true, and display a message on abort.</p> <pre><code>//In this code, we expect that the player\n//should never be here if they are not flying.\nAssert.is_true(player.flying, \"Expected player to be in a flying state\")\n</code></pre> <p> Assert.is_false(condition: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Assert that a particular condition is false.</p> <pre><code>Assert.is_false(player.flying)\n</code></pre> <p> Assert.is_false(condition: <code>Bool</code>, message: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Assert that a particular condition is false, and display a message on abort.</p> <pre><code>Assert.is_false(player.flying, \"Expected player NOT to be in a flying state\")\n</code></pre> <p> Assert.not_null(value: <code>Any</code>) \u00b6 returns <code>None</code></p> <p>Assert that a particular statement is not null.</p> <pre><code>//We require a valid player in this code\nAssert.not_null(player)\n</code></pre> <p> Assert.not_null(value: <code>Any</code>, message: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Assert that a particular statement is not null.</p> <pre><code>Assert.not_null(player, \"A valid player is required\")\n</code></pre> <p> Assert.is_null(value: <code>Any</code>) \u00b6 returns <code>None</code></p> <p>Assert that a particular statement is null.</p> <pre><code>//We assume the player is not holding something.\nAssert.is_null(player.item_in_hand)\n</code></pre> <p> Assert.is_null(value: <code>Any</code>, message: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Assert that a particular statement is null, and display a message on abort.</p> <pre><code>Assert.is_null(player.item_in_hand, \"Player must not have an item in hand when calling this\")\n</code></pre> <p> Assert.equal(one: <code>Any</code>, other: <code>Any</code>) \u00b6 returns <code>None</code></p> <p>Assert that a two values are the same. (mind that this uses a regular ==, which counts references with the same values as different and can be overridden)</p> <pre><code>Assert.equal(account.name, player.name)\n</code></pre> <p> Assert.equal(one: <code>Any</code>, other: <code>Any</code>, message: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Assert that a two values are the same, and display a message on abort. (mind that this uses a regular ==, which counts references with the same values as different and can be overridden)</p> <pre><code>Assert.equal(account.name, player.name, \"account and player should always have the same name\")\n</code></pre>"},{"location":"api/v/2024.12.3/asset/","title":"Asset","text":""},{"location":"api/v/2024.12.3/asset/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/asset/#luxe-asset-module","title":"<code>luxe: asset</code> module","text":""},{"location":"api/v/2024.12.3/assets/","title":"Assets","text":""},{"location":"api/v/2024.12.3/assets/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/assets/#luxe-assets-module","title":"<code>luxe: assets</code> module","text":"<ul> <li>Assets </li> <li>Strings </li> </ul>"},{"location":"api/v/2024.12.3/assets/#assets","title":"Assets","text":"<p><code>import \"luxe: assets\" for Assets</code></p> <p>The <code>Assets</code> services is how you access loaded assets, and query if an asset is loaded. The primary use for this at the moment is the accessors like <code>Assets.image</code>, and finding out  if an asset is loaded via <code>Assets.has_image</code>. </p> <p>Note that the asset system is a work in progress and is not final.  There are several accessors missing, for example, fonts are often referenced  as a string, not via <code>Assets.font(\"fonts/name\")</code>. Later, all assets will be unified into this form as intended.</p> <p>Also, they're supposed to be able to reload dynamically, many can't currently. And remember the input to the asset system is compiled assets, not the assets themselves. </p> <p>Finally, there are functions in the API that shouldn't be used directly (they aren't listed here.)</p> <ul> <li>db_init()</li> <li>db_commit(db: <code>AssetDB</code>)</li> <li>db_default()</li> <li>db_default_set(db: <code>AssetDB</code>)</li> <li>db_commit_post(db: <code>AssetDB</code>)</li> <li>db_commit_refs(db: <code>AssetDB</code>)</li> <li>db_add_root_path(db: <code>AssetDB</code>, path: <code>String</code>, subfolder: <code>String</code>, prefix: <code>String</code>)</li> <li>db_add_item(db: <code>AssetDB</code>, root: <code>String</code>, path: <code>String</code>, is_directory: <code>Bool</code>)</li> <li>db_make_item(db: <code>AssetDB</code>, root: <code>String</code>, path: <code>String</code>, is_directory: <code>Bool</code>)</li> <li>db_make_item(db: <code>AssetDB</code>, root: <code>String</code>, path: <code>String</code>)</li> <li>db_remove_item(db: <code>AssetDB</code>, asset_id: <code>String</code>)</li> <li>db_add_item(db: <code>AssetDB</code>, root: <code>String</code>, path: <code>String</code>)</li> <li>db_add_ignore(db: <code>AssetDB</code>, globs: <code>List</code>)</li> <li>db_asset_from_path(db: <code>AssetDB</code>, path: <code>String</code>)</li> <li>db_asset_from_id(db: <code>AssetDB</code>, asset_id: <code>String</code>)</li> <li>db_asset_from_uuid(db: <code>AssetDB</code>, meta_uuid: <code>String</code>)</li> <li>db_asset_get_root(db: <code>AssetDB</code>, asset_id: <code>String</code>)</li> <li>db_compile(db: <code>AssetDB</code>)</li> <li>db_parse(bytes: <code>String</code>)</li> <li>db_has(db: <code>AssetDB</code>, asset_id: <code>String</code>)</li> <li>db_add_reference(db: <code>AssetDB</code>, from_asset_id: <code>String</code>, to_asset_id: <code>String</code>)</li> <li>db_reset_references(db: <code>AssetDB</code>, asset_id: <code>String</code>)</li> <li>db_get_references(db: <code>AssetDB</code>, asset_id: <code>String</code>)</li> <li>db_get_referenced_by(db: <code>AssetDB</code>, asset_id: <code>String</code>)</li> <li>list(db: <code>AssetDB</code>)</li> <li>list(db: <code>AssetDB</code>, ext: <code>String</code>, subtype: <code>String</code>)</li> <li>list(db: <code>AssetDB</code>, ext: <code>String</code>, subtype: <code>String</code>, root: <code>String</code>)</li> <li>list(db: <code>AssetDB</code>, ext: <code>String</code>)</li> <li>list_folders(db: <code>AssetDB</code>, root: <code>String</code>, use_path: <code>Bool</code>)</li> <li>db_list_tags(db: <code>AssetDB</code>)</li> <li>db_get_tags(db: <code>AssetDB</code>, asset_id: <code>String</code>)</li> <li>db_get_tagged(db: <code>AssetDB</code>, tag: <code>String</code>)</li> <li>db_get_tagged_from_list(db: <code>AssetDB</code>, tags: <code>List</code>)</li> <li>db_add_tags(db: <code>AssetDB</code>, asset_id: <code>String</code>, tags: <code>List</code>)</li> <li>db_remove_tags(db: <code>AssetDB</code>, asset_id: <code>String</code>, tags: <code>List</code>)</li> <li>modified(db: <code>AssetDB</code>, query_id: <code>String</code>)</li> <li>modified(db: <code>AssetDB</code>, query_id: <code>String</code>, ext: <code>String</code>, subtype: <code>String</code>)</li> <li>modified(db: <code>AssetDB</code>, query_id: <code>String</code>, ext: <code>String</code>, subtype: <code>String</code>, root: <code>String</code>)</li> <li>modified(db: <code>AssetDB</code>, query_id: <code>String</code>, ext: <code>String</code>)</li> <li>unmodified(db: <code>AssetDB</code>, query_id: <code>String</code>, asset_id: <code>String</code>)</li> <li>modify(db: <code>AssetDB</code>, query_id: <code>String</code>, asset_id: <code>String</code>)</li> <li>is_modified(db: <code>AssetDB</code>, query_id: <code>String</code>, asset_id: <code>String</code>)</li> <li>get_data(type_id: <code>String</code>, id: <code>String</code>)</li> <li>get_block(type_id: <code>String</code>)</li> <li>get_handle(type_id: <code>String</code>, id: <code>String</code>)</li> <li>set_handle(type_id: <code>String</code>, id: <code>String</code>, handle: <code>Num</code>)</li> <li>get_dev_version_path(db: <code>AssetDB</code>, asset_id: <code>String</code>)</li> <li>get_dev_version_data(db: <code>AssetDB</code>, asset_id: <code>String</code>)</li> <li>save_dev_version_data(db: <code>AssetDB</code>, asset_id: <code>String</code>, version_data: <code>Map</code>)</li> <li>image(id: <code>String</code>)</li> <li>bytes(id: <code>String</code>)</li> <li>material(id: <code>String</code>)</li> <li>atlas(id: <code>String</code>)</li> <li>lx(id: <code>String</code>)</li> <li>has_shader_library(id: <code>String</code>)</li> <li>has_image(id: <code>String</code>)</li> <li>has_material_basis(id: <code>String</code>)</li> <li>has_material(id: <code>String</code>)</li> <li>has_bytes(id: <code>String</code>)</li> <li>has_settings(id: <code>String</code>)</li> <li>has_atlas(id: <code>String</code>)</li> <li>has_physics(id: <code>String</code>)</li> <li>has_prototype(id: <code>String</code>)</li> <li>has_scene(id: <code>String</code>)</li> <li>has_input(id: <code>String</code>)</li> <li>has_anim(id: <code>String</code>)</li> <li>has_mesh(id: <code>String</code>)</li> <li>has_tiles(id: <code>String</code>)</li> <li>has_ui(id: <code>String</code>)</li> <li>unload_input(id: <code>String</code>)</li> <li>load_input(id: <code>String</code>)</li> </ul> <p> Assets.db_init() \u00b6 returns <code>AssetDB</code></p> <p>no docs found   </p> <p> Assets.db_commit(db: <code>AssetDB</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Assets.db_default() \u00b6 returns <code>AssetDB</code></p> <p>no docs found   </p> <p> Assets.db_default_set(db: <code>AssetDB</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.db_commit_post(db: <code>AssetDB</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Assets.db_commit_refs(db: <code>AssetDB</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Assets.db_add_root_path(db: <code>AssetDB</code>, path: <code>String</code>, subfolder: <code>String</code>, prefix: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.db_add_item(db: <code>AssetDB</code>, root: <code>String</code>, path: <code>String</code>, is_directory: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.db_make_item(db: <code>AssetDB</code>, root: <code>String</code>, path: <code>String</code>, is_directory: <code>Bool</code>) \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> Assets.db_make_item(db: <code>AssetDB</code>, root: <code>String</code>, path: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.db_remove_item(db: <code>AssetDB</code>, asset_id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Assets.db_add_item(db: <code>AssetDB</code>, root: <code>String</code>, path: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.db_add_ignore(db: <code>AssetDB</code>, globs: <code>List</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.db_asset_from_path(db: <code>AssetDB</code>, path: <code>String</code>) \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> Assets.db_asset_from_id(db: <code>AssetDB</code>, asset_id: <code>String</code>) \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> Assets.db_asset_from_uuid(db: <code>AssetDB</code>, meta_uuid: <code>String</code>) \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> Assets.db_asset_get_root(db: <code>AssetDB</code>, asset_id: <code>String</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Assets.db_compile(db: <code>AssetDB</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Assets.db_parse(bytes: <code>String</code>) \u00b6 returns <code>AssetDB</code></p> <p>no docs found   </p> <p> Assets.db_has(db: <code>AssetDB</code>, asset_id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Assets.db_add_reference(db: <code>AssetDB</code>, from_asset_id: <code>String</code>, to_asset_id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.db_reset_references(db: <code>AssetDB</code>, asset_id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.db_get_references(db: <code>AssetDB</code>, asset_id: <code>String</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.db_get_referenced_by(db: <code>AssetDB</code>, asset_id: <code>String</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.list(db: <code>AssetDB</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.list(db: <code>AssetDB</code>, ext: <code>String</code>, subtype: <code>String</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.list(db: <code>AssetDB</code>, ext: <code>String</code>, subtype: <code>String</code>, root: <code>String</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.list(db: <code>AssetDB</code>, ext: <code>String</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.list_folders(db: <code>AssetDB</code>, root: <code>String</code>, use_path: <code>Bool</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.db_list_tags(db: <code>AssetDB</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.db_get_tags(db: <code>AssetDB</code>, asset_id: <code>String</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.db_get_tagged(db: <code>AssetDB</code>, tag: <code>String</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.db_get_tagged_from_list(db: <code>AssetDB</code>, tags: <code>List</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.db_add_tags(db: <code>AssetDB</code>, asset_id: <code>String</code>, tags: <code>List</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.db_remove_tags(db: <code>AssetDB</code>, asset_id: <code>String</code>, tags: <code>List</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.modified(db: <code>AssetDB</code>, query_id: <code>String</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.modified(db: <code>AssetDB</code>, query_id: <code>String</code>, ext: <code>String</code>, subtype: <code>String</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.modified(db: <code>AssetDB</code>, query_id: <code>String</code>, ext: <code>String</code>, subtype: <code>String</code>, root: <code>String</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.modified(db: <code>AssetDB</code>, query_id: <code>String</code>, ext: <code>String</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.unmodified(db: <code>AssetDB</code>, query_id: <code>String</code>, asset_id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.modify(db: <code>AssetDB</code>, query_id: <code>String</code>, asset_id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.is_modified(db: <code>AssetDB</code>, query_id: <code>String</code>, asset_id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Assets.get_data(type_id: <code>String</code>, id: <code>String</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Assets.get_block(type_id: <code>String</code>) \u00b6 returns <code>Block</code></p> <p>no docs found   </p> <p> Assets.get_handle(type_id: <code>String</code>, id: <code>String</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Assets.set_handle(type_id: <code>String</code>, id: <code>String</code>, handle: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.get_dev_version_path(db: <code>AssetDB</code>, asset_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Assets.get_dev_version_data(db: <code>AssetDB</code>, asset_id: <code>String</code>) \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> Assets.save_dev_version_data(db: <code>AssetDB</code>, asset_id: <code>String</code>, version_data: <code>Map</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.image(id: <code>String</code>) \u00b6 returns <code>Image</code></p> <p>Return a loaded image by id.</p> <pre><code>var image = Assets.image(\"image/player\")\nLog.print(\"width: %(Image.get_width(image))\")\n</code></pre> <p> Assets.bytes(id: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Returns the data stored as bytes.  A Wren <code>String</code> is also a byte sequence, used via <code>string.bytes</code>.</p> <p>Note That unlike other assets, bytes are stored by name with extension. For example if you put a file called <code>data/hello.txt</code> in your project, you would access it via <code>var data = Assets.bytes(\"data/hello.txt\")</code>.</p> <p>This is because the extension might be meaningful to the user of the bytes, for example loading an image based on png vs jpg extension would be impossible if we don't know the extension of the data. Because bytes are \"opaque\", as in,  we don't care what they store, we just store them for you to access, we keep the extension.</p> <pre><code>var text = Assets.bytes(\"data/hello.txt\")\nLog.print(text) //prints the contents of the file (the contents at compile time).\n</code></pre> <p> Assets.material(id: <code>String</code>) \u00b6 returns <code>Material</code></p> <p>Returns a loaded material by id.</p> <pre><code>var material = Assets.material(\"material/player\")\nSprite.set_material(player, material)\n</code></pre> <p> Assets.atlas(id: <code>String</code>) \u00b6 returns <code>Atlas</code></p> <p>Returns a loaded atlas by id.</p> <pre><code>var atlas = Assets.atlas(\"atlas/example\")\n</code></pre> <p> Assets.lx(id: <code>String</code>) \u00b6 returns <code>Any</code></p> <p>Returns the LX parsed representation of a <code>bytes</code> asset. This is convenience for <code>Assets.bytes</code> followed by <code>LX.parse</code>. Returns null if the asset isn't found, or if parsing failed.</p> <p>See <code>Assets.bytes</code>, as bytes require an extension.</p> <pre><code>//assuming our data contains { speaker=\"sara\" message=\"follow me.\" }\nvar dialog = Assets.lx(\"dialog/hello.lx\")\nvar speaker = dialog[\"speaker\"]\nvar message = dialog[\"message\"]\nLog.print(\"%(speaker): %(message)\")\n</code></pre> <p> Assets.has_shader_library(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if a shader library with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_shader_library(\"assets/shaders\")\n</code></pre> <p> Assets.has_image(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if an image with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_image(\"image/player\")\n</code></pre> <p> Assets.has_material_basis(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if a material basis with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_material_basis(\"basis/example\")\n</code></pre> <p> Assets.has_material(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if a material with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_material(\"material/player\")\n</code></pre> <p> Assets.has_bytes(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if a bytes asset with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_bytes(\"data/hello.txt\")\n</code></pre> <p> Assets.has_settings(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if a settings asset with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_settings(\"settings/area1\")\n</code></pre> <p> Assets.has_atlas(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if an atlas asset with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_atlas(\"atlas/example\")\n</code></pre> <p> Assets.has_physics(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if a physics asset with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_physics(\"physics/ice\")\n</code></pre> <p> Assets.has_prototype(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if a prototype with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_prototype(\"proto/tree\")\n</code></pre> <p> Assets.has_scene(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if a scene with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_scene(\"scene/area1\")\n</code></pre> <p> Assets.has_input(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if an input asset with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_input(\"input/player\")\n</code></pre> <p> Assets.has_anim(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if an animation with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_anim(\"anim/jump\")\n</code></pre> <p> Assets.has_mesh(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if a mesh with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_mesh(\"mesh/cube\")\n</code></pre> <p> Assets.has_tiles(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if a tilemap with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_tiles(\"tiles/caves\")\n</code></pre> <p> Assets.has_ui(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if a ui asset with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_ui(\"ui/menu\")\n</code></pre> <p> Assets.unload_input(id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Unload the input asset, which undefines any nodes or events   </p> <p> Assets.load_input(id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Load an input asset, which defines any nodes or events within it   </p>"},{"location":"api/v/2024.12.3/assets/#strings","title":"Strings","text":"<p><code>import \"luxe: assets\" for Strings</code></p> <p>When dealing with data like assets, storing a string directly can take up a lot of space. Instead, what we can do is store the strings once, in a shared place, and then reference that string later.</p> <p>At runtime, strings can also be more expensive than is ideal (like needing to iterate the characters individually, or taking up more memory).</p> <p>In both cases, what we store instead of a string is a string id, which is just a number.</p> <p>Comparing two numbers, looking up numbers in an array or map and so on, it's much faster with a number than using the string itself. Operating on numbers is both faster and simpler, and has a fixed size in memory. This is commonly called \"string interning\".</p> <p>In luxe, the <code>Strings</code> class is how you interact with the strings available to your game. For example, <code>var name_id = Entity.get_name(entity)</code> will return a string id, not a string. To get the string, you can use <code>var name = Strings.get(name_id)</code>. Note that if the name is unknown to <code>Strings</code>, it will return null, so handle that appropriately.</p> <p>To add a string, use <code>Strings.add(\"string\")</code>.</p> <p>For debugging strings, if you look inside <code>.luxe/luxe.strings.lx</code>,  this lists all the strings your assets reference, and what their key is.</p> <pre><code>//Assuming this string hasn't been added before:\nLog.print( Strings.get(\"hello\") ) //prints null\nvar key = Strings.add(\"hello\") //key is 1335831723\nLog.print( Strings.get(\"hello\") ) //prints 'hello'\n</code></pre> <ul> <li>add(value: <code>String</code>)</li> <li>get(key: <code>Num</code>)</li> </ul> <p> Strings.add(value: <code>String</code>) \u00b6 returns <code>Num</code></p> <p>Adds a string to the <code>Strings</code> service and returns the key.</p> <pre><code>Log.print(Strings.add(\"hello\")) //prints 1335831723\n</code></pre> <p> Strings.get(key: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Return the value associated with the given key. This will return null if the string is not found.</p> <pre><code>var name_id = Entity.get_name(entity)\nvar name = Strings.get(name_id)\nif(name) {\n  Log.print(\"entity name is %(name)\")\n} else {\n  Log.print(\"entity name is not known (or it has no name)\")\n}\n</code></pre>"},{"location":"api/v/2024.12.3/astar/","title":"Astar","text":""},{"location":"api/v/2024.12.3/astar/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/astar/#luxe-astar-module","title":"<code>luxe: astar</code> module","text":"<ul> <li>AStar </li> </ul>"},{"location":"api/v/2024.12.3/astar/#astar","title":"AStar","text":"<p><code>import \"luxe: astar\" for AStar</code></p> <p>A generic implementation of A* pathfinding in luxe.</p> <p>For details about the pathfinding and things like costs, heuristics and  implementation details, please see https://www.redblobgames.com/pathfinding/a-star/introduction.html</p> <ul> <li>MAX</li> <li>MAX=(v : Num)</li> <li>path2D(start: <code>Vec</code>, end: <code>Vec</code>, cost_get_fn: <code>Fn</code>, neighbors_get_fn: <code>Fn</code>, heuristic_fn: <code>Fn</code>)</li> </ul> <p> AStar.MAX \u00b6 returns <code>Num</code></p> <p>A value that defaults to <code>250</code>, for the max number of iterations that will be considered valid. If the max is reached, no path is returned. To update it, use <code>Astar.MAX = 400</code>.   </p> <p> AStar.MAX=(v : Num) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AStar.path2D(start: <code>Vec</code>, end: <code>Vec</code>, cost_get_fn: <code>Fn</code>, neighbors_get_fn: <code>Fn</code>, heuristic_fn: <code>Fn</code>) \u00b6 returns <code>List</code></p> <p>Returns a path between <code>start</code> and <code>end</code> if one was found, or <code>null</code> otherwise. The path is a <code>List</code> of nodes received from <code>start</code>, <code>end</code> or <code>neighbors_get_fn</code> and are unmodified.</p> <p>Note: Check if <code>start</code>/<code>end</code> are walkable before calling this function.</p> <p>Cost-calculating Function: <pre><code>//no cost?\n_cost_get_fn = Fn.new {|from, to| 1 }\n//cost from a tilemap, simple (fake) example\n_cost_get_fn = Fn.new {|from, to| tiles.get_cost(to.x, to.y) }\n</code></pre></p> <p>Getting the neighbors of a node: <pre><code>_neighbors_get_fn = Fn.new {|node|\n  var list = []\n  //check above, below, left and right.\n  if(is_walkable(node.x, node.y+1)) list.add(Node.new(node.x, node.y+1))\n  if(is_walkable(node.x, node.y-1)) list.add(Node.new(node.x, node.y-1))\n  if(is_walkable(node.x+1, node.y)) list.add(Node.new(node.x+1, node.y))\n  if(is_walkable(node.x-1, node.y)) list.add(Node.new(node.x-1, node.y))\n  return list\n}\n</code></pre></p> <p>Getting the heuristic value of a point: <pre><code>_heuristic_fn = Fn.new {|end, point|\n  var manhattan = ((end.x - point.x).abs + (end.y - point.y).abs)\n  return manhattan * 1.001 //fudge factor, see the linked articles on pathfinding\n}\n</code></pre></p> <p>Getting a path: <pre><code>get_path(start, end) {\n  if(!is_walkable(start)) return null\n  if(!is_walkable(end)) return null\n  return AStar.path2D(start, end, _cost_get_fn, _neighbors_get_fn, _heuristic_fn)\n}\n</code></pre></p>"},{"location":"api/v/2024.12.3/audio/","title":"Audio","text":""},{"location":"api/v/2024.12.3/audio/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/audio/#luxe-audio-module","title":"<code>luxe: audio</code> module","text":"<ul> <li>Audio </li> <li>AudioAttenuation </li> <li>Bus </li> </ul>"},{"location":"api/v/2024.12.3/audio/#audio","title":"Audio","text":"<p><code>import \"luxe: audio\" for Audio</code></p> <p>The Audio module let's you play audio.</p> <p><code>Audio</code> is a service API, and isn't a modifier system. There is e.g the Sound modifier for placing sounds in the world.</p> <p>Most things in <code>Audio</code> work on an instance (handle) of a sound. You get one of those from <code>play</code> or <code>loop</code>, and then can modify or query it. It's always safe to call any function on an instance, even if it's finished playing.</p> <p>A quick look:</p> <pre><code>//play them\nvar sound = Audio.play(Asset.audio(\"assets/sound\"))\nvar music = Audio.loop(Asset.audio(\"assets/music\"))\n\n//later...\nAudio.volume(music, 0.5)\n\n//later still...\nAudio.stop(music)\n</code></pre> <p>That's it!</p> <ul> <li>set_listener(pos: <code>Float3</code>, forward: <code>Float3</code>, up: <code>Float3</code>, velocity: <code>Float3</code>)</li> <li>play(source: <code>AudioAsset</code>, volume: <code>Num</code>)</li> <li>play(source: <code>AudioAsset</code>, as3D: <code>Bool</code>, bus: <code>AudioBus</code>, volume: <code>Num</code>)</li> <li>play(source: <code>AudioAsset</code>)</li> <li>loop(source: <code>AudioAsset</code>, volume: <code>Num</code>)</li> <li>loop(source: <code>AudioAsset</code>, as3D: <code>Bool</code>, bus: <code>AudioBus</code>, volume: <code>Num</code>)</li> <li>loop(source: <code>AudioAsset</code>)</li> <li>stop(instance: <code>AudioInstance</code>)</li> <li>playing(instance: <code>AudioInstance</code>)</li> <li>pan(instance: <code>AudioInstance</code>, pan: <code>Num</code>)</li> <li>pan_of(instance: <code>AudioInstance</code>)</li> <li>volume(instance: <code>AudioInstance</code>, volume: <code>Num</code>)</li> <li>volume_of(instance: <code>AudioInstance</code>)</li> <li>pitch(instance: <code>AudioInstance</code>, pitch: <code>Num</code>)</li> <li>pitch_of(instance: <code>AudioInstance</code>)</li> <li>pause(instance: <code>AudioInstance</code>, paused: <code>Bool</code>)</li> <li>pause_of(instance: <code>AudioInstance</code>)</li> <li>set3D(instance: <code>AudioInstance</code>, pos: <code>Float3</code>, vel: <code>Float3</code>, dopper_factor: <code>Float</code>, attenuation: <code>AudioAttenuation</code>, range: <code>Float2</code>, rolloff: <code>Num</code>)</li> </ul> <p> Audio.set_listener(pos: <code>Float3</code>, forward: <code>Float3</code>, up: <code>Float3</code>, velocity: <code>Float3</code>) \u00b6 returns <code>unknown</code></p> <p>Set the world space listener position directly   </p> <p> Audio.play(source: <code>AudioAsset</code>, volume: <code>Num</code>) \u00b6 returns <code>AudioInstance</code></p> <p>Plays audio from the specified <code>source</code> at volume <code>volume</code>. Returns a handle to an audio instance that you can modify or stop.</p> <pre><code>Audio.define_source(\"sound\", \"assets/sound.wav\")\nAudio.play(\"sound\", 1)\n</code></pre> <p> Audio.play(source: <code>AudioAsset</code>, as3D: <code>Bool</code>, bus: <code>AudioBus</code>, volume: <code>Num</code>) \u00b6 returns <code>AudioInstance</code></p> <p>Plays audio from the specified <code>source</code> with <code>as3D</code> and <code>bus</code> at volume <code>volume</code>. The bus comes from <code>create_bus</code>, and 0 means global/default bus. If <code>as3D</code> is true, use set3D on the handle returned to configure position/velocity. Returns a handle to an audio instance that you can modify or stop.</p> <pre><code>Audio.define_source(\"sound\", \"assets/sound.wav\")\nAudio.play(\"sound\", true, 0, 1)\n</code></pre> <p> Audio.play(source: <code>AudioAsset</code>) \u00b6 returns <code>AudioInstance</code></p> <p>Plays audio from the specified <code>source</code> at volume <code>1.0</code>. Returns a handle to an audio instance that you can modify or stop.</p> <pre><code>Audio.define_source(\"sound\", \"assets/sound.wav\")\nAudio.play(\"sound\")\n</code></pre> <p> Audio.loop(source: <code>AudioAsset</code>, volume: <code>Num</code>) \u00b6 returns <code>AudioInstance</code></p> <p>Begins looping audio for <code>id</code> at volume <code>volume</code>. Returns a handle to an audio instance that you can modify or stop.</p> <pre><code>var music = Audio.loop(\"music\", 1.0)\n</code></pre> <p> Audio.loop(source: <code>AudioAsset</code>, as3D: <code>Bool</code>, bus: <code>AudioBus</code>, volume: <code>Num</code>) \u00b6 returns <code>AudioInstance</code></p> <p>Begins looping audio for <code>id</code> with <code>as3D</code> and <code>bus</code> at volume <code>volume</code>. The bus comes from <code>create_bus</code>, and 0 means global/default bus. If <code>as3D</code> is true, use set3D on the handle returned to configure position/velocity.   Returns a handle to an audio instance that you can modify or stop.</p> <pre><code>var music = Audio.loop(\"music\", false, 0, 1.0)\n</code></pre> <p> Audio.loop(source: <code>AudioAsset</code>) \u00b6 returns <code>AudioInstance</code></p> <p>Begins looping audio for <code>id</code> at volume <code>1.0</code>. Returns a handle to an audio instance that you can modify or stop.</p> <pre><code>var music = Audio.loop(\"music\")\n</code></pre> <p> Audio.stop(instance: <code>AudioInstance</code>) \u00b6 returns <code>None</code></p> <p>Stops an AudioInstance.</p> <pre><code>var music = Audio.loop(\"music\")\nAudio.stop(music)\n</code></pre> <p> Audio.playing(instance: <code>AudioInstance</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if an AudioInstance is playing.</p> <pre><code>var music = Audio.loop(\"music\")\nLog.print(Audio.playing(music)) //true\nAudio.stop(music)\nLog.print(Audio.playing(music)) //false\n</code></pre> <p> Audio.pan(instance: <code>AudioInstance</code>, pan: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Sets the current <code>pan</code> value for the given <code>instance</code>.</p> <p>Negative values for <code>pan</code> will move the audio to the left speakers,  while positive values will move the audio to the right speakers.</p> <p>A value of 0 will reset to the audio sample back to center.</p> <pre><code>var sound = Audio.play(\"sound\")\nAudio.pan(sound, -2.0)\n</code></pre> <p> Audio.pan_of(instance: <code>AudioInstance</code>) \u00b6 returns <code>Num</code></p> <p>Returns the current <code>pan</code> value for the given <code>instance</code>.</p> <pre><code>var sound = Audio.play(\"sound\")\nAudio.pan(sound, 2.0)\nLog.print(Audio.pan_of(sound)) // returns 2.0\n</code></pre> <p> Audio.volume(instance: <code>AudioInstance</code>, volume: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Sets the <code>volume</code> for a given <code>instance</code>.</p> <p>Intended volumes range from 0..1, with 1 meaning 100% volume, and 0 meaning silence. Volume values higher than 1 are valid (&gt; 100%).</p> <pre><code>var sound = Audio.play(\"sound\") // Volume is 1.0\nAudio.volume(sound, 0.5)        // Volume is now 0.5\n</code></pre> <p> Audio.volume_of(instance: <code>AudioInstance</code>) \u00b6 returns <code>Num</code></p> <p>Returns the current <code>volume</code> for the given <code>instance</code>.</p> <pre><code>var sound = Audio.play(\"sound\")\nLog.print(Audio.volume_of(sound)) // returns 1\n</code></pre> <p> Audio.pitch(instance: <code>AudioInstance</code>, pitch: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Adjusts the <code>pitch</code> of <code>instance</code>, making the sample sound higher or lower-pitched. Pitch values below 1 will lower the pitch of the sample, while pitch values above 1 raise it.</p> <p>A value of 1 will cause the sample to be played at its source pitch.</p> <p>Pitch changes will affect playback duration, causing lower-pitched samples  to have longer durations and higher-pitched samples to have shorter durations,  because the audio is not resampled (when using this function).</p> <p>A pitch of 0 (or smaller) will be ignored.</p> <pre><code>var sound = Audio.play(\"sound\")\nAudio.pitch(sound, 1)\n</code></pre> <p> Audio.pitch_of(instance: <code>AudioInstance</code>) \u00b6 returns <code>Num</code></p> <p>Returns the current <code>pitch</code> for <code>instance</code>.</p> <pre><code>var sound = Audio.play(\"sound\")\nAudio.pitch(sound, 3)\nLog.print(Audio.pitch_of(sound)) // returns 3\n</code></pre> <p> Audio.pause(instance: <code>AudioInstance</code>, paused: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Sets whether the audio <code>instance</code> is playing, pausing it when not. Once you set an <code>instance</code> to not play you can resume it later.</p> <pre><code>var sound = Audio.play(\"sound\")\nAudio.pause(sound, false) //pauses\n</code></pre> <p> Audio.pause_of(instance: <code>AudioInstance</code>) \u00b6 returns <code>Bool</code></p> <p>Returns whether an <code>instance</code> is paused.</p> <pre><code>var sound = Audio.play(\"sound\")\nLog.print(Audio.pause_of(sound)) //true\nAudio.pause(sound, false) //pause\nLog.print(Audio.pause_of(sound)) //false\n</code></pre> <p> Audio.set3D(instance: <code>AudioInstance</code>, pos: <code>Float3</code>, vel: <code>Float3</code>, dopper_factor: <code>Float</code>, attenuation: <code>AudioAttenuation</code>, range: <code>Float2</code>, rolloff: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Sets 3D parameters of the the audio <code>instance</code>. Note that you need to use play with the 3d flag to make the sound 3d otherwise this has no effect.</p> <pre><code>var sound = Audio.play(\"sound\")\nvar pos = [0,0,0]\nvar vel = [0,0,0]\nvar doppler = 1.0\nvar attn = AudioAttenuation.none\nvar range = [1, 100] // min / max distance for attenuation\nvar rolloff = 1.0\nAudio.set3D(sound, pos, vel, doppler, attn, range, rolloff)\n</code></pre>"},{"location":"api/v/2024.12.3/audio/#audioattenuation","title":"AudioAttenuation","text":"<p><code>import \"luxe: audio\" for AudioAttenuation</code></p> <p>Read more details with graphs here https://solhsa.com/soloud/concepts3d.html#attenuation</p> <ul> <li>none</li> <li>inverse_distance</li> <li>linear_distance</li> <li>exponential_distance</li> </ul> <p> AudioAttenuation.none \u00b6 returns <code>unknown</code></p> <p>No attenuation based on distance. The default   </p> <p> AudioAttenuation.inverse_distance \u00b6 returns <code>unknown</code></p> <p>The higher the rolloff factor, the more steeply the volume drops.  At low enough rolloff factor, the volume never drops near zero.  Values over 1 recommended (unless you have special needs).  Values less than equal to zero result in undefined behavior. Increasing the minimum distance pushes the start of the attenuation further.  It also causes the curve to change. Note that the minimum distance must be above 0. The maximum distance simply cuts the attenuation at the volume level it has reached at that point.   </p> <p> AudioAttenuation.linear_distance \u00b6 returns <code>unknown</code></p> <p>The rolloff factor for linear distance simply sets the maximum volume reduction.  Using values outside the 0..1 range causes undefined behavior. The minimum and maximum distance works as one might expect.  Minimum distance must be less or equal to maximum distance.   </p> <p> AudioAttenuation.exponential_distance \u00b6 returns <code>unknown</code></p> <p>The higher the rolloff factor, the more steeply the volume drops.  At low enough rolloff factor, the volume never drops near zero.  Values over 1 recommended (unless you have special needs).  Values less than equal to zero result in really weird behavior. Increasing the minimum distance pushes the start of the attenuation further.  It also causes the curve to change. Note that the minimum distance must be above 0. The maximum distance simply cuts the attenuation at the volume level it has reached at that point.   </p>"},{"location":"api/v/2024.12.3/audio/#bus","title":"Bus","text":"<p><code>import \"luxe: audio\" for Bus</code></p> <p>no docs found</p> <ul> <li>set_channels(bus: <code>AudioBus</code>, value: <code>Num</code>)</li> <li>set_volume(bus: <code>AudioBus</code>, value: <code>Num</code>)</li> <li>get_volume(bus: <code>AudioBus</code>)</li> </ul> <p> Bus.set_channels(bus: <code>AudioBus</code>, value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the number of channels for the bus   </p> <p> Bus.set_volume(bus: <code>AudioBus</code>, value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the volume for the bus   </p> <p> Bus.get_volume(bus: <code>AudioBus</code>) \u00b6 returns <code>Num</code></p> <p>Get the volume for the bus   </p>"},{"location":"api/v/2024.12.3/bytes/","title":"Bytes","text":""},{"location":"api/v/2024.12.3/bytes/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/bytes/#luxe-bytes-module","title":"<code>luxe: bytes</code> module","text":"<ul> <li>Byter </li> <li>Bytes </li> <li>BytesReader </li> <li>BytesWriter </li> <li>Floats </li> <li>Uint16 </li> <li>Uint32 </li> </ul>"},{"location":"api/v/2024.12.3/bytes/#byter","title":"Byter","text":"<p><code>import \"luxe: bytes\" for Byter</code></p> <p>no docs found</p> <ul> <li>pos</li> <li>inner</li> <li>new(size: <code>Any</code>)</li> <li>bytes()</li> <li>write_string(string: <code>Any</code>)</li> <li>write_string(string: <code>Any</code>, length: <code>Any</code>)</li> <li>write_string_aligned4(string: <code>Any</code>)</li> <li>write_string_aligned4(string: <code>Any</code>, length: <code>Any</code>)</li> <li>write_int8(value: <code>Any</code>)</li> <li>write_uint8(value: <code>Any</code>)</li> <li>write_int16(value: <code>Any</code>)</li> <li>write_int32(value: <code>Any</code>)</li> <li>write_int64(value: <code>Any</code>)</li> <li>write_uint16(value: <code>Any</code>)</li> <li>write_uint32(value: <code>Any</code>)</li> <li>write_uint64(value: <code>Any</code>)</li> <li>write_float32(value: <code>Any</code>)</li> <li>write_float64(value: <code>Any</code>)</li> <li>write_uuid(uuid: <code>Any</code>)</li> </ul> <p> Byter.pos \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.inner \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.new(size: <code>Any</code>) \u00b6 returns <code>Byter</code></p> <p>no docs found   </p> <p> Byter.bytes() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_string(string: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_string(string: <code>Any</code>, length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_string_aligned4(string: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_string_aligned4(string: <code>Any</code>, length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_int8(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_uint8(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_int16(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_int32(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_int64(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_uint16(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_uint32(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_uint64(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_float32(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_float64(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_uuid(uuid: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/bytes/#bytes","title":"Bytes","text":"<p><code>import \"luxe: bytes\" for Bytes</code></p> <p>no docs found</p> <ul> <li>new(elements: <code>Any</code>)</li> <li>length</li> <li>[index : Any]</li> <li>[index : Any]=(value : Any)</li> <li>from_string(string: <code>Any</code>)</li> <li>set_from(other: <code>Any</code>)</li> <li>copy(other: <code>Any</code>, at: <code>Any</code>, length: <code>Any</code>)</li> <li>copy(other: <code>Any</code>, to: <code>Any</code>, from: <code>Any</code>, length: <code>Any</code>)</li> <li>set_string(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set_string(at: <code>Any</code>, value: <code>Any</code>, length: <code>Any</code>)</li> <li>get_string(at: <code>Any</code>, length: <code>Any</code>)</li> <li>set_int8(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set_int16(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set_int32(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set_int64(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set_uint8(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set_uint16(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set_uint32(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set_uint64(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set_float32(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set_float64(at: <code>Any</code>, value: <code>Any</code>)</li> <li>get_int8(at: <code>Any</code>)</li> <li>get_int16(at: <code>Any</code>)</li> <li>get_int32(at: <code>Any</code>)</li> <li>get_int64(at: <code>Any</code>)</li> <li>get_uint8(at: <code>Any</code>)</li> <li>get_uint16(at: <code>Any</code>)</li> <li>get_uint32(at: <code>Any</code>)</li> <li>get_uint64(at: <code>Any</code>)</li> <li>get_float32(at: <code>Any</code>)</li> <li>get_float64(at: <code>Any</code>)</li> <li>get(at: <code>Any</code>)</li> <li>set(at: <code>Any</code>, value: <code>Any</code>)</li> <li>bytes()</li> <li>clear()</li> <li>padding(length: <code>Any</code>, align: <code>Any</code>)</li> <li>padding(length: <code>Any</code>)</li> <li>iterate(iter: <code>Any</code>)</li> <li>iteratorValue(iter: <code>Any</code>)</li> </ul> <p> Bytes.new(elements: <code>Any</code>) \u00b6 returns <code>Bytes</code></p> <p>no docs found   </p> <p> Bytes.length \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes [index : Any] \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes [index : Any]=(value : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.from_string(string: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_from(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.copy(other: <code>Any</code>, at: <code>Any</code>, length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.copy(other: <code>Any</code>, to: <code>Any</code>, from: <code>Any</code>, length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_string(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_string(at: <code>Any</code>, value: <code>Any</code>, length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.get_string(at: <code>Any</code>, length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_int8(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_int16(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_int32(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_int64(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_uint8(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_uint16(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_uint32(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_uint64(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_float32(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_float64(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.get_int8(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.get_int16(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.get_int32(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.get_int64(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.get_uint8(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.get_uint16(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.get_uint32(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.get_uint64(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.get_float32(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.get_float64(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.get(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.bytes() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.clear() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.padding(length: <code>Any</code>, align: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.padding(length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.iterate(iter: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.iteratorValue(iter: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/bytes/#bytesreader","title":"BytesReader","text":"<p><code>import \"luxe: bytes\" for BytesReader</code></p> <p>no docs found</p> <ul> <li>pos</li> <li>pos=(v : Any)</li> <li>bytes</li> <li>new(source_bytes: <code>Any</code>)</li> <li>from_string(string: <code>Any</code>)</li> <li>skip(count: <code>Any</code>)</li> <li>check_bounds(to_read: <code>Any</code>)</li> <li>get_string(length: <code>Any</code>)</li> <li>get_int8()</li> <li>get_int16()</li> <li>get_int32()</li> <li>get_int64()</li> <li>get_uint8()</li> <li>get_uint16()</li> <li>get_uint32()</li> <li>get_uint64()</li> <li>get_float32()</li> <li>get_float64()</li> </ul> <p> BytesReader.pos \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.pos=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.bytes \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.new(source_bytes: <code>Any</code>) \u00b6 returns <code>BytesReader</code></p> <p>no docs found   </p> <p> BytesReader.from_string(string: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.skip(count: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.check_bounds(to_read: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.get_string(length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.get_int8() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.get_int16() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.get_int32() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.get_int64() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.get_uint8() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.get_uint16() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.get_uint32() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.get_uint64() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.get_float32() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.get_float64() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/bytes/#byteswriter","title":"BytesWriter","text":"<p><code>import \"luxe: bytes\" for BytesWriter</code></p> <p>no docs found</p> <ul> <li>pos</li> <li>pos=(v : Num)</li> <li>count</li> <li>capacity</li> <li>bytes</li> <li>inner</li> <li>new(initial_length: <code>Num</code>)</li> <li>resize(new_capacity: <code>Num</code>)</li> <li>ensure(write_length: <code>Num</code>)</li> <li>write_string(string: <code>String</code>, length: <code>Num</code>)</li> <li>write_string(string: <code>String</code>)</li> <li>write_string_aligned4(string: <code>String</code>, length: <code>Num</code>)</li> <li>write_string_aligned4(string: <code>String</code>)</li> <li>write_string_and_length(string: <code>String</code>, length: <code>Num</code>)</li> <li>write_string_and_length(string: <code>String</code>)</li> <li>write_int8(value: <code>Num</code>)</li> <li>write_uint8(value: <code>Num</code>)</li> <li>write_int16(value: <code>Num</code>)</li> <li>write_int32(value: <code>Num</code>)</li> <li>write_int64(value: <code>Num</code>)</li> <li>write_uint16(value: <code>Num</code>)</li> <li>write_uint32(value: <code>Num</code>)</li> <li>write_uint64(value: <code>Num</code>)</li> <li>write_float32(value: <code>Num</code>)</li> <li>write_float64(value: <code>Num</code>)</li> <li>write_uuid(uuid: <code>String</code>)</li> </ul> <p> BytesWriter.pos \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> BytesWriter.pos=(v : Num) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesWriter.count \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> BytesWriter.capacity \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> BytesWriter.bytes \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> BytesWriter.inner \u00b6 returns <code>Bytes</code></p> <p>no docs found   </p> <p> BytesWriter.new(initial_length: <code>Num</code>) \u00b6 returns <code>BytesWriter</code></p> <p>no docs found   </p> <p> BytesWriter.resize(new_capacity: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.ensure(write_length: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_string(string: <code>String</code>, length: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_string(string: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_string_aligned4(string: <code>String</code>, length: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_string_aligned4(string: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_string_and_length(string: <code>String</code>, length: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_string_and_length(string: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_int8(value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_uint8(value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_int16(value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_int32(value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_int64(value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_uint16(value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_uint32(value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_uint64(value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_float32(value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_float64(value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_uuid(uuid: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/bytes/#floats","title":"Floats","text":"<p><code>import \"luxe: bytes\" for Floats</code></p> <p>no docs found</p> <ul> <li>new(elements: <code>Any</code>)</li> <li>length</li> <li>capacity</li> <li>size</li> <li>[index : Any]</li> <li>[index : Any]=(value : Any)</li> <li>resize(elements: <code>Any</code>)</li> <li>get(at: <code>Any</code>)</li> <li>set(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set(list: <code>Any</code>, at: <code>Any</code>, list_offset: <code>Any</code>, count: <code>Any</code>)</li> <li>set(list: <code>Any</code>)</li> <li>ortho(left: <code>Any</code>, top: <code>Any</code>, right: <code>Any</code>, bottom: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>)</li> <li>perspective(fov_vertical: <code>Any</code>, aspect: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>)</li> <li>transform(px: <code>Any</code>, py: <code>Any</code>, pz: <code>Any</code>, rx: <code>Any</code>, ry: <code>Any</code>, rz: <code>Any</code>, sx: <code>Any</code>, sy: <code>Any</code>, sz: <code>Any</code>)</li> <li>iterate(iter: <code>Any</code>)</li> <li>iteratorValue(iter: <code>Any</code>)</li> </ul> <p> Floats.new(elements: <code>Any</code>) \u00b6 returns <code>Floats</code></p> <p>Create a new Floats instance that can store the amount of elements specified.   </p> <p> Floats.length \u00b6 returns <code>unknown</code></p> <p>Get the size of the array in bytes. Since a float is 4 bytes, this should always be <code>value.size * 4</code>.   </p> <p> Floats.capacity \u00b6 returns <code>unknown</code></p> <p>Get the capacity of the underlying array. When resizing up to this amount of elements, the array does not need to be reallocated. You can ignore this most of the time.   </p> <p> Floats.size \u00b6 returns <code>unknown</code></p> <p>Get the amount of elements in the array.   </p> <p> Floats [index : Any] \u00b6 returns <code>unknown</code></p> <p>Get the float value at a specific index.   </p> <p> Floats [index : Any]=(value : Any) \u00b6 returns <code>unknown</code></p> <p>Set the float value at a specific index.   </p> <p> Floats.resize(elements: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Resize array to new size.   </p> <p> Floats.get(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Get the float value at a specific index.   </p> <p> Floats.set(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Set the float value at a specific index.   </p> <p> Floats.set(list: <code>Any</code>, at: <code>Any</code>, list_offset: <code>Any</code>, count: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Copy a part of a list into this array. This will grow the array if nessecary.   </p> <p> Floats.set(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Set the array to have the contents of a list. The array will be resized to have the same count as the list   </p> <p> Floats.ortho(left: <code>Any</code>, top: <code>Any</code>, right: <code>Any</code>, bottom: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Makes the array a 4x4 (16 elements) orthographic projection matrix for camera rendering.   </p> <p> Floats.perspective(fov_vertical: <code>Any</code>, aspect: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Makes the array a 4x4 (16 elements) perspective projection matrix for camera rendering.   </p> <p> Floats.transform(px: <code>Any</code>, py: <code>Any</code>, pz: <code>Any</code>, rx: <code>Any</code>, ry: <code>Any</code>, rz: <code>Any</code>, sx: <code>Any</code>, sy: <code>Any</code>, sz: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Makes the array a 4x4 (16 elements) model/transform matrix.   </p> <p> Floats.iterate(iter: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Floats.iteratorValue(iter: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/bytes/#uint16","title":"Uint16","text":"<p><code>import \"luxe: bytes\" for Uint16</code></p> <p>Tight uint16 array. Handeled internally as a C++ array, but will properly be deallocated by the wren garbage collector.</p> <ul> <li>new(elements: <code>Any</code>)</li> <li>length</li> <li>[index : Any]</li> <li>[index : Any]=(value : Any)</li> <li>get(at: <code>Any</code>)</li> <li>set(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set(list: <code>Any</code>, at: <code>Any</code>, list_offset: <code>Any</code>, count: <code>Any</code>)</li> <li>set(list: <code>Any</code>)</li> <li>iterate(iter: <code>Any</code>)</li> <li>iteratorValue(iter: <code>Any</code>)</li> </ul> <p> Uint16.new(elements: <code>Any</code>) \u00b6 returns <code>Uint16</code></p> <p>Create an array with the requested amount of elements   </p> <p> Uint16.length \u00b6 returns <code>unknown</code></p> <p>Get the size of the array in bytes. This is twice the amount of elements it can hold since each element takes up 2 bytes.   </p> <p> Uint16 [index : Any] \u00b6 returns <code>unknown</code></p> <p>Get the int value at a specific index.   </p> <p> Uint16 [index : Any]=(value : Any) \u00b6 returns <code>unknown</code></p> <p>Set the int value at a specific index.   </p> <p> Uint16.get(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Get the int value at a specific index.   </p> <p> Uint16.set(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Set the int value at a specific index.   </p> <p> Uint16.set(list: <code>Any</code>, at: <code>Any</code>, list_offset: <code>Any</code>, count: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Copy a part of a list into this array. This will fail if trying to write outside the array bounds.   </p> <p> Uint16.set(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Set the array to have the contents of a list. This will fail if trying to write outside the array bounds and will leave elements unchanged if list is shorter than array.   </p> <p> Uint16.iterate(iter: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Uint16.iteratorValue(iter: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/bytes/#uint32","title":"Uint32","text":"<p><code>import \"luxe: bytes\" for Uint32</code></p> <p>Tight uint32 array. Handeled internally as a C++ array, but will properly be deallocated by the wren garbage collector.</p> <ul> <li>new(elements: <code>Any</code>)</li> <li>length</li> <li>[index : Any]</li> <li>[index : Any]=(value : Any)</li> <li>get(at: <code>Any</code>)</li> <li>set(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set(list: <code>Any</code>, at: <code>Any</code>, list_offset: <code>Any</code>, count: <code>Any</code>)</li> <li>set(list: <code>Any</code>)</li> <li>iterate(iter: <code>Any</code>)</li> <li>iteratorValue(iter: <code>Any</code>)</li> </ul> <p> Uint32.new(elements: <code>Any</code>) \u00b6 returns <code>Uint32</code></p> <p>Create an array with the requested amount of elements   </p> <p> Uint32.length \u00b6 returns <code>unknown</code></p> <p>Get the size of the array in bytes. This is twice the amount of elements it can hold since each element takes up 2 bytes.   </p> <p> Uint32 [index : Any] \u00b6 returns <code>unknown</code></p> <p>Get the int value at a specific index.   </p> <p> Uint32 [index : Any]=(value : Any) \u00b6 returns <code>unknown</code></p> <p>Set the int value at a specific index.   </p> <p> Uint32.get(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Get the int value at a specific index.   </p> <p> Uint32.set(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Set the int value at a specific index.   </p> <p> Uint32.set(list: <code>Any</code>, at: <code>Any</code>, list_offset: <code>Any</code>, count: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Copy a part of a list into this array. This will fail if trying to write outside the array bounds.   </p> <p> Uint32.set(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Set the array to have the contents of a list. This will fail if trying to write outside the array bounds and will leave elements unchanged if list is shorter than array.   </p> <p> Uint32.iterate(iter: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Uint32.iteratorValue(iter: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/cable/","title":"Cable","text":""},{"location":"api/v/2024.12.3/cable/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/cable/#luxe-cable-module","title":"<code>luxe: cable</code> module","text":"<ul> <li>Cable </li> </ul>"},{"location":"api/v/2024.12.3/cable/#cable","title":"Cable","text":"<p><code>import \"luxe: cable\" for Cable</code></p> <p>no docs found</p> <ul> <li><code>var fixed_size : Bool = false</code></li> <li><code>var flex_amount : Num = 0.1</code></li> <li><code>var damping : Num = 0.96</code></li> <li><code>var iterations : Num = 4</code></li> <li><code>var segments : Num = 20</code></li> <li><code>var segment_length : Num = 12</code></li> <li><code>var gravity : List = [0, -200, 0]</code></li> <li><code>var start : Float3 = [0, 0, 0]</code></li> <li><code>var end : Float3 = [0, 0, 0]</code></li> <li><code>var nodes : List = []</code></li> <li>new()</li> <li>pre_warm(warm_iterations: <code>Num</code>)</li> <li>simulate()</li> <li>apply_constraints()</li> <li>tick()</li> </ul> <p> Cable.new() \u00b6 returns <code>Cable</code></p> <p>no docs found   </p> <p> Cable.pre_warm(warm_iterations: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Cable.simulate() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Cable.apply_constraints() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Cable.tick() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/color/","title":"Color","text":""},{"location":"api/v/2024.12.3/color/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/color/#luxe-color-module","title":"<code>luxe: color</code> module","text":"<ul> <li>Color </li> </ul>"},{"location":"api/v/2024.12.3/color/#color","title":"Color","text":"<p><code>import \"luxe: color\" for Color</code></p> <p>Access to color APIs. Note that this is not done at all.</p> <ul> <li>white</li> <li>black</li> <li>clear</li> <li>pink</li> <li>red</li> <li>green</li> <li>blue</li> <li>hex(value: <code>Num</code>)</li> <li>clone(other: <code>Color</code>, alpha: <code>Num</code>)</li> <li>hex_string(color: <code>Color</code>)</li> <li>hex_string(color: <code>Color</code>, alpha: <code>Bool</code>)</li> <li>hex(value: <code>Num</code>, alpha: <code>Num</code>)</li> <li>hex_set(color: <code>Color</code>, hex: <code>Num</code>)</li> <li>hex_color(color: <code>Color</code>)</li> <li>hex_color(color: <code>Color</code>, include_alpha: <code>Bool</code>)</li> <li>lerp(from: <code>Color</code>, to: <code>Color</code>, t: <code>Num</code>)</li> <li>lerp(from: <code>Color</code>, to: <code>Color</code>, t: <code>Num</code>, into: <code>Color</code>)</li> <li>rgb2hsv(rgb: <code>Color</code>)</li> <li>hsv2rgb(hsv: <code>Color</code>)</li> <li>color_from_hue(hue: <code>Num</code>)</li> <li>linear_srgb_to_oklab(r: <code>Num</code>, g: <code>Num</code>, b: <code>Num</code>)</li> <li>oklab_to_linear_srgb(L: <code>Num</code>, a: <code>Num</code>, b: <code>Num</code>)</li> <li>okhsl_to_srgb(h: <code>Num</code>, s: <code>Num</code>, l: <code>Num</code>)</li> <li>srgb_to_okhsl(r: <code>Num</code>, g: <code>Num</code>, b: <code>Num</code>)</li> <li>okhsv_to_srgb(h: <code>Num</code>, s: <code>Num</code>, v: <code>Num</code>)</li> <li>srgb_to_okhsv(r: <code>Num</code>, g: <code>Num</code>, b: <code>Num</code>)</li> <li>find_cusp(a: <code>Any</code>, b: <code>Any</code>)</li> <li>compute_max_saturation(a: <code>Num</code>, b: <code>Num</code>)</li> <li>find_gamut_intersection(a: <code>Any</code>, b: <code>Any</code>, L1: <code>Any</code>, C1: <code>Any</code>, L0: <code>Any</code>, cusp: <code>Any</code>)</li> </ul> <p> Color.white \u00b6 returns <code>Color</code></p> <p>A constant for [1,1,1,1]. Note: don't modify the return value.   </p> <p> Color.black \u00b6 returns <code>Color</code></p> <p>A constant for [0,0,0,1]. Note: don't modify the return value.   </p> <p> Color.clear \u00b6 returns <code>Color</code></p> <p>A constant for [0,0,0,0]. Note: don't modify the return value.   </p> <p> Color.pink \u00b6 returns <code>Color</code></p> <p>The luxe pink color used everywhere. Note: don't modify the return value.   </p> <p> Color.red \u00b6 returns <code>Color</code></p> <p>The luxe red color. Note: don't modify the return value.   </p> <p> Color.green \u00b6 returns <code>Color</code></p> <p>The luxe green color. Note: don't modify the return value.   </p> <p> Color.blue \u00b6 returns <code>Color</code></p> <p>The luxe blue color. Note: don't modify the return value.   </p> <p> Color.hex(value: <code>Num</code>) \u00b6 returns <code>Color</code></p> <p>Returns a new color from the specified hex color value.</p> <pre><code>var color = Color.hex(0xFF00AA)\n</code></pre> <p> Color.clone(other: <code>Color</code>, alpha: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Returns a new color from the specified color with a different alpha.</p> <pre><code>var other = Color.hex(0xFF00AA)\nvar color = Color.clone(other, 0.5)\n</code></pre> <p> Color.hex_string(color: <code>Color</code>) \u00b6 returns <code>String</code></p> <p>Returns a hex string from the specified color.</p> <pre><code>Color.hex_string(Color.white) //#FFFFFF\n</code></pre> <p> Color.hex_string(color: <code>Color</code>, alpha: <code>Bool</code>) \u00b6 returns <code>String</code></p> <p>Returns a hex string from the specified color. If <code>alpha</code> is true, includes the alpha component.</p> <pre><code>Color.hex_string(Color.white, true) //#FFFFFFFF\n</code></pre> <p> Color.hex(value: <code>Num</code>, alpha: <code>Num</code>) \u00b6 returns <code>Color</code></p> <p>Returns a new color from the specified hex color value, with the specified alpha value.</p> <pre><code>var color = Color.hex(0xFF00AA, 0.5)\n</code></pre> <p> Color.hex_set(color: <code>Color</code>, hex: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Set an existing color to the specified hex color value.</p> <pre><code>var color = Color.hex_set(0xFF00AA)\n</code></pre> <p> Color.hex_color(color: <code>Color</code>) \u00b6 returns <code>Num</code></p> <p>Get the hex color value of a color   </p> <p> Color.hex_color(color: <code>Color</code>, include_alpha: <code>Bool</code>) \u00b6 returns <code>Num</code></p> <p>Get the hex color value of a color, either 3 byte or 4 byte with alpha   </p> <p> Color.lerp(from: <code>Color</code>, to: <code>Color</code>, t: <code>Num</code>) \u00b6 returns <code>Color</code></p> <p>Linearly interpolate between two colors, using <code>t</code> as the distance between the two in 0...1 range. To blend two colors half and half, you'd use <code>lerp(from, to, 0.5)</code>. If <code>t</code> is <code>0</code>, <code>from</code> is returned and if <code>t</code> is <code>1</code>, <code>to</code> is returned.   </p> <p> Color.lerp(from: <code>Color</code>, to: <code>Color</code>, t: <code>Num</code>, into: <code>Color</code>) \u00b6 returns <code>unknown</code></p> <p>Linearly interpolate between two colors, storing the result in the existing color <code>into</code>.  <code>t</code> is the distance between the two in 0...1 range. To blend two colors half and half,  you'd use <code>lerp(from, to, 0.5)</code>. If <code>t</code> is <code>0</code>, <code>from</code> is returned and if <code>t</code> is <code>1</code>, <code>to</code> is returned.   </p> <p> Color.rgb2hsv(rgb: <code>Color</code>) \u00b6 returns <code>Color</code></p> <p>Convert from an RGB format color to an HSV format.   </p> <p> Color.hsv2rgb(hsv: <code>Color</code>) \u00b6 returns <code>Color</code></p> <p>Convert an HSV format color to an RGB format.   </p> <p> Color.color_from_hue(hue: <code>Num</code>) \u00b6 returns <code>Color</code></p> <p>Create a color from the given hue, in a 0...1 range.  Values outside 0...1 are wrapped into 0...1 range.   </p> <p> Color.linear_srgb_to_oklab(r: <code>Num</code>, g: <code>Num</code>, b: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Color.oklab_to_linear_srgb(L: <code>Num</code>, a: <code>Num</code>, b: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Color.okhsl_to_srgb(h: <code>Num</code>, s: <code>Num</code>, l: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Color.srgb_to_okhsl(r: <code>Num</code>, g: <code>Num</code>, b: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Color.okhsv_to_srgb(h: <code>Num</code>, s: <code>Num</code>, v: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Color.srgb_to_okhsv(r: <code>Num</code>, g: <code>Num</code>, b: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Color.find_cusp(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Color.compute_max_saturation(a: <code>Num</code>, b: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Color.find_gamut_intersection(a: <code>Any</code>, b: <code>Any</code>, L1: <code>Any</code>, C1: <code>Any</code>, L0: <code>Any</code>, cusp: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/containers/","title":"Containers","text":""},{"location":"api/v/2024.12.3/containers/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/containers/#luxe-containers-module","title":"<code>luxe: containers</code> module","text":"<ul> <li>Lists </li> <li>MapOrdered </li> </ul>"},{"location":"api/v/2024.12.3/containers/#lists","title":"Lists","text":"<p><code>import \"luxe: containers\" for Lists</code></p> <p>The <code>Lists</code> API works with the built in Wren <code>List</code> type, offering more tools to operate on them.</p> <ul> <li>first(list: <code>Sequence</code>)</li> <li>first(list: <code>Sequence</code>, callback: <code>Fn</code>)</li> <li>binary_search(list: <code>List</code>, value: <code>Any</code>)</li> <li>binary_search_first(list: <code>List</code>, value: <code>Any</code>, fn: <code>Fn</code>)</li> <li>equal(a: <code>List</code>, b: <code>List</code>)</li> <li>equalish(a: <code>List</code>, b: <code>List</code>)</li> <li>flatten(list: <code>List</code>)</li> <li>add_unique(list: <code>List</code>, value: <code>Any</code>)</li> <li>append(into: <code>List</code>, list: <code>List</code>)</li> <li>prepend(into: <code>List</code>, list: <code>List</code>)</li> <li>remove_where(list: <code>List</code>, value: <code>Any</code>, fn: <code>Fn</code>)</li> <li>contains(list: <code>Any</code>, item: <code>Any</code>)</li> <li>remove(list: <code>Any</code>, to_remove: <code>Any</code>)</li> <li>index_of(list: <code>Any</code>, item: <code>Any</code>)</li> <li>index_of_where(list: <code>List</code>, fn: <code>Fn</code>)</li> <li>index_of_where(list: <code>List</code>, value: <code>Any</code>, fn: <code>Fn</code>)</li> <li>bubble_sort(list: <code>List</code>, compare: <code>Fn</code>)</li> <li>quicksort(list: <code>List</code>, compare: <code>Fn</code>)</li> <li>quicksort(list: <code>List</code>, low: <code>Num</code>, high: <code>Num</code>, compare: <code>Fn</code>)</li> </ul> <p> Lists.first(list: <code>Sequence</code>) \u00b6 returns <code>Any</code></p> <p>Returns the first element of a Sequence, null if the sequence is empty.</p> <pre><code>  var list = [\"twig\", 2, null, \"tree\", \"petals\", \"faeries\", 9]\n  Lists.first(list) //\"twig\"\n</code></pre> <p> Lists.first(list: <code>Sequence</code>, callback: <code>Fn</code>) \u00b6 returns <code>Any</code></p> <p>Searches for the first element in a sequence that fulfills a requirement and returns it. If no element fulfills the requirement, null is returned.</p> <pre><code>  var list = [\"twig\", 2, null, \"tree\", \"petals\", \"faeries\", 9]\n  Lists.first(list){|elem| elem is String &amp;&amp; elem.count &gt; 4} //\"petals\"\n</code></pre> <p> Lists.binary_search(list: <code>List</code>, value: <code>Any</code>) \u00b6 returns <code>Num</code></p> <p>Searches for <code>value</code> in <code>list</code> using a binary search.  Binary searches can be more efficient for finding items when there are many. This requires the list to be sorted, and values in the list to be comparable with <code>&gt;</code>/<code>&lt;</code>.</p> <p>Returns the index in the list, or <code>-1</code> if not found.</p> <pre><code>var to_find = 9\nvar list = [1,3,7,9,23,54]\nvar index = Lists.binary_search(list, to_find) //index is 3\n</code></pre> <p> Lists.binary_search_first(list: <code>List</code>, value: <code>Any</code>, fn: <code>Fn</code>) \u00b6 returns <code>Num</code></p> <p>Similar to <code>binary_search</code> but handles comparison via a callback. The callback should return 0 for equal, -1 for lower and 1 for higher. The callback puts the input value in the first argument.</p> <p>Returns the index in the list, or <code>-1</code> if not found.</p> <pre><code>var list = [1,3,7,9,23,54]\nvar index = Lists.binary_search_first(list, 9) {|value, other|\n  if(value == to_find) return 0\n  if(value &lt; to_find)  return -1\n  return 1\n}\n</code></pre> <p> Lists.equal(a: <code>List</code>, b: <code>List</code>) \u00b6 returns <code>Bool</code></p> <p>Compares two flat lists, returning true if the contents are the same and in the same order. Does not recurse nested lists. Uses <code>a[i] != b[i]</code> to compare.</p> <pre><code>var listA = [1,9,7]\nvar listB = [1,7,9]\nvar equalA = Lists.equal(listA, [1,7,9]) //false\nvar equalB = Lists.equal(listB, [1,7,9]) //true\n</code></pre> <p> Lists.equalish(a: <code>List</code>, b: <code>List</code>) \u00b6 returns <code>Bool</code></p> <p>Similar to <code>equal</code> but values don't need to be in the same order.</p> <pre><code>var listA = [1,9,7]\nvar listB = [1,7,9]\nvar equalA = Lists.equal(listA, [1,7,9]) //true\nvar equalB = Lists.equal(listB, [1,7,9]) //true\n</code></pre> <p> Lists.flatten(list: <code>List</code>) \u00b6 returns <code>List</code></p> <p>Converts a nested list of lists to a single flat list of values.</p> <pre><code>var list = [1,[2,3,[4,[5]]]]\nvar flat = Lists.flatten(list) //[1,2,3,4,5]\n</code></pre> <p> Lists.add_unique(list: <code>List</code>, value: <code>Any</code>) \u00b6 returns <code>Bool</code></p> <p>Add an item to a list if the value doesn't already exist in the list. Uses <code>list.indexOf</code> to check. </p> <p>Returns true if the value was unique and added to the list.</p> <pre><code>var list = [1,2,3]\nLists.add_unique(list, 0) //true\nLists.add_unique(list, 1) //false, already found\n</code></pre> <p> Lists.append(into: <code>List</code>, list: <code>List</code>) \u00b6 returns <code>None</code></p> <p>Append <code>list</code> at the end of <code>into</code> without allocating a new list.  This function modifies <code>into</code>.</p> <p>Note that in Wren, <code>List</code> implements <code>+</code>, which is append too,  but that makes a new list with the two combined. <code>[1] + [2] = [1, 2]</code></p> <pre><code>var list = [1,2]\nLists.append(list, [3,4,5])\nLog.print(list) //[1,2,3,4,5]\n</code></pre> <p> Lists.prepend(into: <code>List</code>, list: <code>List</code>) \u00b6 returns <code>None</code></p> <p>Similar to <code>append</code>, but adds the items from <code>list</code> to the front of <code>into</code>. This function modifies <code>into</code>.</p> <pre><code>var list = [1,2]\nLists.prepend(list, [3,4,5])\nLog.print(list) //[3,4,5,1,2]\n</code></pre> <p> Lists.remove_where(list: <code>List</code>, value: <code>Any</code>, fn: <code>Fn</code>) \u00b6 returns <code>Any</code></p> <p>Similar to <code>list.remove</code> but uses a function for the find/equality check. Uses <code>Lists.index_of_where</code> to find the index, so the callback  msut return true if the values are equal or false if not.</p> <p>Returns the value if it was removed, or null if it wasn't found.</p> <pre><code>var list = [1,2,3]\nvar fn = Fn.new {|value, other| value == other }\nLists.remove_where(list, 3, fn)  //3\nLists.remove_where(list, 6, fn)  //null\nLog.print(list)               //[1,2]\n</code></pre> <p> Lists.contains(list: <code>Any</code>, item: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Deprecated. Use list.contains(item) Returns true if the list contains the item.   </p> <p> Lists.remove(list: <code>Any</code>, to_remove: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Deprecated. Use list.remove(item) Returns the item if removed, or null.   </p> <p> Lists.index_of(list: <code>Any</code>, item: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Deprecated. Use list.indexOf(item) Returns the index, or -1 if the item isn't found.   </p> <p> Lists.index_of_where(list: <code>List</code>, fn: <code>Fn</code>) \u00b6 returns <code>Num</code></p> <p>Returns the index of <code>value</code> in <code>list</code> or <code>-1</code> if not found, where comparison is handled by a callback function.</p> <pre><code>var list = [1,2,3]\nLists.index_of_where(list, 3) {|value, other| value == other } //2\n</code></pre> <p> Lists.index_of_where(list: <code>List</code>, value: <code>Any</code>, fn: <code>Fn</code>) \u00b6 returns <code>Num</code></p> <p>Returns the index of <code>item</code> in <code>list</code> or <code>-1</code> if not found, where comparison is handled by a callback function.</p> <pre><code>var list = [1,2,3]\nLists.index_of_where(list, 3) {|value, other| value == other } //2\n</code></pre> <p> Lists.bubble_sort(list: <code>List</code>, compare: <code>Fn</code>) \u00b6 returns <code>None</code></p> <p>In-place sorting of <code>list</code> using the <code>compare</code> function. Modifies <code>list</code>. Uses bubble sort. The compare function should return <code>0</code> for equal, <code>-1</code> for lower values and <code>1</code> for higher values.</p> <pre><code>var list = [5,2,67,23]\nLists.bubble_sort(list) {|a, b| b - a }\nLog.print(list) // [67, 23, 5, 2]\n\nLists.bubble_sort(list) {|a, b| a - b }\nLog.print(list) // [2, 5, 23, 67]\n</code></pre> <p> Lists.quicksort(list: <code>List</code>, compare: <code>Fn</code>) \u00b6 returns <code>List</code></p> <p>In-place sorting of <code>list</code> using the <code>compare</code> function. Modifies <code>list</code>. Uses quick sort. The compare function should return <code>0</code> for equal, <code>-1</code> for lower values and <code>1</code> for higher values.</p> <pre><code>var list = [5,2,67,23]\nLists.quicksort(list) {|a, b| b - a }\nLog.print(list) // [67, 23, 5, 2]\n\nLists.quicksort(list) {|a, b| a - b }\nLog.print(list) // [2, 5, 23, 67]\n</code></pre> <p> Lists.quicksort(list: <code>List</code>, low: <code>Num</code>, high: <code>Num</code>, compare: <code>Fn</code>) \u00b6 returns <code>List</code></p> <p>Same as <code>quicksort</code> but a low and high index can be specified to sort just a portion of a list. The default for <code>quicksort(list, compare)</code> is <code>low = 0</code>, <code>high = list.count-1</code>.</p> <pre><code>var list = [5,2,34,89,11,60,45]\nLists.quicksort(list, 2, 5) {|a, b| a - b }\nLog.print(list) // [5, 2, |11, 34, 60, 89|, 45]\n//note only the range between | was sorted\n</code></pre>"},{"location":"api/v/2024.12.3/containers/#mapordered","title":"MapOrdered","text":"<p><code>import \"luxe: containers\" for MapOrdered</code></p> <p>A <code>Map</code> wrapper that keeps the order of the keys the same in which they're added. Note: The Wren <code>Map</code> class doesn't guarantee order of keys.</p> <ul> <li>keys</li> <li>map</li> <li>new()</li> <li>get(key: <code>Any</code>)</li> <li>set(key: <code>Any</code>, value: <code>Any</code>)</li> <li>containsKey(key: <code>Any</code>)</li> <li>[key : Any]</li> <li>[key : Any]=(value : Any)</li> <li>iterate(iterator: <code>Any</code>)</li> <li>iteratorValue(iterator: <code>Any</code>)</li> </ul> <p> MapOrdered.keys \u00b6 returns <code>List</code></p> <p>Returns the list of <code>keys</code> in the Map. Don't modify this.</p> <pre><code>var map = MapOrdered.new()\nmap[\"one\"] = 1\nmap[\"two\"] = 2\nLog.print(map.keys) //[\"one\", \"two\"]\n</code></pre> <p> MapOrdered.map \u00b6 returns <code>Map</code></p> <p>Access to the underlying Wren <code>Map</code> data. Normally you don't modify this directly.</p> <pre><code>var map = MapOrdered.new()\nmap[\"one\"] = 1\nmap[\"two\"] = 2\nLog.print(map.map) //{two: 2, one: 1}\n</code></pre> <p> MapOrdered.new() \u00b6 returns <code>MapOrdered</code></p> <p>Create a new ordered map.</p> <pre><code>var map = MapOrdered.new()\n</code></pre> <p> MapOrdered.get(key: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Return the value associated with <code>key</code>, or <code>null</code> if not found. You can also use <code>map[key]</code> as an alternative.</p> <pre><code>var map = MapOrdered.new()\nmap[\"one\"] = 1\nLog.print(map.get(\"one\"))  //1\nLog.print(map.get(\"two\"))  //null\n</code></pre> <p> MapOrdered.set(key: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Set a <code>value</code> for a given <code>key</code>. You can also use <code>map[key] = value</code> as an alternative.</p> <pre><code>var map = MapOrdered.new()\nmap.set(\"one\", 1)\n</code></pre> <p> MapOrdered.containsKey(key: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Returns true if <code>key</code> is found in the map.</p> <pre><code>var map = MapOrdered.new()\nmap[\"one\"] = 1\nLog.print(map.containsKey(\"one\"))  //true\nLog.print(map.containsKey(\"two\"))  //false\n</code></pre> <p> MapOrdered [key : Any] \u00b6 returns <code>unknown</code></p> <p>Return the value associated with <code>key</code>, or <code>null</code> if not found.</p> <pre><code>var map = MapOrdered.new()\nmap[\"one\"] = 1\nLog.print(map[\"one\"])  //1\nLog.print(map[\"two\"])  //null\n</code></pre> <p> MapOrdered [key : Any]=(value : Any) \u00b6 returns <code>unknown</code></p> <p> MapOrdered.iterate(iterator: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Implementation details for the Wren iterator protocol.   </p> <p> MapOrdered.iteratorValue(iterator: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Implementation details for the Wren iterator protocol.   </p>"},{"location":"api/v/2024.12.3/docgen/","title":"Docgen","text":""},{"location":"api/v/2024.12.3/docgen/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/docgen/#luxe-docgen-module","title":"<code>luxe: docgen</code> module","text":"<ul> <li>DocGen </li> </ul>"},{"location":"api/v/2024.12.3/docgen/#docgen","title":"DocGen","text":"<p><code>import \"luxe: docgen\" for DocGen</code></p> <p>no docs found</p> <ul> <li>config</li> <li>new(in_config: <code>Map</code>)</li> <li>get_param_string(parameters: <code>Any</code>)</li> <li>get_param_string(parameters: <code>Any</code>, display: <code>Any</code>)</li> <li>generate_from_module(module_path: <code>String</code>)</li> <li>generate_from_module(config: <code>Map</code>, module_path: <code>String</code>)</li> <li>get_ast_for_path(module_prefix: <code>String</code>, path: <code>String</code>)</li> <li>generate()</li> <li>generate_from_project(config: <code>Any</code>)</li> <li>generate_from_ast_nodes(config: <code>Map</code>, nodes: <code>Map</code>)</li> <li>format_docs(meta_list: <code>Any</code>)</li> <li>get_alias(meta: <code>Any</code>, name: <code>Any</code>)</li> <li>signature_url(name: <code>Any</code>, args: <code>Any</code>, setter: <code>Any</code>)</li> <li>get_meta(source_meta: <code>Any</code>)</li> <li>convert_meta(in_meta: <code>Any</code>)</li> </ul> <p> DocGen.config \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> DocGen.new(in_config: <code>Map</code>) \u00b6 returns <code>DocGen</code></p> <p>no docs found   </p> <p> DocGen.get_param_string(parameters: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> DocGen.get_param_string(parameters: <code>Any</code>, display: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> DocGen.generate_from_module(module_path: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> DocGen.generate_from_module(config: <code>Map</code>, module_path: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>takes a raw path for a module and tries to generate documentation for it   </p> <p> DocGen.get_ast_for_path(module_prefix: <code>String</code>, path: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> DocGen.generate() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> DocGen.generate_from_project(config: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> DocGen.generate_from_ast_nodes(config: <code>Map</code>, nodes: <code>Map</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> DocGen.format_docs(meta_list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> DocGen.get_alias(meta: <code>Any</code>, name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> DocGen.signature_url(name: <code>Any</code>, args: <code>Any</code>, setter: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> DocGen.get_meta(source_meta: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> DocGen.convert_meta(in_meta: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/draw/","title":"Draw","text":""},{"location":"api/v/2024.12.3/draw/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/draw/#luxe-draw-module","title":"<code>luxe: draw</code> module","text":"<ul> <li>Draw </li> <li>LineCap </li> <li>LineJoin </li> <li>PathStyle </li> </ul>"},{"location":"api/v/2024.12.3/draw/#draw","title":"Draw","text":"<p><code>import \"luxe: draw\" for Draw</code></p> <p>Draw is a service API that offers drawing to a context (canvas) in an efficient way. Things like lines, circles, paths and so on are what it provides. The terms canvas and context will be used interchangeably. </p> <p>It is important to note that <code>Draw</code> is a commit based API. A brief tutorial  on using it can be found here: 2D drawing tutorial.</p> <p><code>Draw</code> can be used to draw game content with, but is also a great tool for debug visualization. Many problems are a lot clearer when their details are drawn in the world, which Draw is very useful for.</p> <p>The context can be drawn to once or updated frequently. For example you might draw a grid to the context, and then leave it there which is a very efficient way to draw many lines.</p> <ul> <li>create(set: <code>Any</code>)</li> <li>create(set: <code>RenderSet</code>, tri_basis: <code>String</code>, text_basis: <code>String</code>, line_basis: <code>String</code>)</li> <li>destroy(context: <code>Any</code>)</li> <li>valid(context: <code>Any</code>)</li> <li>clear(context: <code>Any</code>)</li> <li>commit(context: <code>Any</code>)</li> <li>rect(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, angle: <code>Any</code>, style: <code>Any</code>)</li> <li>rect_detailed(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, angle: <code>Any</code>, radius: <code>Any</code>, smoothness: <code>Any</code>, style: <code>Any</code>)</li> <li>quad_detailed(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, angle: <code>Any</code>, radius: <code>Any</code>, smoothness: <code>Any</code>, color: <code>Any</code>)</li> <li>quad(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, angle: <code>Any</code>, color: <code>Any</code>)</li> <li>ngon(context: <code>Any</code>, ox: <code>Any</code>, oy: <code>Any</code>, oz: <code>Any</code>, rx: <code>Any</code>, ry: <code>Any</code>, sides: <code>Any</code>, angle: <code>Any</code>, style: <code>Any</code>)</li> <li>ngon_solid(context: <code>Any</code>, ox: <code>Any</code>, oy: <code>Any</code>, oz: <code>Any</code>, rx: <code>Any</code>, ry: <code>Any</code>, sides: <code>Any</code>, angle: <code>Any</code>, color: <code>Any</code>)</li> <li>ring(context: <code>Any</code>, ox: <code>Any</code>, oy: <code>Any</code>, oz: <code>Any</code>, rx: <code>Any</code>, ry: <code>Any</code>, start_angle: <code>Any</code>, end_angle: <code>Any</code>, smoothness: <code>Any</code>, style: <code>Any</code>)</li> <li>ring(context: <code>Any</code>, ox: <code>Any</code>, oy: <code>Any</code>, oz: <code>Any</code>, radius: <code>Any</code>, smoothness: <code>Any</code>, style: <code>Any</code>)</li> <li>circle(context: <code>Any</code>, ox: <code>Any</code>, oy: <code>Any</code>, oz: <code>Any</code>, radius: <code>Any</code>, smoothness: <code>Any</code>, color: <code>Any</code>)</li> <li>circle(context: <code>Any</code>, ox: <code>Any</code>, oy: <code>Any</code>, oz: <code>Any</code>, rx: <code>Any</code>, ry: <code>Any</code>, start_angle: <code>Any</code>, end_angle: <code>Any</code>, smoothness: <code>Any</code>, color: <code>Any</code>)</li> <li>line(context: <code>Any</code>, x1: <code>Any</code>, y1: <code>Any</code>, x2: <code>Any</code>, y2: <code>Any</code>, z: <code>Any</code>, style: <code>Any</code>)</li> <li>path(context: <code>Any</code>, points: <code>Any</code>, style: <code>Any</code>, closed: <code>Any</code>)</li> <li>path3D(context: <code>Any</code>, points: <code>Any</code>, style: <code>Any</code>, closed: <code>Any</code>)</li> <li>line3D(context: <code>Draw</code>, start: <code>Vec</code>, end: <code>Vec</code>, style: <code>PathStyle</code>)</li> <li>bounds3D(context: <code>Any</code>, geometry: <code>Any</code>, style: <code>Any</code>)</li> <li>aabb3D(context: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>, style: <code>Any</code>)</li> <li>plane3D(context: <code>Draw</code>, pos: <code>Vec</code>, normal: <code>Vec</code>, radius: <code>Num</code>, style: <code>PathStyle</code>)</li> <li>plus3D(context: <code>Draw</code>, pos: <code>Vec</code>, radius: <code>Num</code>, style: <code>PathStyle</code>)</li> <li>ring3D(context: <code>Draw</code>, pos: <code>Vec3</code>, radius: <code>Vec2</code>, start_angle: <code>Num</code>, end_angle: <code>Num</code>, smoothness: <code>Num</code>, style: <code>PathStyle</code>)</li> <li>plus(context: <code>Draw</code>, pos: <code>Vec</code>, radius: <code>Num</code>, style: <code>PathStyle</code>)</li> <li>camera(context: <code>Draw</code>, camera: <code>Entity</code>, style: <code>PathStyle</code>)</li> <li>frustum(context: <code>Draw</code>, corners: <code>List</code>, style: <code>PathStyle</code>)</li> <li>text(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, string: <code>Any</code>, size: <code>Any</code>, font: <code>Any</code>, color: <code>Any</code>, align: <code>Any</code>, align_vertical: <code>Any</code>)</li> <li>text(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, string: <code>Any</code>, size: <code>Any</code>, font: <code>Any</code>, color: <code>Any</code>, align: <code>Any</code>, align_vertical: <code>Any</code>)</li> <li>text(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, string: <code>Any</code>, size: <code>Any</code>, color: <code>Any</code>)</li> <li>image(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, angle: <code>Any</code>, material: <code>Any</code>)</li> <li>image(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, angle: <code>Any</code>, color: <code>Any</code>, uv: <code>Any</code>, material: <code>Any</code>)</li> <li>cross(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, radius: <code>Any</code>, angle: <code>Any</code>, style: <code>Any</code>)</li> <li>sphere3D_slice(context: <code>Draw</code>, pos: <code>Vec3</code>, radius: <code>Vec2</code>, start_angle: <code>Num</code>, end_angle: <code>Num</code>, layers: <code>Num</code>, style: <code>PathStyle</code>)</li> </ul> <p> Draw.create(set: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Creates a new drawing context to draw with. The <code>set</code> passed in is a <code>RenderSet</code>, which you normally get from a <code>World</code> via <code>World.render_set(world)</code>. This would place the canvas in the world to be rendered at the same time, as part of the world.</p> <pre><code>var canvas = Draw.create(World.render_set(app.world))\n</code></pre> <p> Draw.create(set: <code>RenderSet</code>, tri_basis: <code>String</code>, text_basis: <code>String</code>, line_basis: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Creates a new drawing context to draw with. The <code>set</code> passed in is a <code>RenderSet</code>, which you normally get from a <code>World</code> via <code>World.render_set(world)</code>. This would place the canvas in the world to be rendered at the same time, as part of the world.</p> <ul> <li><code>tri_basis</code></li> <li>Triangle Material Basis for the geometry</li> <li>default <code>luxe: material_basis/solid</code></li> <li><code>text_basis</code></li> <li>Text Material Basis</li> <li>default <code>luxe: material_basis/font</code></li> <li><code>line_basis</code></li> <li>Line Material Basis for 3D line geometry</li> <li> <p>default <code>luxe: material_basis/debug_line3d</code></p> <p>var canvas = Draw.create(World.render_set(app.world),                           \"luxe: material_basis/solid\",                           \"luxe: material_basis/font\",                          \"luxe: material_basis/debug_line3d\")   </p> </li> </ul> <p> Draw.destroy(context: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Destroy a previously created context.</p> <pre><code>var canvas = Draw.create(World.render_set(app.world))\n...\nDraw.destroy(canvas)\n</code></pre> <p> Draw.valid(context: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Returns true if the context is valid (and hasn't been destroyed).</p> <pre><code>var canvas = Draw.create(World.render_set(app.world))\nvar canvas = Draw.create(World.render_set(app.world))\nLog.print(Draw.valid(canvas)) //true\nDraw.destroy(canvas)\nLog.print(Draw.valid(canvas)) //false\n</code></pre> <p> Draw.clear(context: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Clears the context of any drawn content. This clears both committed and uncommitted data.</p> <pre><code>Draw.clear(draw)\n</code></pre> <p> Draw.commit(context: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Commit the content that has been drawn to the context.</p> <p>When using the Draw API, you can submit a bunch of drawing to happen, but it won't show up until it is committed. </p> <p>You can think of the draw calls as a queue, commit will process  that queue, and the canvas contents will be updated. The content will stay there until commit is called again. </p> <p>Calling commit with nothing in the queue will clear the contents (see also <code>Draw.clear</code>).</p> <pre><code>var canvas = Draw.create(World.render_set(app.world))\n//draw a red box rotated 45 degrees\nDraw.quad(canvas, 0, 0, 0, 100, 100, 45, [1, 0, 0, 1])\nDraw.commit(canvas)\n</code></pre> <p> Draw.rect(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, angle: <code>Any</code>, style: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draws a rectangle outline using <code>style</code> (<code>PathStyle</code>) at <code>x</code>,<code>y</code>, with depth <code>z</code>, with width of <code>w</code> and height of <code>h</code>. The rectangle will be rotated <code>angle</code> degrees.</p> <pre><code>var depth = 0\nvar angle = 45\nvar style = PathStyle.new()\n    style.color = [1,0,0,1]\n    style.thickness = 2\nDraw.rect(canvas, 0, 0, depth, 100, 100, angle, style)\n</code></pre> <p> Draw.rect_detailed(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, angle: <code>Any</code>, radius: <code>Any</code>, smoothness: <code>Any</code>, style: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draws a detailed rectangle outline using <code>style</code> (<code>PathStyle</code>) at <code>x</code>,<code>y</code>, with depth <code>z</code>, with width of <code>w</code> and height of <code>h</code>. The rectangle will be rotated <code>angle</code> degrees. </p> <p>\"Detailed\" means that the corners can be configured using the <code>radius</code> and <code>smoothness</code> values. This allows drawing rounded rectangles, rectangles with inverted rounded corners, and with flat corners. The radius controls the amount inset from the edges. With a smoothness of 0, the corners will be angled/flat.</p> <p>The order is <code>[bottom left, bottom right, top right, top left]</code> for radius + smoothness.</p> <pre><code>var depth = 0\nvar angle = 0\nvar style = PathStyle.new()\nvar radius = [16, 16, 16, 16]\nvar smoothness = [2, 2, 2, 2]\nDraw.rect_detailed(_ctx, 64, 64, depth, 256, 128, angle, radius, smoothness, style)\n</code></pre> <p> Draw.quad_detailed(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, angle: <code>Any</code>, radius: <code>Any</code>, smoothness: <code>Any</code>, color: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draws a detailed rectangle using <code>color</code> at <code>x</code>,<code>y</code>, with depth <code>z</code>, with width of <code>w</code> and height of <code>h</code>. The rectangle will be rotated <code>angle</code> degrees. </p> <p>\"Detailed\" means that the corners can be configured using the <code>radius</code> and <code>smoothness</code> values. This allows drawing rounded rectangles, rectangles with inverted rounded corners, and with flat corners. The radius controls the amount inset from the edges. With a smoothness of 0, the corners will be angled/flat.</p> <p>The order is <code>[bottom left, bottom right, top right, top left]</code> for radius + smoothness.</p> <pre><code>var depth = 0\nvar angle = 0\nvar color = [0,0,0,1]\nvar radius = [16, 16, 16, 16]\nvar smoothness = [2, 2, 2, 2]\nDraw.quad_detailed(_ctx, 64, 64, depth, 256, 128, angle, radius, smoothness, color)\n</code></pre> <p> Draw.quad(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, angle: <code>Any</code>, color: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draws a solid rectangle using <code>color</code> at <code>x</code>,<code>y</code>, with depth <code>z</code>, with width of <code>w</code> and height of <code>h</code>. The rectangle will be rotated <code>angle</code> degrees.</p> <pre><code>//draw a black solid rectangle\nvar depth = 0\nvar angle = 45\nDraw.quad(canvas, 0, 0, depth, 100, 100, angle, [0,0,0,1])\n</code></pre> <p> Draw.ngon(context: <code>Any</code>, ox: <code>Any</code>, oy: <code>Any</code>, oz: <code>Any</code>, rx: <code>Any</code>, ry: <code>Any</code>, sides: <code>Any</code>, angle: <code>Any</code>, style: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw an ngon (like a triangle, hexagon, pentagon etc) outline at <code>ox</code>,<code>oy</code> at depth <code>oz</code>.  The <code>rx</code> and <code>ry</code> radius values control the size of the shape around its origin. The number of <code>sides</code> controls how many sides the polygon will have (3 for a triangle, 6 for a hexagon). <code>sides</code> must be bigger than <code>3</code> to make sense for this function, it will be clamped to 3.</p> <pre><code>var depth = 0\nvar sides = 3\nvar radius = 32\nvar angle = 45\nvar style = PathStyle.new()\nDraw.ngon(canvas, 128, 128, depth, radius, radius, sides, angle, style)\n</code></pre> <p> Draw.ngon_solid(context: <code>Any</code>, ox: <code>Any</code>, oy: <code>Any</code>, oz: <code>Any</code>, rx: <code>Any</code>, ry: <code>Any</code>, sides: <code>Any</code>, angle: <code>Any</code>, color: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a solid ngon (like a triangle, hexagon, pentagon etc)  at <code>ox</code>,<code>oy</code> at depth <code>oz</code>.  The <code>rx</code> and <code>ry</code> radius values control the size of the shape around its origin. The number of <code>sides</code> controls how many sides the polygon will have (3 for a triangle, 6 for a hexagon). <code>sides</code> must be bigger than <code>3</code> to make sense for this function.</p> <p>:todo: this naming will change soon to be consistent across all draw APIs.</p> <pre><code>var depth = 0\nvar sides = 3\nvar radius = 32\nvar angle = 45\nDraw.ngon_solid(canvas, 128, 128, depth, radius, radius, sides, angle, Color.pink)\n</code></pre> <p> Draw.ring(context: <code>Any</code>, ox: <code>Any</code>, oy: <code>Any</code>, oz: <code>Any</code>, rx: <code>Any</code>, ry: <code>Any</code>, start_angle: <code>Any</code>, end_angle: <code>Any</code>, smoothness: <code>Any</code>, style: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a circle outline at <code>ox</code>,<code>oy</code> at depth <code>oz</code>. <code>rx</code> and <code>ry</code> control separate radius values for x and y axis, to draw an ellipse.</p> <p><code>start_angle</code> and <code>end_angle</code> specify in degrees allow drawing an open arc, instead of a closed circle. A closed circle has <code>start_angle</code> as <code>0</code> and <code>end_angle</code> as <code>360</code>. These angles match \"the unit circle\" in mathematics, where 0 is to the right, and 90 is pointing up.</p> <p>:todo: <code>smoothness</code> controls how smooth the circle will be.</p> <pre><code>var depth = 0\nvar start_angle = 0\nvar end_angle = 270\nvar smoothness = 2\nvar style = PathStyle.new()\nDraw.ring(canvas, 128, 128, depth, 32, 16, start_angle, end_angle, smoothness, style)\n</code></pre> <p> Draw.ring(context: <code>Any</code>, ox: <code>Any</code>, oy: <code>Any</code>, oz: <code>Any</code>, radius: <code>Any</code>, smoothness: <code>Any</code>, style: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Similar to <code>ring</code> with a single radius for both <code>x</code> and <code>y</code>.   </p> <p> Draw.circle(context: <code>Any</code>, ox: <code>Any</code>, oy: <code>Any</code>, oz: <code>Any</code>, radius: <code>Any</code>, smoothness: <code>Any</code>, color: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a solid circle at <code>ox</code>,<code>oy</code> at depth <code>oz</code>, using <code>color</code> and <code>radius</code> in size. :todo: <code>smoothness</code> controls how smooth the circle will be.</p> <pre><code>var depth = 0\nvar smoothness = 2\nDraw.circle(canvas, 128, 128, depth, 32, smoothness, [1,0,0,1])\n</code></pre> <p> Draw.circle(context: <code>Any</code>, ox: <code>Any</code>, oy: <code>Any</code>, oz: <code>Any</code>, rx: <code>Any</code>, ry: <code>Any</code>, start_angle: <code>Any</code>, end_angle: <code>Any</code>, smoothness: <code>Any</code>, color: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a solid circle at <code>ox</code>,<code>oy</code> at depth <code>oz</code>. <code>rx</code> and <code>ry</code> control separate radius values for x and y axis, to draw an ellipse.</p> <p><code>start_angle</code> and <code>end_angle</code> specify in degrees allow drawing an open area, like a pie chart (or pacman) instead of a closed circle. A closed circle has <code>start_angle</code> as <code>0</code> and <code>end_angle</code> as <code>360</code>. These angles match \"the unit circle\" in mathematics, where 0 is to the right, and 90 is pointing up.</p> <p>:todo: <code>smoothness</code> controls how smooth the circle will be.</p> <pre><code>var depth = 0\nvar start_angle = 0\nvar end_angle = 270\nvar smoothness = 2\nDraw.circle(canvas, 128, 128, depth, 32, 16, start_angle, end_angle, smoothness, Color.black)\n</code></pre> <p> Draw.line(context: <code>Any</code>, x1: <code>Any</code>, y1: <code>Any</code>, x2: <code>Any</code>, y2: <code>Any</code>, z: <code>Any</code>, style: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a line from <code>x1</code>,<code>y1</code> to <code>x2</code>,<code>y2</code> at depth <code>z</code> using <code>style</code> (<code>PathStyle</code>).</p> <pre><code>var depth = 0\nvar style = PathStyle.new()\nDraw.line(canvas, 0,0, 100,100, depth, style)\n</code></pre> <p> Draw.path(context: <code>Any</code>, points: <code>Any</code>, style: <code>Any</code>, closed: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a path consisting of a list of points. </p> <p>If <code>closed</code> is true it is expected that the first and last point in <code>points</code> have the same positions. </p> <p><code>points</code> is a <code>List</code> of <code>[x, y]</code> or <code>[x,y,z]</code> points.  If <code>z</code> is not specified for a point it will be 0.  Note that this is a 2D drawing function atm, so different z values may not be what you expect.</p> <pre><code>var style = PathStyle.new()\nvar points = [\n  [0,0],\n  [100,100],\n  [120,50],\n  [0,0]\n]\nDraw.path(canvas, points, style, true)\n</code></pre> <p> Draw.path3D(context: <code>Any</code>, points: <code>Any</code>, style: <code>Any</code>, closed: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a 3D path consisting of a list of points. </p> <p>If <code>closed</code> is true it is expected that the first and last point in <code>points</code> have the same positions. </p> <p><code>points</code> is a <code>List</code> of <code>[x,y,z]</code> points. </p> <pre><code>var style = PathStyle.new()\nvar points = [\n  [0,0,0],\n  [100,100,100],\n  [120,50,100],\n  [0,0,0]\n]\nDraw.path3D(canvas, points, style, true)\n</code></pre> <p> Draw.line3D(context: <code>Draw</code>, start: <code>Vec</code>, end: <code>Vec</code>, style: <code>PathStyle</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a 3D line from <code>start</code> to <code>end</code> using <code>style</code>. </p> <pre><code>var style = PathStyle.new()\nDraw.line3D(canvas, [100,100,100], [120,50,100], style)\n</code></pre> <p> Draw.bounds3D(context: <code>Any</code>, geometry: <code>Any</code>, style: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Draw.aabb3D(context: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>, style: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Draw.plane3D(context: <code>Draw</code>, pos: <code>Vec</code>, normal: <code>Vec</code>, radius: <code>Num</code>, style: <code>PathStyle</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Draw.plus3D(context: <code>Draw</code>, pos: <code>Vec</code>, radius: <code>Num</code>, style: <code>PathStyle</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a 3D plus at <code>pos</code> with size <code>radius</code> using <code>style</code>. </p> <pre><code>var style = PathStyle.new()\nDraw.plus3D(canvas, [100,100,100], 4, style)\n</code></pre> <p> Draw.ring3D(context: <code>Draw</code>, pos: <code>Vec3</code>, radius: <code>Vec2</code>, start_angle: <code>Num</code>, end_angle: <code>Num</code>, smoothness: <code>Num</code>, style: <code>PathStyle</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a 3D ring at <code>pos</code> with radius <code>[radius_x, radius_y]</code> using <code>style</code>. </p> <pre><code>var style = PathStyle.new()\nDraw.ring3D(canvas, [100,100,100], [4, 4], 0, 360, smoothness, style)\n</code></pre> <p> Draw.plus(context: <code>Draw</code>, pos: <code>Vec</code>, radius: <code>Num</code>, style: <code>PathStyle</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a 2D plus at <code>pos</code> with size <code>radius</code> using <code>style</code>. </p> <pre><code>var style = PathStyle.new()\nDraw.plus(canvas, [100,100], 20, style)\n</code></pre> <p> Draw.camera(context: <code>Draw</code>, camera: <code>Entity</code>, style: <code>PathStyle</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a 3D camera frustum for the given camera entity using <code>style</code>. </p> <pre><code>var style = PathStyle.new()\nDraw.camera(canvas, camera, style)\n</code></pre> <p> Draw.frustum(context: <code>Draw</code>, corners: <code>List</code>, style: <code>PathStyle</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a 3D camera frustum for the given 8 corner points using <code>style</code>. (You can get one from Camera.get_frustum(entity) for example, but can use Draw.camera as well).</p> <pre><code>var style = PathStyle.new()\nvar corners = [\n  near_top_left, \n  near_top_right, \n  near_bottom_left, \n  near_bottom_right,\n  far_top_left, \n  far_top_right, \n  far_bottom_left, \n  far_bottom_right,\n]\nDraw.frustum(canvas, corners, style)\n</code></pre> <p> Draw.text(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, string: <code>Any</code>, size: <code>Any</code>, font: <code>Any</code>, color: <code>Any</code>, align: <code>Any</code>, align_vertical: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw the specified <code>string</code> at <code>x</code>,<code>y</code> and depth <code>z</code>. <code>w</code> and <code>h</code> specify the bounds for the text, bottom left origin, y going up.  The <code>size</code> specifies the text size, and <code>color</code> the color. <code>font</code> is a font asset, e.g Asset.font(\"luxe: font/lato\").  <code>align</code> and <code>align_vertical</code> control alignment within the bounds,  using the <code>TextAlign</code> enums such as <code>TextAlign.left</code>.</p> <pre><code>var depth = 0\nvar size = 24\nvar red = [1,0,0,1]\nDraw.text(canvas, 32, 32, depth, 100, 32, \"hello\", size, Asset.font(\"luxe: font/lato\"), red, TextAlign.center, TextAlign.bottom)\n</code></pre> <p> Draw.text(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, string: <code>Any</code>, size: <code>Any</code>, font: <code>Any</code>, color: <code>Any</code>, align: <code>Any</code>, align_vertical: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw the specified <code>string</code> at <code>x</code>,<code>y</code> and depth <code>z</code>.  The <code>size</code> specifies the text size, and <code>color</code> the color.  <code>font</code> is a font asset, e.g Asset.font(\"luxe: font/lato\").  <code>align</code> and <code>align_vertical</code> control alignment relative to the specified position,  using the <code>TextAlign</code> enums such as <code>TextAlign.left</code>.</p> <pre><code>var depth = 0\nvar size = 24\nvar red = [1,0,0,1]\nDraw.text(canvas, 32, 32, depth, \"hello\", size, Asset.font(\"luxe: font/lato\"), red, TextAlign.center, TextAlign.bottom)\n</code></pre> <p> Draw.text(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, string: <code>Any</code>, size: <code>Any</code>, color: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw the specified <code>string</code> at <code>x</code>,<code>y</code>, <code>z</code>. The <code>size</code> specifies the text size, and <code>color</code> the color. </p> <pre><code>var depth = 0\nvar size = 24\nvar red = [1,0,0,1]\nDraw.text(canvas, 32, 32, depth, \"hello\", size, red)\n</code></pre> <p> Draw.image(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, angle: <code>Any</code>, material: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw an image with the specified <code>material</code> at <code>x</code>,<code>y</code> and depth <code>z</code>.  The image will be rotated by <code>angle</code> degrees.</p> <pre><code>var depth = 0\nvar angle = 30\nvar material = Assets.material(\"luxe: material/logo.sprite\")\nDraw.image(canvas, 128, 128, depth, 64, 64, angle, material)\n</code></pre> <p> Draw.image(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, angle: <code>Any</code>, color: <code>Any</code>, uv: <code>Any</code>, material: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw an image with the specified <code>material</code> at <code>x</code>,<code>y</code> and depth <code>z</code>.  The image will be rotated by <code>angle</code> degrees. </p> <p>The <code>uv</code> value specifies a fixed rectangle like <code>[left, top, right, bottom]</code> in the <code>0..1</code> range, where <code>[0,0,1,1]</code> is the default and displays the full image.  A <code>uv</code> value of <code>[0.5, 0, 1, 0.5]</code> would draw the top right corner of the image only. A <code>uv</code> value of <code>[0, 0, 4, 4]</code> would tile the image 4 times (as long as the material has a repeat mode for the image).</p> <pre><code>var depth = 0\nvar angle = 30\nvar material = Assets.material(\"luxe: material/logo.sprite\")\nvar uv = [0, 0.5, 0, 1] //bottom right\nDraw.image(canvas, 128, 128, depth, 64, 64, angle, uv, material)\n</code></pre> <p> Draw.cross(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, radius: <code>Any</code>, angle: <code>Any</code>, style: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draws a cross, an x shape   </p> <p> Draw.sphere3D_slice(context: <code>Draw</code>, pos: <code>Vec3</code>, radius: <code>Vec2</code>, start_angle: <code>Num</code>, end_angle: <code>Num</code>, layers: <code>Num</code>, style: <code>PathStyle</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a 3D sphere made from layered circles with <code>layers</code> number of circles and <code>radius</code> radius. Make the <code>start_angle</code> 0 and the <code>end_angle</code> 360 to make a full sphere, or 0/180 for a half sphere.</p> <pre><code>Draw.sphere3D_slice(canvas, [0, 2, 0], 1, 0, 360, 16, PathStyle.new())\n</code></pre>"},{"location":"api/v/2024.12.3/draw/#linecap","title":"LineCap","text":"<p><code>import \"luxe: draw\" for LineCap</code></p> <p>The end of a line is called a \"cap\", when drawing paths, this determines the type of cap that a line will have. :todo: images</p> <ul> <li>butt</li> <li>round</li> <li>square</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> LineCap.butt \u00b6 returns <code>unknown</code></p> <p>This cap is as if there was no cap, the line is just ended. The default.</p> <pre><code>var style = PathStyle.new()\n    style.cap = LineCap.butt\n</code></pre> <p> LineCap.round \u00b6 returns <code>unknown</code></p> <p>A round cap is a half circle at the end of the line.</p> <pre><code>var style = PathStyle.new()\n    style.cap = LineCap.round\n</code></pre> <p> LineCap.square \u00b6 returns <code>unknown</code></p> <p>A square cap is a square at the end of the line.</p> <pre><code>var style = PathStyle.new()\n    style.cap = LineCap.square\n</code></pre> <p> LineCap.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Convert a string to a LineCap value.</p> <pre><code>Log.print(LineCap.round == LineCap.from_string(\"round\")) //true\n</code></pre>"},{"location":"api/v/2024.12.3/draw/#linejoin","title":"LineJoin","text":"<p><code>import \"luxe: draw\" for LineJoin</code></p> <p>When drawing a path, a series of lines will be drawn and joined together. The join of each connection can be configured when drawing paths using <code>LineJoin</code>. :todo: images</p> <ul> <li>bevel</li> <li>round</li> <li>miter</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> LineJoin.bevel \u00b6 returns <code>unknown</code></p> <p>The default join is a bevel, which is a flat join.</p> <pre><code>var style = PathStyle.new()\n    style.join = LineJoin.bevel\n</code></pre> <p> LineJoin.round \u00b6 returns <code>unknown</code></p> <p>A round join is a semi circle that makes the corner rounded.</p> <pre><code>var style = PathStyle.new()\n    style.join = LineJoin.round\n</code></pre> <p> LineJoin.miter \u00b6 returns <code>unknown</code></p> <p>A miter join is a sharp triangle join that has a limit value (which falls back to bevel).</p> <pre><code>var style = PathStyle.new()\n    style.join = LineJoin.miter\n    style.miter_limit = 8\n</code></pre> <p> LineJoin.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Convert a string to a LineJoin value.</p> <pre><code>Log.print(LineJoin.round == LineJoin.from_string(\"round\")) //true\n</code></pre>"},{"location":"api/v/2024.12.3/draw/#pathstyle","title":"PathStyle","text":"<p><code>import \"luxe: draw\" for PathStyle</code></p> <ul> <li>array</li> <li>color</li> <li>alpha(value: <code>Any</code>)</li> <li>color(value: <code>Any</code>)</li> <li>thickness(value: <code>Any</code>)</li> <li>color=(value : Any)</li> <li>alpha</li> <li>alpha=(value : Any)</li> <li>thickness</li> <li>thickness=(value : Any)</li> <li>feather</li> <li>feather=(value : Any)</li> <li>cap</li> <li>cap=(value : Any)</li> <li>join</li> <li>join=(value : Any)</li> <li>miter_limit</li> <li>miter_limit=(value : Any)</li> <li>new()</li> </ul> <p> PathStyle.array \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PathStyle.color \u00b6 returns <code>unknown</code></p> <p>Returns the color of the path style.</p> <pre><code>var style = PathStyle.new()\nvar color = style.color //the default color\n</code></pre> <p> PathStyle.alpha(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PathStyle.color(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PathStyle.thickness(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PathStyle.color=(value : Any) \u00b6 returns <code>unknown</code></p> <p>Set the color for the style.</p> <pre><code>var style = PathStyle.new()\nstyle.color = [0, 0, 0, 1] //black\n</code></pre> <p> PathStyle.alpha \u00b6 returns <code>unknown</code></p> <p>Returns the alpha from the color of the path style.</p> <pre><code>var style = PathStyle.new()\nvar color = style.alpha //the alpha value of the default color\n</code></pre> <p> PathStyle.alpha=(value : Any) \u00b6 returns <code>unknown</code></p> <p>Set the alpha of the color for the style.</p> <pre><code>var style = PathStyle.new()\nstyle.alpha = 0.5 //half alpha\n</code></pre> <p> PathStyle.thickness \u00b6 returns <code>unknown</code></p> <p>Returns the thickness of the path style.</p> <pre><code>var style = PathStyle.new()\nLog.print(style.thickness) //1\n</code></pre> <p> PathStyle.thickness=(value : Any) \u00b6 returns <code>unknown</code></p> <p>Set the thickness of the path style.</p> <pre><code>var style = PathStyle.new()\nstyle.thickness = 4\n</code></pre> <p> PathStyle.feather \u00b6 returns <code>unknown</code></p> <p>Returns the feather value for the path style.  Note: not used much at the moment.</p> <pre><code>var style = PathStyle.new()\nvar feather = style.feather\n</code></pre> <p> PathStyle.feather=(value : Any) \u00b6 returns <code>unknown</code></p> <p>Set the feather value for the path style.  Note: not used much at the moment.</p> <pre><code>var style = PathStyle.new()\nstyle.feather = 2\n</code></pre> <p> PathStyle.cap \u00b6 returns <code>unknown</code></p> <p>Returns the <code>LineCap</code> type for the path style.</p> <pre><code>var style = PathStyle.new()\nvar cap = style.cap\n</code></pre> <p> PathStyle.cap=(value : Any) \u00b6 returns <code>unknown</code></p> <p>Set the <code>LineCap</code> type for the path style.</p> <pre><code>var style = PathStyle.new()\nstyle.cap = LineCap.round\n</code></pre> <p> PathStyle.join \u00b6 returns <code>unknown</code></p> <p>Returns the <code>LineJoin</code> type for the path style.</p> <pre><code>var style = PathStyle.new()\nvar join = style.join\n</code></pre> <p> PathStyle.join=(value : Any) \u00b6 returns <code>unknown</code></p> <p>Set the <code>LineJoin</code> type for the path style.</p> <pre><code>var style = PathStyle.new()\nstyle.cap = LineJoin.round\n</code></pre> <p> PathStyle.miter_limit \u00b6 returns <code>unknown</code></p> <p>Returns the miter limit for the path style. Only relevant if the <code>join</code> type is <code>LineJoin.miter</code>.</p> <pre><code>var style = PathStyle.new()\nvar limit = style.miter_limit\n</code></pre> <p> PathStyle.miter_limit=(value : Any) \u00b6 returns <code>unknown</code></p> <p>Set the miter limit for the path style. Only relevant if the <code>join</code> type is <code>LineJoin.miter</code>.</p> <pre><code>var style = PathStyle.new()\nstyle.miter_limit = 8\n</code></pre> <p> PathStyle.new() \u00b6 returns <code>PathStyle</code></p> <p>Create a new <code>PathStyle</code> instance.</p> <pre><code>var style = PathStyle.new()\nstyle.color = [1,0,0,1]\nstyle.thickness = 2\nstyle.join = LineJoin.round\n//use style\n//...\nstyle.thickness = 1\n//use style again...\n</code></pre>"},{"location":"api/v/2024.12.3/editor/","title":"Editor","text":""},{"location":"api/v/2024.12.3/editor/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/editor/#luxe-editor-module","title":"<code>luxe: editor</code> module","text":"<ul> <li>Editor </li> </ul>"},{"location":"api/v/2024.12.3/editor/#editor","title":"Editor","text":"<p><code>import \"luxe: editor\" for Editor</code></p> <p>Access to information about the editor, if the game is currently running in the editor. Please note this API is new and heavily work in progress.</p> <ul> <li>get</li> <li>get(context_id: <code>Any</code>)</li> </ul> <p> Editor.get \u00b6 returns <code>unknown</code></p> <p>Returns the editor API for access to the editor   </p> <p> Editor.get(context_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Returns the editor context with the given ID. Examples include <code>luxe.editor.world</code> for the world editor, or <code>luxe.editor.tiles</code>.</p> <pre><code>//We can check if a world is in edit mode via the `edit` tag.\n//For example, a scene being previewed in editor is still running in \n//the editor, but we don't want to act as if it's being edited.\nvar is_world_editable = World.tag_has(world, \"edit\")\nif(!is_world_editable) return\n\n//if we're in the editor, we can access the world editor and do some things\nvar world_editor = Editor.get(\"luxe.editor.world\")\nif(world_editor) {\n  //simple example, make sure the gizmo matches the transform\n  //if there's no gizmo, the function returns null\n  var gizmo = world_editor.gizmo\n  if(gizmo) gizmo.refresh()\n}\n</code></pre>"},{"location":"api/v/2024.12.3/events/","title":"Events","text":""},{"location":"api/v/2024.12.3/events/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/events/#luxe-events-module","title":"<code>luxe: events</code> module","text":"<ul> <li>Events </li> </ul>"},{"location":"api/v/2024.12.3/events/#events","title":"Events","text":"<p><code>import \"luxe: events\" for Events</code></p> <p>A simple event system for listening to and emitting events.</p> <p>Note: this API will likely change to ID based soon, where  on listening, an ID will be returned, and use that ID to unlisten  rather than needing the function object.</p> <ul> <li>new()</li> <li>once(tags: <code>List</code>, fn: <code>Fn</code>)</li> <li>listen(tags: <code>List</code>, fn: <code>Fn</code>)</li> <li>unlisten(tags: <code>List</code>, fn: <code>Fn</code>)</li> <li>unlisten_id(tags: <code>List</code>, id: <code>String</code>)</li> <li>unlisten(tags: <code>List</code>)</li> <li>emit(tags: <code>List</code>)</li> <li>emit(tags: <code>List</code>, data: <code>Any</code>)</li> </ul> <p> Events.new() \u00b6 returns <code>Events</code></p> <p>Create a new <code>Events</code> instance to use.</p> <pre><code>var events = Events.new()\n</code></pre> <p> Events.once(tags: <code>List</code>, fn: <code>Fn</code>) \u00b6 returns <code>String</code></p> <p>Connect a function to the given tags, that is automatically removed after the event is emitted. The function takes a single argument, <code>data</code>, which is sent from <code>emit</code>.</p> <pre><code>events.once([\"example\"]) {|data|\n  Log.print(\"event received: data = `%(data)`\")\n}\n\n//make the event happen, will call the above function\n//which prints  event received: data = `321`\nevents.emit([\"example\"], 321)\n//fire the event again, but this one does NOT print,\n//because the event was only listening once\nevents.emit([\"example\"], 654)\n</code></pre> <p> Events.listen(tags: <code>List</code>, fn: <code>Fn</code>) \u00b6 returns <code>String</code></p> <p>Connect a function to the given tags. The function will be called each time the event is emitted, until <code>unlisten</code> is called. The function takes a single argument, <code>data</code>, which is sent through <code>emit</code>. Returns an id that you give to <code>unlisten</code>.</p> <pre><code>var tags = [\"example\", \"tags\"]\nvar fn = Fn.new {|data|\n  Log.print(\"data = `%(data)`\")\n}\n\nvar id = events.listen(tags, fn)\nevents.emit(tags, \"hello\")          //prints data = `hello`\nevents.emit(tags, { \"map\":\"data\" }) //prints data = `{map:data}`\nevents.emit(tags)                   //prints data = `null`\nevents.unlisten_id(tags, id)        //remove the function\nevents.emit(tags)                   //nothing printed\n</code></pre> <p> Events.unlisten(tags: <code>List</code>, fn: <code>Fn</code>) \u00b6 returns <code>None</code></p> <p>Removes a connected function for the specified tags (if one exists),  by specifying the same function passed to <code>listen</code>. See <code>listen</code> for example.</p> <pre><code>events.unlisten([\"tag\"], fn)\n</code></pre> <p> Events.unlisten_id(tags: <code>List</code>, id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Removes a connected function for the specified tags (if one exists). The id is the one returned from <code>listen</code>. See <code>listen</code> for example.</p> <pre><code>events.unlisten_id([\"tag\"], id)\n</code></pre> <p> Events.unlisten(tags: <code>List</code>) \u00b6 returns <code>None</code></p> <p>Removes ALL functions from the specified tags, clearing them.</p> <pre><code>events.unlisten([\"tag\"])\n</code></pre> <p> Events.emit(tags: <code>List</code>) \u00b6 returns <code>None</code></p> <p>Emit the event tags so that any connected functions will be called. Sends <code>null</code> for the data argument to the functions. See <code>listen</code> for an example.</p> <pre><code>events.emit([\"tag\"])\n</code></pre> <p> Events.emit(tags: <code>List</code>, data: <code>Any</code>) \u00b6 returns <code>None</code></p> <p>Emit the event tags so that any connected functions will be called. Sends <code>data</code> as is for the data argument to the functions. See <code>listen</code> for an example.</p> <pre><code>events.emit([\"tag\"], [\"hello\"])\n</code></pre>"},{"location":"api/v/2024.12.3/fuzzy/","title":"Fuzzy","text":""},{"location":"api/v/2024.12.3/fuzzy/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/fuzzy/#luxe-fuzzy-module","title":"<code>luxe: fuzzy</code> module","text":"<ul> <li>Fuzzy </li> <li>FuzzyResult </li> <li>FuzzyScore </li> </ul>"},{"location":"api/v/2024.12.3/fuzzy/#fuzzy","title":"Fuzzy","text":"<p><code>import \"luxe: fuzzy\" for Fuzzy</code></p> <p>no docs found</p> <ul> <li>sorted(pattern: <code>String</code>, items: <code>List</code>)</li> <li>matches(pattern: <code>String</code>, items: <code>List</code>)</li> <li>matches(pattern: <code>String</code>, items: <code>List</code>, fn: <code>Fn</code>)</li> <li>match(pattern: <code>String</code>, str: <code>String</code>)</li> <li>match_at(pattern: <code>List</code>, str: <code>List</code>, pattern_idx: <code>Any</code>, str_idx: <code>Any</code>)</li> <li>match_simple(pattern: <code>String</code>, str: <code>String</code>)</li> <li>is_camel_case(c0: <code>Num</code>, c1: <code>Num</code>)</li> <li>match_recursive(pattern: <code>List</code>, str: <code>List</code>, pattern_idx: <code>Num</code>, str_idx: <code>Num</code>, srcMatches: <code>List</code>, matches: <code>List</code>, maxMatches: <code>Num</code>, nextMatch: <code>Num</code>, count: <code>Num</code>, limit: <code>Num</code>)</li> </ul> <p> Fuzzy.sorted(pattern: <code>String</code>, items: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Fuzzy.matches(pattern: <code>String</code>, items: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Fuzzy.matches(pattern: <code>String</code>, items: <code>List</code>, fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Fuzzy.match(pattern: <code>String</code>, str: <code>String</code>) \u00b6 returns <code>Result</code></p> <p>no docs found   </p> <p> Fuzzy.match_at(pattern: <code>List</code>, str: <code>List</code>, pattern_idx: <code>Any</code>, str_idx: <code>Any</code>) \u00b6 returns <code>Bool</code></p> <p>returns true if character at two positions is the same   </p> <p> Fuzzy.match_simple(pattern: <code>String</code>, str: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>returns true if each character in pattern is found sequentially within str   </p> <p> Fuzzy.is_camel_case(c0: <code>Num</code>, c1: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Fuzzy.match_recursive(pattern: <code>List</code>, str: <code>List</code>, pattern_idx: <code>Num</code>, str_idx: <code>Num</code>, srcMatches: <code>List</code>, matches: <code>List</code>, maxMatches: <code>Num</code>, nextMatch: <code>Num</code>, count: <code>Num</code>, limit: <code>Num</code>) \u00b6 returns <code>Result</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/fuzzy/#fuzzyresult","title":"FuzzyResult","text":"<p><code>import \"luxe: fuzzy\" for FuzzyResult</code></p> <p>no docs found</p> <ul> <li>item</li> <li>score</li> <li>matches</li> <li>new(item: <code>String</code>, score: <code>Num</code>, matches: <code>List</code>)</li> </ul> <p> FuzzyResult.item \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> FuzzyResult.score \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> FuzzyResult.matches \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> FuzzyResult.new(item: <code>String</code>, score: <code>Num</code>, matches: <code>List</code>) \u00b6 returns <code>FuzzyResult</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/fuzzy/#fuzzyscore","title":"FuzzyScore","text":"<p><code>import \"luxe: fuzzy\" for FuzzyScore</code></p> <p>no docs found</p> <ul> <li>sequential_bonus</li> <li>separator_bonus</li> <li>camel_bonus</li> <li>first_letter_bonus</li> <li>leading_letter_penalty</li> <li>max_leading_letter_penalty</li> <li>unmatched_letter_penalty</li> </ul> <p> FuzzyScore.sequential_bonus \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> FuzzyScore.separator_bonus \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> FuzzyScore.camel_bonus \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> FuzzyScore.first_letter_bonus \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> FuzzyScore.leading_letter_penalty \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> FuzzyScore.max_leading_letter_penalty \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> FuzzyScore.unmatched_letter_penalty \u00b6 returns <code>Num</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/game/","title":"Game","text":""},{"location":"api/v/2024.12.3/game/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/game/#luxe-game-module","title":"<code>luxe: game</code> module","text":"<ul> <li>Frame </li> <li>FrameSection </li> <li>FrameWhen </li> <li>Ready </li> </ul>"},{"location":"api/v/2024.12.3/game/#frame","title":"Frame","text":"<p><code>import \"luxe: game\" for Frame</code></p> <p>Access to the frame and game loop.  At the moment, the loop contains fixed sections, <code>begin</code> -&gt; <code>init</code> -&gt; <code>sim</code> -&gt; <code>visual</code> -&gt; <code>debug</code> -&gt; <code>end</code>.</p> <p>Functions can be hooked into sections of the frame using <code>before</code>, <code>after</code> or <code>on</code> ordering.</p> <p>Note: This API is a work in progress.</p> <ul> <li>begin</li> <li>init</li> <li>sim</li> <li>visual</li> <li>debug</li> <li>end</li> <li>queue(fn: <code>Fn</code>)</li> <li>next(fn: <code>Fn</code>)</li> <li>end(fn: <code>Fn</code>)</li> <li>schedule(time: <code>Num</code>, fn: <code>Fn</code>)</li> <li>schedule(time: <code>Num</code>, count: <code>Num</code>, fn: <code>Fn</code>)</li> <li>unschedule(handle: <code>Handle</code>)</li> <li>off(handle: <code>Handle</code>)</li> <li>once(section: <code>String</code>, priority: <code>Num</code>, fn: <code>Fn</code>)</li> <li>on(section: <code>String</code>, priority: <code>Num</code>, fn: <code>Fn</code>)</li> <li>before(section: <code>String</code>, priority: <code>Num</code>, fn: <code>Fn</code>)</li> <li>after(section: <code>String</code>, priority: <code>Num</code>, fn: <code>Fn</code>)</li> <li>on(section: <code>String</code>, fn: <code>Fn</code>)</li> <li>once(section: <code>String</code>, fn: <code>Fn</code>)</li> <li>before(section: <code>String</code>, fn: <code>Fn</code>)</li> <li>after(section: <code>String</code>, fn: <code>Fn</code>)</li> <li>skip(count_frames: <code>Num</code>, fn: <code>Fn</code>)</li> <li>mark(id: <code>String</code>, display: <code>String</code>)</li> <li>get_marks(frame_index: <code>Num</code>)</li> <li>index</li> <li>delta</li> </ul> <p> Frame.begin \u00b6 returns <code>String</code></p> <p>An enum value for the <code>begin</code> section in the loop. The `begin section is the start of the frame from the game's perspective.</p> <pre><code>Frame.on(Frame.begin) {|delta| ... }\n</code></pre> <p> Frame.init \u00b6 returns <code>String</code></p> <p>An enum value for the <code>init</code> section in the loop. The <code>init</code> section is used for initialization tasks that happen before updates, like when a new entity is created, it can be added to a queue and processed in init to set some default values before it arrives in <code>sim</code> or <code>visual</code>.</p> <pre><code>Frame.on(Frame.init) {|delta| ... }\n</code></pre> <p> Frame.sim \u00b6 returns <code>String</code></p> <p>An enum value for the <code>sim</code> section in the loop. The <code>sim</code> section is for simulation, also known as <code>update</code>.  In this section you would update game logic and modify things that the <code>visual</code> section would reference.</p> <pre><code>Frame.on(Frame.sim) {|delta| ... }\n</code></pre> <p> Frame.visual \u00b6 returns <code>String</code></p> <p>An enum value for the <code>visual</code> section in the loop. The <code>visual</code> section is for rendering, also known as <code>render</code>. Updating visual state from the sim states happens here.</p> <pre><code>Frame.on(Frame.visual) {|delta| ... }\n</code></pre> <p> Frame.debug \u00b6 returns <code>String</code></p> <p>An enum value for the <code>debug</code> section in the loop. The <code>debug</code> part of the loop can perform debug related tasks before the end of the frame and rendering is submitted.</p> <pre><code>Frame.on(Frame.debug) {|delta| ... }\n</code></pre> <p> Frame.end \u00b6 returns <code>String</code></p> <p>An enum value for the <code>end</code> section in the loop. The <code>end</code> of the loop can perform tasks after rendering and simulation.</p> <pre><code>Frame.on(Frame.end) {|delta| ... }\n</code></pre> <p> Frame.queue(fn: <code>Fn</code>) \u00b6 returns <code>None</code></p> <p>Once off. Queue a function to be called after the current section has completed fully. That is, if we were inside of <code>sim</code> and we queued a function, it would happen after <code>before</code> <code>on</code> and <code>after</code>.</p> <p>This is used for systems that fire callbacks, you normally don't want to fire callbacks during processing, so you can queue them to happen \"as soon as possible\" but in a well defined place and time.</p> <pre><code>Frame.queue {\n  Log.print(\"happens at the end of the current section\")\n}\n\n//fake example: collision callbacks\nfor(entity in collidable) {\n  if(collides(entity)) {\n    var fn = callbacks[entity]\n    Frame.queue { fn.call() }\n  }\n}\n</code></pre> <p> Frame.next(fn: <code>Fn</code>) \u00b6 returns <code>None</code></p> <p>Once off. Queue a function to be called at the beginning of the next frame,  before any sections.</p> <pre><code>Frame.next {\n  Log.print(\"next frame!\")\n}\n\n//common example, destroying something when it might\n//not be safe to. Instead, just destroy it later\nfor(thing in list) {\n  Frame.next { Thing.destroy(thing) }\n}\n</code></pre> <p> Frame.end(fn: <code>Fn</code>) \u00b6 returns <code>None</code></p> <p>Once off. Queue a function to be called at the end of the current frame, after all sections.</p> <pre><code>Frame.end {\n  Log.print(\"end frame!\")\n}\n</code></pre> <p> Frame.schedule(time: <code>Num</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>Schedule a function to be called in future.  The <code>time</code> value is in seconds, and is not affected by any time scaling. The function is only called once. To repeat, see the other <code>schedule</code> method.   </p> <p> Frame.schedule(time: <code>Num</code>, count: <code>Num</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>Schedule a function to be called in future.  The <code>time</code> value is in seconds, and is not affected by any time scaling. If <code>count</code> is 0, the function will be called repeatedly until <code>unschedule</code> is called.   </p> <p> Frame.unschedule(handle: <code>Handle</code>) \u00b6 returns <code>None</code></p> <p>Unschedule a function scheduled previously, using the handle returned from <code>schedule</code>.   </p> <p> Frame.off(handle: <code>Handle</code>) \u00b6 returns <code>Bool</code></p> <p>Disconnect a function using the handle returned from one of the recurring functions. This will remove the function from the loop and it will no longer be called.</p> <p>Returns true if the function was valid and removed.</p> <pre><code>var tick = Frame.on(Frame.sim) {|delta| Log.print(\"delta:%(delta)\") }\n//...\nFrame.off(tick)\n</code></pre> <p> Frame.once(section: <code>String</code>, priority: <code>Num</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>Once off. Queues a function to the specified section, with a given priority which will be executed during the section. Priority is based on \"highest priority first\". So priority 1 executes before 0.</p> <p>Returns a handle that can be used to remove the function via <code>off</code>.</p> <pre><code>Frame.once(Frame.sim, 3) {|delta| Log.print(\"prints first\") }\nFrame.once(Frame.sim, 1) {|delta| Log.print(\"prints second\") }\n</code></pre> <p> Frame.on(section: <code>String</code>, priority: <code>Num</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>Connect a function to the specified section, with a given priority which will be executed during the section. Priority is based on \"highest priority first\". So priority 1 executes before 0.</p> <p>Returns a handle that can be used to remove the function via <code>off</code>.</p> <pre><code>Frame.on(Frame.sim, 3) {|delta| Log.print(\"prints first\") }\nFrame.on(Frame.sim, 1) {|delta| Log.print(\"prints second\") }\n</code></pre> <p> Frame.before(section: <code>String</code>, priority: <code>Num</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>Connect a function to the specified section, with a given priority which will be executed before the section. Priority is based on \"highest priority first\". So priority 1 executes before 0.</p> <p>Returns a handle that can be used to remove the function via <code>off</code>.</p> <pre><code>Frame.before(Frame.sim, 0) {|delta| Log.print(\"prints second\") }\nFrame.before(Frame.sim, 1) {|delta| Log.print(\"prints first\") }\n</code></pre> <p> Frame.after(section: <code>String</code>, priority: <code>Num</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>Connect a function to the specified section, with a given priority which will be executed after the section. Priority is based on \"highest priority first\". So priority 1 executes before 0.</p> <p>Returns a handle that can be used to remove the function via <code>off</code>.</p> <pre><code>Frame.after(Frame.sim, 2) {|delta| Log.print(\"prints first\") }\nFrame.after(Frame.sim, 1) {|delta| Log.print(\"prints second\") }\n</code></pre> <p> Frame.on(section: <code>String</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>Connect a function to the specified section (with priority 0) which will be executed during the section.</p> <p>Returns a handle that can be used to remove the function via <code>off</code>.</p> <pre><code>Frame.on(Frame.sim) {|delta| Log.print(\"delta:%(delta)\") }\n</code></pre> <p> Frame.once(section: <code>String</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>Once off. Queue a function to the specified section (with priority 0) which will be executed during the section. Returns a handle that can be used to remove the function via <code>off</code>.</p> <pre><code>Frame.once(Frame.sim) { Log.print(\"happens during 'sim'\") }\n</code></pre> <p> Frame.before(section: <code>String</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>Connect a function to the specified section (with priority 0) which will be executed before the section.</p> <p>Returns a handle that can be used to remove the function via <code>off</code>.</p> <pre><code>Frame.before(Frame.sim) {|delta| Log.print(\"delta:%(delta)\") }\n</code></pre> <p> Frame.after(section: <code>String</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>Connect a function to the specified section (with priority 0) which will be executed after the section.</p> <p>Returns a handle that can be used to remove the function via <code>off</code>.</p> <pre><code>Frame.after(Frame.sim) {|delta| Log.print(\"delta:%(delta)\") }\n</code></pre> <p> Frame.skip(count_frames: <code>Num</code>, fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>Once off. Queue a function to be called at the beginning of the frame <code>count_frames</code> from now,  before any sections. This is <code>Frame.next</code> but can push actions forward by frame count instead of time.</p> <pre><code>Frame.skip(3) {\n  Log.print(\"three frames from now!\")\n}\n</code></pre> <p> Frame.mark(id: <code>String</code>, display: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Frame.get_marks(frame_index: <code>Num</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Frame.index \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Frame.delta \u00b6 returns <code>Num</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/game/#framesection","title":"FrameSection","text":"<p><code>import \"luxe: game\" for FrameSection</code></p> <p>no docs found</p> <ul> <li>begin</li> <li>init</li> <li>sim</li> <li>visual</li> <li>debug</li> <li>end</li> <li>name(value: <code>Any</code>)</li> </ul> <p> FrameSection.begin \u00b6 returns <code>String</code></p> <p>An enum value for the <code>begin</code> section in the loop. The `begin section is the start of the frame from the game's perspective.</p> <pre><code>Frame.on(Frame.begin) {|delta| ... }\n</code></pre> <p> FrameSection.init \u00b6 returns <code>String</code></p> <p>An enum value for the <code>init</code> section in the loop. The <code>init</code> section is used for initialization tasks that happen before updates, like when a new entity is created, it can be added to a queue and processed in init to set some default values before it arrives in <code>sim</code> or <code>visual</code>.</p> <pre><code>Frame.on(Frame.init) {|delta| ... }\n</code></pre> <p> FrameSection.sim \u00b6 returns <code>String</code></p> <p>An enum value for the <code>sim</code> section in the loop. The <code>sim</code> section is for simulation, also known as <code>update</code>.  In this section you would update game logic and modify things that the <code>visual</code> section would reference.</p> <pre><code>Frame.on(Frame.sim) {|delta| ... }\n</code></pre> <p> FrameSection.visual \u00b6 returns <code>String</code></p> <p>An enum value for the <code>visual</code> section in the loop. The <code>visual</code> section is for rendering, also known as <code>render</code>. Updating visual state from the sim states happens here.</p> <pre><code>Frame.on(Frame.visual) {|delta| ... }\n</code></pre> <p> FrameSection.debug \u00b6 returns <code>String</code></p> <p>An enum value for the <code>debug</code> section in the loop. The <code>debug</code> part of the loop can perform debug related tasks before the end of the frame and rendering is submitted.</p> <pre><code>Frame.on(Frame.debug) {|delta| ... }\n</code></pre> <p> FrameSection.end \u00b6 returns <code>String</code></p> <p>An enum value for the <code>end</code> section in the loop. The <code>end</code> of the loop can perform tasks after rendering and simulation.</p> <pre><code>Frame.on(Frame.end) {|delta| ... }\n</code></pre> <p> FrameSection.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/game/#framewhen","title":"FrameWhen","text":"<p><code>import \"luxe: game\" for FrameWhen</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>before</li> <li>on</li> <li>after</li> <li>name(value: <code>Any</code>)</li> </ul> <p> FrameWhen.unknown \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> FrameWhen.before \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> FrameWhen.on \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> FrameWhen.after \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> FrameWhen.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/game/#ready","title":"Ready","text":"<p><code>import \"luxe: game\" for Ready</code></p> <p>The base class for a luxe game.</p> <ul> <li>ready()</li> <li>ready(message: <code>String</code>)</li> <li>tick(delta: <code>Num</code>)</li> <li>destroy()</li> </ul> <p> Ready.ready() \u00b6 returns <code>None</code></p> <p>Called via <code>super()</code> inside your <code>ready</code> function. Must be called.   </p> <p> Ready.ready(message: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Called via <code>super(message)</code> inside your <code>ready</code> function. Must be called.   </p> <p> Ready.tick(delta: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>A default implementation for tick.   </p> <p> Ready.destroy() \u00b6 returns <code>None</code></p> <p>A default implementation for destroy.   </p>"},{"location":"api/v/2024.12.3/id/","title":"Id","text":""},{"location":"api/v/2024.12.3/id/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/id/#luxe-id-module","title":"<code>luxe: id</code> module","text":"<ul> <li>ID </li> </ul>"},{"location":"api/v/2024.12.3/id/#id","title":"ID","text":"<p><code>import \"luxe: id\" for ID</code></p> <p>IDs are useful in many cases, this API provides them in various forms like UUID or unique short strings.</p> <ul> <li>unique()</li> <li>unique(length: <code>Num</code>)</li> <li>index(index: <code>Num</code>)</li> <li>uuid()</li> <li>uuid(from: <code>String</code>)</li> <li>uuid_validate(uuid: <code>String</code>)</li> <li>uuid_base62()</li> <li>uuid_combine(uuid_a: <code>String</code>, uuid_b: <code>String</code>)</li> </ul> <p> ID.unique() \u00b6 returns <code>String</code></p> <p>Returns a unique short string ID for use. These are useful for default generated names, random urls, etc.</p> <p>Note that these are \"unique enough\" but has higher risk of collision than a UUID. If you want universally unique IDs that's what UUID is for. (Don't make assumptions about the length of the ID, for fixed length use <code>ID.unique(length: Num)</code>).</p> <pre><code>Log.print(ID.unique()) //UuIyH\nLog.print(ID.unique()) //39sjDw\nLog.print(ID.unique()) //28zASZ\n</code></pre> <p> ID.unique(length: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Returns a unique short string ID for use. These are useful for default generated names, random urls, etc.</p> <p>Note that these are \"unique enough\" but has higher risk of collision than a UUID. If you want universally unique IDs that's what UUID is for.</p> <pre><code>Log.print(ID.unique(6)) //Uu2IyH\nLog.print(ID.unique(8)) //39sjDwl4\n</code></pre> <p> ID.index(index: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> ID.uuid() \u00b6 returns <code>String</code></p> <p>Returns a UUID v4 ID. These are unique enough to not worry about collisions (not for cryptography).</p> <pre><code>Log.print(ID.uuid()) //5606ba0f-968a-4ab7-8230-ba46cdb345da\nLog.print(ID.uuid()) //48e3d469-e9fa-4a24-aa22-d653de9af5b2\nLog.print(ID.uuid()) //a4861cc5-c2e4-4656-a3a4-176bc63e5d05\n</code></pre> <p> ID.uuid(from: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Returns a UUID v4 from the given string (treated as bytes). This runs a 128 bit hash (spooky v2) over the string, converting the bits to a uuid string.</p> <pre><code>Log.print(ID.uuid(\"hello\")) //3768826a-d382-e6ca-5c94-1ed1c71ae043\nLog.print(ID.uuid(\"luxe\")) //7281a4a8-abc4-dc50-52ae-7f59626f242a\n</code></pre> <p> ID.uuid_validate(uuid: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Returns true if the given UUID is valid (using regex matching).</p> <pre><code>Log.print(ID.validate_uuid(ID.uuid())) //true\nLog.print(ID.validate_uuid(\"hello\"))   //false\n</code></pre> <p> ID.uuid_base62() \u00b6 returns <code>String</code></p> <p>Returns a UUID represented as a base62 string.</p> <pre><code>Log.print(ID.uuid_base62()) //AXiFxIVixJM-EDCrnEHVkWJ\n</code></pre> <p> ID.uuid_combine(uuid_a: <code>String</code>, uuid_b: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Returns a new UUID by combining the two UUIDs given.</p> <pre><code>Log.print(ID.uuid_combine(ID.uuid(), ID.uuid())) //5f558462-7525-48c0-812d-a65df074ce42\n</code></pre>"},{"location":"api/v/2024.12.3/input/","title":"Input","text":""},{"location":"api/v/2024.12.3/input/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/input/#luxe-input-module","title":"<code>luxe: input</code> module","text":"<ul> <li>GamepadEvent </li> <li>InputBind </li> <li>InputCh </li> <li>InputEvent </li> <li>InputNode </li> <li>InputState </li> <li>InputType </li> <li>Input </li> <li>Key </li> <li>Mod </li> <li>ModState </li> <li>MouseButton </li> <li>Scan </li> <li>SystemCursor </li> <li>TextEvent </li> </ul>"},{"location":"api/v/2024.12.3/input/#gamepadevent","title":"GamepadEvent","text":"<p><code>import \"luxe: input\" for GamepadEvent</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>device_added</li> <li>device_removed</li> <li>device_remapped</li> <li>name(value: <code>Any</code>)</li> </ul> <p> GamepadEvent.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> GamepadEvent.device_added \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> GamepadEvent.device_removed \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> GamepadEvent.device_remapped \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> GamepadEvent.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/input/#inputbind","title":"InputBind","text":"<p><code>import \"luxe: input\" for InputBind</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>key_state</li> <li>mouse_state</li> <li>mouse_axis</li> <li>touch_state</li> <li>touch_axis</li> <li>gamepad_state</li> <li>gamepad_axis</li> <li>name(value: <code>Any</code>)</li> </ul> <p> InputBind.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputBind.key_state \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputBind.mouse_state \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputBind.mouse_axis \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputBind.touch_state \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputBind.touch_axis \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputBind.gamepad_state \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputBind.gamepad_axis \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputBind.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/input/#inputch","title":"InputCh","text":"<p><code>import \"luxe: input\" for InputCh</code></p> <p>no docs found</p> <ul> <li>none</li> <li>c01</li> <li>c02</li> <li>c03</li> <li>c04</li> <li>c05</li> <li>c06</li> <li>c07</li> <li>c08</li> <li>c09</li> <li>c10</li> <li>c11</li> <li>c12</li> <li>c13</li> <li>c14</li> <li>c15</li> <li>c16</li> <li>all</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> InputCh.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c01 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c02 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c03 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c04 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c05 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c06 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c07 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c08 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c09 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c10 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c11 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c12 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c13 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c14 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c15 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c16 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.all \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/input/#inputevent","title":"InputEvent","text":"<p><code>import \"luxe: input\" for InputEvent</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>type</li> <li>key</li> <li>scan</li> <li>repeat</li> <li>mod</li> <li>x</li> <li>y</li> <li>dx</li> <li>dy</li> <li>x_rel</li> <li>y_rel</li> <li>value</li> <li>value1</li> <li>value2</li> <li>state</li> <li>touch_id</li> <li>axis</li> <li>button</li> <li>gamepad</li> </ul> <p> InputEvent.new() \u00b6 returns <code>InputEvent</code></p> <p>no docs found   </p> <p> InputEvent.type \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.key \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.scan \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.repeat \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.mod \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.x \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.y \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.dx \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.dy \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.x_rel \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.y_rel \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.value \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.value1 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.value2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.state \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.touch_id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.axis \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.button \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.gamepad \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/input/#inputnode","title":"InputNode","text":"<p><code>import \"luxe: input\" for InputNode</code></p> <p>no docs found</p> <ul> <li>node</li> </ul> <p> InputNode.node \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/input/#inputstate","title":"InputState","text":"<p><code>import \"luxe: input\" for InputState</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>began</li> <li>active</li> <li>ended</li> <li>name(value: <code>Any</code>)</li> </ul> <p> InputState.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputState.began \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputState.active \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputState.ended \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputState.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/input/#inputtype","title":"InputType","text":"<p><code>import \"luxe: input\" for InputType</code></p> <p>no docs found</p> <ul> <li>none</li> <li>key_down</li> <li>key_up</li> <li>text</li> <li>mouse_down</li> <li>mouse_up</li> <li>mouse_move</li> <li>mouse_wheel</li> <li>touch_down</li> <li>touch_up</li> <li>touch_move</li> <li>gamepad_axis</li> <li>gamepad_down</li> <li>gamepad_up</li> <li>gamepad_device</li> <li>name(type: <code>Any</code>)</li> </ul> <p> InputType.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.key_down \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.key_up \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.text \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.mouse_down \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.mouse_up \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.mouse_move \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.mouse_wheel \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.touch_down \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.touch_up \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.touch_move \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.gamepad_axis \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.gamepad_down \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.gamepad_up \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.gamepad_device \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.name(type: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/input/#input","title":"Input","text":"<p><code>import \"luxe: input\" for Input</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>tick_pre()</li> <li>tick()</li> <li>tick_post()</li> <li>graph</li> <li>key_down(key: <code>Any</code>, scan: <code>Any</code>, repeat: <code>Any</code>, mod: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>)</li> <li>key_up(key: <code>Any</code>, scan: <code>Any</code>, mod: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>)</li> <li>text(text: <code>Any</code>, start: <code>Any</code>, length: <code>Any</code>, type: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>)</li> <li>mouse_down(x: <code>Any</code>, y: <code>Any</code>, button: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>)</li> <li>mouse_up(x: <code>Any</code>, y: <code>Any</code>, button: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>)</li> <li>mouse_move(x: <code>Any</code>, y: <code>Any</code>, x_rel: <code>Any</code>, y_rel: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>)</li> <li>mouse_wheel(x: <code>Any</code>, y: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>)</li> <li>touch_down(x: <code>Any</code>, y: <code>Any</code>, touch_id: <code>Any</code>, timestamp: <code>Any</code>)</li> <li>touch_up(x: <code>Any</code>, y: <code>Any</code>, touch_id: <code>Any</code>, timestamp: <code>Any</code>)</li> <li>touch_move(x: <code>Any</code>, y: <code>Any</code>, dx: <code>Any</code>, dy: <code>Any</code>, touch_id: <code>Any</code>, timestamp: <code>Any</code>)</li> <li>gamepad_axis(gamepad: <code>Any</code>, axis: <code>Any</code>, value: <code>Any</code>, timestamp: <code>Any</code>)</li> <li>gamepad_down(gamepad: <code>Any</code>, button: <code>Any</code>, value: <code>Any</code>, timestamp: <code>Any</code>)</li> <li>gamepad_up(gamepad: <code>Any</code>, button: <code>Any</code>, value: <code>Any</code>, timestamp: <code>Any</code>)</li> <li>gamepad_device(gamepad: <code>Any</code>, name: <code>Any</code>, type: <code>Any</code>, timestamp: <code>Any</code>)</li> <li>deadzone(x: <code>Any</code>, y: <code>Any</code>, zone: <code>Any</code>)</li> <li>define_event(bind_type: <code>Any</code>, name: <code>Any</code>)</li> <li>define_event(bind_type: <code>Any</code>, name: <code>Any</code>, args: <code>Any</code>)</li> <li>undefine_event(bind_type: <code>Any</code>, name: <code>Any</code>)</li> <li>undefine_event(name: <code>Any</code>)</li> <li>listen_for(type: <code>Any</code>, at_node: <code>Any</code>, fn: <code>Any</code>)</li> <li>listen_for(type: <code>Any</code>, fn: <code>Any</code>)</li> <li>unlisten(type: <code>Any</code>, fn: <code>Any</code>)</li> <li>unlisten(type: <code>Any</code>, at_node: <code>Any</code>, fn: <code>Any</code>)</li> <li>listen_for_event(name: <code>Any</code>, at_node: <code>Any</code>, fn: <code>Any</code>)</li> <li>listen_for_event(name: <code>Any</code>, fn: <code>Any</code>)</li> <li>unlisten_for_event(name: <code>Any</code>, fn: <code>Any</code>)</li> <li>unlisten_for_event(name: <code>Any</code>, at_node: <code>Any</code>, fn: <code>Any</code>)</li> <li>event_active(name: <code>Any</code>, at_node: <code>Any</code>)</li> <li>event_began(name: <code>Any</code>, at_node: <code>Any</code>)</li> <li>event_ended(name: <code>Any</code>, at_node: <code>Any</code>)</li> <li>event_active(name: <code>Any</code>)</li> <li>event_began(name: <code>Any</code>)</li> <li>event_ended(name: <code>Any</code>)</li> <li>key_state_down(key: <code>Any</code>, at_node: <code>Any</code>)</li> <li>key_state_pressed(key: <code>Any</code>, at_node: <code>Any</code>)</li> <li>key_state_released(key: <code>Any</code>, at_node: <code>Any</code>)</li> <li>scan_state_down(scan: <code>Any</code>, at_node: <code>Any</code>)</li> <li>scan_state_pressed(scan: <code>Any</code>, at_node: <code>Any</code>)</li> <li>scan_state_released(scan: <code>Any</code>, at_node: <code>Any</code>)</li> <li>mouse_state_down(button: <code>Any</code>, at_node: <code>Any</code>)</li> <li>mouse_state_pressed(button: <code>Any</code>, at_node: <code>Any</code>)</li> <li>mouse_state_released(button: <code>Any</code>, at_node: <code>Any</code>)</li> <li>mouse_state_released(button: <code>Any</code>, at_node: <code>Any</code>, channels: <code>Any</code>)</li> <li>gamepad_state_down(gamepad: <code>Any</code>, button: <code>Any</code>, at_node: <code>Any</code>)</li> <li>gamepad_state_pressed(gamepad: <code>Any</code>, button: <code>Any</code>, at_node: <code>Any</code>)</li> <li>gamepad_state_released(gamepad: <code>Any</code>, button: <code>Any</code>, at_node: <code>Any</code>)</li> <li>gamepad_state_axis(gamepad: <code>Any</code>, axis: <code>Any</code>, at_node: <code>Any</code>)</li> <li>key_state_down(key: <code>Any</code>)</li> <li>key_state_pressed(key: <code>Any</code>)</li> <li>key_state_released(key: <code>Any</code>)</li> <li>scan_state_down(scan: <code>Any</code>)</li> <li>scan_state_pressed(scan: <code>Any</code>)</li> <li>scan_state_released(scan: <code>Any</code>)</li> <li>mouse_state_down(button: <code>Any</code>)</li> <li>mouse_state_released(button: <code>Any</code>)</li> <li>mouse_state_pressed(button: <code>Any</code>)</li> <li>mouse_state_wheel()</li> <li>mouse_x()</li> <li>mouse_y()</li> <li>mouse_x_rel()</li> <li>mouse_y_rel()</li> <li>set_mouse_cursor(image: <code>Image</code>, cursor_x: <code>Num</code>, cursor_y: <code>Num</code>)</li> <li>set_mouse_system_cursor(cursor: <code>SystemCursor</code>)</li> <li>set_mouse_pos(x: <code>Num</code>, y: <code>Num</code>)</li> <li>set_mouse_visible(state: <code>Bool</code>)</li> <li>set_mouse_capture(state: <code>Bool</code>)</li> <li>get_mouse_capture()</li> <li>gamepad_state_down(gamepad: <code>Any</code>, button: <code>Any</code>)</li> <li>gamepad_state_pressed(gamepad: <code>Any</code>, button: <code>Any</code>)</li> <li>gamepad_state_released(gamepad: <code>Any</code>, button: <code>Any</code>)</li> <li>gamepad_state_axis(gamepad: <code>Any</code>, axis: <code>Any</code>)</li> <li>define_node_front(id: <code>Any</code>, type: <code>Any</code>, channels: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>)</li> <li>define_node_back(id: <code>Any</code>, type: <code>Any</code>, channels: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>)</li> <li>define_node_after(other: <code>Any</code>, id: <code>Any</code>, type: <code>Any</code>, channels: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>)</li> <li>define_node_before(other: <code>Any</code>, id: <code>Any</code>, type: <code>Any</code>, channels: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>)</li> <li>node_defined(node: <code>Any</code>)</li> <li>undefine_node(id: <code>Any</code>)</li> <li>channels_active(at_node: <code>Any</code>, channels: <code>Any</code>)</li> <li>channels_active(at_node: <code>Any</code>)</li> <li>channels_state(at_node: <code>Any</code>)</li> <li>channels_at(at_node: <code>Any</code>)</li> <li>channels_plus_at(at_node: <code>Any</code>)</li> <li>channels_minus_at(at_node: <code>Any</code>)</li> <li>channels_set(at_node: <code>Any</code>, channels: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>)</li> <li>channels_add(at_node: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>)</li> <li>channels_remove(at_node: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>)</li> <li>channels_add_plus(at_node: <code>Any</code>, plus: <code>Any</code>)</li> <li>channels_add_minus(at_node: <code>Any</code>, minus: <code>Any</code>)</li> <li>channels_remove_plus(at_node: <code>Any</code>, plus: <code>Any</code>)</li> <li>channels_remove_minus(at_node: <code>Any</code>, minus: <code>Any</code>)</li> <li>channels_set(at_node: <code>Any</code>, channels: <code>Any</code>)</li> <li>channels_set_plus(at_node: <code>Any</code>, plus: <code>Any</code>)</li> <li>channels_set_minus(at_node: <code>Any</code>, minus: <code>Any</code>)</li> <li>set_events(ev: <code>Any</code>)</li> </ul> <p> Input.new() \u00b6 returns <code>Input</code></p> <p>no docs found   </p> <p> Input.tick_pre() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.tick() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.tick_post() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.graph \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.key_down(key: <code>Any</code>, scan: <code>Any</code>, repeat: <code>Any</code>, mod: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.key_up(key: <code>Any</code>, scan: <code>Any</code>, mod: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.text(text: <code>Any</code>, start: <code>Any</code>, length: <code>Any</code>, type: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_down(x: <code>Any</code>, y: <code>Any</code>, button: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_up(x: <code>Any</code>, y: <code>Any</code>, button: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_move(x: <code>Any</code>, y: <code>Any</code>, x_rel: <code>Any</code>, y_rel: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_wheel(x: <code>Any</code>, y: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.touch_down(x: <code>Any</code>, y: <code>Any</code>, touch_id: <code>Any</code>, timestamp: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.touch_up(x: <code>Any</code>, y: <code>Any</code>, touch_id: <code>Any</code>, timestamp: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.touch_move(x: <code>Any</code>, y: <code>Any</code>, dx: <code>Any</code>, dy: <code>Any</code>, touch_id: <code>Any</code>, timestamp: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.gamepad_axis(gamepad: <code>Any</code>, axis: <code>Any</code>, value: <code>Any</code>, timestamp: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.gamepad_down(gamepad: <code>Any</code>, button: <code>Any</code>, value: <code>Any</code>, timestamp: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.gamepad_up(gamepad: <code>Any</code>, button: <code>Any</code>, value: <code>Any</code>, timestamp: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.gamepad_device(gamepad: <code>Any</code>, name: <code>Any</code>, type: <code>Any</code>, timestamp: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.deadzone(x: <code>Any</code>, y: <code>Any</code>, zone: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.define_event(bind_type: <code>Any</code>, name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.define_event(bind_type: <code>Any</code>, name: <code>Any</code>, args: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.undefine_event(bind_type: <code>Any</code>, name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.undefine_event(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.listen_for(type: <code>Any</code>, at_node: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.listen_for(type: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.unlisten(type: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.unlisten(type: <code>Any</code>, at_node: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.listen_for_event(name: <code>Any</code>, at_node: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.listen_for_event(name: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.unlisten_for_event(name: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.unlisten_for_event(name: <code>Any</code>, at_node: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.event_active(name: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.event_began(name: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.event_ended(name: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.event_active(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.event_began(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.event_ended(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.key_state_down(key: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.key_state_pressed(key: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.key_state_released(key: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.scan_state_down(scan: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.scan_state_pressed(scan: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.scan_state_released(scan: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_state_down(button: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_state_pressed(button: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_state_released(button: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_state_released(button: <code>Any</code>, at_node: <code>Any</code>, channels: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.gamepad_state_down(gamepad: <code>Any</code>, button: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.gamepad_state_pressed(gamepad: <code>Any</code>, button: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.gamepad_state_released(gamepad: <code>Any</code>, button: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.gamepad_state_axis(gamepad: <code>Any</code>, axis: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.key_state_down(key: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.key_state_pressed(key: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.key_state_released(key: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.scan_state_down(scan: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.scan_state_pressed(scan: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.scan_state_released(scan: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_state_down(button: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_state_released(button: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_state_pressed(button: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_state_wheel() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_x() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_y() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_x_rel() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_y_rel() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.set_mouse_cursor(image: <code>Image</code>, cursor_x: <code>Num</code>, cursor_y: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.set_mouse_system_cursor(cursor: <code>SystemCursor</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.set_mouse_pos(x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.set_mouse_visible(state: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.set_mouse_capture(state: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.get_mouse_capture() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.gamepad_state_down(gamepad: <code>Any</code>, button: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.gamepad_state_pressed(gamepad: <code>Any</code>, button: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.gamepad_state_released(gamepad: <code>Any</code>, button: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.gamepad_state_axis(gamepad: <code>Any</code>, axis: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.define_node_front(id: <code>Any</code>, type: <code>Any</code>, channels: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.define_node_back(id: <code>Any</code>, type: <code>Any</code>, channels: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.define_node_after(other: <code>Any</code>, id: <code>Any</code>, type: <code>Any</code>, channels: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.define_node_before(other: <code>Any</code>, id: <code>Any</code>, type: <code>Any</code>, channels: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.node_defined(node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.undefine_node(id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_active(at_node: <code>Any</code>, channels: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_active(at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_state(at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_at(at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_plus_at(at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_minus_at(at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_set(at_node: <code>Any</code>, channels: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_add(at_node: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_remove(at_node: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_add_plus(at_node: <code>Any</code>, plus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_add_minus(at_node: <code>Any</code>, minus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_remove_plus(at_node: <code>Any</code>, plus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_remove_minus(at_node: <code>Any</code>, minus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_set(at_node: <code>Any</code>, channels: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_set_plus(at_node: <code>Any</code>, plus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_set_minus(at_node: <code>Any</code>, minus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.set_events(ev: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/input/#key","title":"Key","text":"<p><code>import \"luxe: input\" for Key</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>enter</li> <li>escape</li> <li>backspace</li> <li>tab</li> <li>space</li> <li>exclaim</li> <li>quotedbl</li> <li>hash</li> <li>percent</li> <li>dollar</li> <li>ampersand</li> <li>quote</li> <li>leftparen</li> <li>rightparen</li> <li>asterisk</li> <li>plus</li> <li>comma</li> <li>minus</li> <li>period</li> <li>slash</li> <li>key_0</li> <li>key_1</li> <li>key_2</li> <li>key_3</li> <li>key_4</li> <li>key_5</li> <li>key_6</li> <li>key_7</li> <li>key_8</li> <li>key_9</li> <li>colon</li> <li>semicolon</li> <li>less</li> <li>equals</li> <li>greater</li> <li>question</li> <li>at</li> <li>leftbracket</li> <li>backslash</li> <li>rightbracket</li> <li>caret</li> <li>underscore</li> <li>backquote</li> <li>key_a</li> <li>key_b</li> <li>key_c</li> <li>key_d</li> <li>key_e</li> <li>key_f</li> <li>key_g</li> <li>key_h</li> <li>key_i</li> <li>key_j</li> <li>key_k</li> <li>key_l</li> <li>key_m</li> <li>key_n</li> <li>key_o</li> <li>key_p</li> <li>key_q</li> <li>key_r</li> <li>key_s</li> <li>key_t</li> <li>key_u</li> <li>key_v</li> <li>key_w</li> <li>key_x</li> <li>key_y</li> <li>key_z</li> <li>capslock</li> <li>f1</li> <li>f2</li> <li>f3</li> <li>f4</li> <li>f5</li> <li>f6</li> <li>f7</li> <li>f8</li> <li>f9</li> <li>f10</li> <li>f11</li> <li>f12</li> <li>printscreen</li> <li>scrolllock</li> <li>pause</li> <li>insert</li> <li>home</li> <li>pageup</li> <li>delete</li> <li>end</li> <li>pagedown</li> <li>right</li> <li>left</li> <li>down</li> <li>up</li> <li>numlockclear</li> <li>kp_divide</li> <li>kp_multiply</li> <li>kp_minus</li> <li>kp_plus</li> <li>kp_enter</li> <li>kp_1</li> <li>kp_2</li> <li>kp_3</li> <li>kp_4</li> <li>kp_5</li> <li>kp_6</li> <li>kp_7</li> <li>kp_8</li> <li>kp_9</li> <li>kp_0</li> <li>kp_period</li> <li>application</li> <li>power</li> <li>kp_equals</li> <li>f13</li> <li>f14</li> <li>f15</li> <li>f16</li> <li>f17</li> <li>f18</li> <li>f19</li> <li>f20</li> <li>f21</li> <li>f22</li> <li>f23</li> <li>f24</li> <li>execute</li> <li>help</li> <li>menu</li> <li>select</li> <li>stop</li> <li>again</li> <li>undo</li> <li>cut</li> <li>copy</li> <li>paste</li> <li>find</li> <li>mute</li> <li>volumeup</li> <li>volumedown</li> <li>kp_comma</li> <li>kp_equalsas400</li> <li>alterase</li> <li>sysreq</li> <li>cancel</li> <li>clear</li> <li>prior</li> <li>return2</li> <li>separator</li> <li>out</li> <li>oper</li> <li>clearagain</li> <li>crsel</li> <li>exsel</li> <li>kp_00</li> <li>kp_000</li> <li>thousandsseparator</li> <li>decimalseparator</li> <li>currencyunit</li> <li>currencysubunit</li> <li>kp_leftparen</li> <li>kp_rightparen</li> <li>kp_leftbrace</li> <li>kp_rightbrace</li> <li>kp_tab</li> <li>kp_backspace</li> <li>kp_a</li> <li>kp_b</li> <li>kp_c</li> <li>kp_d</li> <li>kp_e</li> <li>kp_f</li> <li>kp_xor</li> <li>kp_power</li> <li>kp_percent</li> <li>kp_less</li> <li>kp_greater</li> <li>kp_ampersand</li> <li>kp_dblampersand</li> <li>kp_verticalbar</li> <li>kp_dblverticalbar</li> <li>kp_colon</li> <li>kp_hash</li> <li>kp_space</li> <li>kp_at</li> <li>kp_exclam</li> <li>kp_memstore</li> <li>kp_memrecall</li> <li>kp_memclear</li> <li>kp_memadd</li> <li>kp_memsubtract</li> <li>kp_memmultiply</li> <li>kp_memdivide</li> <li>kp_plusminus</li> <li>kp_clear</li> <li>kp_clearentry</li> <li>kp_binary</li> <li>kp_octal</li> <li>kp_decimal</li> <li>kp_hexadecimal</li> <li>lctrl</li> <li>lshift</li> <li>lalt</li> <li>lmeta</li> <li>rctrl</li> <li>rshift</li> <li>ralt</li> <li>rmeta</li> <li>mode</li> <li>audionext</li> <li>audioprev</li> <li>audiostop</li> <li>audioplay</li> <li>audiomute</li> <li>mediaselect</li> <li>www</li> <li>mail</li> <li>calculator</li> <li>computer</li> <li>ac_search</li> <li>ac_home</li> <li>ac_back</li> <li>ac_forward</li> <li>ac_stop</li> <li>ac_refresh</li> <li>ac_bookmarks</li> <li>brightnessdown</li> <li>brightnessup</li> <li>displayswitch</li> <li>kbdillumtoggle</li> <li>kbdillumdown</li> <li>kbdillumup</li> <li>eject</li> <li>sleep</li> <li>from_string(value: <code>Any</code>)</li> <li>name(value: <code>Any</code>)</li> <li>display_name(value: <code>Any</code>)</li> </ul> <p> Key.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.enter \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.escape \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.backspace \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.tab \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.space \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.exclaim \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.quotedbl \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.hash \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.percent \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.dollar \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.ampersand \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.quote \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.leftparen \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.rightparen \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.asterisk \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.plus \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.comma \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.minus \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.period \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.slash \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_0 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_1 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_5 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_6 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_7 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_8 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_9 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.colon \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.semicolon \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.less \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.equals \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.greater \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.question \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.at \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.leftbracket \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.backslash \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.rightbracket \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.caret \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.underscore \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.backquote \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_a \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_b \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_c \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_d \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_e \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_f \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_g \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_h \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_i \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_j \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_k \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_l \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_m \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_n \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_o \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_p \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_q \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_r \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_s \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_t \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_u \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_v \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_w \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_x \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_y \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_z \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.capslock \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f1 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f5 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f6 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f7 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f8 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f9 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f10 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f11 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f12 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.printscreen \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.scrolllock \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.pause \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.insert \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.home \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.pageup \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.delete \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.end \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.pagedown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.right \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.left \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.down \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.up \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.numlockclear \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_divide \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_multiply \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_minus \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_plus \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_enter \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_1 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_5 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_6 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_7 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_8 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_9 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_0 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_period \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.application \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.power \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_equals \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f13 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f14 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f15 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f16 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f17 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f18 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f19 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f20 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f21 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f22 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f23 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f24 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.execute \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.help \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.menu \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.select \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.stop \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.again \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.undo \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.cut \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.copy \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.paste \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.find \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.mute \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.volumeup \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.volumedown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_comma \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_equalsas400 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.alterase \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.sysreq \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.cancel \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.clear \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.prior \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.return2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.separator \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.out \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.oper \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.clearagain \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.crsel \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.exsel \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_00 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_000 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.thousandsseparator \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.decimalseparator \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.currencyunit \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.currencysubunit \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_leftparen \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_rightparen \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_leftbrace \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_rightbrace \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_tab \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_backspace \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_a \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_b \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_c \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_d \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_e \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_f \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_xor \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_power \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_percent \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_less \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_greater \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_ampersand \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_dblampersand \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_verticalbar \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_dblverticalbar \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_colon \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_hash \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_space \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_at \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_exclam \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_memstore \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_memrecall \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_memclear \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_memadd \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_memsubtract \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_memmultiply \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_memdivide \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_plusminus \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_clear \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_clearentry \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_binary \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_octal \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_decimal \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_hexadecimal \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.lctrl \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.lshift \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.lalt \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.lmeta \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.rctrl \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.rshift \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.ralt \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.rmeta \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.mode \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.audionext \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.audioprev \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.audiostop \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.audioplay \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.audiomute \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.mediaselect \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.www \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.mail \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.calculator \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.computer \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.ac_search \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.ac_home \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.ac_back \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.ac_forward \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.ac_stop \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.ac_refresh \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.ac_bookmarks \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.brightnessdown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.brightnessup \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.displayswitch \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kbdillumtoggle \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kbdillumdown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kbdillumup \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.eject \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.sleep \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.display_name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/input/#mod","title":"Mod","text":"<p><code>import \"luxe: input\" for Mod</code></p> <p>no docs found</p> <ul> <li>none</li> <li>lshift</li> <li>rshift</li> <li>lctrl</li> <li>rctrl</li> <li>lalt</li> <li>ralt</li> <li>lmeta</li> <li>rmeta</li> <li>num</li> <li>caps</li> <li>mode</li> <li>ctrl</li> <li>shift</li> <li>alt</li> <li>meta</li> </ul> <p> Mod.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.lshift \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.rshift \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.lctrl \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.rctrl \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.lalt \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.ralt \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.lmeta \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.rmeta \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.num \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.caps \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.mode \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.ctrl \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.shift \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.alt \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.meta \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/input/#modstate","title":"ModState","text":"<p><code>import \"luxe: input\" for ModState</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>new(value: <code>Num</code>)</li> <li>value=(v : Any)</li> <li>value</li> <li>none</li> <li>lshift</li> <li>rshift</li> <li>lctrl</li> <li>rctrl</li> <li>lalt</li> <li>ralt</li> <li>lmeta</li> <li>rmeta</li> <li>num</li> <li>caps</li> <li>mode</li> <li>ctrl</li> <li>shift</li> <li>alt</li> <li>meta</li> </ul> <p> ModState.new() \u00b6 returns <code>ModState</code></p> <p>no docs found   </p> <p> ModState.new(value: <code>Num</code>) \u00b6 returns <code>ModState</code></p> <p>no docs found   </p> <p> ModState.value=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.value \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.lshift \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.rshift \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.lctrl \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.rctrl \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.lalt \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.ralt \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.lmeta \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.rmeta \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.num \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.caps \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.mode \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.ctrl \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.shift \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.alt \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.meta \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/input/#mousebutton","title":"MouseButton","text":"<p><code>import \"luxe: input\" for MouseButton</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>left</li> <li>middle</li> <li>right</li> <li>four</li> <li>five</li> <li>six</li> <li>seven</li> <li>eight</li> <li>name(value: <code>Any</code>)</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> MouseButton.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MouseButton.left \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MouseButton.middle \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MouseButton.right \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MouseButton.four \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MouseButton.five \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MouseButton.six \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MouseButton.seven \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MouseButton.eight \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MouseButton.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MouseButton.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/input/#scan","title":"Scan","text":"<p><code>import \"luxe: input\" for Scan</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>scan_a</li> <li>scan_b</li> <li>scan_c</li> <li>scan_d</li> <li>scan_e</li> <li>scan_f</li> <li>scan_g</li> <li>scan_h</li> <li>scan_i</li> <li>scan_j</li> <li>scan_k</li> <li>scan_l</li> <li>scan_m</li> <li>scan_n</li> <li>scan_o</li> <li>scan_p</li> <li>scan_q</li> <li>scan_r</li> <li>scan_s</li> <li>scan_t</li> <li>scan_u</li> <li>scan_v</li> <li>scan_w</li> <li>scan_x</li> <li>scan_y</li> <li>scan_z</li> <li>scan_1</li> <li>scan_2</li> <li>scan_3</li> <li>scan_4</li> <li>scan_5</li> <li>scan_6</li> <li>scan_7</li> <li>scan_8</li> <li>scan_9</li> <li>scan_0</li> <li>enter</li> <li>escape</li> <li>backspace</li> <li>tab</li> <li>space</li> <li>minus</li> <li>equals</li> <li>leftbracket</li> <li>rightbracket</li> <li>backslash</li> <li>nonushash</li> <li>semicolon</li> <li>apostrophe</li> <li>grave</li> <li>comma</li> <li>period</li> <li>slash</li> <li>capslock</li> <li>f1</li> <li>f2</li> <li>f3</li> <li>f4</li> <li>f5</li> <li>f6</li> <li>f7</li> <li>f8</li> <li>f9</li> <li>f10</li> <li>f11</li> <li>f12</li> <li>printscreen</li> <li>scrolllock</li> <li>pause</li> <li>insert</li> <li>home</li> <li>pageup</li> <li>delete</li> <li>end</li> <li>pagedown</li> <li>right</li> <li>left</li> <li>down</li> <li>up</li> <li>numlockclear</li> <li>kp_divide</li> <li>kp_multiply</li> <li>kp_minus</li> <li>kp_plus</li> <li>kp_enter</li> <li>kp_1</li> <li>kp_2</li> <li>kp_3</li> <li>kp_4</li> <li>kp_5</li> <li>kp_6</li> <li>kp_7</li> <li>kp_8</li> <li>kp_9</li> <li>kp_0</li> <li>kp_period</li> <li>nonusbackslash</li> <li>application</li> <li>power</li> <li>kp_equals</li> <li>f13</li> <li>f14</li> <li>f15</li> <li>f16</li> <li>f17</li> <li>f18</li> <li>f19</li> <li>f20</li> <li>f21</li> <li>f22</li> <li>f23</li> <li>f24</li> <li>execute</li> <li>help</li> <li>menu</li> <li>select</li> <li>stop</li> <li>again</li> <li>undo</li> <li>cut</li> <li>copy</li> <li>paste</li> <li>find</li> <li>mute</li> <li>volumeup</li> <li>volumedown</li> <li>kp_comma</li> <li>kp_equalsas400</li> <li>international1</li> <li>international2</li> <li>international3</li> <li>international4</li> <li>international5</li> <li>international6</li> <li>international7</li> <li>international8</li> <li>international9</li> <li>lang1</li> <li>lang2</li> <li>lang3</li> <li>lang4</li> <li>lang5</li> <li>lang6</li> <li>lang7</li> <li>lang8</li> <li>lang9</li> <li>alterase</li> <li>sysreq</li> <li>cancel</li> <li>clear</li> <li>prior</li> <li>return2</li> <li>separator</li> <li>out</li> <li>oper</li> <li>clearagain</li> <li>crsel</li> <li>exsel</li> <li>kp_00</li> <li>kp_000</li> <li>thousandsseparator</li> <li>decimalseparator</li> <li>currencyunit</li> <li>currencysubunit</li> <li>kp_leftparen</li> <li>kp_rightparen</li> <li>kp_leftbrace</li> <li>kp_rightbrace</li> <li>kp_tab</li> <li>kp_backspace</li> <li>kp_a</li> <li>kp_b</li> <li>kp_c</li> <li>kp_d</li> <li>kp_e</li> <li>kp_f</li> <li>kp_xor</li> <li>kp_power</li> <li>kp_percent</li> <li>kp_less</li> <li>kp_greater</li> <li>kp_ampersand</li> <li>kp_dblampersand</li> <li>kp_verticalbar</li> <li>kp_dblverticalbar</li> <li>kp_colon</li> <li>kp_hash</li> <li>kp_space</li> <li>kp_at</li> <li>kp_exclam</li> <li>kp_memstore</li> <li>kp_memrecall</li> <li>kp_memclear</li> <li>kp_memadd</li> <li>kp_memsubtract</li> <li>kp_memmultiply</li> <li>kp_memdivide</li> <li>kp_plusminus</li> <li>kp_clear</li> <li>kp_clearentry</li> <li>kp_binary</li> <li>kp_octal</li> <li>kp_decimal</li> <li>kp_hexadecimal</li> <li>lctrl</li> <li>lshift</li> <li>lalt</li> <li>lmeta</li> <li>rctrl</li> <li>rshift</li> <li>ralt</li> <li>rmeta</li> <li>mode</li> <li>audionext</li> <li>audioprev</li> <li>audiostop</li> <li>audioplay</li> <li>audiomute</li> <li>mediaselect</li> <li>www</li> <li>mail</li> <li>calculator</li> <li>computer</li> <li>ac_search</li> <li>ac_home</li> <li>ac_back</li> <li>ac_forward</li> <li>ac_stop</li> <li>ac_refresh</li> <li>ac_bookmarks</li> <li>brightnessdown</li> <li>brightnessup</li> <li>displayswitch</li> <li>kbdillumtoggle</li> <li>kbdillumdown</li> <li>kbdillumup</li> <li>eject</li> <li>sleep</li> <li>app1</li> <li>app2</li> <li>MAX</li> </ul> <p> Scan.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_a \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_b \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_c \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_d \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_e \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_f \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_g \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_h \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_i \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_j \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_k \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_l \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_m \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_n \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_o \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_p \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_q \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_r \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_s \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_t \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_u \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_v \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_w \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_x \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_y \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_z \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_1 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_5 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_6 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_7 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_8 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_9 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_0 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.enter \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.escape \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.backspace \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.tab \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.space \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.minus \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.equals \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.leftbracket \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.rightbracket \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.backslash \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.nonushash \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.semicolon \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.apostrophe \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.grave \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.comma \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.period \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.slash \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.capslock \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f1 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f5 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f6 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f7 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f8 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f9 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f10 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f11 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f12 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.printscreen \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scrolllock \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.pause \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.insert \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.home \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.pageup \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.delete \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.end \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.pagedown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.right \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.left \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.down \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.up \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.numlockclear \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_divide \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_multiply \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_minus \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_plus \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_enter \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_1 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_5 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_6 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_7 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_8 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_9 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_0 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_period \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.nonusbackslash \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.application \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.power \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_equals \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f13 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f14 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f15 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f16 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f17 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f18 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f19 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f20 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f21 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f22 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f23 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f24 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.execute \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.help \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.menu \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.select \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.stop \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.again \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.undo \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.cut \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.copy \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.paste \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.find \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.mute \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.volumeup \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.volumedown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_comma \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_equalsas400 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.international1 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.international2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.international3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.international4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.international5 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.international6 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.international7 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.international8 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.international9 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lang1 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lang2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lang3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lang4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lang5 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lang6 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lang7 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lang8 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lang9 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.alterase \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.sysreq \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.cancel \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.clear \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.prior \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.return2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.separator \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.out \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.oper \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.clearagain \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.crsel \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.exsel \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_00 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_000 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.thousandsseparator \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.decimalseparator \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.currencyunit \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.currencysubunit \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_leftparen \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_rightparen \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_leftbrace \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_rightbrace \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_tab \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_backspace \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_a \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_b \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_c \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_d \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_e \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_f \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_xor \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_power \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_percent \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_less \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_greater \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_ampersand \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_dblampersand \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_verticalbar \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_dblverticalbar \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_colon \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_hash \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_space \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_at \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_exclam \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_memstore \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_memrecall \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_memclear \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_memadd \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_memsubtract \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_memmultiply \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_memdivide \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_plusminus \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_clear \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_clearentry \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_binary \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_octal \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_decimal \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_hexadecimal \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lctrl \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lshift \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lalt \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lmeta \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.rctrl \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.rshift \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.ralt \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.rmeta \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.mode \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.audionext \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.audioprev \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.audiostop \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.audioplay \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.audiomute \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.mediaselect \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.www \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.mail \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.calculator \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.computer \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.ac_search \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.ac_home \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.ac_back \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.ac_forward \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.ac_stop \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.ac_refresh \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.ac_bookmarks \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.brightnessdown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.brightnessup \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.displayswitch \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kbdillumtoggle \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kbdillumdown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kbdillumup \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.eject \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.sleep \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.app1 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.app2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.MAX \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/input/#systemcursor","title":"SystemCursor","text":"<p><code>import \"luxe: input\" for SystemCursor</code></p> <p>no docs found</p> <ul> <li>invalid</li> <li>default</li> <li>hand</li> <li>no</li> <li>typing</li> <li>wait</li> <li>wait_arrow</li> <li>crosshair</li> <li>move</li> <li>resize_bottom_right</li> <li>resize_bottom_left</li> <li>resize_horizontal</li> <li>resize_vertical</li> <li>name(value: <code>SystemCursor</code>)</li> </ul> <p> SystemCursor.invalid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.default \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.hand \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.no \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.typing \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.wait \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.wait_arrow \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.crosshair \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.move \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.resize_bottom_right \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.resize_bottom_left \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.resize_horizontal \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.resize_vertical \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.name(value: <code>SystemCursor</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/input/#textevent","title":"TextEvent","text":"<p><code>import \"luxe: input\" for TextEvent</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>edit</li> <li>input</li> <li>name(value: <code>Any</code>)</li> </ul> <p> TextEvent.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextEvent.edit \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextEvent.input \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextEvent.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/io/","title":"Io","text":""},{"location":"api/v/2024.12.3/io/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/io/#luxe-io-module","title":"<code>luxe: io</code> module","text":"<ul> <li>DirNode </li> <li>Flags </li> <li>PlotType </li> <li>ProcFlags </li> </ul>"},{"location":"api/v/2024.12.3/io/#dirnode","title":"DirNode","text":"<p><code>import \"luxe: io\" for DirNode</code></p> <p>no docs found</p> <ul> <li>path</li> <li>name</li> <li>ext</li> <li>is_regular</li> <li>is_directory</li> <li>new(in_path: <code>Any</code>, in_name: <code>Any</code>, in_ext: <code>Any</code>, in_is_regular: <code>Any</code>, in_is_directory: <code>Any</code>)</li> </ul> <p> DirNode.path \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> DirNode.name \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> DirNode.ext \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> DirNode.is_regular \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> DirNode.is_directory \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> DirNode.new(in_path: <code>Any</code>, in_name: <code>Any</code>, in_ext: <code>Any</code>, in_is_regular: <code>Any</code>, in_is_directory: <code>Any</code>) \u00b6 returns <code>DirNode</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/io/#flags","title":"Flags","text":"<p><code>import \"luxe: io\" for Flags</code></p> <p>no docs found</p> <ul> <li>new(args: <code>Any</code>)</li> <li>all()</li> <li>has(flag: <code>Any</code>)</li> <li>value(flag: <code>Any</code>)</li> <li>value(flag: <code>Any</code>, require: <code>Any</code>)</li> <li>values(flag: <code>Any</code>)</li> <li>values(flag: <code>Any</code>, require: <code>Any</code>)</li> </ul> <p> Flags.new(args: <code>Any</code>) \u00b6 returns <code>Flags</code></p> <p>no docs found   </p> <p> Flags.all() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Flags.has(flag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Flags.value(flag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Flags.value(flag: <code>Any</code>, require: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Flags.values(flag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Flags.values(flag: <code>Any</code>, require: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/io/#plottype","title":"PlotType","text":"<p><code>import \"luxe: io\" for PlotType</code></p> <p>no docs found</p> <ul> <li>normal</li> <li>counter</li> </ul> <p> PlotType.normal \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PlotType.counter \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/io/#procflags","title":"ProcFlags","text":"<p><code>import \"luxe: io\" for ProcFlags</code></p> <p>no docs found</p> <ul> <li>none</li> <li>setuid</li> <li>setgid</li> <li>windows_verbatim_arguments</li> <li>detached</li> <li>windows_hide</li> <li>windows_hide_console</li> <li>windows_hide_gui</li> </ul> <p> ProcFlags.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ProcFlags.setuid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ProcFlags.setgid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ProcFlags.windows_verbatim_arguments \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ProcFlags.detached \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ProcFlags.windows_hide \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ProcFlags.windows_hide_console \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ProcFlags.windows_hide_gui \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/lx/","title":"Lx","text":""},{"location":"api/v/2024.12.3/lx/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/lx/#luxe-lx-module","title":"<code>luxe: lx</code> module","text":"<ul> <li>LX </li> <li>LXMerge </li> </ul>"},{"location":"api/v/2024.12.3/lx/#lx","title":"LX","text":"<p><code>import \"luxe: lx\" for LX</code></p> <p>no docs found</p> <ul> <li>parse_bytes(source_name: <code>Any</code>, bytes: <code>Any</code>)</li> <li>read(path: <code>Any</code>)</li> <li>read(source_id: <code>Any</code>, path: <code>Any</code>)</li> <li>parse(data: <code>Any</code>)</li> <li>parse(source_path: <code>Any</code>, data: <code>Any</code>)</li> <li>apply(from: <code>Any</code>, to: <code>Any</code>)</li> <li>clone(lx: <code>Any</code>)</li> <li>equal(lxA: <code>Any</code>, lxB: <code>Any</code>)</li> <li>delta(lxA: <code>Any</code>, lxB: <code>Any</code>)</li> <li>delta_apply(lx: <code>Any</code>, delta: <code>Any</code>)</li> <li>delta_unapply(lx: <code>Any</code>, delta: <code>Any</code>)</li> <li>key_get(lx: <code>Any</code>, key: <code>Any</code>)</li> <li>key_get_via_list(lx: <code>Any</code>, key: <code>Any</code>)</li> <li>key_remove(lx: <code>Any</code>, key: <code>Any</code>)</li> <li>key_remove_via_list(lx: <code>Any</code>, key: <code>Any</code>)</li> <li>key_set(lx: <code>Any</code>, key: <code>Any</code>, value: <code>Any</code>)</li> <li>key_set_via_list(lx: <code>Any</code>, key: <code>Any</code>, value: <code>Any</code>)</li> <li>stringify(root: <code>Any</code>)</li> <li>stringify(root: <code>Any</code>, spaces: <code>Any</code>)</li> <li>stringify(root: <code>Any</code>, spaces: <code>Any</code>, with_root: <code>Any</code>)</li> <li>stringify_to_bytes(root: <code>Any</code>, max_size: <code>Any</code>, spaces: <code>Any</code>, with_root: <code>Any</code>)</li> <li>write(contents: <code>Any</code>, path: <code>Any</code>)</li> <li>write(contents: <code>Any</code>, path: <code>Any</code>, spaces: <code>Any</code>)</li> <li>write(contents: <code>Any</code>, path: <code>Any</code>, spaces: <code>Any</code>, with_root: <code>Any</code>)</li> <li>stringify_to_file(root: <code>Any</code>, path: <code>Any</code>)</li> <li>stringify_to_file(root: <code>Any</code>, path: <code>Any</code>, spaces: <code>Any</code>, with_root: <code>Any</code>)</li> <li>flatten(lx: <code>Any</code>)</li> <li>flatten(lx: <code>Any</code>, delimiter: <code>Any</code>)</li> </ul> <p> LX.parse_bytes(source_name: <code>Any</code>, bytes: <code>Any</code>) \u00b6 returns <code>Result</code></p> <p>no docs found   </p> <p> LX.read(path: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.read(source_id: <code>Any</code>, path: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.parse(data: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.parse(source_path: <code>Any</code>, data: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.apply(from: <code>Any</code>, to: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.clone(lx: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.equal(lxA: <code>Any</code>, lxB: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.delta(lxA: <code>Any</code>, lxB: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.delta_apply(lx: <code>Any</code>, delta: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.delta_unapply(lx: <code>Any</code>, delta: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.key_get(lx: <code>Any</code>, key: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.key_get_via_list(lx: <code>Any</code>, key: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.key_remove(lx: <code>Any</code>, key: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.key_remove_via_list(lx: <code>Any</code>, key: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.key_set(lx: <code>Any</code>, key: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.key_set_via_list(lx: <code>Any</code>, key: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.stringify(root: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.stringify(root: <code>Any</code>, spaces: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.stringify(root: <code>Any</code>, spaces: <code>Any</code>, with_root: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.stringify_to_bytes(root: <code>Any</code>, max_size: <code>Any</code>, spaces: <code>Any</code>, with_root: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.write(contents: <code>Any</code>, path: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.write(contents: <code>Any</code>, path: <code>Any</code>, spaces: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.write(contents: <code>Any</code>, path: <code>Any</code>, spaces: <code>Any</code>, with_root: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.stringify_to_file(root: <code>Any</code>, path: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.stringify_to_file(root: <code>Any</code>, path: <code>Any</code>, spaces: <code>Any</code>, with_root: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.flatten(lx: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.flatten(lx: <code>Any</code>, delimiter: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/lx/#lxmerge","title":"LXMerge","text":"<p><code>import \"luxe: lx\" for LXMerge</code></p> <p>no docs found</p> <ul> <li>merge_map(from_map: <code>Map</code>, to_map: <code>Map</code>)</li> <li>merge_list(from_list: <code>List</code>, to_list: <code>List</code>)</li> <li>merge(from: <code>Any</code>, to: <code>Any</code>)</li> </ul> <p> LXMerge.merge_map(from_map: <code>Map</code>, to_map: <code>Map</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LXMerge.merge_list(from_list: <code>List</code>, to_list: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LXMerge.merge(from: <code>Any</code>, to: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/mat4/","title":"Mat4","text":""},{"location":"api/v/2024.12.3/mat4/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/mat4/#luxe-mat4-module","title":"<code>luxe: mat4</code> module","text":"<ul> <li>Matrix </li> </ul>"},{"location":"api/v/2024.12.3/mat4/#matrix","title":"Matrix","text":"<p><code>import \"luxe: mat4\" for Matrix</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>m</li> <li>ortho(left: <code>Any</code>, right: <code>Any</code>, top: <code>Any</code>, bottom: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>)</li> <li>make_angle_axis(axis: <code>Any</code>, theta: <code>Any</code>)</li> <li>apply_to_float3(vec: <code>Float3</code>)</li> <li>set(n11: <code>Any</code>, n12: <code>Any</code>, n13: <code>Any</code>, n14: <code>Any</code>, n21: <code>Any</code>, n22: <code>Any</code>, n23: <code>Any</code>, n24: <code>Any</code>, n31: <code>Any</code>, n32: <code>Any</code>, n33: <code>Any</code>, n34: <code>Any</code>, n41: <code>Any</code>, n42: <code>Any</code>, n43: <code>Any</code>, n44: <code>Any</code>)</li> <li>pos_x</li> <li>pos_y</li> <li>pos_z</li> <li>pos_x=(v : Any)</li> <li>pos_y=(v : Any)</li> <li>pos_z=(v : Any)</li> <li>pos</li> <li>pos=(v : Any)</li> <li>scale_x</li> <li>scale_y</li> <li>scale_z</li> </ul> <p> Matrix.new() \u00b6 returns <code>Matrix</code></p> <p>no docs found   </p> <p> Matrix.m \u00b6 returns <code>Floats</code></p> <p>no docs found   </p> <p> Matrix.ortho(left: <code>Any</code>, right: <code>Any</code>, top: <code>Any</code>, bottom: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.make_angle_axis(axis: <code>Any</code>, theta: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.apply_to_float3(vec: <code>Float3</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.set(n11: <code>Any</code>, n12: <code>Any</code>, n13: <code>Any</code>, n14: <code>Any</code>, n21: <code>Any</code>, n22: <code>Any</code>, n23: <code>Any</code>, n24: <code>Any</code>, n31: <code>Any</code>, n32: <code>Any</code>, n33: <code>Any</code>, n34: <code>Any</code>, n41: <code>Any</code>, n42: <code>Any</code>, n43: <code>Any</code>, n44: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.pos_x \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.pos_y \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.pos_z \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.pos_x=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.pos_y=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.pos_z=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.pos \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.pos=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.scale_x \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.scale_y \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.scale_z \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/math/","title":"Math","text":""},{"location":"api/v/2024.12.3/math/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/math/#luxe-math-module","title":"<code>luxe: math</code> module","text":"<ul> <li>Math </li> </ul>"},{"location":"api/v/2024.12.3/math/#math","title":"Math","text":"<p><code>import \"luxe: math\" for Math</code></p> <p>Utility class with static math functions.</p> <ul> <li>add(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>add2D(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>add_to(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>add2D_to(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>sub(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>sub2D(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>sub_to(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>sub2D_to(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>mults(a: <code>Vec</code>, b: <code>Num</code>)</li> <li>mult(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>mult2D(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>mult_to(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>mults_to(a: <code>Vec</code>, b: <code>Num</code>)</li> <li>mult2D_to(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>scale(a: <code>Vec</code>, s: <code>Num</code>)</li> <li>scale2D(a: <code>Vec</code>, s: <code>Num</code>)</li> <li>scale_to(a: <code>Vec</code>, s: <code>Num</code>)</li> <li>scale2D_to(a: <code>Vec</code>, s: <code>Num</code>)</li> <li>divide(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>divide_to(vec: <code>Vec</code>, other: <code>Vec</code>)</li> <li>div(a: <code>Vec</code>, s: <code>Num</code>)</li> <li>div2D(a: <code>Vec</code>, s: <code>Num</code>)</li> <li>div_to(a: <code>Vec</code>, s: <code>Num</code>)</li> <li>div2D_to(a: <code>Vec</code>, s: <code>Num</code>)</li> <li>equal(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>length(x: <code>Num</code>, y: <code>Num</code>)</li> <li>length(x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>length(vec: <code>Vec</code>)</li> <li>length2D(vec: <code>Vec</code>)</li> <li>length_sq(x: <code>Num</code>, y: <code>Num</code>)</li> <li>length_sq(x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>length_sq(vec: <code>Vec</code>)</li> <li>length_sq2D(vec: <code>Vec</code>)</li> <li>dot(x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, other_x: <code>Num</code>, other_y: <code>Num</code>, other_z: <code>Num</code>)</li> <li>dot(x: <code>Num</code>, y: <code>Num</code>, other_x: <code>Num</code>, other_y: <code>Num</code>)</li> <li>dot(vec: <code>Vec</code>, other: <code>Vec</code>)</li> <li>dot2D(vec: <code>Vec</code>, other: <code>Vec</code>)</li> <li>cross(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>angle(from: <code>Vec</code>, to: <code>Vec</code>)</li> <li>angle(v1: <code>Vec</code>, v2: <code>Vec</code>, up: <code>Vec</code>)</li> <li>angle2D(from: <code>Vec</code>, to: <code>Vec</code>)</li> <li>angle2D(from_x: <code>Num</code>, from_y: <code>Num</code>, to_x: <code>Num</code>, to_y: <code>Num</code>)</li> <li>normalize2D(vec: <code>Vec</code>)</li> <li>normalized(vec: <code>Vec</code>)</li> <li>normalized2D(vec: <code>Vec</code>)</li> <li>normalize(vec: <code>Vec</code>)</li> <li>dist(x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, other_x: <code>Num</code>, other_y: <code>Num</code>, other_z: <code>Num</code>)</li> <li>dist(vec: <code>Vec</code>, other: <code>Vec</code>)</li> <li>dist2D(vec: <code>Vec</code>, other: <code>Vec</code>)</li> <li>dist2D(x: <code>Num</code>, y: <code>Num</code>, other_x: <code>Num</code>, other_y: <code>Num</code>)</li> <li>dir2D(pos: <code>Vec</code>, target: <code>Vec</code>)</li> <li>dir(pos: <code>Vec</code>, target: <code>Vec</code>)</li> <li>rotate(vec: <code>Vec</code>, axis: <code>Vec</code>, angle: <code>Num</code>)</li> <li>rotate_by_quat(vec: <code>Vec</code>, quat: <code>Float4</code>)</li> <li>quat_from_euler(vec: <code>Vec</code>)</li> <li>rotate(vec: <code>Vec</code>, ox: <code>Num</code>, oy: <code>Num</code>, angle: <code>Num</code>)</li> <li>ray_intersect_plane(plane_x: <code>Num</code>, plane_y: <code>Num</code>, plane_z: <code>Num</code>, normal_x: <code>Num</code>, normal_y: <code>Num</code>, normal_z: <code>Num</code>, ray_x: <code>Num</code>, ray_y: <code>Num</code>, ray_z: <code>Num</code>, ray_dir_x: <code>Num</code>, ray_dir_y: <code>Num</code>, ray_dir_z: <code>Num</code>)</li> <li>closest_point_on_plane(plane_x: <code>Num</code>, plane_y: <code>Num</code>, plane_z: <code>Num</code>, normal_x: <code>Num</code>, normal_y: <code>Num</code>, normal_z: <code>Num</code>, point_x: <code>Num</code>, point_y: <code>Num</code>, point_z: <code>Num</code>)</li> <li>closest_point_on_line(line_x: <code>Num</code>, line_y: <code>Num</code>, line_z: <code>Num</code>, line_end_x: <code>Num</code>, line_end_y: <code>Num</code>, line_end_z: <code>Num</code>, point_x: <code>Num</code>, point_y: <code>Num</code>, point_z: <code>Num</code>)</li> <li>closest_point_on_line(line: <code>Vec</code>, line_end: <code>Vec</code>, point: <code>Vec</code>)</li> <li>in_rect(x: <code>Num</code>, y: <code>Num</code>, rx: <code>Num</code>, ry: <code>Num</code>, rw: <code>Num</code>, rh: <code>Num</code>)</li> <li>wrap(value: <code>Num</code>, modulus: <code>Num</code>)</li> <li>overlaps(x0: <code>Num</code>, y0: <code>Num</code>, w0: <code>Num</code>, h0: <code>Num</code>, x1: <code>Num</code>, y1: <code>Num</code>, w1: <code>Num</code>, h1: <code>Num</code>)</li> <li>sign(x: <code>Num</code>)</li> <li>sign0(x: <code>Num</code>)</li> <li>atan2(y: <code>Num</code>, x: <code>Num</code>)</li> <li>degrees(radians: <code>Num</code>)</li> <li>radians(degrees: <code>Num</code>)</li> <li>clamp(value: <code>Num</code>, a: <code>Num</code>, b: <code>Num</code>)</li> <li>min(a: <code>Num</code>, b: <code>Num</code>)</li> <li>max(a: <code>Num</code>, b: <code>Num</code>)</li> <li>floor_around_zero(a: <code>Num</code>)</li> <li>ceil_around_zero(a: <code>Num</code>)</li> <li>fixed(value: <code>Num</code>)</li> <li>fixed(value: <code>Num</code>, precision: <code>Num</code>)</li> <li>angle_delta(from: <code>Num</code>, to: <code>Num</code>)</li> <li>lerp2D(a: <code>Vec</code>, b: <code>Vec</code>, t: <code>Num</code>)</li> <li>lerp3D(a: <code>Vec</code>, b: <code>Vec</code>, t: <code>Num</code>)</li> <li>smooth_t(t: <code>Num</code>, smoothness: <code>Num</code>)</li> <li>smoother_t(t: <code>Num</code>, smoothness: <code>Num</code>)</li> <li>lerp(a: <code>Num</code>, b: <code>Num</code>, t: <code>Num</code>)</li> <li>lerp_angle(a: <code>Num</code>, b: <code>Num</code>, t: <code>Num</code>)</li> <li>weighted_avg(value: <code>Num</code>, target: <code>Num</code>, slowness: <code>Num</code>)</li> <li>within_range(value: <code>Num</code>, start_range: <code>Num</code>, end_range: <code>Num</code>)</li> <li>approx(one: <code>Num</code>, other: <code>Num</code>)</li> <li>approx(one: <code>Num</code>, other: <code>Num</code>, epsilon: <code>Num</code>)</li> <li>wrap_angle(degrees: <code>Num</code>)</li> <li>wrap_angle(degrees: <code>Num</code>, lower: <code>Num</code>, upper: <code>Num</code>)</li> <li>wrap_radians(radians: <code>Num</code>, lower: <code>Num</code>, upper: <code>Num</code>)</li> <li>nearest_power_of_two(value: <code>Num</code>)</li> <li>map_linear(value: <code>Num</code>, a1: <code>Num</code>, a2: <code>Num</code>, b1: <code>Num</code>, b2: <code>Num</code>)</li> <li>smoothstep(x: <code>Num</code>, min: <code>Num</code>, max: <code>Num</code>)</li> <li>smootherstep(x: <code>Num</code>, min: <code>Num</code>, max: <code>Num</code>)</li> <li>smoothstepx(x: <code>Num</code>, round: <code>Num</code>, steep: <code>Num</code>)</li> <li>random_point_in_unit_circle(rng: <code>Random</code>)</li> <li>slerp(a: <code>Quat</code>, b: <code>Quat</code>, t: <code>Num</code>)</li> </ul> <p> Math.add(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Add two 3D vectors together componentwise, returning the result   </p> <p> Math.add2D(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Add two vector2s together componentwise, returning the result   </p> <p> Math.add_to(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Add two 3D vectors together componentwise, updating the first vector   </p> <p> Math.add2D_to(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Add two 2D vectors together componentwise, updating the first vector   </p> <p> Math.sub(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Subtract two 3D vectors together componentwise, returning the result   </p> <p> Math.sub2D(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Subtract two 2D vectors together componentwise, returning the result   </p> <p> Math.sub_to(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Subtract two 3D vectors together componentwise, updating the first vector   </p> <p> Math.sub2D_to(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Subtract two 2D vectors together componentwise, updating the first vector   </p> <p> Math.mults(a: <code>Vec</code>, b: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Multiply a 3D vector by a scalar, returning the result   </p> <p> Math.mult(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Multiply two 3D vectors together componentwise, returning the result   </p> <p> Math.mult2D(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Multiply two 2D vectors together componentwise, returning the result   </p> <p> Math.mult_to(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Multiply two 3D vectors together componentwise, updating the first vector   </p> <p> Math.mults_to(a: <code>Vec</code>, b: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Multiply a 3D vector by a scalar, updating the vector   </p> <p> Math.mult2D_to(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Multiply two 2D vectors together componentwise, updating the first vector   </p> <p> Math.scale(a: <code>Vec</code>, s: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Multiply a 3D vector by a scalar, returning the result   </p> <p> Math.scale2D(a: <code>Vec</code>, s: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Multiply a 2D vector by a scalar, returning the result   </p> <p> Math.scale_to(a: <code>Vec</code>, s: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Multiply a 3D vector by a scalar, updating the vector   </p> <p> Math.scale2D_to(a: <code>Vec</code>, s: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Multiply a 2D vector by a scalar, updating the vector   </p> <p> Math.divide(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Divide a 3D vector by another, returning the result   </p> <p> Math.divide_to(vec: <code>Vec</code>, other: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Divide a 3D vector by another, updating the vector   </p> <p> Math.div(a: <code>Vec</code>, s: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Divide a 3D vector by a scalar, returning the result   </p> <p> Math.div2D(a: <code>Vec</code>, s: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Divide a 2D vector by a scalar, returning the result   </p> <p> Math.div_to(a: <code>Vec</code>, s: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Divide a 3D vector by a scalar, updating the vector   </p> <p> Math.div2D_to(a: <code>Vec</code>, s: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Divide a 2D vector by a scalar, updating the vector   </p> <p> Math.equal(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>Bool</code></p> <p>Checks if two vectors are equal. Vectors of different dimensions (e.g. 2D and 3D) are considered unequal   </p> <p> Math.length(x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Length of a 2d vector.   </p> <p> Math.length(x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Length of a 3d vector.   </p> <p> Math.length(vec: <code>Vec</code>) \u00b6 returns <code>Num</code></p> <p>Length of a 3d vector.   </p> <p> Math.length2D(vec: <code>Vec</code>) \u00b6 returns <code>Num</code></p> <p>Length of a 2d vector.   </p> <p> Math.length_sq(x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Squared length of a 2d vector (slightly cheaper than length).   </p> <p> Math.length_sq(x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Squared length of a 3d vector (slightly cheaper than length).   </p> <p> Math.length_sq(vec: <code>Vec</code>) \u00b6 returns <code>Num</code></p> <p>Squared length of a 3d vector.   </p> <p> Math.length_sq2D(vec: <code>Vec</code>) \u00b6 returns <code>Num</code></p> <p>Squared length of a 2d vector.   </p> <p> Math.dot(x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, other_x: <code>Num</code>, other_y: <code>Num</code>, other_z: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Dot product (or scalar product) of two 3d vectors.   </p> <p> Math.dot(x: <code>Num</code>, y: <code>Num</code>, other_x: <code>Num</code>, other_y: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Dot product (or scalar product) of two 2d vectors.   </p> <p> Math.dot(vec: <code>Vec</code>, other: <code>Vec</code>) \u00b6 returns <code>Num</code></p> <p>Dot product (or scalar product) of two 3d vectors.   </p> <p> Math.dot2D(vec: <code>Vec</code>, other: <code>Vec</code>) \u00b6 returns <code>Num</code></p> <p>Dot product (or scalar product) of two 2d vectors.   </p> <p> Math.cross(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>Vec</code></p> <p>Cross product of two 3d vectors.  Result will always be orthogonal to both input vectors (and [0, 0, 0] if the arguments are parallel)   </p> <p> Math.angle(from: <code>Vec</code>, to: <code>Vec</code>) \u00b6 returns <code>Num</code></p> <p>Unsigned angle between two 3d vectors.   </p> <p> Math.angle(v1: <code>Vec</code>, v2: <code>Vec</code>, up: <code>Vec</code>) \u00b6 returns <code>Num</code></p> <p>Signed angle between two 3d vectors.   </p> <p> Math.angle2D(from: <code>Vec</code>, to: <code>Vec</code>) \u00b6 returns <code>Num</code></p> <p>Signed angle between two 2d vectors.   </p> <p> Math.angle2D(from_x: <code>Num</code>, from_y: <code>Num</code>, to_x: <code>Num</code>, to_y: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Signed angle between two 2d vectors.   </p> <p> Math.normalize2D(vec: <code>Vec</code>) \u00b6 returns <code>None</code></p> <p>Normalize 2d vector. Changes input vector and doesnt return anything. 0 length vectors remain untouched.   </p> <p> Math.normalized(vec: <code>Vec</code>) \u00b6 returns <code>None</code></p> <p>Normalize 3d vector. Returns the result.   </p> <p> Math.normalized2D(vec: <code>Vec</code>) \u00b6 returns <code>None</code></p> <p>Normalize 2d vector. Returns the result.   </p> <p> Math.normalize(vec: <code>Vec</code>) \u00b6 returns <code>None</code></p> <p>Normalize 3d vector. Changes input vector and doesnt return anything. 0 length vectors remain untouched.   </p> <p> Math.dist(x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, other_x: <code>Num</code>, other_y: <code>Num</code>, other_z: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Distance between two 3d vectors.   </p> <p> Math.dist(vec: <code>Vec</code>, other: <code>Vec</code>) \u00b6 returns <code>Num</code></p> <p>Distance between two 3d vectors.   </p> <p> Math.dist2D(vec: <code>Vec</code>, other: <code>Vec</code>) \u00b6 returns <code>Num</code></p> <p>Distance between two 2d vectors.   </p> <p> Math.dist2D(x: <code>Num</code>, y: <code>Num</code>, other_x: <code>Num</code>, other_y: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Distance between two 2d vectors.   </p> <p> Math.dir2D(pos: <code>Vec</code>, target: <code>Vec</code>) \u00b6 returns <code>Vec</code></p> <p>Directional vector (length 1 unless the arguments are the same) between two 2d vectors.   </p> <p> Math.dir(pos: <code>Vec</code>, target: <code>Vec</code>) \u00b6 returns <code>Vec</code></p> <p>Directional vector (length 1 unless the arguments are the same) between two 3d vectors.   </p> <p> Math.rotate(vec: <code>Vec</code>, axis: <code>Vec</code>, angle: <code>Num</code>) \u00b6 returns <code>Vec</code></p> <p>Rotate a 3d vector around the given axis by angle degrees   </p> <p> Math.rotate_by_quat(vec: <code>Vec</code>, quat: <code>Float4</code>) \u00b6 returns <code>Vec</code></p> <p>Rotate a 3d vector using the given quaternion   </p> <p> Math.quat_from_euler(vec: <code>Vec</code>) \u00b6 returns <code>Float4</code></p> <p>Create a quaternion from float3 euler (radians)   </p> <p> Math.rotate(vec: <code>Vec</code>, ox: <code>Num</code>, oy: <code>Num</code>, angle: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Rotate 2d vector around another 2d vector. This rotates the input vector and doesnt return anything.   </p> <p> Math.ray_intersect_plane(plane_x: <code>Num</code>, plane_y: <code>Num</code>, plane_z: <code>Num</code>, normal_x: <code>Num</code>, normal_y: <code>Num</code>, normal_z: <code>Num</code>, ray_x: <code>Num</code>, ray_y: <code>Num</code>, ray_z: <code>Num</code>, ray_dir_x: <code>Num</code>, ray_dir_y: <code>Num</code>, ray_dir_z: <code>Num</code>) \u00b6 returns <code>Vec</code></p> <p>Intersection point between an infinitely long ray and a infinitely big plane. Returns <code>null</code> if parallel.   </p> <p> Math.closest_point_on_plane(plane_x: <code>Num</code>, plane_y: <code>Num</code>, plane_z: <code>Num</code>, normal_x: <code>Num</code>, normal_y: <code>Num</code>, normal_z: <code>Num</code>, point_x: <code>Num</code>, point_y: <code>Num</code>, point_z: <code>Num</code>) \u00b6 returns <code>Vec</code></p> <p>Closest point on an infinite plane to a point.   </p> <p> Math.closest_point_on_line(line_x: <code>Num</code>, line_y: <code>Num</code>, line_z: <code>Num</code>, line_end_x: <code>Num</code>, line_end_y: <code>Num</code>, line_end_z: <code>Num</code>, point_x: <code>Num</code>, point_y: <code>Num</code>, point_z: <code>Num</code>) \u00b6 returns <code>Vec</code></p> <p>Closest point on an infinite line to a point. The progress from line start to line end in 4<sup>th</sup> component of return value. Line is constructed by 2 points on the line,  but the closest point can also be before the start of after the end  (in that case the 4<sup>th</sup> component of the return value wont be in the 0-1 range).   </p> <p> Math.closest_point_on_line(line: <code>Vec</code>, line_end: <code>Vec</code>, point: <code>Vec</code>) \u00b6 returns <code>Vec</code></p> <p>Closest point on an infinite line to a point. The progress from line start to line end in 4<sup>th</sup> component of return value. Line is constructed by 2 points on the line,  but the closest point can also be before the start of after the end  (in that case the 4<sup>th</sup> component of the return value wont be in the 0-1 range).   </p> <p> Math.in_rect(x: <code>Num</code>, y: <code>Num</code>, rx: <code>Num</code>, ry: <code>Num</code>, rw: <code>Num</code>, rh: <code>Num</code>) \u00b6 returns <code>Bool</code></p> <p>Checks if a 2d point is inside a rectangle. Only works for positive rectangle sizes.   </p> <p> Math.wrap(value: <code>Num</code>, modulus: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Math.overlaps(x0: <code>Num</code>, y0: <code>Num</code>, w0: <code>Num</code>, h0: <code>Num</code>, x1: <code>Num</code>, y1: <code>Num</code>, w1: <code>Num</code>, h1: <code>Num</code>) \u00b6 returns <code>Bool</code></p> <p>Checks if two rectangles overlap. Only works for positive rectangle sizes.   </p> <p> Math.sign(x: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>The sign of the number, expressed as a -1, 1 or 0, for negative and positive numbers, and zero.   </p> <p> Math.sign0(x: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>The sign of the number, expressed as a -1 0r 1, for negative and positive numbers, zero is positive.   </p> <p> Math.atan2(y: <code>Num</code>, x: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>The arc tangent of <code>y</code> when divided by <code>x</code>,      using the signs of the two numbers to determine the quadrant of the result.      (equivalient to <code>y.atan(x)</code>)   </p> <p> Math.degrees(radians: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Convert radians (0...2*PI) to degree (0...360).   </p> <p> Math.radians(degrees: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Convert degree (0...360) to radians (0...2*PI).   </p> <p> Math.clamp(value: <code>Num</code>, a: <code>Num</code>, b: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Clamp <code>value</code> between <code>a</code> and <code>b</code> (result will never be smaller than a or bigger than b).      Equivalent to <code>value.clamp(a, b)</code>.   </p> <p> Math.min(a: <code>Num</code>, b: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>The smaller of two numbers. Eqivalent to <code>a.min(b)</code>.   </p> <p> Math.max(a: <code>Num</code>, b: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>The larger of two numbers. Eqivalent to <code>a.max(b)</code>.   </p> <p> Math.floor_around_zero(a: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Round towards zero. (floor when positive, ceil when negative)   </p> <p> Math.ceil_around_zero(a: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Round away from zero. (ceil when positive, floor when negative)   </p> <p> Math.fixed(value: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Round number to 3 digits after comma precision.   </p> <p> Math.fixed(value: <code>Num</code>, precision: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Round number to <code>precision</code> digits after comma precision.   </p> <p> Math.angle_delta(from: <code>Num</code>, to: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Signed difference between two (degree) angles. Always in -180...180 range.   </p> <p> Math.lerp2D(a: <code>Vec</code>, b: <code>Vec</code>, t: <code>Num</code>) \u00b6 returns <code>Vec</code></p> <p>Linearly interpolate between two vectors. Returns <code>a</code> when <code>t</code> is <code>0</code> and <code>b</code> when <code>t</code> is <code>1</code>, with values inbetween interpolating inbetween. If <code>t</code> is outside 0-1 range, the output will be extrapolated.   </p> <p> Math.lerp3D(a: <code>Vec</code>, b: <code>Vec</code>, t: <code>Num</code>) \u00b6 returns <code>Vec</code></p> <p>Linearly interpolate between two vectors. Returns <code>a</code> when <code>t</code> is <code>0</code> and <code>b</code> when <code>t</code> is <code>1</code>, with values inbetween interpolating inbetween. If <code>t</code> is outside 0-1 range, the output will be extrapolated.   </p> <p> Math.smooth_t(t: <code>Num</code>, smoothness: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Get a smooth time t for lerping, based on a smoothness value. e.g t = smooth_t(delta, 1.25). exponential decay   </p> <p> Math.smoother_t(t: <code>Num</code>, smoothness: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Get a smooth time t for lerping, based on a smoothness value. e.g t = smoother_t(delta, 1.25). s curve like shape   </p> <p> Math.lerp(a: <code>Num</code>, b: <code>Num</code>, t: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Linearly interpolate between two numbers. Returns <code>a</code> when <code>t</code> is <code>0</code> and <code>b</code> when <code>t</code> is <code>1</code>, with values inbetween interpolating inbetween. If <code>t</code> is outside 0-1 range, the output will be extrapolated.   </p> <p> Math.lerp_angle(a: <code>Num</code>, b: <code>Num</code>, t: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Interpolates between angles. Always in 0...360 range.   </p> <p> Math.weighted_avg(value: <code>Num</code>, target: <code>Num</code>, slowness: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Math.within_range(value: <code>Num</code>, start_range: <code>Num</code>, end_range: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Checks whether <code>value</code> is inbetween <code>start_range</code> and <code>end_range</code> (inclusive).   </p> <p> Math.approx(one: <code>Num</code>, other: <code>Num</code>) \u00b6 returns <code>Bool</code></p> <p>Checks whether two values are approximately the same (with a max difference of 0.001).   </p> <p> Math.approx(one: <code>Num</code>, other: <code>Num</code>, epsilon: <code>Num</code>) \u00b6 returns <code>Bool</code></p> <p>Checks whether two values are approximately the same (with a max difference of <code>epsilon</code>).   </p> <p> Math.wrap_angle(degrees: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Bring angle into 0...360 degree space.   </p> <p> Math.wrap_angle(degrees: <code>Num</code>, lower: <code>Num</code>, upper: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Bring angle into lower...upper degree space.   </p> <p> Math.wrap_radians(radians: <code>Num</code>, lower: <code>Num</code>, upper: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Math.nearest_power_of_two(value: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Math.map_linear(value: <code>Num</code>, a1: <code>Num</code>, a2: <code>Num</code>, b1: <code>Num</code>, b2: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Remap value from <code>a1...a2</code> space to <code>b1...b2</code> space (unclamped).   </p> <p> Math.smoothstep(x: <code>Num</code>, min: <code>Num</code>, max: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Smoothed inverse lerp using cubic hermite interpolation. Output is clamped between 0 and 1.   </p> <p> Math.smootherstep(x: <code>Num</code>, min: <code>Num</code>, max: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Alternate smooth inverse interpolation with derivative of 0 at min and max points. Output is clamped between 0 and 1.   </p> <p> Math.smoothstepx(x: <code>Num</code>, round: <code>Num</code>, steep: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Math.random_point_in_unit_circle(rng: <code>Random</code>) \u00b6 returns <code>Num</code></p> <p>Random 2d point in circle of radius 1. Has uniform distribution.   </p> <p> Math.slerp(a: <code>Quat</code>, b: <code>Quat</code>, t: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/noise/","title":"Noise","text":""},{"location":"api/v/2024.12.3/noise/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/noise/#luxe-noise-module","title":"<code>luxe: noise</code> module","text":"<ul> <li>Noise </li> <li>NoiseCellularDistanceFunc </li> <li>NoiseCellularReturnType </li> <li>NoiseDomainWarpType </li> <li>NoiseFractalType </li> <li>NoiseRotationType3D </li> <li>NoiseType </li> </ul>"},{"location":"api/v/2024.12.3/noise/#noise","title":"Noise","text":"<p><code>import \"luxe: noise\" for Noise</code></p> <p>no docs found</p> <ul> <li>create(type: <code>NoiseType</code>)</li> <li>create(type: <code>NoiseType</code>, seed: <code>Num</code>)</li> <li>destroy(handle: <code>Noise</code>)</li> <li>valid(handle: <code>Noise</code>)</li> <li>get2D(handle: <code>Noise</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>get3D(handle: <code>Noise</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>set_seed(handle: <code>Noise</code>, seed: <code>Num</code>)</li> <li>domain_warp2D(handle: <code>Noise</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>domain_warp3D(handle: <code>Noise</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>set_rotation_type3D(handle: <code>Noise</code>, type: <code>NoiseRotationType3D</code>)</li> <li>set_fractal_type(handle: <code>Noise</code>, type: <code>NoiseFractalType</code>)</li> <li>set_fractal_octaves(handle: <code>Noise</code>, octaves: <code>Num</code>)</li> <li>set_fractal_lacunarity(handle: <code>Noise</code>, lacunarity: <code>Num</code>)</li> <li>set_fractal_gain(handle: <code>Noise</code>, gain: <code>Num</code>)</li> <li>set_fractal_weighted_strength(handle: <code>Noise</code>, weighted_strength: <code>Num</code>)</li> <li>set_fractal_ping_pong_strength(handle: <code>Noise</code>, ping_pong_strength: <code>Num</code>)</li> <li>set_cellular_distance_func(handle: <code>Noise</code>, distance_func: <code>NoiseCellularDistanceFunc</code>)</li> <li>set_cellular_return_type(handle: <code>Noise</code>, type: <code>NoiseCellularReturnType</code>)</li> <li>set_cellular_jitter(handle: <code>Noise</code>, jitter: <code>Num</code>)</li> <li>set_domain_warp_type(handle: <code>Noise</code>, type: <code>NoiseDomainWarpType</code>)</li> <li>set_domain_warp_amp(handle: <code>Noise</code>, amp: <code>Num</code>)</li> </ul> <p> Noise.create(type: <code>NoiseType</code>) \u00b6 returns <code>Noise</code></p> <p>no docs found   </p> <p> Noise.create(type: <code>NoiseType</code>, seed: <code>Num</code>) \u00b6 returns <code>Noise</code></p> <p>no docs found   </p> <p> Noise.destroy(handle: <code>Noise</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.valid(handle: <code>Noise</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Noise.get2D(handle: <code>Noise</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Noise.get3D(handle: <code>Noise</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Noise.set_seed(handle: <code>Noise</code>, seed: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.domain_warp2D(handle: <code>Noise</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>Vec2</code></p> <p>no docs found   </p> <p> Noise.domain_warp3D(handle: <code>Noise</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>Vec3</code></p> <p>no docs found   </p> <p> Noise.set_rotation_type3D(handle: <code>Noise</code>, type: <code>NoiseRotationType3D</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.set_fractal_type(handle: <code>Noise</code>, type: <code>NoiseFractalType</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.set_fractal_octaves(handle: <code>Noise</code>, octaves: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.set_fractal_lacunarity(handle: <code>Noise</code>, lacunarity: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.set_fractal_gain(handle: <code>Noise</code>, gain: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.set_fractal_weighted_strength(handle: <code>Noise</code>, weighted_strength: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.set_fractal_ping_pong_strength(handle: <code>Noise</code>, ping_pong_strength: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.set_cellular_distance_func(handle: <code>Noise</code>, distance_func: <code>NoiseCellularDistanceFunc</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.set_cellular_return_type(handle: <code>Noise</code>, type: <code>NoiseCellularReturnType</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.set_cellular_jitter(handle: <code>Noise</code>, jitter: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.set_domain_warp_type(handle: <code>Noise</code>, type: <code>NoiseDomainWarpType</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.set_domain_warp_amp(handle: <code>Noise</code>, amp: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/noise/#noisecellulardistancefunc","title":"NoiseCellularDistanceFunc","text":"<p><code>import \"luxe: noise\" for NoiseCellularDistanceFunc</code></p> <p>no docs found</p> <ul> <li>euclidean</li> <li>euclidean_sq</li> <li>manhattan</li> <li>hybrid</li> </ul> <p> NoiseCellularDistanceFunc.euclidean \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseCellularDistanceFunc.euclidean_sq \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseCellularDistanceFunc.manhattan \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseCellularDistanceFunc.hybrid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/noise/#noisecellularreturntype","title":"NoiseCellularReturnType","text":"<p><code>import \"luxe: noise\" for NoiseCellularReturnType</code></p> <p>no docs found</p> <ul> <li>cell_value</li> <li>distance</li> <li>distance2</li> <li>distance2_add</li> <li>distance2_sub</li> <li>distance2_mul</li> <li>distance2_div</li> </ul> <p> NoiseCellularReturnType.cell_value \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseCellularReturnType.distance \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseCellularReturnType.distance2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseCellularReturnType.distance2_add \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseCellularReturnType.distance2_sub \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseCellularReturnType.distance2_mul \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseCellularReturnType.distance2_div \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/noise/#noisedomainwarptype","title":"NoiseDomainWarpType","text":"<p><code>import \"luxe: noise\" for NoiseDomainWarpType</code></p> <p>no docs found</p> <ul> <li>open_simplex2</li> <li>open_simplex2_reduced</li> <li>basic_grid</li> </ul> <p> NoiseDomainWarpType.open_simplex2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseDomainWarpType.open_simplex2_reduced \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseDomainWarpType.basic_grid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/noise/#noisefractaltype","title":"NoiseFractalType","text":"<p><code>import \"luxe: noise\" for NoiseFractalType</code></p> <p>no docs found</p> <ul> <li>none</li> <li>fbm</li> <li>ridged</li> <li>pingpong</li> <li>domain_warp_progressive</li> <li>domain_warp_independent</li> </ul> <p> NoiseFractalType.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseFractalType.fbm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseFractalType.ridged \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseFractalType.pingpong \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseFractalType.domain_warp_progressive \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseFractalType.domain_warp_independent \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/noise/#noiserotationtype3d","title":"NoiseRotationType3D","text":"<p><code>import \"luxe: noise\" for NoiseRotationType3D</code></p> <p>no docs found</p> <ul> <li>none</li> <li>improve_xy_planes</li> <li>improve_xz_planes</li> </ul> <p> NoiseRotationType3D.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseRotationType3D.improve_xy_planes \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseRotationType3D.improve_xz_planes \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/noise/#noisetype","title":"NoiseType","text":"<p><code>import \"luxe: noise\" for NoiseType</code></p> <p>no docs found</p> <ul> <li>open_simplex2</li> <li>open_simplex2s</li> <li>cellular</li> <li>perlin</li> <li>value_cubic</li> <li>value</li> </ul> <p> NoiseType.open_simplex2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseType.open_simplex2s \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseType.cellular \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseType.perlin \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseType.value_cubic \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseType.value \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/plot/","title":"Plot","text":""},{"location":"api/v/2024.12.3/plot/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/plot/#luxe-plot-module","title":"<code>luxe: plot</code> module","text":"<ul> <li>Plot </li> </ul>"},{"location":"api/v/2024.12.3/plot/#plot","title":"Plot","text":"<p><code>import \"luxe: plot\" for Plot</code></p> <p>A service API to plot values for games + debugging. Can plot values from anywhere as a counter or as a running history. Counter plots add values to their total and add the total to the history at the end of the frame.</p> <ul> <li>define(id: <code>String</code>, type: <code>PlotType</code>)</li> <li>define(id: <code>String</code>, type: <code>PlotType</code>, max_history: <code>Num</code>)</li> <li>update(id: <code>String</code>, value: <code>Num</code>)</li> <li>list()</li> <li>history(id: <code>String</code>)</li> <li>latest(id: <code>String</code>)</li> <li>average(id: <code>String</code>)</li> </ul> <p> Plot.define(id: <code>String</code>, type: <code>PlotType</code>) \u00b6 returns <code>unknown</code></p> <p>Define a new plot by id, with the given <code>type</code>. The max history defaults to 60 values if not specified.   </p> <p> Plot.define(id: <code>String</code>, type: <code>PlotType</code>, max_history: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Define a new plot by id, with the given <code>type</code> and <code>max_history</code> </p> <p> Plot.update(id: <code>String</code>, value: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Update a given plot by id, with the given <code>value</code>.  For <code>PlotType.normal</code> this will add the value to the history. For <code>PlotType.counter</code> this will add the value to the total so far this frame.   </p> <p> Plot.list() \u00b6 returns <code>unknown</code></p> <p>Get a list of plots defined, as string id (e.g Strings.get(id) is needed)   </p> <p> Plot.history(id: <code>String</code>) \u00b6 returns <code>List</code></p> <p>Get the history for a given plot, as a list of values   </p> <p> Plot.latest(id: <code>String</code>) \u00b6 returns <code>Num</code></p> <p>Get the latest value for a given plot   </p> <p> Plot.average(id: <code>String</code>) \u00b6 returns <code>Num</code></p> <p>Get the average value for a given plot, averaging out the history   </p>"},{"location":"api/v/2024.12.3/pqueue/","title":"Pqueue","text":""},{"location":"api/v/2024.12.3/pqueue/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/pqueue/#luxe-pqueue-module","title":"<code>luxe: pqueue</code> module","text":"<ul> <li>MaxPQ </li> <li>MinPQ </li> </ul>"},{"location":"api/v/2024.12.3/pqueue/#maxpq","title":"MaxPQ","text":"<p><code>import \"luxe: pqueue\" for MaxPQ</code></p> <p>A priority queue that returns larger values first.</p> <p>A priority queue holds various values and will sort them into an ordered list by priority. When queried via <code>peek</code> or values removed via <code>pop</code> the values are sorted.</p> <ul> <li>value</li> <li>count</li> <li>new()</li> <li>new(get_priority_fn: <code>Any</code>)</li> <li>add(value: <code>Any</code>)</li> <li>pop()</li> <li>peek()</li> </ul> <p> MaxPQ.value \u00b6 returns <code>unknown</code></p> <p>Returns the internal array. Read only, modify the queue via <code>add</code> and <code>pop</code>.   </p> <p> MaxPQ.count \u00b6 returns <code>unknown</code></p> <p>Returns the number of items in the priority queue.   </p> <p> MaxPQ.new() \u00b6 returns <code>MaxPQ</code></p> <p>Create a new priority queue.   </p> <p> MaxPQ.new(get_priority_fn: <code>Any</code>) \u00b6 returns <code>MaxPQ</code></p> <p>Create a new priority queue with a callback for the priority of a value. The callback takes one parameter, the value, and should return a priority number  for that value.   </p> <p> MaxPQ.add(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Add a value to the queue.   </p> <p> MaxPQ.pop() \u00b6 returns <code>unknown</code></p> <p>Return the next value, removing it from the queue.   </p> <p> MaxPQ.peek() \u00b6 returns <code>unknown</code></p> <p>Return the next value without removing it from the queue.   </p>"},{"location":"api/v/2024.12.3/pqueue/#minpq","title":"MinPQ","text":"<p><code>import \"luxe: pqueue\" for MinPQ</code></p> <p>A priority queue that returns smaller values first.</p> <p>A priority queue holds various values and will sort them into an ordered list by priority. When queried via <code>peek</code> or values removed via <code>pop</code> the values are sorted.</p> <ul> <li>value</li> <li>count</li> <li>new()</li> <li>new(get_priority_fn: <code>Any</code>)</li> <li>add(value: <code>Any</code>)</li> <li>pop()</li> <li>peek()</li> </ul> <p> MinPQ.value \u00b6 returns <code>unknown</code></p> <p>Returns the internal array. Read only, modify the queue via <code>add</code> and <code>pop</code>.   </p> <p> MinPQ.count \u00b6 returns <code>unknown</code></p> <p>Returns the number of items in the priority queue.   </p> <p> MinPQ.new() \u00b6 returns <code>MinPQ</code></p> <p>Create a new priority queue.   </p> <p> MinPQ.new(get_priority_fn: <code>Any</code>) \u00b6 returns <code>MinPQ</code></p> <p>Create a new priority queue with a callback for the priority of a value. The callback takes one parameter, the value, and should return a priority number  for that value.   </p> <p> MinPQ.add(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Add a value to the queue.   </p> <p> MinPQ.pop() \u00b6 returns <code>unknown</code></p> <p>Return the next value, removing it from the queue.   </p> <p> MinPQ.peek() \u00b6 returns <code>unknown</code></p> <p>Return the next value without removing it from the queue.   </p>"},{"location":"api/v/2024.12.3/regex/","title":"Regex","text":""},{"location":"api/v/2024.12.3/regex/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/regex/#luxe-regex-module","title":"<code>luxe: regex</code> module","text":"<ul> <li>RegexInfo </li> <li>RegexMatch </li> <li>RegexSubMatch </li> </ul>"},{"location":"api/v/2024.12.3/regex/#regexinfo","title":"RegexInfo","text":"<p><code>import \"luxe: regex\" for RegexInfo</code></p> <p>A regular expression result, containing one or more matches</p> <ul> <li>matched</li> <li>match</li> <li>[index : Num]</li> </ul> <p> RegexInfo.matched \u00b6 returns <code>Bool</code></p> <p>True if there was any match   </p> <p> RegexInfo.match \u00b6 returns <code>List</code></p> <p>Returns the match results, a List of <code>RegexMatch</code>. Only valid if <code>matched</code> is true   </p> <p> RegexInfo [index : Num] \u00b6 returns <code>RegexMatch</code></p> <p>Convenience to access a specific match by index   </p>"},{"location":"api/v/2024.12.3/regex/#regexmatch","title":"RegexMatch","text":"<p><code>import \"luxe: regex\" for RegexMatch</code></p> <p>A single match in a regular expression result.</p> <ul> <li>subcount</li> <li>string</li> <li>offset</li> <li>count</li> <li>index</li> <li>[index : Num]</li> </ul> <p> RegexMatch.subcount \u00b6 returns <code>Num</code></p> <p>Number of sub matches (groups), not including 0 which is the full match   </p> <p> RegexMatch.string \u00b6 returns <code>String</code></p> <p>The matched string   </p> <p> RegexMatch.offset \u00b6 returns <code>Num</code></p> <p>The offset of the match in the original string   </p> <p> RegexMatch.count \u00b6 returns <code>Num</code></p> <p>The length of the match string   </p> <p> RegexMatch.index \u00b6 returns <code>Num</code></p> <p>Index of this match in the match results   </p> <p> RegexMatch [index : Num] \u00b6 returns <code>RegexSubMatch</code></p> <p>Access to a specific group/sub match by index. 0 is the full match, groups are 1-indexed   </p>"},{"location":"api/v/2024.12.3/regex/#regexsubmatch","title":"RegexSubMatch","text":"<p><code>import \"luxe: regex\" for RegexSubMatch</code></p> <p>A single group/sub match in a regular expression match.</p> <ul> <li>count</li> <li>offset</li> <li>string</li> <li>index</li> <li>[index : Num]</li> </ul> <p> RegexSubMatch.count \u00b6 returns <code>Num</code></p> <p>The length of the sub/group   </p> <p> RegexSubMatch.offset \u00b6 returns <code>Num</code></p> <p>The offset of the sub/group in the original match   </p> <p> RegexSubMatch.string \u00b6 returns <code>String</code></p> <p>The string of the sub/group   </p> <p> RegexSubMatch.index \u00b6 returns <code>Num</code></p> <p>The index of this sub/group in the match   </p> <p> RegexSubMatch [index : Num] \u00b6 returns <code>Any</code></p> <p>Returns info about this sub match by index. 0 returns <code>count</code>, 1 returns <code>offset</code>, 2 returns <code>string</code> </p>"},{"location":"api/v/2024.12.3/render/","title":"Render","text":""},{"location":"api/v/2024.12.3/render/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/render/#luxe-render-module","title":"<code>luxe: render</code> module","text":"<ul> <li>Atlas </li> <li>BlendFactor </li> <li>BlendOperation </li> <li>Clip </li> <li>ColorWriteMask </li> <li>CompareFunction </li> <li>ComputeLayerDesc </li> <li>ComputeLayerInput </li> <li>CullMode </li> <li>Geometry </li> <li>Image </li> <li>ImageDesc </li> <li>ImageType </li> <li>ImageUsage </li> <li>IndexType </li> <li>InputBuffer </li> <li>LayerCompute </li> <li>LayerPass </li> <li>LoadAction </li> <li>Material </li> <li>MaterialDesc </li> <li>MaterialFunction </li> <li>MaterialInput </li> <li>MaterialInputBlock </li> <li>MaterialInputImage </li> <li>MaterialInputType </li> <li>MaterialReplace </li> <li>PassLayerDesc </li> <li>PixelFormat </li> <li>Pose </li> <li>PoseGraph </li> <li>PoseNode </li> <li>Primitive </li> <li>Render </li> <li>RenderDest </li> <li>RenderDestColor </li> <li>RenderDestDepth </li> <li>RenderDestStencil </li> <li>RenderLayerDesc </li> <li>RenderPathContext </li> <li>RenderViewDesc </li> <li>SamplerAddressMode </li> <li>SamplerMinMagFilter </li> <li>SamplerMipFilter </li> <li>SamplerState </li> <li>SortType </li> <li>StencilOperation </li> <li>StoreAction </li> <li>TextAlign </li> <li>TextAttrType </li> <li>TextWrapMode </li> <li>VertexAttr </li> <li>VertexAttrFormat </li> <li>VertexFormat </li> <li>VertexInputRate </li> <li>VertexLayout </li> <li>Winding </li> </ul>"},{"location":"api/v/2024.12.3/render/#atlas","title":"Atlas","text":"<p><code>import \"luxe: render\" for Atlas</code></p> <p>no docs found</p> <ul> <li>create(size: <code>Any</code>, material: <code>Any</code>)</li> <li>destroy(atlas: <code>Any</code>)</li> <li>valid(atlas: <code>Any</code>)</li> <li>get_size(atlas: <code>Any</code>)</li> <li>get_material(atlas: <code>Any</code>)</li> <li>rect_add(atlas: <code>Any</code>, atlas_image_id: <code>Any</code>, frame: <code>Any</code>, rect: <code>Any</code>, rotated: <code>Any</code>)</li> <li>rect_remove(atlas: <code>Any</code>, atlas_image_id: <code>Any</code>)</li> <li>rect_get_frame(atlas: <code>Any</code>, atlas_image: <code>Any</code>)</li> <li>rect_get_rect(atlas: <code>Any</code>, atlas_image: <code>Any</code>)</li> <li>rect_get_rotated(atlas: <code>Any</code>, atlas_image: <code>Any</code>)</li> <li>rect_exists(atlas: <code>Any</code>, atlas_image: <code>Any</code>)</li> </ul> <p> Atlas.create(size: <code>Any</code>, material: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Atlas.destroy(atlas: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Atlas.valid(atlas: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Atlas.get_size(atlas: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Atlas.get_material(atlas: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Atlas.rect_add(atlas: <code>Any</code>, atlas_image_id: <code>Any</code>, frame: <code>Any</code>, rect: <code>Any</code>, rotated: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Atlas.rect_remove(atlas: <code>Any</code>, atlas_image_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Atlas.rect_get_frame(atlas: <code>Any</code>, atlas_image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Atlas.rect_get_rect(atlas: <code>Any</code>, atlas_image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Atlas.rect_get_rotated(atlas: <code>Any</code>, atlas_image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Atlas.rect_exists(atlas: <code>Any</code>, atlas_image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#blendfactor","title":"BlendFactor","text":"<p><code>import \"luxe: render\" for BlendFactor</code></p> <p>no docs found</p> <ul> <li>zero</li> <li>one</li> <li>source_color</li> <li>one_minus_source_color</li> <li>source_alpha</li> <li>one_minus_source_alpha</li> <li>destination_color</li> <li>one_minus_destination_color</li> <li>destination_alpha</li> <li>one_minus_destination_alpha</li> <li>source_alpha_saturated</li> <li>blend_color</li> <li>one_minus_blend_color</li> <li>blend_alpha</li> <li>one_minus_blend_alpha</li> <li>invalid</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> BlendFactor.zero \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.one \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.source_color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.one_minus_source_color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.source_alpha \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.one_minus_source_alpha \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.destination_color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.one_minus_destination_color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.destination_alpha \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.one_minus_destination_alpha \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.source_alpha_saturated \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.blend_color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.one_minus_blend_color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.blend_alpha \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.one_minus_blend_alpha \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.invalid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#blendoperation","title":"BlendOperation","text":"<p><code>import \"luxe: render\" for BlendOperation</code></p> <p>no docs found</p> <ul> <li>add</li> <li>subtract</li> <li>reverse_subtract</li> <li>min</li> <li>max</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> BlendOperation.add \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendOperation.subtract \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendOperation.reverse_subtract \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendOperation.min \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendOperation.max \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendOperation.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#clip","title":"Clip","text":"<p><code>import \"luxe: render\" for Clip</code></p> <p>no docs found</p> <ul> <li>get_duration(clip: <code>Clip</code>)</li> </ul> <p> Clip.get_duration(clip: <code>Clip</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#colorwritemask","title":"ColorWriteMask","text":"<p><code>import \"luxe: render\" for ColorWriteMask</code></p> <p>no docs found</p> <ul> <li>none</li> <li>red</li> <li>green</li> <li>blue</li> <li>alpha</li> <li>all</li> <li>invalid</li> <li>from_map(value: <code>Any</code>)</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> ColorWriteMask.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorWriteMask.red \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorWriteMask.green \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorWriteMask.blue \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorWriteMask.alpha \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorWriteMask.all \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorWriteMask.invalid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorWriteMask.from_map(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorWriteMask.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#comparefunction","title":"CompareFunction","text":"<p><code>import \"luxe: render\" for CompareFunction</code></p> <p>no docs found</p> <ul> <li>never</li> <li>less</li> <li>equal</li> <li>less_equal</li> <li>greater</li> <li>not_equal</li> <li>greater_equal</li> <li>always</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> CompareFunction.never \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CompareFunction.less \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CompareFunction.equal \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CompareFunction.less_equal \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CompareFunction.greater \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CompareFunction.not_equal \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CompareFunction.greater_equal \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CompareFunction.always \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CompareFunction.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#computelayerdesc","title":"ComputeLayerDesc","text":"<p><code>import \"luxe: render\" for ComputeLayerDesc</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>display_id</li> <li>display_id=(v : String)</li> <li>compute_id</li> <li>compute_id=(v : String)</li> <li>dimensions</li> <li>inputs</li> <li>inputs=(v : List)</li> <li>x</li> <li>x=(v : Num)</li> <li>y</li> <li>y=(v : Num)</li> <li>z</li> <li>z=(v : Num)</li> </ul> <p> ComputeLayerDesc.new() \u00b6 returns <code>ComputeLayerDesc</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.display_id \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.display_id=(v : String) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.compute_id \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.compute_id=(v : String) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.dimensions \u00b6 returns <code>Float3</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.inputs \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.inputs=(v : List) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.x \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.x=(v : Num) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.y \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.y=(v : Num) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.z \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.z=(v : Num) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#computelayerinput","title":"ComputeLayerInput","text":"<p><code>import \"luxe: render\" for ComputeLayerInput</code></p> <p>no docs found</p> <ul> <li>library</li> <li>type</li> <li>input</li> <li>buffer</li> <li>new(library: <code>Any</code>, type: <code>String</code>, input: <code>String</code>, buffer: <code>InputBuffer</code>)</li> </ul> <p> ComputeLayerInput.library \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> ComputeLayerInput.type \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> ComputeLayerInput.input \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> ComputeLayerInput.buffer \u00b6 returns <code>InputBuffer</code></p> <p>no docs found   </p> <p> ComputeLayerInput.new(library: <code>Any</code>, type: <code>String</code>, input: <code>String</code>, buffer: <code>InputBuffer</code>) \u00b6 returns <code>ComputeLayerInput</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#cullmode","title":"CullMode","text":"<p><code>import \"luxe: render\" for CullMode</code></p> <p>no docs found</p> <ul> <li>none</li> <li>front</li> <li>back</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> CullMode.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CullMode.front \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CullMode.back \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CullMode.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#geometry","title":"Geometry","text":"<p><code>import \"luxe: render\" for Geometry</code></p> <p>no docs found</p> <ul> <li>create(primitive: <code>Any</code>, material: <code>Any</code>, index_count: <code>Any</code>, index_type: <code>Any</code>, index_buffer: <code>Any</code>)</li> <li>create(primitive: <code>Any</code>, material: <code>Any</code>, vert_count: <code>Any</code>)</li> <li>destroy(geo: <code>Any</code>)</li> <li>valid(geo: <code>Any</code>)</li> <li>set_world_matrix(geo: <code>Any</code>, world: <code>Any</code>)</li> <li>set_vertex_buffer(geo: <code>Any</code>, index: <code>Any</code>, vertex_buffer: <code>Any</code>)</li> <li>get_vertex_buffer(geo: <code>Any</code>, index: <code>Any</code>)</li> <li>get_index_buffer(geo: <code>Any</code>)</li> <li>set_instance_count(geo: <code>Any</code>, count: <code>Any</code>)</li> <li>get_instance_count(geo: <code>Any</code>)</li> <li>set_vert_count(geo: <code>Any</code>, count: <code>Any</code>)</li> <li>set_material(geo: <code>Any</code>, material: <code>Any</code>)</li> <li>set_stencil_references(geo: <code>Any</code>, back: <code>Any</code>, front: <code>Any</code>)</li> <li>set_stencil_reference(geo: <code>Any</code>, value: <code>Any</code>)</li> <li>set_aabb(geo: <code>Any</code>, center_x: <code>Any</code>, center_y: <code>Any</code>, center_z: <code>Any</code>, radius_x: <code>Any</code>, radius_y: <code>Any</code>, radius_z: <code>Any</code>)</li> <li>get_aabb(geo: <code>Any</code>)</li> <li>get_world_obb(geo: <code>Any</code>)</li> <li>get_vert_count(geo: <code>Any</code>)</li> <li>get_material(geo: <code>Any</code>)</li> <li>obb_intersect_ray(geo: <code>Any</code>, ray_x: <code>Any</code>, ray_y: <code>Any</code>, ray_z: <code>Any</code>, ray_dir_x: <code>Any</code>, ray_dir_y: <code>Any</code>, ray_dir_z: <code>Any</code>)</li> <li>layer_include_add(geo: <code>Any</code>, layer_id: <code>Any</code>)</li> <li>layer_include_remove(geo: <code>Any</code>, layer_id: <code>Any</code>)</li> <li>layer_exclude_add(geo: <code>Any</code>, layer_id: <code>Any</code>)</li> <li>layer_exclude_remove(geo: <code>Any</code>, layer_id: <code>Any</code>)</li> </ul> <p> Geometry.create(primitive: <code>Any</code>, material: <code>Any</code>, index_count: <code>Any</code>, index_type: <code>Any</code>, index_buffer: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.create(primitive: <code>Any</code>, material: <code>Any</code>, vert_count: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.destroy(geo: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.valid(geo: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.set_world_matrix(geo: <code>Any</code>, world: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.set_vertex_buffer(geo: <code>Any</code>, index: <code>Any</code>, vertex_buffer: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.get_vertex_buffer(geo: <code>Any</code>, index: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.get_index_buffer(geo: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.set_instance_count(geo: <code>Any</code>, count: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.get_instance_count(geo: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.set_vert_count(geo: <code>Any</code>, count: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.set_material(geo: <code>Any</code>, material: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.set_stencil_references(geo: <code>Any</code>, back: <code>Any</code>, front: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.set_stencil_reference(geo: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.set_aabb(geo: <code>Any</code>, center_x: <code>Any</code>, center_y: <code>Any</code>, center_z: <code>Any</code>, radius_x: <code>Any</code>, radius_y: <code>Any</code>, radius_z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.get_aabb(geo: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.get_world_obb(geo: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.get_vert_count(geo: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.get_material(geo: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.obb_intersect_ray(geo: <code>Any</code>, ray_x: <code>Any</code>, ray_y: <code>Any</code>, ray_z: <code>Any</code>, ray_dir_x: <code>Any</code>, ray_dir_y: <code>Any</code>, ray_dir_z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.layer_include_add(geo: <code>Any</code>, layer_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.layer_include_remove(geo: <code>Any</code>, layer_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.layer_exclude_add(geo: <code>Any</code>, layer_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.layer_exclude_remove(geo: <code>Any</code>, layer_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#image","title":"Image","text":"<p><code>import \"luxe: render\" for Image</code></p> <p>no docs found</p> <ul> <li>create(desc: <code>Any</code>)</li> <li>redefine(image: <code>Any</code>, desc: <code>Any</code>)</li> <li>destroy(name: <code>Any</code>)</li> <li>valid(name: <code>Any</code>)</li> <li>get_resource(name: <code>Any</code>)</li> <li>generate_mipmaps(image: <code>Any</code>)</li> <li>update(image: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, level: <code>Any</code>, slice: <code>Any</code>, bytes: <code>Any</code>)</li> <li>get_type(image: <code>Any</code>)</li> <li>get_width(image: <code>Any</code>)</li> <li>get_height(image: <code>Any</code>)</li> <li>get_depth(image: <code>Any</code>)</li> <li>get_pixel_format(image: <code>Any</code>)</li> <li>get_mipmap_levels(image: <code>Any</code>)</li> <li>get_array_length(image: <code>Any</code>)</li> <li>get_sample_count(image: <code>Any</code>)</li> <li>get_bytes(image: <code>Any</code>, into_bytes: <code>Any</code>)</li> </ul> <p> Image.create(desc: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.redefine(image: <code>Any</code>, desc: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.destroy(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.valid(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.get_resource(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.generate_mipmaps(image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.update(image: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, level: <code>Any</code>, slice: <code>Any</code>, bytes: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.get_type(image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.get_width(image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.get_height(image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.get_depth(image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.get_pixel_format(image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.get_mipmap_levels(image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.get_array_length(image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.get_sample_count(image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.get_bytes(image: <code>Any</code>, into_bytes: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#imagedesc","title":"ImageDesc","text":"<p><code>import \"luxe: render\" for ImageDesc</code></p> <p>no docs found</p> <ul> <li>display_id</li> <li>display_id=(v : Any)</li> <li>type</li> <li>type=(v : Any)</li> <li>pixel_format</li> <li>pixel_format=(v : Any)</li> <li>width</li> <li>width=(v : Any)</li> <li>height</li> <li>height=(v : Any)</li> <li>depth</li> <li>depth=(v : Any)</li> <li>mipmap_levels</li> <li>mipmap_levels=(v : Any)</li> <li>array_length</li> <li>array_length=(v : Any)</li> <li>sample_count</li> <li>sample_count=(v : Any)</li> <li>usage</li> <li>usage=(v : Any)</li> <li>new()</li> </ul> <p> ImageDesc.display_id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.display_id=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.type \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.type=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.pixel_format \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.pixel_format=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.width \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.width=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.height \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.height=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.depth \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.depth=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.mipmap_levels \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.mipmap_levels=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.array_length \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.array_length=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.sample_count \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.sample_count=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.usage \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.usage=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.new() \u00b6 returns <code>ImageDesc</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#imagetype","title":"ImageType","text":"<p><code>import \"luxe: render\" for ImageType</code></p> <p>no docs found</p> <ul> <li>invalid</li> <li>image1D</li> <li>image1DArray</li> <li>image2D</li> <li>image2DArray</li> <li>image2DMultisample</li> <li>imageCube</li> <li>imageCubeArray</li> <li>image3D</li> <li>from_string(value: <code>Any</code>)</li> <li>name(value: <code>Any</code>)</li> </ul> <p> ImageType.invalid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageType.image1D \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageType.image1DArray \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageType.image2D \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageType.image2DArray \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageType.image2DMultisample \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageType.imageCube \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageType.imageCubeArray \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageType.image3D \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageType.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageType.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#imageusage","title":"ImageUsage","text":"<p><code>import \"luxe: render\" for ImageUsage</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>shader_read</li> <li>shader_write</li> <li>shader_read_write</li> <li>render_target</li> <li>pixel_format_view</li> <li>stream</li> </ul> <p> ImageUsage.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageUsage.shader_read \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageUsage.shader_write \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageUsage.shader_read_write \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageUsage.render_target \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageUsage.pixel_format_view \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageUsage.stream \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#indextype","title":"IndexType","text":"<p><code>import \"luxe: render\" for IndexType</code></p> <p>no docs found</p> <ul> <li>none</li> <li>u16</li> <li>u32</li> <li>size_of(value: <code>Any</code>)</li> </ul> <p> IndexType.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> IndexType.u16 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> IndexType.u32 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> IndexType.size_of(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#inputbuffer","title":"InputBuffer","text":"<p><code>import \"luxe: render\" for InputBuffer</code></p> <p>no docs found</p> <ul> <li>create(library: <code>String</code>, type: <code>String</code>, input: <code>String</code>, N: <code>Num</code>)</li> <li>set(buffer: <code>InputBuffer</code>, data: <code>String</code>)</li> </ul> <p> InputBuffer.create(library: <code>String</code>, type: <code>String</code>, input: <code>String</code>, N: <code>Num</code>) \u00b6 returns <code>InputBuffer</code></p> <p>no docs found   </p> <p> InputBuffer.set(buffer: <code>InputBuffer</code>, data: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#layercompute","title":"LayerCompute","text":"<p><code>import \"luxe: render\" for LayerCompute</code></p> <p>no docs found</p> <ul> <li>id</li> <li>id=(v : Any)</li> <li>new(desc: <code>ComputeLayerDesc</code>)</li> <li>update(desc: <code>ComputeLayerDesc</code>)</li> <li>queue(path: <code>RenderPath</code>)</li> </ul> <p> LayerCompute.id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LayerCompute.id=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LayerCompute.new(desc: <code>ComputeLayerDesc</code>) \u00b6 returns <code>LayerCompute</code></p> <p>no docs found   </p> <p> LayerCompute.update(desc: <code>ComputeLayerDesc</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LayerCompute.queue(path: <code>RenderPath</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#layerpass","title":"LayerPass","text":"<p><code>import \"luxe: render\" for LayerPass</code></p> <p>no docs found</p> <ul> <li>id</li> <li>id=(v : Any)</li> <li>new(pass: <code>Any</code>)</li> <li>queue(path: <code>Any</code>)</li> <li>new(path: <code>Any</code>, pass: <code>Any</code>)</li> <li>create_dest(pass: <code>Any</code>)</li> <li>update_material(desc: <code>Any</code>)</li> <li>create_material(pass: <code>PassLayerDesc</code>)</li> </ul> <p> LayerPass.id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LayerPass.id=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LayerPass.new(pass: <code>Any</code>) \u00b6 returns <code>LayerPass</code></p> <p>no docs found   </p> <p> LayerPass.queue(path: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LayerPass.new(path: <code>Any</code>, pass: <code>Any</code>) \u00b6 returns <code>LayerPass</code></p> <p>no docs found   </p> <p> LayerPass.create_dest(pass: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LayerPass.update_material(desc: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LayerPass.create_material(pass: <code>PassLayerDesc</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#loadaction","title":"LoadAction","text":"<p><code>import \"luxe: render\" for LoadAction</code></p> <p>no docs found</p> <ul> <li>dont_care</li> <li>load</li> <li>clear</li> </ul> <p> LoadAction.dont_care \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LoadAction.load \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LoadAction.clear \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#material","title":"Material","text":"<p><code>import \"luxe: render\" for Material</code></p> <p>no docs found</p> <ul> <li>create(basis_type: <code>Any</code>)</li> <li>clone(material: <code>Any</code>)</li> <li>destroy(material: <code>Any</code>)</li> <li>valid(material: <code>Any</code>)</li> <li>undefine(name: <code>Any</code>)</li> <li>get_source_id(material: <code>Any</code>)</li> <li>set_source_id(material: <code>Any</code>, source_id: <code>Any</code>)</li> <li>set_stencil_references(material: <code>Any</code>, back: <code>Any</code>, front: <code>Any</code>)</li> <li>set_stencil_reference(material: <code>Any</code>, value: <code>Any</code>)</li> <li>get_input_image(material: <code>Any</code>, name: <code>Any</code>)</li> <li>has_input(material: <code>Any</code>, name: <code>Any</code>)</li> <li>is_input_array(material: <code>Any</code>, name: <code>Any</code>)</li> <li>set_input(material: <code>Any</code>, name: <code>Any</code>, value: <code>Any</code>)</li> <li>define(name: <code>Any</code>, desc: <code>Any</code>)</li> </ul> <p> Material.create(basis_type: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.clone(material: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.destroy(material: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.valid(material: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.undefine(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.get_source_id(material: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.set_source_id(material: <code>Any</code>, source_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.set_stencil_references(material: <code>Any</code>, back: <code>Any</code>, front: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.set_stencil_reference(material: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.get_input_image(material: <code>Any</code>, name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.has_input(material: <code>Any</code>, name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.is_input_array(material: <code>Any</code>, name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.set_input(material: <code>Any</code>, name: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.define(name: <code>Any</code>, desc: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#materialdesc","title":"MaterialDesc","text":"<p><code>import \"luxe: render\" for MaterialDesc</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>vertex_format</li> <li>vertex_format=(v : Any)</li> <li>vertex</li> <li>vertex=(v : Any)</li> <li>fragment</li> <li>fragment=(v : Any)</li> <li>geometry</li> <li>geometry=(v : Any)</li> <li>depth_bias_enabled</li> <li>depth_bias_enabled=(v : Any)</li> <li>depth_bias</li> <li>depth_bias=(v : Any)</li> <li>depth_bias_slope_scale</li> <li>depth_bias_slope_scale=(v : Any)</li> <li>depth_test</li> <li>depth_test=(v : Any)</li> <li>depth_write</li> <li>depth_write=(v : Any)</li> <li>depth_compare</li> <li>depth_compare=(v : Any)</li> <li>stencil_test</li> <li>stencil_test=(v : Any)</li> <li>write_mask</li> <li>write_mask=(v : Any)</li> <li>blending</li> <li>blending=(v : Any)</li> <li>alpha_blend</li> <li>alpha_blend=(v : Any)</li> <li>rgb_blend</li> <li>rgb_blend=(v : Any)</li> <li>src_alpha</li> <li>src_alpha=(v : Any)</li> <li>src_rgb</li> <li>src_rgb=(v : Any)</li> <li>dest_alpha</li> <li>dest_alpha=(v : Any)</li> <li>dest_rgb</li> <li>dest_rgb=(v : Any)</li> <li>blend_color</li> <li>blend_color=(v : Any)</li> <li>cull</li> <li>cull=(v : Any)</li> <li>winding</li> <li>winding=(v : Any)</li> <li>layers</li> <li>layers=(v : Any)</li> <li>inputs</li> <li>inputs=(v : Any)</li> <li>blocks</li> <li>blocks=(v : Any)</li> <li>replace</li> <li>replace=(v : Any)</li> <li>stencil_back_failure_stencil</li> <li>stencil_back_failure_stencil=(v : Any)</li> <li>stencil_back_failure_depth</li> <li>stencil_back_failure_depth=(v : Any)</li> <li>stencil_back_pass_depth_stencil</li> <li>stencil_back_pass_depth_stencil=(v : Any)</li> <li>stencil_back_compare</li> <li>stencil_back_compare=(v : Any)</li> <li>stencil_back_mask_read</li> <li>stencil_back_mask_read=(v : Any)</li> <li>stencil_back_mask_write</li> <li>stencil_back_mask_write=(v : Any)</li> <li>stencil_back_reference</li> <li>stencil_back_reference=(v : Any)</li> <li>stencil_front_failure_stencil</li> <li>stencil_front_failure_stencil=(v : Any)</li> <li>stencil_front_failure_depth</li> <li>stencil_front_failure_depth=(v : Any)</li> <li>stencil_front_pass_depth_stencil</li> <li>stencil_front_pass_depth_stencil=(v : Any)</li> <li>stencil_front_compare</li> <li>stencil_front_compare=(v : Any)</li> <li>stencil_front_mask_read</li> <li>stencil_front_mask_read=(v : Any)</li> <li>stencil_front_mask_write</li> <li>stencil_front_mask_write=(v : Any)</li> <li>stencil_front_reference</li> <li>stencil_front_reference=(v : Any)</li> </ul> <p> MaterialDesc.new() \u00b6 returns <code>MaterialDesc</code></p> <p>no docs found   </p> <p> MaterialDesc.vertex_format \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.vertex_format=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.vertex \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.vertex=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.fragment \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.fragment=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.geometry \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.geometry=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.depth_bias_enabled \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.depth_bias_enabled=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.depth_bias \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.depth_bias=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.depth_bias_slope_scale \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.depth_bias_slope_scale=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.depth_test \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.depth_test=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.depth_write \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.depth_write=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.depth_compare \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.depth_compare=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_test \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_test=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.write_mask \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.write_mask=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.blending \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.blending=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.alpha_blend \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.alpha_blend=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.rgb_blend \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.rgb_blend=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.src_alpha \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.src_alpha=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.src_rgb \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.src_rgb=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.dest_alpha \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.dest_alpha=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.dest_rgb \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.dest_rgb=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.blend_color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.blend_color=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.cull \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.cull=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.winding \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.winding=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.layers \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.layers=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.inputs \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.inputs=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.blocks \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.blocks=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.replace \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.replace=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_failure_stencil \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_failure_stencil=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_failure_depth \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_failure_depth=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_pass_depth_stencil \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_pass_depth_stencil=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_compare \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_compare=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_mask_read \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_mask_read=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_mask_write \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_mask_write=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_reference \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_reference=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_failure_stencil \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_failure_stencil=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_failure_depth \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_failure_depth=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_pass_depth_stencil \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_pass_depth_stencil=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_compare \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_compare=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_mask_read \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_mask_read=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_mask_write \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_mask_write=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_reference \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_reference=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#materialfunction","title":"MaterialFunction","text":"<p><code>import \"luxe: render\" for MaterialFunction</code></p> <p>no docs found</p> <ul> <li>library</li> <li>library=(v : Any)</li> <li>function</li> <li>function=(v : Any)</li> <li>new()</li> </ul> <p> MaterialFunction.library \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialFunction.library=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialFunction.function \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialFunction.function=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialFunction.new() \u00b6 returns <code>MaterialFunction</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#materialinput","title":"MaterialInput","text":"<p><code>import \"luxe: render\" for MaterialInput</code></p> <p>no docs found</p> <ul> <li>name</li> <li>name=(name : Any)</li> <li>type</li> <li>type=(type : Any)</li> <li>value</li> <li>value=(value : Any)</li> <li>count</li> <li>count=(count : Any)</li> <li>new()</li> <li>new(name: <code>Any</code>, type: <code>Any</code>, value: <code>Any</code>, count: <code>Any</code>)</li> <li>new(name: <code>Any</code>, type: <code>Any</code>, value: <code>Any</code>)</li> <li>init(name: <code>Any</code>, type: <code>Any</code>, value: <code>Any</code>, count: <code>Any</code>)</li> </ul> <p> MaterialInput.name \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInput.name=(name : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInput.type \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInput.type=(type : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInput.value \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInput.value=(value : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInput.count \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInput.count=(count : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInput.new() \u00b6 returns <code>MaterialInput</code></p> <p>no docs found   </p> <p> MaterialInput.new(name: <code>Any</code>, type: <code>Any</code>, value: <code>Any</code>, count: <code>Any</code>) \u00b6 returns <code>MaterialInput</code></p> <p>no docs found   </p> <p> MaterialInput.new(name: <code>Any</code>, type: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>MaterialInput</code></p> <p>no docs found   </p> <p> MaterialInput.init(name: <code>Any</code>, type: <code>Any</code>, value: <code>Any</code>, count: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#materialinputblock","title":"MaterialInputBlock","text":"<p><code>import \"luxe: render\" for MaterialInputBlock</code></p> <p>no docs found</p> <ul> <li>get_defined(name: <code>Any</code>)</li> <li>has_input(block: <code>Any</code>, name: <code>Any</code>)</li> <li>is_input_array(block: <code>Any</code>, name: <code>Any</code>)</li> <li>set_floats(block: <code>MaterialInputBlock</code>, name: <code>String</code>, value: <code>Floats</code>)</li> <li>set_bytes(block: <code>MaterialInputBlock</code>, name: <code>String</code>, value: <code>Bytes</code>)</li> <li>set(block: <code>Any</code>, name: <code>Any</code>, value: <code>Any</code>)</li> </ul> <p> MaterialInputBlock.get_defined(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputBlock.has_input(block: <code>Any</code>, name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputBlock.is_input_array(block: <code>Any</code>, name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputBlock.set_floats(block: <code>MaterialInputBlock</code>, name: <code>String</code>, value: <code>Floats</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputBlock.set_bytes(block: <code>MaterialInputBlock</code>, name: <code>String</code>, value: <code>Bytes</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputBlock.set(block: <code>Any</code>, name: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#materialinputimage","title":"MaterialInputImage","text":"<p><code>import \"luxe: render\" for MaterialInputImage</code></p> <p>no docs found</p> <ul> <li>image</li> <li>image=(image : Any)</li> <li>type</li> <li>type=(type : Any)</li> <li>sampler</li> <li>sampler=(value : Any)</li> <li>new()</li> <li>new(in_image: <code>Any</code>, in_sampler: <code>Any</code>)</li> <li>new(in_image: <code>Any</code>, in_sampler: <code>Any</code>, in_type: <code>Any</code>)</li> </ul> <p> MaterialInputImage.image \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputImage.image=(image : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputImage.type \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputImage.type=(type : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputImage.sampler \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputImage.sampler=(value : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputImage.new() \u00b6 returns <code>MaterialInputImage</code></p> <p>no docs found   </p> <p> MaterialInputImage.new(in_image: <code>Any</code>, in_sampler: <code>Any</code>) \u00b6 returns <code>MaterialInputImage</code></p> <p>no docs found   </p> <p> MaterialInputImage.new(in_image: <code>Any</code>, in_sampler: <code>Any</code>, in_type: <code>Any</code>) \u00b6 returns <code>MaterialInputImage</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#materialinputtype","title":"MaterialInputType","text":"<p><code>import \"luxe: render\" for MaterialInputType</code></p> <p>no docs found</p> <ul> <li>invalid</li> <li>bool</li> <li>bool2</li> <li>bool4</li> <li>int</li> <li>int2</li> <li>int4</li> <li>uint</li> <li>uint2</li> <li>uint4</li> <li>float</li> <li>float2</li> <li>float4</li> <li>mat4</li> <li>image</li> <li>from_string(value: <code>Any</code>)</li> <li>name(value: <code>Any</code>)</li> <li>size_of(value: <code>Any</code>)</li> <li>default_of(value: <code>Any</code>)</li> </ul> <p> MaterialInputType.invalid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.bool \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.bool2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.bool4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.int \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.int2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.int4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.uint2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.uint4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.float \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.float2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.float4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.mat4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.image \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.size_of(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.default_of(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#materialreplace","title":"MaterialReplace","text":"<p><code>import \"luxe: render\" for MaterialReplace</code></p> <p>no docs found</p> <ul> <li>tag</li> <li>tag=(v : Any)</li> <li>basis</li> <li>basis=(v : Any)</li> <li>new()</li> </ul> <p> MaterialReplace.tag \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialReplace.tag=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialReplace.basis \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialReplace.basis=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialReplace.new() \u00b6 returns <code>MaterialReplace</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#passlayerdesc","title":"PassLayerDesc","text":"<p><code>import \"luxe: render\" for PassLayerDesc</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>display_id</li> <li>display_id=(v : Any)</li> <li>dest</li> <li>dest=(v : Any)</li> <li>basis</li> <li>basis=(v : Any)</li> <li>inputs</li> <li>inputs=(v : Any)</li> <li>targets</li> <li>targets=(v : Any)</li> <li>vertex=(v : Any)</li> <li>vertex</li> <li>fragment=(v : Any)</li> <li>fragment</li> <li>clear_color</li> <li>clear_color=(v : Any)</li> <li>clear_depth</li> <li>clear_depth=(v : Any)</li> <li>blending</li> <li>blending=(v : Any)</li> <li>write_mask</li> <li>write_mask=(v : Any)</li> <li>depth_test</li> <li>depth_test=(v : Any)</li> <li>depth_write</li> <li>depth_write=(v : Any)</li> <li>depth_compare</li> <li>depth_compare=(v : Any)</li> </ul> <p> PassLayerDesc.new() \u00b6 returns <code>PassLayerDesc</code></p> <p>no docs found   </p> <p> PassLayerDesc.display_id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.display_id=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.dest \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.dest=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.basis \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.basis=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.inputs \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.inputs=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.targets \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.targets=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.vertex=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.vertex \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.fragment=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.fragment \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.clear_color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.clear_color=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.clear_depth \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.clear_depth=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.blending \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.blending=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.write_mask \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.write_mask=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.depth_test \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.depth_test=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.depth_write \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.depth_write=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.depth_compare \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.depth_compare=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#pixelformat","title":"PixelFormat","text":"<p><code>import \"luxe: render\" for PixelFormat</code></p> <p>no docs found</p> <ul> <li>invalid</li> <li>rgb8Unorm</li> <li>rgb8Unorm_srgb</li> <li>rgb8Snorm</li> <li>rgb8Uint</li> <li>rgb8Sint</li> <li>rgb16Unorm</li> <li>rgb16Snorm</li> <li>rgb16Uint</li> <li>rgb16Sint</li> <li>rgb16Float</li> <li>rgb32Uint</li> <li>rgb32Sint</li> <li>rgb32Float</li> <li>rgba8Unorm</li> <li>rgba8Unorm_srgb</li> <li>rgba8Snorm</li> <li>rgba8Uint</li> <li>rgba8Sint</li> <li>rgba16Unorm</li> <li>rgba16Snorm</li> <li>rgba16Uint</li> <li>rgba16Sint</li> <li>rgba16Float</li> <li>rgba32Uint</li> <li>rgba32Sint</li> <li>rgba32Float</li> <li>r11g11b10Float</li> <li>bgra8Unorm</li> <li>bgra8Unorm_srgb</li> <li>depth16Unorm</li> <li>depth32Float</li> <li>stencil8</li> <li>depth24Unorm_stencil8</li> <li>depth32Float_stencil8</li> <li>bc1_rgba</li> <li>bc3_rgba</li> <li>r8Unorm</li> <li>r8Snorm</li> <li>r8Uint</li> <li>r8Sint</li> <li>rg8Unorm</li> <li>rg8Snorm</li> <li>rg8Uint</li> <li>rg8Sint</li> <li>r16Uint</li> <li>r16Sint</li> <li>r16Float</li> <li>rg16Uint</li> <li>rg16Sint</li> <li>rg16Float</li> <li>r32Uint</li> <li>r32Sint</li> <li>r32Float</li> <li>rg32Uint</li> <li>rg32Sint</li> <li>rg32Float</li> <li>from_string(value: <code>Any</code>)</li> <li>name(value: <code>Any</code>)</li> </ul> <p> PixelFormat.invalid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb8Unorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb8Unorm_srgb \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb8Snorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb8Uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb8Sint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb16Unorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb16Snorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb16Uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb16Sint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb16Float \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb32Uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb32Sint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb32Float \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba8Unorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba8Unorm_srgb \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba8Snorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba8Uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba8Sint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba16Unorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba16Snorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba16Uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba16Sint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba16Float \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba32Uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba32Sint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba32Float \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.r11g11b10Float \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.bgra8Unorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.bgra8Unorm_srgb \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.depth16Unorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.depth32Float \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.stencil8 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.depth24Unorm_stencil8 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.depth32Float_stencil8 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.bc1_rgba \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.bc3_rgba \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.r8Unorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.r8Snorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.r8Uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.r8Sint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rg8Unorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rg8Snorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rg8Uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rg8Sint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.r16Uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.r16Sint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.r16Float \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rg16Uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rg16Sint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rg16Float \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.r32Uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.r32Sint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.r32Float \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rg32Uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rg32Sint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rg32Float \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#pose","title":"Pose","text":"<p><code>import \"luxe: render\" for Pose</code></p> <p>no docs found</p> <ul> <li>create(skeleton: <code>Skeleton</code>)</li> <li>destroy(pose: <code>Pose</code>)</li> <li>reset(pose: <code>Pose</code>)</li> <li>copy(from: <code>Pose</code>, to: <code>Pose</code>)</li> <li>get_bone_pos_joint(pose: <code>Pose</code>, bone_id: <code>String</code>)</li> <li>get_bone_pos(pose: <code>Pose</code>, bone_id: <code>String</code>)</li> <li>get_bone_up(pose: <code>Pose</code>, bone_id: <code>String</code>)</li> <li>get_bone_forward(pose: <code>Pose</code>, bone_id: <code>String</code>)</li> <li>get_bone_right(pose: <code>Pose</code>, bone_id: <code>String</code>)</li> </ul> <p> Pose.create(skeleton: <code>Skeleton</code>) \u00b6 returns <code>Pose</code></p> <p>no docs found   </p> <p> Pose.destroy(pose: <code>Pose</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Pose.reset(pose: <code>Pose</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Pose.copy(from: <code>Pose</code>, to: <code>Pose</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Pose.get_bone_pos_joint(pose: <code>Pose</code>, bone_id: <code>String</code>) \u00b6 returns <code>Float3</code></p> <p>no docs found   </p> <p> Pose.get_bone_pos(pose: <code>Pose</code>, bone_id: <code>String</code>) \u00b6 returns <code>Float3</code></p> <p>no docs found   </p> <p> Pose.get_bone_up(pose: <code>Pose</code>, bone_id: <code>String</code>) \u00b6 returns <code>Float3</code></p> <p>no docs found   </p> <p> Pose.get_bone_forward(pose: <code>Pose</code>, bone_id: <code>String</code>) \u00b6 returns <code>Float3</code></p> <p>no docs found   </p> <p> Pose.get_bone_right(pose: <code>Pose</code>, bone_id: <code>String</code>) \u00b6 returns <code>Float3</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#posegraph","title":"PoseGraph","text":"<p><code>import \"luxe: render\" for PoseGraph</code></p> <p>no docs found</p> <ul> <li>create(skeleton: <code>Skeleton</code>)</li> <li>destroy(graph: <code>PoseGraph</code>)</li> <li>valid(graph: <code>PoseGraph</code>)</li> <li>tick(graph: <code>PoseGraph</code>, delta: <code>Num</code>)</li> <li>pose(graph: <code>PoseGraph</code>)</li> <li>set_time(graph: <code>PoseGraph</code>, time: <code>Num</code>)</li> <li>get_time(graph: <code>PoseGraph</code>)</li> <li>node_add(graph: <code>PoseGraph</code>, node: <code>PoseNode</code>)</li> <li>node_remove(graph: <code>PoseGraph</code>, index: <code>Num</code>)</li> <li>node_at(graph: <code>PoseGraph</code>, index: <code>Num</code>)</li> <li>node_index(graph: <code>PoseGraph</code>, node: <code>PoseNode</code>)</li> <li>node_count(graph: <code>PoseGraph</code>)</li> </ul> <p> PoseGraph.create(skeleton: <code>Skeleton</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PoseGraph.destroy(graph: <code>PoseGraph</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PoseGraph.valid(graph: <code>PoseGraph</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> PoseGraph.tick(graph: <code>PoseGraph</code>, delta: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PoseGraph.pose(graph: <code>PoseGraph</code>) \u00b6 returns <code>Pose</code></p> <p>no docs found   </p> <p> PoseGraph.set_time(graph: <code>PoseGraph</code>, time: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PoseGraph.get_time(graph: <code>PoseGraph</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> PoseGraph.node_add(graph: <code>PoseGraph</code>, node: <code>PoseNode</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PoseGraph.node_remove(graph: <code>PoseGraph</code>, index: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PoseGraph.node_at(graph: <code>PoseGraph</code>, index: <code>Num</code>) \u00b6 returns <code>PoseNode</code></p> <p>no docs found   </p> <p> PoseGraph.node_index(graph: <code>PoseGraph</code>, node: <code>PoseNode</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> PoseGraph.node_count(graph: <code>PoseGraph</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#posenode","title":"PoseNode","text":"<p><code>import \"luxe: render\" for PoseNode</code></p> <p>no docs found</p> <ul> <li>create(node_type_id: <code>String</code>)</li> <li>destroy(node: <code>PoseNode</code>)</li> <li>valid(node: <code>PoseNode</code>)</li> <li>pose(node: <code>PoseNode</code>)</li> <li>block(node: <code>PoseNode</code>)</li> <li>input(node: <code>PoseNode</code>)</li> </ul> <p> PoseNode.create(node_type_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PoseNode.destroy(node: <code>PoseNode</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PoseNode.valid(node: <code>PoseNode</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> PoseNode.pose(node: <code>PoseNode</code>) \u00b6 returns <code>Pose</code></p> <p>no docs found   </p> <p> PoseNode.block(node: <code>PoseNode</code>) \u00b6 returns <code>Block</code></p> <p>no docs found   </p> <p> PoseNode.input(node: <code>PoseNode</code>) \u00b6 returns <code>Any</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#primitive","title":"Primitive","text":"<p><code>import \"luxe: render\" for Primitive</code></p> <p>no docs found</p> <ul> <li>point</li> <li>line</li> <li>line_strip</li> <li>triangle</li> <li>triangle_strip</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> Primitive.point \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Primitive.line \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Primitive.line_strip \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Primitive.triangle \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Primitive.triangle_strip \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Primitive.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#render","title":"Render","text":"<p><code>import \"luxe: render\" for Render</code></p> <p>no docs found</p> <ul> <li>dispatch(library: <code>String</code>, function: <code>String</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>submit(set: <code>RenderSet</code>, target_path: <code>RenderPath</code>, target_resource: <code>String</code>, target_region: <code>Float4</code>, mat_proj: <code>Floats</code>, mat_view: <code>Floats</code>)</li> <li>submit_now(set: <code>RenderSet</code>, target_path: <code>RenderPath</code>, target_resource: <code>String</code>, target_region: <code>Float4</code>, mat_proj: <code>Floats</code>, mat_view: <code>Floats</code>)</li> <li>submit_fn(set: <code>RenderSet</code>, target_path: <code>String</code>, target_resource: <code>String</code>, target_region: <code>Float4</code>, mat_proj: <code>Floats</code>, mat_view: <code>Floats</code>, settings: <code>Maps</code>, fn: <code>Fn</code>)</li> <li>create_set()</li> <li>destroy_set(set: <code>RenderSet</code>)</li> <li>valid_set(set: <code>RenderSet</code>)</li> <li>set_add(set: <code>RenderSet</code>, geo: <code>Geometry</code>)</li> <li>set_remove(set: <code>RenderSet</code>, geo: <code>Geometry</code>)</li> <li>set_get_geometry(set: <code>RenderSet</code>, into: <code>List</code>)</li> <li>set_get_count(set: <code>RenderSet</code>)</li> <li>create_path()</li> <li>destroy_path(path: <code>RenderPath</code>)</li> <li>valid_path(path: <code>RenderPath</code>)</li> <li>window_w()</li> <li>window_h()</li> <li>window_state()</li> <li>window_focus()</li> <li>window_hide(state: <code>Any</code>)</li> <li>drawable_w()</li> <li>drawable_h()</li> <li>drawable_ratio()</li> <li>window_set_title(title: <code>String</code>)</li> <li>get_path_vertices(into_pos: <code>Any</code>, offset_pos: <code>Any</code>, stride_pos: <code>Any</code>, into_color: <code>Any</code>, offset_color: <code>Any</code>, stride_color: <code>Any</code>, points: <code>Any</code>, color: <code>Any</code>, thickness: <code>Any</code>, cap: <code>Any</code>, join: <code>Any</code>, closed: <code>Any</code>, miter_limit: <code>Any</code>)</li> <li>get_path_vertex_count(points: <code>Any</code>, thickness: <code>Any</code>, cap: <code>Any</code>, join: <code>Any</code>, closed: <code>Any</code>, miter_limit: <code>Any</code>)</li> <li>push_render_dest(dest: <code>Any</code>, into: <code>Any</code>)</li> <li>path_add_render_layers(path: <code>Any</code>, name: <code>Any</code>, layers_add: <code>Any</code>, layer: <code>Any</code>)</li> <li>path_add_render_layers(path: <code>Any</code>, name: <code>Any</code>, layers_add: <code>Any</code>, layers_exclude: <code>Any</code>, layer: <code>RenderLayerDesc</code>)</li> <li>path_add_render_layer(path: <code>Any</code>, name: <code>Any</code>, layer: <code>RenderLayerDesc</code>)</li> <li>path_add_compute_layer(path: <code>Any</code>, compute_id: <code>Any</code>, display: <code>Any</code>, dimensions: <code>Any</code>, inputs: <code>Any</code>)</li> <li>path_add_pass_layer(path: <code>Any</code>, name: <code>Any</code>, dest: <code>Any</code>, material: <code>Any</code>)</li> <li>path_remove(path: <code>Any</code>, name: <code>Any</code>)</li> <li>path_update(path: <code>Any</code>, name: <code>Any</code>, layer: <code>RenderLayerDesc</code>)</li> <li>define_compute(name: <code>String</code>, library: <code>String</code>, function: <code>String</code>, blocks: <code>List</code>)</li> <li>undefine_compute(name: <code>Any</code>)</li> <li>undefine_sampler_state(name: <code>Any</code>)</li> <li>define_sampler_state(name: <code>Any</code>, desc: <code>Any</code>)</li> <li>define_vertex_format(name: <code>Any</code>, desc: <code>Any</code>)</li> <li>undefine_vertex_format(name: <code>Any</code>)</li> <li>define_resource(name: <code>Any</code>, image: <code>Any</code>)</li> <li>resource_get_image(name: <code>Any</code>)</li> <li>undefine_resource(name: <code>Any</code>)</li> <li>create_vertex_buffer(data: <code>Any</code>, length: <code>Any</code>)</li> <li>vertex_buffer_get_size(vertex_buffer: <code>Any</code>)</li> <li>vertex_buffer_get_data(vertex_buffer: <code>Any</code>, into: <code>Any</code>, length: <code>Any</code>, offset: <code>Any</code>)</li> <li>vertex_buffer_replace(vertex_buffer: <code>Any</code>, data: <code>Any</code>, length: <code>Any</code>)</li> <li>vertex_buffer_update(vertex_buffer: <code>Any</code>, data: <code>Any</code>, length: <code>Any</code>, data_src_offset: <code>Any</code>, dest_offset: <code>Any</code>)</li> <li>destroy_vertex_buffer(vertex_buffer: <code>Any</code>)</li> <li>create_index_buffer(data: <code>Any</code>, length: <code>Any</code>)</li> <li>create_index_buffer32(data: <code>Any</code>, length: <code>Any</code>)</li> <li>index_buffer_get_size(index_buffer: <code>Any</code>)</li> <li>index_buffer_get_data(index_buffer: <code>Any</code>, into: <code>Any</code>, length: <code>Any</code>, offset: <code>Any</code>)</li> <li>index_buffer_replace(index_buffer: <code>Any</code>, data: <code>Any</code>, length: <code>Any</code>)</li> <li>index_buffer_update(index_buffer: <code>Any</code>, data: <code>Any</code>, length: <code>Any</code>, data_src_offset: <code>Any</code>, dest_offset: <code>Any</code>)</li> <li>destroy_index_buffer(index_buffer: <code>Any</code>)</li> <li>create_text(material: <code>Any</code>, default_size: <code>Any</code>, default_font: <code>Any</code>, default_color: <code>Any</code>, render_set: <code>Any</code>)</li> <li>destroy_text(text: <code>Any</code>)</li> <li>valid_text(text: <code>Any</code>)</li> <li>text_attr_clear(text: <code>Any</code>)</li> <li>text_set_text_buffer(text: <code>Any</code>, string: <code>Any</code>)</li> <li>text_set_attr(text: <code>Text</code>, start: <code>Num</code>, length: <code>Num</code>, type: <code>TextAttrType</code>, key: <code>String</code>, value: <code>Any</code>)</li> <li>text_set_outline(text: <code>Text</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>)</li> <li>text_set_shadow(text: <code>Text</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>)</li> <li>text_set_pos(text: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>)</li> <li>text_set_align(text: <code>Any</code>, align: <code>Any</code>, align_vertical: <code>Any</code>)</li> <li>text_set_bounds(text: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>)</li> <li>text_commit(text: <code>Any</code>)</li> <li>text_get_geometry(text: <code>Any</code>)</li> <li>text_get_extents(text: <code>Any</code>, offset: <code>Any</code>, count: <code>Any</code>)</li> <li>text_get_extents(text: <code>Any</code>)</li> <li>text_get_character_bounds(text: <code>Any</code>, index: <code>Any</code>)</li> <li>text_set_text(text: <code>Any</code>, string: <code>Any</code>)</li> <li>kVertexAttributes</li> <li>kColorTargets</li> <li>kMaterialLayerTargets</li> <li>kMaterialInputs</li> <li>kMaterialReplace</li> <li>kMaterialPassUsage</li> <li>kStencilUnset</li> </ul> <p> Render.dispatch(library: <code>String</code>, function: <code>String</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Dispatch a compute function directly (todo: doesn't have a way to get inputs atm)   </p> <p> Render.submit(set: <code>RenderSet</code>, target_path: <code>RenderPath</code>, target_resource: <code>String</code>, target_region: <code>Float4</code>, mat_proj: <code>Floats</code>, mat_view: <code>Floats</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.submit_now(set: <code>RenderSet</code>, target_path: <code>RenderPath</code>, target_resource: <code>String</code>, target_region: <code>Float4</code>, mat_proj: <code>Floats</code>, mat_view: <code>Floats</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.submit_fn(set: <code>RenderSet</code>, target_path: <code>String</code>, target_resource: <code>String</code>, target_region: <code>Float4</code>, mat_proj: <code>Floats</code>, mat_view: <code>Floats</code>, settings: <code>Maps</code>, fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.create_set() \u00b6 returns <code>RenderSet</code></p> <p>no docs found   </p> <p> Render.destroy_set(set: <code>RenderSet</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Render.valid_set(set: <code>RenderSet</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.set_add(set: <code>RenderSet</code>, geo: <code>Geometry</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.set_remove(set: <code>RenderSet</code>, geo: <code>Geometry</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.set_get_geometry(set: <code>RenderSet</code>, into: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.set_get_count(set: <code>RenderSet</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.create_path() \u00b6 returns <code>RenderPath</code></p> <p>no docs found   </p> <p> Render.destroy_path(path: <code>RenderPath</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.valid_path(path: <code>RenderPath</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.window_w() \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Render.window_h() \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Render.window_state() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.window_focus() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.window_hide(state: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.drawable_w() \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Render.drawable_h() \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Render.drawable_ratio() \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Render.window_set_title(title: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Render.get_path_vertices(into_pos: <code>Any</code>, offset_pos: <code>Any</code>, stride_pos: <code>Any</code>, into_color: <code>Any</code>, offset_color: <code>Any</code>, stride_color: <code>Any</code>, points: <code>Any</code>, color: <code>Any</code>, thickness: <code>Any</code>, cap: <code>Any</code>, join: <code>Any</code>, closed: <code>Any</code>, miter_limit: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.get_path_vertex_count(points: <code>Any</code>, thickness: <code>Any</code>, cap: <code>Any</code>, join: <code>Any</code>, closed: <code>Any</code>, miter_limit: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.push_render_dest(dest: <code>Any</code>, into: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.path_add_render_layers(path: <code>Any</code>, name: <code>Any</code>, layers_add: <code>Any</code>, layer: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.path_add_render_layers(path: <code>Any</code>, name: <code>Any</code>, layers_add: <code>Any</code>, layers_exclude: <code>Any</code>, layer: <code>RenderLayerDesc</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.path_add_render_layer(path: <code>Any</code>, name: <code>Any</code>, layer: <code>RenderLayerDesc</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.path_add_compute_layer(path: <code>Any</code>, compute_id: <code>Any</code>, display: <code>Any</code>, dimensions: <code>Any</code>, inputs: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.path_add_pass_layer(path: <code>Any</code>, name: <code>Any</code>, dest: <code>Any</code>, material: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.path_remove(path: <code>Any</code>, name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.path_update(path: <code>Any</code>, name: <code>Any</code>, layer: <code>RenderLayerDesc</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.define_compute(name: <code>String</code>, library: <code>String</code>, function: <code>String</code>, blocks: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.undefine_compute(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.undefine_sampler_state(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.define_sampler_state(name: <code>Any</code>, desc: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.define_vertex_format(name: <code>Any</code>, desc: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.undefine_vertex_format(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.define_resource(name: <code>Any</code>, image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.resource_get_image(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.undefine_resource(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.create_vertex_buffer(data: <code>Any</code>, length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.vertex_buffer_get_size(vertex_buffer: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.vertex_buffer_get_data(vertex_buffer: <code>Any</code>, into: <code>Any</code>, length: <code>Any</code>, offset: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.vertex_buffer_replace(vertex_buffer: <code>Any</code>, data: <code>Any</code>, length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.vertex_buffer_update(vertex_buffer: <code>Any</code>, data: <code>Any</code>, length: <code>Any</code>, data_src_offset: <code>Any</code>, dest_offset: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.destroy_vertex_buffer(vertex_buffer: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.create_index_buffer(data: <code>Any</code>, length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.create_index_buffer32(data: <code>Any</code>, length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.index_buffer_get_size(index_buffer: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.index_buffer_get_data(index_buffer: <code>Any</code>, into: <code>Any</code>, length: <code>Any</code>, offset: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.index_buffer_replace(index_buffer: <code>Any</code>, data: <code>Any</code>, length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.index_buffer_update(index_buffer: <code>Any</code>, data: <code>Any</code>, length: <code>Any</code>, data_src_offset: <code>Any</code>, dest_offset: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.destroy_index_buffer(index_buffer: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.create_text(material: <code>Any</code>, default_size: <code>Any</code>, default_font: <code>Any</code>, default_color: <code>Any</code>, render_set: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.destroy_text(text: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.valid_text(text: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_attr_clear(text: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_set_text_buffer(text: <code>Any</code>, string: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_set_attr(text: <code>Text</code>, start: <code>Num</code>, length: <code>Num</code>, type: <code>TextAttrType</code>, key: <code>String</code>, value: <code>Any</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Render.text_set_outline(text: <code>Text</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_set_shadow(text: <code>Text</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_set_pos(text: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_set_align(text: <code>Any</code>, align: <code>Any</code>, align_vertical: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_set_bounds(text: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_commit(text: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_get_geometry(text: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_get_extents(text: <code>Any</code>, offset: <code>Any</code>, count: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_get_extents(text: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_get_character_bounds(text: <code>Any</code>, index: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_set_text(text: <code>Any</code>, string: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.kVertexAttributes \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.kColorTargets \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.kMaterialLayerTargets \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.kMaterialInputs \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.kMaterialReplace \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.kMaterialPassUsage \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.kStencilUnset \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#renderdest","title":"RenderDest","text":"<p><code>import \"luxe: render\" for RenderDest</code></p> <p>no docs found</p> <ul> <li>target_region</li> <li>color</li> <li>depth</li> <li>stencil</li> <li>color=(color : Any)</li> <li>depth=(depth : Any)</li> <li>stencil=(stencil : Any)</li> <li>new()</li> </ul> <p> RenderDest.target_region \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDest.color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDest.depth \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDest.stencil \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDest.color=(color : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDest.depth=(depth : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDest.stencil=(stencil : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDest.new() \u00b6 returns <code>RenderDest</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#renderdestcolor","title":"RenderDestColor","text":"<p><code>import \"luxe: render\" for RenderDestColor</code></p> <p>no docs found</p> <ul> <li>render_target</li> <li>render_target=(render_target : Any)</li> <li>clear_color</li> <li>clear_color=(clear_color : Any)</li> <li>load_action</li> <li>load_action=(load_action : Any)</li> <li>store_action</li> <li>store_action=(store_action : Any)</li> <li>level</li> <li>level=(level : Any)</li> <li>slice</li> <li>slice=(slice : Any)</li> <li>depth</li> <li>depth=(depth : Any)</li> <li>new()</li> </ul> <p> RenderDestColor.render_target \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.render_target=(render_target : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.clear_color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.clear_color=(clear_color : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.load_action \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.load_action=(load_action : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.store_action \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.store_action=(store_action : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.level \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.level=(level : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.slice \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.slice=(slice : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.depth \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.depth=(depth : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.new() \u00b6 returns <code>RenderDestColor</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#renderdestdepth","title":"RenderDestDepth","text":"<p><code>import \"luxe: render\" for RenderDestDepth</code></p> <p>no docs found</p> <ul> <li>render_target</li> <li>render_target=(render_target : Any)</li> <li>clear_depth</li> <li>clear_depth=(clear_depth : Any)</li> <li>load_action</li> <li>load_action=(load_action : Any)</li> <li>store_action</li> <li>store_action=(store_action : Any)</li> <li>level</li> <li>level=(level : Any)</li> <li>slice</li> <li>slice=(slice : Any)</li> <li>depth</li> <li>depth=(depth : Any)</li> <li>new()</li> </ul> <p> RenderDestDepth.render_target \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.render_target=(render_target : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.clear_depth \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.clear_depth=(clear_depth : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.load_action \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.load_action=(load_action : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.store_action \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.store_action=(store_action : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.level \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.level=(level : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.slice \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.slice=(slice : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.depth \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.depth=(depth : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.new() \u00b6 returns <code>RenderDestDepth</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#renderdeststencil","title":"RenderDestStencil","text":"<p><code>import \"luxe: render\" for RenderDestStencil</code></p> <p>no docs found</p> <ul> <li>render_target</li> <li>render_target=(render_target : Any)</li> <li>clear_stencil</li> <li>clear_stencil=(clear_stencil : Any)</li> <li>load_action</li> <li>load_action=(load_action : Any)</li> <li>store_action</li> <li>store_action=(store_action : Any)</li> <li>level</li> <li>level=(level : Any)</li> <li>slice</li> <li>slice=(slice : Any)</li> <li>depth</li> <li>depth=(depth : Any)</li> <li>new()</li> </ul> <p> RenderDestStencil.render_target \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.render_target=(render_target : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.clear_stencil \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.clear_stencil=(clear_stencil : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.load_action \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.load_action=(load_action : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.store_action \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.store_action=(store_action : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.level \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.level=(level : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.slice \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.slice=(slice : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.depth \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.depth=(depth : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.new() \u00b6 returns <code>RenderDestStencil</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#renderlayerdesc","title":"RenderLayerDesc","text":"<p><code>import \"luxe: render\" for RenderLayerDesc</code></p> <p>no docs found</p> <ul> <li>display_id</li> <li>display_id=(display_id : Any)</li> <li>sort</li> <li>sort=(sort : Any)</li> <li>material_override</li> <li>material_override=(material_override : Any)</li> <li>replace_tag</li> <li>replace_tag=(replace_tag : Any)</li> <li>dest</li> <li>dest=(dest : Any)</li> <li>new()</li> </ul> <p> RenderLayerDesc.display_id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderLayerDesc.display_id=(display_id : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderLayerDesc.sort \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderLayerDesc.sort=(sort : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderLayerDesc.material_override \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderLayerDesc.material_override=(material_override : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderLayerDesc.replace_tag \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderLayerDesc.replace_tag=(replace_tag : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderLayerDesc.dest \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderLayerDesc.dest=(dest : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderLayerDesc.new() \u00b6 returns <code>RenderLayerDesc</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#renderpathcontext","title":"RenderPathContext","text":"<p><code>import \"luxe: render\" for RenderPathContext</code></p> <p>no docs found</p> <ul> <li>settings</li> <li>new(path: <code>String</code>, settings: <code>Map</code>)</li> <li>path</li> <li>change_path(path: <code>String</code>)</li> <li>layer_render(name: <code>String</code>, render_layer_desc: <code>RenderLayerDesc</code>)</li> <li>layers_render(name: <code>Any</code>, layers_add: <code>Any</code>, render_layer_desc: <code>Any</code>)</li> <li>layers_render(name: <code>Any</code>, layers_add: <code>Any</code>, layers_exclude: <code>Any</code>, render_layer_desc: <code>Any</code>)</li> <li>layer_pass(pass_layer_desc: <code>Any</code>)</li> <li>layer_compute(compute_layer_desc: <code>ComputeLayerDesc</code>)</li> <li>get(key: <code>Any</code>, default: <code>Any</code>)</li> <li>set(key: <code>Any</code>, value: <code>Any</code>)</li> </ul> <p> RenderPathContext.settings \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> RenderPathContext.new(path: <code>String</code>, settings: <code>Map</code>) \u00b6 returns <code>RenderPathContext</code></p> <p>no docs found   </p> <p> RenderPathContext.path \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> RenderPathContext.change_path(path: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderPathContext.layer_render(name: <code>String</code>, render_layer_desc: <code>RenderLayerDesc</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderPathContext.layers_render(name: <code>Any</code>, layers_add: <code>Any</code>, render_layer_desc: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderPathContext.layers_render(name: <code>Any</code>, layers_add: <code>Any</code>, layers_exclude: <code>Any</code>, render_layer_desc: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderPathContext.layer_pass(pass_layer_desc: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderPathContext.layer_compute(compute_layer_desc: <code>ComputeLayerDesc</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderPathContext.get(key: <code>Any</code>, default: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderPathContext.set(key: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#renderviewdesc","title":"RenderViewDesc","text":"<p><code>import \"luxe: render\" for RenderViewDesc</code></p> <p>no docs found</p> <ul> <li>target</li> <li>target=(v : Any)</li> <li>target(v: <code>Any</code>)</li> <li>path</li> <li>path=(v : Any)</li> <li>path(v: <code>Any</code>)</li> <li>region</li> <li>region=(v : Any)</li> <li>region(v: <code>Any</code>)</li> <li>settings</li> <li>settings=(v : Any)</li> <li>settings(v: <code>Any</code>)</li> <li>new(target_resource: <code>Any</code>, target_path: <code>Any</code>, target_region: <code>Any</code>, target_settings: <code>Any</code>)</li> <li>new()</li> </ul> <p> RenderViewDesc.target \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderViewDesc.target=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderViewDesc.target(v: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderViewDesc.path \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderViewDesc.path=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderViewDesc.path(v: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderViewDesc.region \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderViewDesc.region=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderViewDesc.region(v: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderViewDesc.settings \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderViewDesc.settings=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderViewDesc.settings(v: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderViewDesc.new(target_resource: <code>Any</code>, target_path: <code>Any</code>, target_region: <code>Any</code>, target_settings: <code>Any</code>) \u00b6 returns <code>RenderViewDesc</code></p> <p>no docs found   </p> <p> RenderViewDesc.new() \u00b6 returns <code>RenderViewDesc</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#sampleraddressmode","title":"SamplerAddressMode","text":"<p><code>import \"luxe: render\" for SamplerAddressMode</code></p> <p>no docs found</p> <ul> <li>clamp_to_edge</li> <li>repeat</li> <li>mirror_repeat</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> SamplerAddressMode.clamp_to_edge \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerAddressMode.repeat \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerAddressMode.mirror_repeat \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerAddressMode.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#samplerminmagfilter","title":"SamplerMinMagFilter","text":"<p><code>import \"luxe: render\" for SamplerMinMagFilter</code></p> <p>no docs found</p> <ul> <li>nearest</li> <li>linear</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> SamplerMinMagFilter.nearest \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerMinMagFilter.linear \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerMinMagFilter.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#samplermipfilter","title":"SamplerMipFilter","text":"<p><code>import \"luxe: render\" for SamplerMipFilter</code></p> <p>no docs found</p> <ul> <li>none</li> <li>nearest</li> <li>linear</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> SamplerMipFilter.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerMipFilter.nearest \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerMipFilter.linear \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerMipFilter.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#samplerstate","title":"SamplerState","text":"<p><code>import \"luxe: render\" for SamplerState</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>address_r</li> <li>address_r=(v : Any)</li> <li>address_s</li> <li>address_s=(v : Any)</li> <li>address_t</li> <li>address_t=(v : Any)</li> <li>filter_min</li> <li>filter_min=(v : Any)</li> <li>filter_mag</li> <li>filter_mag=(v : Any)</li> <li>filter_mip</li> <li>filter_mip=(v : Any)</li> </ul> <p> SamplerState.new() \u00b6 returns <code>SamplerState</code></p> <p>no docs found   </p> <p> SamplerState.address_r \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerState.address_r=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerState.address_s \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerState.address_s=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerState.address_t \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerState.address_t=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerState.filter_min \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerState.filter_min=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerState.filter_mag \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerState.filter_mag=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerState.filter_mip \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerState.filter_mip=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#sorttype","title":"SortType","text":"<p><code>import \"luxe: render\" for SortType</code></p> <p>no docs found</p> <ul> <li>front_to_back</li> <li>back_to_front</li> <li>sort_by_z</li> <li>sort_by_z_reverse</li> <li>none</li> </ul> <p> SortType.front_to_back \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SortType.back_to_front \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SortType.sort_by_z \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SortType.sort_by_z_reverse \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SortType.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#stenciloperation","title":"StencilOperation","text":"<p><code>import \"luxe: render\" for StencilOperation</code></p> <p>no docs found</p> <ul> <li>keep</li> <li>zero</li> <li>replace</li> <li>increment_clamp</li> <li>decrement_clamp</li> <li>invert</li> <li>increment_wrap</li> <li>decrement_wrap</li> <li>invalid</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> StencilOperation.keep \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> StencilOperation.zero \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> StencilOperation.replace \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> StencilOperation.increment_clamp \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> StencilOperation.decrement_clamp \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> StencilOperation.invert \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> StencilOperation.increment_wrap \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> StencilOperation.decrement_wrap \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> StencilOperation.invalid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> StencilOperation.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#storeaction","title":"StoreAction","text":"<p><code>import \"luxe: render\" for StoreAction</code></p> <p>no docs found</p> <ul> <li>dont_care</li> <li>store</li> </ul> <p> StoreAction.dont_care \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> StoreAction.store \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#textalign","title":"TextAlign","text":"<p><code>import \"luxe: render\" for TextAlign</code></p> <p>no docs found</p> <ul> <li>left</li> <li>center</li> <li>right</li> <li>top</li> <li>bottom</li> <li>from_string(value: <code>Any</code>)</li> <li>name(value: <code>Any</code>)</li> </ul> <p> TextAlign.left \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAlign.center \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAlign.right \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAlign.top \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAlign.bottom \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAlign.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAlign.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#textattrtype","title":"TextAttrType","text":"<p><code>import \"luxe: render\" for TextAttrType</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>handle32</li> <li>handle64</li> <li>number</li> <li>string</li> <li>color</li> <li>float2</li> <li>name(value: <code>Any</code>)</li> </ul> <p> TextAttrType.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAttrType.handle32 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAttrType.handle64 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAttrType.number \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAttrType.string \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAttrType.color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAttrType.float2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAttrType.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#textwrapmode","title":"TextWrapMode","text":"<p><code>import \"luxe: render\" for TextWrapMode</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>none</li> <li>word</li> <li>from_string(value: <code>Any</code>)</li> <li>name(value: <code>Any</code>)</li> </ul> <p> TextWrapMode.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextWrapMode.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextWrapMode.word \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextWrapMode.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextWrapMode.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#vertexattr","title":"VertexAttr","text":"<p><code>import \"luxe: render\" for VertexAttr</code></p> <p>no docs found</p> <ul> <li>new(name: <code>Any</code>)</li> <li>name</li> <li>name=(v : Any)</li> <li>format</li> <li>format=(v : Any)</li> <li>offset</li> <li>offset=(v : Any)</li> <li>buffer_index</li> <li>buffer_index=(v : Any)</li> </ul> <p> VertexAttr.new(name: <code>Any</code>) \u00b6 returns <code>VertexAttr</code></p> <p>no docs found   </p> <p> VertexAttr.name \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttr.name=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttr.format \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttr.format=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttr.offset \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttr.offset=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttr.buffer_index \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttr.buffer_index=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#vertexattrformat","title":"VertexAttrFormat","text":"<p><code>import \"luxe: render\" for VertexAttrFormat</code></p> <p>no docs found</p> <ul> <li>invalid</li> <li>bool</li> <li>bool2</li> <li>bool3</li> <li>bool4</li> <li>int</li> <li>int2</li> <li>int3</li> <li>int4</li> <li>uint</li> <li>uint2</li> <li>uint3</li> <li>uint4</li> <li>float</li> <li>float2</li> <li>float3</li> <li>float4</li> <li>double</li> <li>double2</li> <li>double3</li> <li>double4</li> <li>mat4</li> <li>from_string(value: <code>Any</code>)</li> <li>size_of(value: <code>Any</code>)</li> </ul> <p> VertexAttrFormat.invalid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.bool \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.bool2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.bool3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.bool4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.int \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.int2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.int3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.int4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.uint2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.uint3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.uint4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.float \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.float2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.float3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.float4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.double \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.double2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.double3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.double4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.mat4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.size_of(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#vertexformat","title":"VertexFormat","text":"<p><code>import \"luxe: render\" for VertexFormat</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>attributes</li> <li>attributes=(v : Any)</li> <li>layouts</li> <li>layouts=(v : Any)</li> </ul> <p> VertexFormat.new() \u00b6 returns <code>VertexFormat</code></p> <p>no docs found   </p> <p> VertexFormat.attributes \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexFormat.attributes=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexFormat.layouts \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexFormat.layouts=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#vertexinputrate","title":"VertexInputRate","text":"<p><code>import \"luxe: render\" for VertexInputRate</code></p> <p>no docs found</p> <ul> <li>vertex</li> <li>instance</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> VertexInputRate.vertex \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexInputRate.instance \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexInputRate.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#vertexlayout","title":"VertexLayout","text":"<p><code>import \"luxe: render\" for VertexLayout</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>stride</li> <li>stride=(v : Any)</li> </ul> <p> VertexLayout.new() \u00b6 returns <code>VertexLayout</code></p> <p>no docs found   </p> <p> VertexLayout.stride \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexLayout.stride=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/#winding","title":"Winding","text":"<p><code>import \"luxe: render\" for Winding</code></p> <p>no docs found</p> <ul> <li>clockwise</li> <li>counter_clockwise</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> Winding.clockwise \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Winding.counter_clockwise \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Winding.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/sat2D/","title":"sat2D","text":""},{"location":"api/v/2024.12.3/sat2D/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/sat2D/#luxe-sat2d-module","title":"<code>luxe: sat2D</code> module","text":"<ul> <li>SAT2D </li> </ul>"},{"location":"api/v/2024.12.3/sat2D/#sat2d","title":"SAT2D","text":"<p><code>import \"luxe: sat2D\" for SAT2D</code></p> <p>The SAT2D API is a collision and query API for the luxe: shape2D shapes and types. It implements the \"separating axis theorom\" for collision.  Note The return values in the API are not user friendly atm, this will improve. They return lists with various values packed inside.</p> <ul> <li>collide_shape(shape1: <code>Any</code>, shape2: <code>Any</code>)</li> <li>collide_shapes(shape: <code>Any</code>, list: <code>Any</code>)</li> <li>contains(shape: <code>Any</code>, point: <code>Any</code>)</li> <li>sweep_shape(shape1: <code>Any</code>, shape2: <code>Any</code>, vel: <code>Any</code>)</li> <li>raycast_ray(ray1: <code>Any</code>, ray2: <code>Any</code>)</li> <li>raycast_rays(ray: <code>Any</code>, rays: <code>Any</code>)</li> <li>raycast_shape(ray: <code>Any</code>, shape: <code>Any</code>)</li> <li>raycast_shapes(ray: <code>Any</code>, shapes: <code>Any</code>)</li> </ul> <p> SAT2D.collide_shape(shape1: <code>Any</code>, shape2: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Check if two <code>Shape2D</code> instances are colliding. Returns a result with several values in a <code>List</code>.</p> <p>The results include a <code>separation</code> value for x and y axis, which is how much to move <code>shape1</code> to cancel out the overlap. An example of using this: move a player <code>shape2D</code> collider, check for collision, and then move them back by <code>separation</code> so that they do not collide anymore.</p> <pre><code>[\n  shape1,       //the original shapes\n  shape2,\n  overlap,      //amount the shapes overlap\n  separation_x, //the amount to separate on the x axis\n  separation_y, //the amount to separate on the y axis\n  normal_x,     //the normal of the collision\n  normal_y      //the amount to separate on the y axis\n]\n</code></pre> <p> SAT2D.collide_shapes(shape: <code>Any</code>, list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Like <code>collide_shape</code> for details on the results, but checks multiple shapes against a single one.  For example <code>SAT2D.collide_shapes(player, walls)</code>, where walls is a list of <code>Shape2D</code> to collide against.</p> <p>Note this returns a list of results, and each result is a list described by <code>collide_shape</code>.</p> <pre><code>//:todo: example. see samples/wip/shape2D\n</code></pre> <p> SAT2D.contains(shape: <code>Any</code>, point: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Returns true if the given <code>Shape2D</code> contains <code>point</code>.   </p> <p> SAT2D.sweep_shape(shape1: <code>Any</code>, shape2: <code>Any</code>, vel: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p> SAT2D.raycast_ray(ray1: <code>Any</code>, ray2: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p> SAT2D.raycast_rays(ray: <code>Any</code>, rays: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p> SAT2D.raycast_shape(ray: <code>Any</code>, shape: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p> SAT2D.raycast_shapes(ray: <code>Any</code>, shapes: <code>Any</code>) \u00b6 returns <code>unknown</code></p>"},{"location":"api/v/2024.12.3/save/","title":"Save","text":""},{"location":"api/v/2024.12.3/save/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/save/#luxe-save-module","title":"<code>luxe: save</code> module","text":"<ul> <li>Save </li> <li>SaveScope </li> </ul>"},{"location":"api/v/2024.12.3/save/#save","title":"Save","text":"<p><code>import \"luxe: save\" for Save</code></p> <p>A cross platform save system with a Key/Value store and file storage for a user, and save slots.</p> <pre><code>  //create a new save profile. loads the default save slot for single save use\n  var save = Save.create(\"organization\", \"game\")\n  \n  //OR\n\n  //create a new slot and set it as the active save slot \n  Save.new_slot(save)\n  \n  //OR\n\n  //Load a save slot from e.g Save.list()\n  var list = Save.list(save)\n  //activate the first slot\n  Save.set_slot(save, list[0])\n\n  \n  //Set some slot specific values\n  Save.set(save, \"key\", \"value\")\n  //Set some user specific values\n  Save.set(save, \"key\", \"value\", SaveScope.user)\n\n  //Get some values from the slot\n  var name = Save.get(save, \"name\", \"default_name\")\n  //get user values, like settings\n  var setting = Save.get(save, \"setting\", false, SaveScope.user)\n</code></pre> <ul> <li>create(org: <code>String</code>, app: <code>String</code>)</li> <li>create(org: <code>String</code>, app: <code>String</code>, user_id: <code>String</code>)</li> <li>save(save: <code>Save</code>)</li> <li>new_slot(save: <code>Save</code>)</li> <li>set_slot(save: <code>Save</code>, slot: <code>String</code>)</li> <li>list(save: <code>Save</code>)</li> <li>file_exists(save: <code>Save</code>, file_id: <code>String</code>)</li> <li>file_exists(save: <code>Save</code>, file_id: <code>String</code>, kind: <code>SaveScope</code>)</li> <li>set_file(save: <code>Save</code>, file_id: <code>String</code>, file_contents: <code>String</code>)</li> <li>set_file(save: <code>Save</code>, file_id: <code>String</code>, file_contents: <code>String</code>, kind: <code>SaveScope</code>)</li> <li>get_file(save: <code>Save</code>, file_id: <code>String</code>)</li> <li>get_file(save: <code>Save</code>, file_id: <code>String</code>, kind: <code>SaveScope</code>)</li> <li>set(save: <code>Save</code>, key: <code>String</code>, value: <code>Any</code>)</li> <li>set(save: <code>Save</code>, key: <code>String</code>, value: <code>Any</code>, kind: <code>SaveScope</code>)</li> <li>get(save: <code>Save</code>, key: <code>String</code>, default: <code>Any</code>)</li> <li>get(save: <code>Save</code>, key: <code>String</code>, default: <code>Any</code>, kind: <code>SaveScope</code>)</li> <li>has(save: <code>Save</code>, key: <code>String</code>)</li> <li>has(save: <code>Save</code>, key: <code>String</code>, kind: <code>SaveScope</code>)</li> <li>get_keys(save: <code>Save</code>)</li> <li>get_keys(save: <code>Save</code>, kind: <code>SaveScope</code>)</li> <li>slot_clear(save: <code>Save</code>, slot: <code>String</code>)</li> <li>slot_backup(save: <code>Save</code>, slot: <code>String</code>)</li> <li>slot_modified_time(save: <code>Save</code>, slot: <code>String</code>)</li> <li>slot_file_exists(save: <code>Save</code>, slot: <code>String</code>, file_id: <code>String</code>)</li> <li>slot_set_file(save: <code>Save</code>, slot: <code>String</code>, file_id: <code>String</code>, file_contents: <code>String</code>)</li> <li>slot_get_file(save: <code>Save</code>, slot: <code>String</code>, file_id: <code>String</code>)</li> </ul> <p> Save.create(org: <code>String</code>, app: <code>String</code>) \u00b6 returns <code>Save</code></p> <p>Create a save slot for the given organization/app name pair. Defaults to 'user' for user id   </p> <p> Save.create(org: <code>String</code>, app: <code>String</code>, user_id: <code>String</code>) \u00b6 returns <code>Save</code></p> <p>Create a save slot for the given user and organization/app name pair. e.g If you have a steam user ID, you'd pass it in here as a string.   </p> <p> Save.save(save: <code>Save</code>) \u00b6 returns <code>unknown</code></p> <p>Flush the data for this profile to storage. Unless auto save on key change is off, unnecessary   </p> <p> Save.new_slot(save: <code>Save</code>) \u00b6 returns <code>None</code></p> <p>Set the current active save slot to a new slot ID.   </p> <p> Save.set_slot(save: <code>Save</code>, slot: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Set the current active save slot to a Slot ID (from Save.list or otherwise).   </p> <p> Save.list(save: <code>Save</code>) \u00b6 returns <code>unknown</code></p> <p>Return a list of save slot uuids for use with the slot query apis, sorted by modified time (latest first)   </p> <p> Save.file_exists(save: <code>Save</code>, file_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Returns true if the given file path can be found for the active save slot   </p> <p> Save.file_exists(save: <code>Save</code>, file_id: <code>String</code>, kind: <code>SaveScope</code>) \u00b6 returns <code>unknown</code></p> <p>Returns true if the given file path can be found   </p> <p> Save.set_file(save: <code>Save</code>, file_id: <code>String</code>, file_contents: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Save the contents of a file at the given path for the active save slot. The path is a relative style path, like <code>some/file/here</code> </p> <p> Save.set_file(save: <code>Save</code>, file_id: <code>String</code>, file_contents: <code>String</code>, kind: <code>SaveScope</code>) \u00b6 returns <code>unknown</code></p> <p>Save the contents of a file at the given path. The path is a relative style path, like <code>some/file/here</code> </p> <p> Save.get_file(save: <code>Save</code>, file_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Return the contents of the file with the given path for the active save slot. If not found, returns null   </p> <p> Save.get_file(save: <code>Save</code>, file_id: <code>String</code>, kind: <code>SaveScope</code>) \u00b6 returns <code>unknown</code></p> <p>Return the contents of the file with the given path. If not found, returns null   </p> <p> Save.set(save: <code>Save</code>, key: <code>String</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Set the value for a key to the given value, for the active save slot   </p> <p> Save.set(save: <code>Save</code>, key: <code>String</code>, value: <code>Any</code>, kind: <code>SaveScope</code>) \u00b6 returns <code>unknown</code></p> <p>Set the value for a key to the given value   </p> <p> Save.get(save: <code>Save</code>, key: <code>String</code>, default: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Returns the value for the given key if found, otherwise returns the default provided, for the active save slot   </p> <p> Save.get(save: <code>Save</code>, key: <code>String</code>, default: <code>Any</code>, kind: <code>SaveScope</code>) \u00b6 returns <code>unknown</code></p> <p>Returns the value for the given key if found, otherwise returns the default provided   </p> <p> Save.has(save: <code>Save</code>, key: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Returns true if the given key can be found, for the active save slot   </p> <p> Save.has(save: <code>Save</code>, key: <code>String</code>, kind: <code>SaveScope</code>) \u00b6 returns <code>unknown</code></p> <p>Returns true if the given key can be found   </p> <p> Save.get_keys(save: <code>Save</code>) \u00b6 returns <code>unknown</code></p> <p>Returns a list of knowns keys, for the active save slot   </p> <p> Save.get_keys(save: <code>Save</code>, kind: <code>SaveScope</code>) \u00b6 returns <code>unknown</code></p> <p>Returns a list of knowns keys   </p> <p> Save.slot_clear(save: <code>Save</code>, slot: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Slot query. Delete a save slot, return true or false for success   </p> <p> Save.slot_backup(save: <code>Save</code>, slot: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Slot query. Makes a backup of the slot, returns a slot ID of the backup if successful, null if false   </p> <p> Save.slot_modified_time(save: <code>Save</code>, slot: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Slot query. Returns the modified time for the given save slot ID   </p> <p> Save.slot_file_exists(save: <code>Save</code>, slot: <code>String</code>, file_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Slot query. Returns true if the given file path can be found for the given save slot ID   </p> <p> Save.slot_set_file(save: <code>Save</code>, slot: <code>String</code>, file_id: <code>String</code>, file_contents: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Slot query. Save the contents of a file at the given path for the given slot ID. The path is a relative style path, like <code>some/file/here</code> </p> <p> Save.slot_get_file(save: <code>Save</code>, slot: <code>String</code>, file_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Slot query. Return the contents of the file with the given path for the given slot ID. If not found, returns null   </p>"},{"location":"api/v/2024.12.3/save/#savescope","title":"SaveScope","text":"<p><code>import \"luxe: save\" for SaveScope</code></p> <p>no docs found</p> <ul> <li>slot</li> <li>user</li> </ul> <p> SaveScope.slot \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SaveScope.user \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/selection/","title":"Selection","text":""},{"location":"api/v/2024.12.3/selection/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/selection/#luxe-selection-module","title":"<code>luxe: selection</code> module","text":"<ul> <li>Selection </li> </ul>"},{"location":"api/v/2024.12.3/selection/#selection","title":"Selection","text":"<p><code>import \"luxe: selection\" for Selection</code></p> <p>no docs found</p> <ul> <li>CHANGE</li> <li>DESELECT</li> <li>SELECT</li> <li>INVALID</li> <li>PRE_CHANGE</li> <li>id</li> <li>events</li> <li>selected</li> <li>any()</li> <li>is_selected(value: <code>Any</code>)</li> <li>is_selected(value: <code>Any</code>, non_transient_only: <code>Bool</code>)</li> <li>is_invalid_selection(value: <code>Any</code>)</li> <li>count</li> <li>first</li> <li>last</li> <li>transient</li> <li>new(context: <code>String</code>)</li> <li>destroy()</li> <li>emit(kind: <code>Any</code>, items: <code>List</code>)</li> <li>start_transient(change: <code>Fn</code>)</li> <li>end_transient()</li> <li>sync(other: <code>Selection</code>)</li> <li>unsync(other: <code>Selection</code>)</li> <li>deselect()</li> <li>deselect(item: <code>Any</code>)</li> <li>deselect_items(items: <code>List</code>)</li> <li>select(item: <code>Any</code>)</li> <li>select(item: <code>Any</code>, plural: <code>Bool</code>)</li> <li>select_items(items: <code>List</code>)</li> <li>select_items(items: <code>List</code>, plural: <code>Bool</code>)</li> <li>toggle(item: <code>Any</code>)</li> <li>notify()</li> <li>set_invalid_handler(fn: <code>Fn</code>)</li> </ul> <p> Selection.CHANGE \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Selection.DESELECT \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Selection.SELECT \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Selection.INVALID \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Selection.PRE_CHANGE \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Selection.id \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Selection.events \u00b6 returns <code>Events</code></p> <p>no docs found   </p> <p> Selection.selected \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Selection.any() \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Selection.is_selected(value: <code>Any</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Selection.is_selected(value: <code>Any</code>, non_transient_only: <code>Bool</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Selection.is_invalid_selection(value: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>returns a string as a reason if not able to select, otherwise returns null   </p> <p> Selection.count \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Selection.first \u00b6 returns <code>Any</code></p> <p>no docs found   </p> <p> Selection.last \u00b6 returns <code>Any</code></p> <p>no docs found   </p> <p> Selection.transient \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Selection.new(context: <code>String</code>) \u00b6 returns <code>Selection</code></p> <p>no docs found   </p> <p> Selection.destroy() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Selection.emit(kind: <code>Any</code>, items: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Selection.start_transient(change: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>Start a transient selection where changes will be stored separately and notifed of a change directly   </p> <p> Selection.end_transient() \u00b6 returns <code>None</code></p> <p>End a transient selection, read .selected before calling to capture the transient selection   </p> <p> Selection.sync(other: <code>Selection</code>) \u00b6 returns <code>unknown</code></p> <p>Sync selection with another instance.   </p> <p> Selection.unsync(other: <code>Selection</code>) \u00b6 returns <code>unknown</code></p> <p>Stop syncing selection.   </p> <p> Selection.deselect() \u00b6 returns <code>unknown</code></p> <p>Clear the selection. emits <code>DESELECT</code> with a list of items deselected   </p> <p> Selection.deselect(item: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Deselect the given item. emits <code>DESELECT</code> with a list containing the item   </p> <p> Selection.deselect_items(items: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>Deselect the given items. emits <code>DESELECT</code> with a list containing the items (ones that were actually selected)   </p> <p> Selection.select(item: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>select the given item. emits <code>SELECT</code> with a list containing the item   </p> <p> Selection.select(item: <code>Any</code>, plural: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>Select the given item, and if plural is true, the item              is added to the existing selection. If not, the selection             is cleared and only this item is selected afterward.              Emits <code>SELECT</code> with a list containing the item   </p> <p> Selection.select_items(items: <code>List</code>) \u00b6 returns <code>None</code></p> <p>Select multiple items. Replaces the current selection. Emits <code>SELECT</code> with a list containing the items   </p> <p> Selection.select_items(items: <code>List</code>, plural: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Select the given items, and if plural is true, the items              are added to the existing selection. If not, the selection             is cleared and only the items are selected afterward.              Emits <code>SELECT</code> with a list containing the items   </p> <p> Selection.toggle(item: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Selection.notify() \u00b6 returns <code>None</code></p> <p>send a change event for the selection   </p> <p> Selection.set_invalid_handler(fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/semver/","title":"Semver","text":""},{"location":"api/v/2024.12.3/semver/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/semver/#luxe-semver-module","title":"<code>luxe: semver</code> module","text":"<ul> <li>Comparator </li> <li>SemVer </li> <li>SemVerRange </li> <li>SemVerSubset </li> <li>SemVerSubsetInterval </li> </ul>"},{"location":"api/v/2024.12.3/semver/#comparator","title":"Comparator","text":"<p><code>import \"luxe: semver\" for Comparator</code></p> <p>no docs found</p> <ul> <li>value</li> <li>semver</li> <li>operator</li> <li>loose</li> <li>any</li> <li>new(comp: <code>Any</code>)</li> <li>new(comp: <code>Any</code>, loose: <code>Any</code>)</li> <li>create(comp: <code>Any</code>, loose: <code>Any</code>)</li> <li>inverted()</li> <li>test(version: <code>Any</code>)</li> <li>parse(comp: <code>Any</code>)</li> <li>debug(a: <code>Any</code>)</li> <li>intersects(comp: <code>Any</code>)</li> <li>intersects(comp: <code>Any</code>, loose: <code>Any</code>)</li> </ul> <p> Comparator.value \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Comparator.semver \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Comparator.operator \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Comparator.loose \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Comparator.any \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Comparator.new(comp: <code>Any</code>) \u00b6 returns <code>Comparator</code></p> <p>no docs found   </p> <p> Comparator.new(comp: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>Comparator</code></p> <p>no docs found   </p> <p> Comparator.create(comp: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>Comparator</code></p> <p>no docs found   </p> <p> Comparator.inverted() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Comparator.test(version: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Comparator.parse(comp: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Comparator.debug(a: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Comparator.intersects(comp: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Comparator.intersects(comp: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/semver/#semver","title":"SemVer","text":"<p><code>import \"luxe: semver\" for SemVer</code></p> <p>no docs found</p> <ul> <li>SPEC</li> <li>loose</li> <li>version</li> <li>major</li> <li>minor</li> <li>patch</li> <li>prerelease</li> <li>raw</li> <li>new(version: <code>Any</code>)</li> <li>new(version: <code>Any</code>, loose: <code>Any</code>)</li> <li>create(version: <code>Any</code>, loose: <code>Any</code>)</li> <li>format()</li> <li>!=(other: <code>Any</code>)</li> <li>==(other: <code>Any</code>)</li> <li>&lt;=(other: <code>Any</code>)</li> <li>&gt;=(other: <code>Any</code>)</li> <li>&gt;(other: <code>Any</code>)</li> <li>&lt;(other: <code>Any</code>)</li> <li>inc(release: <code>Any</code>)</li> <li>inc(release: <code>Any</code>, identifier: <code>Any</code>)</li> <li>compare(other: <code>Any</code>)</li> <li>inc(version: <code>Any</code>, release: <code>Any</code>)</li> <li>inc(version: <code>Any</code>, release: <code>Any</code>, identifier: <code>Any</code>)</li> <li>inc(version: <code>Any</code>, release: <code>Any</code>, loose: <code>Any</code>, identifier: <code>Any</code>)</li> <li>parse(version: <code>Any</code>)</li> <li>parse(version: <code>Any</code>, loose: <code>Any</code>)</li> <li>valid(version: <code>Any</code>)</li> <li>valid(version: <code>Any</code>, loose: <code>Any</code>)</li> <li>clean(version: <code>Any</code>)</li> <li>clean(version: <code>Any</code>, loose: <code>Any</code>)</li> <li>diff(version1: <code>Any</code>, version2: <code>Any</code>)</li> <li>major(a: <code>Any</code>)</li> <li>major(a: <code>Any</code>, loose: <code>Any</code>)</li> <li>minor(a: <code>Any</code>)</li> <li>minor(a: <code>Any</code>, loose: <code>Any</code>)</li> <li>patch(a: <code>Any</code>)</li> <li>patch(a: <code>Any</code>, loose: <code>Any</code>)</li> <li>prerelease(a: <code>Any</code>)</li> <li>prerelease(a: <code>Any</code>, loose: <code>Any</code>)</li> <li>compare(a: <code>Any</code>, b: <code>Any</code>)</li> <li>compare(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>)</li> <li>rcompare(a: <code>Any</code>, b: <code>Any</code>)</li> <li>rcompare(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>)</li> <li>sort(list: <code>Any</code>)</li> <li>sort(list: <code>Any</code>, loose: <code>Any</code>)</li> <li>rsort(list: <code>Any</code>)</li> <li>rsort(list: <code>Any</code>, loose: <code>Any</code>)</li> <li>gt(a: <code>Any</code>, b: <code>Any</code>)</li> <li>gt(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>)</li> <li>lt(a: <code>Any</code>, b: <code>Any</code>)</li> <li>lt(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>)</li> <li>gte(a: <code>Any</code>, b: <code>Any</code>)</li> <li>gte(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>)</li> <li>lte(a: <code>Any</code>, b: <code>Any</code>)</li> <li>lte(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>)</li> <li>eq(a: <code>Any</code>, b: <code>Any</code>)</li> <li>eq(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>)</li> <li>neq(a: <code>Any</code>, b: <code>Any</code>)</li> <li>neq(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>)</li> <li>cmp(a: <code>Any</code>, op: <code>Any</code>, b: <code>Any</code>)</li> <li>cmp(a: <code>Any</code>, op: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>)</li> <li>max_satisfying(versions: <code>Any</code>, range: <code>Any</code>)</li> <li>max_satisfying(versions: <code>Any</code>, range: <code>Any</code>, loose: <code>Any</code>)</li> <li>min_satisfying(versions: <code>Any</code>, range: <code>Any</code>)</li> <li>min_satisfying(versions: <code>Any</code>, range: <code>Any</code>, loose: <code>Any</code>)</li> <li>satisfies(version: <code>Any</code>, range: <code>Any</code>)</li> <li>satisfies(version: <code>Any</code>, range: <code>Any</code>, loose: <code>Any</code>)</li> <li>valid_range(range: <code>Any</code>)</li> <li>valid_range(range: <code>Any</code>, loose: <code>Any</code>)</li> <li>ltr(version: <code>Any</code>, range: <code>Any</code>)</li> <li>ltr(version: <code>Any</code>, range: <code>Any</code>, loose: <code>Any</code>)</li> <li>gtr(version: <code>Any</code>, range: <code>Any</code>)</li> <li>gtr(version: <code>Any</code>, range: <code>Any</code>, loose: <code>Any</code>)</li> <li>outside(version: <code>Any</code>, range: <code>Any</code>, hilo: <code>Any</code>)</li> <li>outside(version: <code>Any</code>, range: <code>Any</code>, hilo: <code>Any</code>, loose: <code>Any</code>)</li> <li>debug(a: <code>Any</code>)</li> <li>compare_main(other: <code>Any</code>)</li> <li>first_not_zero(a: <code>Any</code>, b: <code>Any</code>)</li> <li>first_not_zero(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>)</li> <li>compare_pre(other: <code>Any</code>)</li> <li>compare_identifiers(a: <code>Any</code>, b: <code>Any</code>)</li> </ul> <p> SemVer.SPEC \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.loose \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.version \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.major \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.minor \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.patch \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.prerelease \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.raw \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.new(version: <code>Any</code>) \u00b6 returns <code>SemVer</code></p> <p>no docs found   </p> <p> SemVer.new(version: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>SemVer</code></p> <p>no docs found   </p> <p> SemVer.create(version: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>SemVer</code></p> <p>no docs found   </p> <p> SemVer.format() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer !=(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer ==(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p>&lt;endpoint module=\"luxe: semver\" class=\"SemVer\" signature=\"&lt;=(other : Any)\"&gt; &lt;signature id=\"SemVer.&lt;=\"&gt;SemVer &lt;=(other: <code>Any</code>) &lt;a class=\"headerlink\" href=\"#SemVer.&lt;=\" title=\"Permanent link\"&gt;\u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> other: <code>Any</code>)  returns <code>unknown</code> <p>no docs found   </p> <p> other: <code>Any</code>)  returns <code>unknown</code> <p>no docs found   </p> <p>&lt;endpoint module=\"luxe: semver\" class=\"SemVer\" signature=\"&lt;(other : Any)\"&gt; &lt;signature id=\"SemVer.&lt;\"&gt;SemVer &lt;(other: <code>Any</code>) &lt;a class=\"headerlink\" href=\"#SemVer.&lt;\" title=\"Permanent link\"&gt;\u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.inc(release: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.inc(release: <code>Any</code>, identifier: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.compare(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.inc(version: <code>Any</code>, release: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.inc(version: <code>Any</code>, release: <code>Any</code>, identifier: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.inc(version: <code>Any</code>, release: <code>Any</code>, loose: <code>Any</code>, identifier: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.parse(version: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.parse(version: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.valid(version: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.valid(version: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.clean(version: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.clean(version: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.diff(version1: <code>Any</code>, version2: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.major(a: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.major(a: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.minor(a: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.minor(a: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.patch(a: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.patch(a: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.prerelease(a: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.prerelease(a: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.compare(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.compare(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.rcompare(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.rcompare(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.sort(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.sort(list: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.rsort(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.rsort(list: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.gt(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.gt(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.lt(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.lt(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.gte(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.gte(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.lte(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.lte(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.eq(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.eq(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.neq(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.neq(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.cmp(a: <code>Any</code>, op: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.cmp(a: <code>Any</code>, op: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.max_satisfying(versions: <code>Any</code>, range: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.max_satisfying(versions: <code>Any</code>, range: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.min_satisfying(versions: <code>Any</code>, range: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.min_satisfying(versions: <code>Any</code>, range: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.satisfies(version: <code>Any</code>, range: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.satisfies(version: <code>Any</code>, range: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.valid_range(range: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.valid_range(range: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.ltr(version: <code>Any</code>, range: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.ltr(version: <code>Any</code>, range: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.gtr(version: <code>Any</code>, range: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.gtr(version: <code>Any</code>, range: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.outside(version: <code>Any</code>, range: <code>Any</code>, hilo: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.outside(version: <code>Any</code>, range: <code>Any</code>, hilo: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.debug(a: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.compare_main(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.first_not_zero(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.first_not_zero(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.compare_pre(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.compare_identifiers(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/semver/#semverrange","title":"Semver","text":"<p><code>import \"luxe: semver\" for SemVerRange</code></p> <p>no docs found</p> <ul> <li>any</li> <li>empty</li> <li>debug(a: <code>Any</code>)</li> <li>set</li> <li>loose</li> <li>range</li> <li>raw</li> <li>isEmpty</li> <li>isAny</li> <li>new(range: <code>Any</code>)</li> <li>new(range: <code>Any</code>, loose: <code>Any</code>)</li> <li>create(range: <code>Any</code>, loose: <code>Any</code>)</li> <li>format()</li> <li>union(other: <code>Any</code>)</li> <li>intersects(range: <code>Any</code>)</li> <li>intersects(range: <code>Any</code>, loose: <code>Any</code>)</li> <li>pick_not_infinite(a: <code>Any</code>, b: <code>Any</code>)</li> <li>pick_infinite(a: <code>Any</code>, b: <code>Any</code>)</li> <li>comparator_intersection(a: <code>Any</code>, b: <code>Any</code>)</li> <li>intersection(other: <code>Any</code>)</li> <li>inverted()</li> <li>subset_contains(other: <code>Any</code>)</li> <li>subset_contains(other: <code>Any</code>, loose: <code>Any</code>)</li> <li>subset_of(other: <code>Any</code>)</li> <li>subset_of(other: <code>Any</code>, loose: <code>Any</code>)</li> <li>subset(needle: <code>Any</code>, haystack: <code>Any</code>)</li> <li>subset(needle: <code>Any</code>, haystack: <code>Any</code>, loose: <code>Any</code>)</li> <li>test(version: <code>Any</code>)</li> <li>is_x(id: <code>Any</code>)</li> <li>test_set(set: <code>Any</code>, version: <code>Any</code>)</li> <li>parse_range(range: <code>Any</code>)</li> <li>parse_comparator(comp: <code>Any</code>, loose: <code>Any</code>)</li> <li>replace_carets(comp: <code>Any</code>, loose: <code>Any</code>)</li> <li>replace_caret(comp: <code>Any</code>, loose: <code>Any</code>)</li> <li>replace_tildes(comp: <code>Any</code>, loose: <code>Any</code>)</li> <li>replace_tilde(comp: <code>Any</code>, loose: <code>Any</code>)</li> <li>replace_x_ranges(comp: <code>Any</code>, loose: <code>Any</code>)</li> <li>replace_x_range(comp: <code>Any</code>, loose: <code>Any</code>)</li> <li>replace_stars(comp: <code>Any</code>, loose: <code>Any</code>)</li> </ul> <p> SemVerRange.any \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.empty \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.debug(a: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.set \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.loose \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.range \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.raw \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.isEmpty \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.isAny \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.new(range: <code>Any</code>) \u00b6 returns <code>SemVerRange</code></p> <p>no docs found   </p> <p> SemVerRange.new(range: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>SemVerRange</code></p> <p>no docs found   </p> <p> SemVerRange.create(range: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>SemVerRange</code></p> <p>no docs found   </p> <p> SemVerRange.format() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.union(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.intersects(range: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.intersects(range: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.pick_not_infinite(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.pick_infinite(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.comparator_intersection(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.intersection(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.inverted() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.subset_contains(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.subset_contains(other: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.subset_of(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.subset_of(other: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.subset(needle: <code>Any</code>, haystack: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.subset(needle: <code>Any</code>, haystack: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.test(version: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.is_x(id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.test_set(set: <code>Any</code>, version: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.parse_range(range: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.parse_comparator(comp: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.replace_carets(comp: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.replace_caret(comp: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.replace_tildes(comp: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.replace_tilde(comp: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.replace_x_ranges(comp: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.replace_x_range(comp: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.replace_stars(comp: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/semver/#semversubset","title":"Semver","text":"<p><code>import \"luxe: semver\" for SemVerSubset</code></p> <p>no docs found</p> <ul> <li>subset(needle: <code>Any</code>, haystack: <code>Any</code>)</li> <li>subset(needle: <code>Any</code>, haystack: <code>Any</code>, loose: <code>Any</code>)</li> <li>gen_interval(comparators: <code>Any</code>)</li> <li>orderEq(v1: <code>Any</code>, v2: <code>Any</code>)</li> <li>orderGt(v1: <code>Any</code>, v2: <code>Any</code>)</li> <li>orderLt(v1: <code>Any</code>, v2: <code>Any</code>)</li> <li>isSubset(needle: <code>Any</code>, haystack: <code>Any</code>)</li> </ul> <p> SemVerSubset.subset(needle: <code>Any</code>, haystack: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerSubset.subset(needle: <code>Any</code>, haystack: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerSubset.gen_interval(comparators: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerSubset.orderEq(v1: <code>Any</code>, v2: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerSubset.orderGt(v1: <code>Any</code>, v2: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerSubset.orderLt(v1: <code>Any</code>, v2: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerSubset.isSubset(needle: <code>Any</code>, haystack: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/semver/#semversubsetinterval","title":"Semver","text":"<p><code>import \"luxe: semver\" for SemVerSubsetInterval</code></p> <p>no docs found</p> <ul> <li>left</li> <li>right</li> <li>leftValue</li> <li>rightValue</li> <li>new(left: <code>Any</code>, leftValue: <code>Any</code>, rightValue: <code>Any</code>, right: <code>Any</code>)</li> </ul> <p> SemVerSubsetInterval.left \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerSubsetInterval.right \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerSubsetInterval.leftValue \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerSubsetInterval.rightValue \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerSubsetInterval.new(left: <code>Any</code>, leftValue: <code>Any</code>, rightValue: <code>Any</code>, right: <code>Any</code>) \u00b6 returns <code>SemVerSubsetInterval</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/settings/","title":"Settings","text":""},{"location":"api/v/2024.12.3/settings/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/settings/#luxe-settings-module","title":"<code>luxe: settings</code> module","text":"<ul> <li>Settings </li> <li>SettingsType </li> </ul>"},{"location":"api/v/2024.12.3/settings/#settings","title":"Settings","text":"<p><code>import \"luxe: settings\" for Settings</code></p> <p>no docs found</p> <ul> <li>apply(settings_id: <code>String</code>)</li> <li>apply(settings_id: <code>String</code>, settings_lx_data: <code>String</code>)</li> <li>unapply(settings_id: <code>String</code>)</li> <li>forget(key: <code>String</code>)</li> <li>has(key: <code>String</code>)</li> <li>get(key: <code>String</code>, default: <code>Any</code>)</li> <li>set_string(key: <code>String</code>, value: <code>String</code>, length: <code>Num</code>)</li> <li>set_number(key: <code>String</code>, value: <code>Num</code>)</li> <li>set_bool(key: <code>String</code>, value: <code>Bool</code>)</li> <li>set_float2(key: <code>String</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>set_float3(key: <code>String</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>set_float4(key: <code>String</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>)</li> <li>set(key: <code>String</code>, value: <code>Any</code>)</li> </ul> <p> Settings.apply(settings_id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Settings.apply(settings_id: <code>String</code>, settings_lx_data: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Settings.unapply(settings_id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Settings.forget(key: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Settings.has(key: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Settings.get(key: <code>String</code>, default: <code>Any</code>) \u00b6 returns <code>Any</code></p> <p>no docs found   </p> <p> Settings.set_string(key: <code>String</code>, value: <code>String</code>, length: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Settings.set_number(key: <code>String</code>, value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Settings.set_bool(key: <code>String</code>, value: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Settings.set_float2(key: <code>String</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Settings.set_float3(key: <code>String</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Settings.set_float4(key: <code>String</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Settings.set(key: <code>String</code>, value: <code>Any</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/settings/#settingstype","title":"SettingsType","text":"<p><code>import \"luxe: settings\" for SettingsType</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>boolean</li> <li>number</li> <li>string</li> <li>float2</li> <li>float3</li> <li>float4</li> <li>name(value: <code>Any</code>)</li> </ul> <p> SettingsType.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SettingsType.boolean \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SettingsType.number \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SettingsType.string \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SettingsType.float2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SettingsType.float3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SettingsType.float4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SettingsType.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/shape2D/","title":"shape2D","text":""},{"location":"api/v/2024.12.3/shape2D/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/shape2D/#luxe-shape2d-module","title":"<code>luxe: shape2D</code> module","text":"<ul> <li>Ray2D </li> <li>Ray2DType </li> <li>Shape2D </li> <li>Shape2DType </li> </ul>"},{"location":"api/v/2024.12.3/shape2D/#ray2d","title":"Ray2D","text":"<p><code>import \"luxe: shape2D\" for Ray2D</code></p> <p>no docs found</p> <ul> <li>create(start: <code>Any</code>, end: <code>Any</code>, type: <code>Any</code>)</li> <li>set(ray: <code>Any</code>, start: <code>Any</code>, end: <code>Any</code>, type: <code>Any</code>)</li> <li>set_start(ray: <code>Any</code>, start: <code>Any</code>)</li> <li>set_end(ray: <code>Any</code>, end: <code>Any</code>)</li> <li>set_type(ray: <code>Any</code>, type: <code>Any</code>)</li> <li>get_start(ray: <code>Any</code>)</li> <li>get_end(ray: <code>Any</code>)</li> <li>get_type(ray: <code>Any</code>)</li> </ul> <p> Ray2D.create(start: <code>Any</code>, end: <code>Any</code>, type: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Ray2D.set(ray: <code>Any</code>, start: <code>Any</code>, end: <code>Any</code>, type: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Ray2D.set_start(ray: <code>Any</code>, start: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Ray2D.set_end(ray: <code>Any</code>, end: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Ray2D.set_type(ray: <code>Any</code>, type: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Ray2D.get_start(ray: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Ray2D.get_end(ray: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Ray2D.get_type(ray: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/shape2D/#ray2dtype","title":"Ray2DType","text":"<p><code>import \"luxe: shape2D\" for Ray2DType</code></p> <p>no docs found</p> <ul> <li>finite</li> <li>infinite_end</li> <li>infinite</li> <li>from_string(value: <code>Any</code>)</li> <li>name(value: <code>Any</code>)</li> </ul> <p> Ray2DType.finite \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Ray2DType.infinite_end \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Ray2DType.infinite \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Ray2DType.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Ray2DType.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/shape2D/#shape2d","title":"Shape2D","text":"<p><code>import \"luxe: shape2D\" for Shape2D</code></p> <p>no docs found</p> <ul> <li>create_poly(pos: <code>Any</code>, angle: <code>Any</code>, scale: <code>Any</code>, verts: <code>Any</code>)</li> <li>create_ngon(pos: <code>Any</code>, angle: <code>Any</code>, scale: <code>Any</code>, sides: <code>Any</code>, radius: <code>Any</code>)</li> <li>create_rect(pos: <code>Any</code>, angle: <code>Any</code>, scale: <code>Any</code>, size: <code>Any</code>, centered: <code>Any</code>)</li> <li>create_circle(pos: <code>Any</code>, angle: <code>Any</code>, scale: <code>Any</code>, radius: <code>Any</code>)</li> <li>destroy(shape: <code>Any</code>)</li> <li>set_pos(shape: <code>Any</code>, pos: <code>Any</code>)</li> <li>set_rotation(shape: <code>Any</code>, angle: <code>Any</code>)</li> <li>set_scale(shape: <code>Any</code>, scale: <code>Any</code>)</li> <li>get_type(shape: <code>Any</code>)</li> <li>get_pos(shape: <code>Any</code>)</li> <li>get_bounds(shape: <code>Any</code>, into: <code>Any</code>)</li> <li>get_rotation(shape: <code>Any</code>)</li> <li>get_scale(shape: <code>Any</code>)</li> <li>get_verts(shape: <code>Any</code>)</li> <li>get_radius(shape: <code>Any</code>)</li> </ul> <p> Shape2D.create_poly(pos: <code>Any</code>, angle: <code>Any</code>, scale: <code>Any</code>, verts: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.create_ngon(pos: <code>Any</code>, angle: <code>Any</code>, scale: <code>Any</code>, sides: <code>Any</code>, radius: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.create_rect(pos: <code>Any</code>, angle: <code>Any</code>, scale: <code>Any</code>, size: <code>Any</code>, centered: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.create_circle(pos: <code>Any</code>, angle: <code>Any</code>, scale: <code>Any</code>, radius: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.destroy(shape: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.set_pos(shape: <code>Any</code>, pos: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.set_rotation(shape: <code>Any</code>, angle: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.set_scale(shape: <code>Any</code>, scale: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.get_type(shape: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.get_pos(shape: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.get_bounds(shape: <code>Any</code>, into: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.get_rotation(shape: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.get_scale(shape: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.get_verts(shape: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.get_radius(shape: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/shape2D/#shape2dtype","title":"Shape2DType","text":"<p><code>import \"luxe: shape2D\" for Shape2DType</code></p> <p>no docs found</p> <ul> <li>poly</li> <li>circle</li> <li>from_string(value: <code>Any</code>)</li> <li>name(value: <code>Any</code>)</li> </ul> <p> Shape2DType.poly \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2DType.circle \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2DType.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2DType.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/string/","title":"String","text":""},{"location":"api/v/2024.12.3/string/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/string/#luxe-string-module","title":"<code>luxe: string</code> module","text":"<ul> <li>Loc </li> <li>Str </li> </ul>"},{"location":"api/v/2024.12.3/string/#loc","title":"Loc","text":"<p><code>import \"luxe: string\" for Loc</code></p> <p>Interface for the localisation system.</p> <p>Each translation always exists in a space and in a language. Spaces are contexts, so you might want different spaces for dialogue/menus/icons. Or you can leave everything in the default \"game\" translation space.</p> <p>Unless specified otherwise, the system will fetch the string from the currently active language if possible, if its not available there it will fall back to the set primary language. If the key isn't registered for that either, \"MISSING.STRING\" will be returned.</p> <p>By default there is no active active language set and the primary language is \"en\".</p> <pre><code>    //by default language is not set and primary language is `en` with no registered strings\n    Log.print(Strings.get(Loc.get_language())) //null\n    Log.print(Strings.get(Loc.get_primary())) //en\n    Loc.set_language(\"en\")\n    Log.print(Loc.get(\"start_game\")) //MISSING.STRING\n\n    //as soon as we add a line, we can query it\n    Loc.add(\"en\", Loc.default_space, \"start_game\", \"Start Game!\")\n    Log.print(Loc.get(\"start_game\")) //Start Game!\n\n    //if we query a word in a language where that translation doesnt exist yet (like toki pona here), it falls back to the primary language\n    Log.print(Loc.get(\"tp\", Loc.default_space, \"start_game\")) //Start Game!\n\n    //but as soon as it is registered, the translation in the respective language is returned\n    Loc.add(\"tp\", Loc.default_space, \"start_game\", \"o open e musi!\")\n    Log.print(Loc.get(\"tp\", Loc.default_space, \"start_game\")) //o open e musi!\n        \n    //same when we set the current language and use the shorthand get\n    Loc.set_language(\"tp\")\n    Log.print(Loc.get(\"start_game\")) //o open e musi!\n</code></pre> <ul> <li>default_space</li> <li>missing_string</li> <li>set_primary(language: <code>String</code>)</li> <li>get_primary()</li> <li>set_language(language: <code>String</code>)</li> <li>get_language()</li> <li>add_language(language: <code>String</code>, plural_form: <code>String</code>)</li> <li>add(language: <code>String</code>, space: <code>String</code>, key: <code>String</code>, string: <code>String</code>)</li> <li>add_plural(language: <code>String</code>, space: <code>String</code>, key: <code>String</code>, strings: <code>List</code>)</li> <li>get(language: <code>String</code>, space: <code>String</code>, key: <code>String</code>)</li> <li>has(language: <code>String</code>, space: <code>String</code>, key: <code>String</code>)</li> <li>get_plural(language: <code>String</code>, space: <code>String</code>, key: <code>String</code>, count: <code>Num</code>)</li> <li>get(space: <code>String</code>, key: <code>String</code>)</li> <li>get(key: <code>String</code>)</li> <li>has(key: <code>String</code>)</li> <li>load_primary(asset_id: <code>String</code>)</li> <li>load_language(asset_id: <code>String</code>)</li> <li>load_language(asset_id: <code>String</code>, primary: <code>Bool</code>)</li> </ul> <p> Loc.default_space \u00b6 returns <code>unknown</code></p> <p>The default space for localisations, \\\"game\\\".   </p> <p> Loc.missing_string \u00b6 returns <code>unknown</code></p> <p>The missing string fallback for the engine, typically \\\"MISSING.STRING\\\".   </p> <p> Loc.set_primary(language: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Set the primary language that is used as fallback if a key can't be found in another language.   </p> <p> Loc.get_primary() \u00b6 returns <code>unknown</code></p> <p>Get the primary language.   </p> <p> Loc.set_language(language: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Set the current language that strings are gotten for unless specified otherwise.   </p> <p> Loc.get_language() \u00b6 returns <code>unknown</code></p> <p>Get the current language.   </p> <p> Loc.add_language(language: <code>String</code>, plural_form: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Add a language with the given <code>id</code> and <code>plural_form</code> expression string (just the expression part, not the whole header).   </p> <p> Loc.add(language: <code>String</code>, space: <code>String</code>, key: <code>String</code>, string: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Add a string to the localisation system.   </p> <p> Loc.add_plural(language: <code>String</code>, space: <code>String</code>, key: <code>String</code>, strings: <code>List</code>) \u00b6 returns <code>None</code></p> <p>Add a plural string to the localisation system.   </p> <p> Loc.get(language: <code>String</code>, space: <code>String</code>, key: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Get the string for a key (or fallback in primary language) from the localisation system for a specific language/space.   </p> <p> Loc.has(language: <code>String</code>, space: <code>String</code>, key: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Check if the string for a key exists in the localisation system for a specific language/space.   </p> <p> Loc.get_plural(language: <code>String</code>, space: <code>String</code>, key: <code>String</code>, count: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Get the string for a key from the localisation system for a specific language/space, with the plural count.   </p> <p> Loc.get(space: <code>String</code>, key: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Get the string for a key (or fallback in primary language) from the localisation system in the current language and in a specific space.   </p> <p> Loc.get(key: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Get the string for a key (or fallback in primary language) from the localisation system in the current language and in the default space.   </p> <p> Loc.has(key: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Check if the string for a key exists in the localisation system for the current language and default space   </p> <p> Loc.load_primary(asset_id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Loc.load_language(asset_id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Loc.load_language(asset_id: <code>String</code>, primary: <code>Bool</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/string/#str","title":"Str","text":"<p><code>import \"luxe: string\" for Str</code></p> <p>Utility class for String functions.</p> <ul> <li>split_lines(string: <code>String</code>)</li> <li>split(string: <code>String</code>, delim: <code>String</code>)</li> <li>indent_strip(string: <code>String</code>)</li> <li>indent(string: <code>String</code>)</li> <li>trim(string: <code>String</code>)</li> <li>compare(a: <code>String</code>, b: <code>String</code>)</li> <li>replace(string: <code>String</code>, sub: <code>String</code>, repl: <code>String</code>)</li> <li>is_alphanumeric(str: <code>String</code>)</li> <li>is_numeric(str: <code>String</code>)</li> <li>increment_end(string: <code>String</code>)</li> <li>vec(value: <code>Vec</code>)</li> <li>vec(value: <code>Vec</code>, precision: <code>Num</code>)</li> <li>vec(value: <code>Vec</code>, precision: <code>Num</code>, sep: <code>String</code>)</li> <li>fixed(number: <code>Num</code>, precision: <code>Num</code>)</li> <li>fixed(number: <code>Num</code>)</li> <li>fixed(number: <code>Num</code>, precision: <code>Num</code>, padded: <code>Bool</code>)</li> <li>hex(number: <code>Num</code>)</li> <li>binary(number: <code>Num</code>)</li> <li>binary(number: <code>Num</code>, bit_width: <code>Num</code>)</li> <li>path_is_absolute(path: <code>String</code>)</li> <li>path_directory(path: <code>String</code>)</li> <li>path_filename(path: <code>String</code>)</li> <li>path_extension(path: <code>String</code>)</li> <li>path_extensionless(path: <code>String</code>)</li> <li>bytes_formatted(byte_count: <code>Num</code>)</li> <li>bytes_formatted(byte_count: <code>Num</code>, precision: <code>Num</code>)</li> <li>upper(string: <code>String</code>)</li> <li>lower(string: <code>String</code>)</li> <li>wrap(string: <code>String</code>, column: <code>Num</code>)</li> <li>path(path: <code>String</code>)</li> <li>strip_markup(string: <code>String</code>)</li> <li>path_normalize(string: <code>String</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>, arg9: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>, arg9: <code>Any</code>, arg10: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>, arg9: <code>Any</code>, arg10: <code>Any</code>, arg11: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>, arg9: <code>Any</code>, arg10: <code>Any</code>, arg11: <code>Any</code>, arg12: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>, arg9: <code>Any</code>, arg10: <code>Any</code>, arg11: <code>Any</code>, arg12: <code>Any</code>, arg13: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>, arg9: <code>Any</code>, arg10: <code>Any</code>, arg11: <code>Any</code>, arg12: <code>Any</code>, arg13: <code>Any</code>, arg14: <code>Any</code>)</li> <li>format_list(string: <code>String</code>, args: <code>List</code>)</li> <li>valid(string: <code>String</code>)</li> <li>template(string: <code>String</code>, key_value_context: <code>Map</code>)</li> </ul> <p> Str.split_lines(string: <code>String</code>) \u00b6 returns <code>List</code></p> <p>Split a string into its lines. Returns <code>[\"\"]</code> for empty strings.</p> <pre><code>    var multiline_string = \\\"\\\"\\\"\n    leaf\n    tree\n    fruit\n    mushroom\n    \\\"\\\"\\\"\n\n    var split_string = Str.split_lines(multiline_string)\n    Log.print(split_string) //[leaf, tree, fruit, mushroom]\n</code></pre> <p> Str.split(string: <code>String</code>, delim: <code>String</code>) \u00b6 returns <code>List</code></p> <p>Deprecated use <code>string.split(delim)</code> Split a string at every occurance of an delimiter.</p> <pre><code>    var input = \"Owl eats Squirrel eats Nuts\"\n    var split_string = Str.split(input, \" eats \")\n    Log.print(split_string) //[Owl, Squirrel, Nuts]\n</code></pre> <p> Str.indent_strip(string: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Removes indentation from the first line of a string, and the same amount from subsequent lines if any.  Lines with shorter indentation than the first line are skipped.</p> <pre><code>    var input = \\\"\\\"\\\"\n        Sparrow\n        Pidgeon\n            Crow\n    \\\"\\\"\\\"\n    var unindented = Str.indent_strip(input)\n    Log.print(unindented) //Sparrow\\nPidgeon\\n    Crow\n</code></pre> <p> Str.indent(string: <code>String</code>) \u00b6 returns <code>Num</code></p> <p>returns how much indentation characters (whitespace or tabs) a string has.</p> <pre><code>    var line = \"\\t  text\"\n    var indent = Str.indent(line)\n    Log.print(indent) //3\n</code></pre> <p> Str.trim(string: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Trims whitespace characters (\" \", \"\\n\", \"\\t\") from front and end of an string. Calls wren core <code>String.trim</code> internally.</p> <pre><code>    var input = \"  \\n\\t   Pallas's cat   \\n\\t  \"\n    var trimmed = Str.trim(input)\n    Log.print(trimmed) //Pallas's cat\n</code></pre> <p> Str.compare(a: <code>String</code>, b: <code>String</code>) \u00b6 returns <code>Num</code></p> <p>Comparison function for strings. Order is based on the unicode number of the first non-equal codepoint or length. Returns <code>1</code> when <code>a &gt; b</code> Returns <code>-1</code> when <code>a &lt; b</code> returns <code>0</code> when theyre equal</p> <pre><code>    Log.print(Str.compare(\"a\", \"b\")) // -1\n    Log.print(Str.compare(\"a\", \"Z\")) // 1\n    Log.print(Str.compare(\"abc\", \"abc\")) // 0\n    Log.print(Str.compare(\"abc\", \"abcd\")) // -1\n    Log.print(Str.compare(\"\u00f6\", \"\u00e4\")) // 1\n</code></pre> <p> Str.replace(string: <code>String</code>, sub: <code>String</code>, repl: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Replace all occurances of one substring with another. Call wren core <code>String.replace</code> internally.</p> <pre><code>    var input = \"Hello World\"\n    var replaced = Str.replace(input, \"o\", \"\u00f8\")\n    Log.print(replaced) //Hell\u00f8 W\u00f8rld\n</code></pre> <p> Str.is_alphanumeric(str: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether all characters in a string are alphanumeric (uppercase or lowercase latin characters or arabic numerals)</p> <pre><code>    Log.print(Str.is_alphanumeric(\"Leaf\")) //true\n    Log.print(Str.is_alphanumeric(\"4Leaf\")) //true\n    Log.print(Str.is_alphanumeric(\"4-leaf\")) //false\n    Log.print(Str.is_alphanumeric(\"W\u00f8rld\")) //false\n</code></pre> <p> Str.is_numeric(str: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether all characters in a string are numeric (arabic numerals)</p> <pre><code>    Log.print(Str.is_alphanumeric(\"Leaf\")) //false\n    Log.print(Str.is_alphanumeric(\"4\")) //true\n    Log.print(Str.is_alphanumeric(\"4-leaf\")) //false\n    Log.print(Str.is_alphanumeric(\"3\u00be\")) //false\n</code></pre> <p> Str.increment_end(string: <code>String</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.vec(value: <code>Vec</code>) \u00b6 returns <code>String</code></p> <p>Get the string representation of a vector. (uses 6 digits after decimal point and spaces between numbers)   </p> <p> Str.vec(value: <code>Vec</code>, precision: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Get the string representation of a vector with the specified digits after the decimal point. (puts spaces between numbers)   </p> <p> Str.vec(value: <code>Vec</code>, precision: <code>Num</code>, sep: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Get the string representation of a vector. You can specify both the precision (digits after decimal point) and the seperator of how the vector is rendered.</p> <pre><code>    var vector = [1, 2, 3.14159265359]\n    Log.print(Str.print(vector)) //1 2 3.141593\n    Log.print(Str.print(vector, 2)) //1 2 3.14\n    Log.print(Str.print(vector, 1, \", \")) //1, 2, 3.1\n</code></pre> <p> Str.fixed(number: <code>Num</code>, precision: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Get the string representation of a number with a specified amount of digits after the decimal point.   </p> <p> Str.fixed(number: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Get the string representation of a number with 6 digits after the decimal points.   </p> <p> Str.fixed(number: <code>Num</code>, precision: <code>Num</code>, padded: <code>Bool</code>) \u00b6 returns <code>String</code></p> <p>Get the string representation of a number with a specified amount of digits after the decimal point. If padded is true, this function adds zeroes until the requested amount of digits after the decimal point is reached.   </p> <p> Str.hex(number: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Get string representation of number in base-16/hexadecimal.   </p> <p> Str.binary(number: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Get string representation of number in base-2/binary.   </p> <p> Str.binary(number: <code>Num</code>, bit_width: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Get string representation of (positive integer) number in base-2/binary. <code>bit_width</code> declares to how many digits the number should be expanded (adds zeroes to left of it).   </p> <p> Str.path_is_absolute(path: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether a path is absolute (instead of relative).   </p> <p> Str.path_directory(path: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Get the directory path of a path pointing to a file.   </p> <p> Str.path_filename(path: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Get the filename (including extension) of a path pointing to a file.   </p> <p> Str.path_extension(path: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Get the extension of a path pointing to a file.   </p> <p> Str.path_extensionless(path: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Get the filename (excluding extension) of a path pointing to a file.   </p> <p> Str.bytes_formatted(byte_count: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Get a byte size as bytes/KB/MB/GB/TB (whichever is the biggest unit that is at least 1) with 3 digits after the decimal place.   </p> <p> Str.bytes_formatted(byte_count: <code>Num</code>, precision: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Get a byte size as bytes/KB/MB/GB/TB (whichever is the biggest unit that is at least 1) with <code>precision</code> digits after the decimal place.   </p> <p> Str.upper(string: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Converts a string to all uppercase.   </p> <p> Str.lower(string: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Converts a string to all lowercase.   </p> <p> Str.wrap(string: <code>String</code>, column: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Wraps text on spaces to keep line length within column width. Does not break words that are longer than column width.   </p> <p> Str.path(path: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Normalize a path.   </p> <p> Str.strip_markup(string: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Strips the luxe markup formatting from the given string, returning the raw value   </p> <p> Str.path_normalize(string: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Normalizes the path also resolving ../ and ./ and so on   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>, arg9: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>, arg9: <code>Any</code>, arg10: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>, arg9: <code>Any</code>, arg10: <code>Any</code>, arg11: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>, arg9: <code>Any</code>, arg10: <code>Any</code>, arg11: <code>Any</code>, arg12: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>, arg9: <code>Any</code>, arg10: <code>Any</code>, arg11: <code>Any</code>, arg12: <code>Any</code>, arg13: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>, arg9: <code>Any</code>, arg10: <code>Any</code>, arg11: <code>Any</code>, arg12: <code>Any</code>, arg13: <code>Any</code>, arg14: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format_list(string: <code>String</code>, args: <code>List</code>) \u00b6 returns <code>String</code></p> <p>Format the string, replacing placeholder with other text. Placeholders are in the format <code>{x}</code>, where <code>x</code> is an index into the arguments list of <code>format_list</code>, or a numbered argument in the <code>format</code> function. Placeholders can appear multiple times and do not need to appear in order.</p> <pre><code>    Log.print(Str.format(\"{0} {1} {2}\", \"Crown\", \"Trunk\", \"Roots\")) //Crown Trunk Roots\n    Log.print(Str.format(\"{2} {1} {0}\", \"Crown\", \"Trunk\", \"Roots\")) //Roots Trunk Crown\n    Log.print(Str.format(\"{0} {0} {1}\", \"Duck\", \"Goose\")) //Duck Duck Goose\n</code></pre> <p> Str.valid(string: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Check if string is null or empty   </p> <p> Str.template(string: <code>String</code>, key_value_context: <code>Map</code>) \u00b6 returns <code>unknown</code></p> <p>A simple templating helper. Replace parts of the text with data from a given context map, by simple (non nested) string keys. For example, given the string <code>\"hello &lt;[user.name]&gt;\"</code> we can do <code>Str.template(string, {\"user.name\": name})</code>. The keys are delimited with <code>&lt;[</code> and ended with <code>]&gt;</code> in the string. Any not matched, won't be replaced. If you have a wren map with nested values, <code>LX.flatten()</code> can convert to simple key values for you. Values in the map are converted with <code>toString</code> if not a string.</p> <pre><code>  Log.print(Str.template(\"hello &lt;[user.name]&gt;\", {\"user.name\" : \"luxe\"})) //hello luxe\n</code></pre>"},{"location":"api/v/2024.12.3/terminal/","title":"Terminal","text":""},{"location":"api/v/2024.12.3/terminal/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/terminal/#luxe-terminal-module","title":"<code>luxe: terminal</code> module","text":"<ul> <li>Terminal </li> </ul>"},{"location":"api/v/2024.12.3/terminal/#terminal","title":"Terminal","text":"<p><code>import \"luxe: terminal\" for Terminal</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>red</li> <li>cyan</li> <li>reset</li> <li>pink</li> <li>purple</li> <li>lime</li> <li>dim</li> <li>green</li> </ul> <p> Terminal.new() \u00b6 returns <code>Terminal</code></p> <p>no docs found   </p> <p> Terminal.red \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Terminal.cyan \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Terminal.reset \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Terminal.pink \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Terminal.purple \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Terminal.lime \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Terminal.dim \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Terminal.green \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/test/","title":"Test","text":""},{"location":"api/v/2024.12.3/test/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/test/#luxe-test-module","title":"<code>luxe: test</code> module","text":"<ul> <li>BaseMatchers </li> <li>ConsoleReporter </li> <li>Expectation </li> <li>FiberMatchers </li> <li>Matchers </li> <li>NumMatchers </li> <li>RangeMatchers </li> <li>Reporter </li> <li>Runnable </li> <li>Skippable </li> <li>Stub </li> <li>StubMatchers </li> <li>Suite </li> </ul>"},{"location":"api/v/2024.12.3/test/#basematchers","title":"BaseMatchers","text":"<p><code>import \"luxe: test\" for BaseMatchers</code></p> <p>no docs found</p> <ul> <li>new(value: <code>Any</code>)</li> <li>value</li> <li>not</li> <li>toBe(klass: <code>Any</code>)</li> <li>toBeFalse</li> <li>toBeTrue</li> <li>toBeNull</li> <li>toEqual(other: <code>Any</code>)</li> <li>toEqualDeeply(other: <code>Any</code>)</li> </ul> <p> BaseMatchers.new(value: <code>Any</code>) \u00b6 returns <code>BaseMatchers</code></p> <p>no docs found   </p> <p> BaseMatchers.value \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BaseMatchers.not \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BaseMatchers.toBe(klass: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BaseMatchers.toBeFalse \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BaseMatchers.toBeTrue \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BaseMatchers.toBeNull \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BaseMatchers.toEqual(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BaseMatchers.toEqualDeeply(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/test/#consolereporter","title":"ConsoleReporter","text":"<p><code>import \"luxe: test\" for ConsoleReporter</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>print_colors=(v : Any)</li> <li>epilogue()</li> <li>runnableSkipped(skippable: <code>Any</code>)</li> <li>suiteStart(title: <code>Any</code>)</li> <li>suiteEnd(title: <code>Any</code>)</li> <li>testStart(runnable: <code>Any</code>)</li> <li>testEnd(runnable: <code>Any</code>)</li> <li>testPassed(runnable: <code>Any</code>)</li> <li>testFailed(runnable: <code>Any</code>)</li> <li>testError(runnable: <code>Any</code>)</li> </ul> <p> ConsoleReporter.new() \u00b6 returns <code>ConsoleReporter</code></p> <p>no docs found   </p> <p> ConsoleReporter.print_colors=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ConsoleReporter.epilogue() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ConsoleReporter.runnableSkipped(skippable: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ConsoleReporter.suiteStart(title: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ConsoleReporter.suiteEnd(title: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ConsoleReporter.testStart(runnable: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ConsoleReporter.testEnd(runnable: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ConsoleReporter.testPassed(runnable: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ConsoleReporter.testFailed(runnable: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ConsoleReporter.testError(runnable: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/test/#expectation","title":"Expectation","text":"<p><code>import \"luxe: test\" for Expectation</code></p> <p>no docs found</p> <ul> <li>new(passed: <code>Any</code>, message: <code>Any</code>)</li> <li>passed</li> <li>message</li> </ul> <p> Expectation.new(passed: <code>Any</code>, message: <code>Any</code>) \u00b6 returns <code>Expectation</code></p> <p>no docs found   </p> <p> Expectation.passed \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Expectation.message \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/test/#fibermatchers","title":"FiberMatchers","text":"<p><code>import \"luxe: test\" for FiberMatchers</code></p> <p>no docs found</p> <ul> <li>new(value: <code>Any</code>)</li> <li>toBeARuntimeError</li> <li>toBeARuntimeError(errorMessage: <code>Any</code>)</li> <li>toBeDone</li> </ul> <p> FiberMatchers.new(value: <code>Any</code>) \u00b6 returns <code>FiberMatchers</code></p> <p>no docs found   </p> <p> FiberMatchers.toBeARuntimeError \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> FiberMatchers.toBeARuntimeError(errorMessage: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> FiberMatchers.toBeDone \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/test/#matchers","title":"Matchers","text":"<p><code>import \"luxe: test\" for Matchers</code></p> <p>no docs found</p> <ul> <li>new(value: <code>Any</code>)</li> </ul> <p> Matchers.new(value: <code>Any</code>) \u00b6 returns <code>Matchers</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/test/#nummatchers","title":"NumMatchers","text":"<p><code>import \"luxe: test\" for NumMatchers</code></p> <p>no docs found</p> <ul> <li>new(value: <code>Any</code>)</li> <li>toBeGreaterThan(other: <code>Any</code>)</li> <li>toBeLessThan(other: <code>Any</code>)</li> <li>toBeBetween(min: <code>Any</code>, max: <code>Any</code>)</li> </ul> <p> NumMatchers.new(value: <code>Any</code>) \u00b6 returns <code>NumMatchers</code></p> <p>no docs found   </p> <p> NumMatchers.toBeGreaterThan(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NumMatchers.toBeLessThan(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NumMatchers.toBeBetween(min: <code>Any</code>, max: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/test/#rangematchers","title":"RangeMatchers","text":"<p><code>import \"luxe: test\" for RangeMatchers</code></p> <p>no docs found</p> <ul> <li>new(value: <code>Any</code>)</li> <li>toContain(other: <code>Any</code>)</li> <li>toBeContainedBy(other: <code>Any</code>)</li> </ul> <p> RangeMatchers.new(value: <code>Any</code>) \u00b6 returns <code>RangeMatchers</code></p> <p>no docs found   </p> <p> RangeMatchers.toContain(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RangeMatchers.toBeContainedBy(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/test/#reporter","title":"Reporter","text":"<p><code>import \"luxe: test\" for Reporter</code></p> <p>no docs found</p> <ul> <li>epilogue()</li> <li>runnableSkipped(skippable: <code>Any</code>)</li> <li>suiteStart(title: <code>Any</code>)</li> <li>suiteEnd(title: <code>Any</code>)</li> <li>testStart(runnable: <code>Any</code>)</li> <li>testPassed(runnable: <code>Any</code>)</li> <li>testFailed(runnable: <code>Any</code>)</li> <li>testError(runnable: <code>Any</code>)</li> <li>testEnd(runnable: <code>Any</code>)</li> </ul> <p> Reporter.epilogue() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Reporter.runnableSkipped(skippable: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Reporter.suiteStart(title: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Reporter.suiteEnd(title: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Reporter.testStart(runnable: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Reporter.testPassed(runnable: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Reporter.testFailed(runnable: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Reporter.testError(runnable: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Reporter.testEnd(runnable: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/test/#runnable","title":"Runnable","text":"<p><code>import \"luxe: test\" for Runnable</code></p> <p>no docs found</p> <ul> <li>new(title: <code>Any</code>, beforeEaches: <code>Any</code>, afterEaches: <code>Any</code>, fn: <code>Any</code>)</li> <li>duration</li> <li>error</li> <li>expectations</li> <li>hasRun</li> <li>run()</li> <li>title</li> </ul> <p> Runnable.new(title: <code>Any</code>, beforeEaches: <code>Any</code>, afterEaches: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>Runnable</code></p> <p>no docs found   </p> <p> Runnable.duration \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Runnable.error \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Runnable.expectations \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Runnable.hasRun \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Runnable.run() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Runnable.title \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/test/#skippable","title":"Skippable","text":"<p><code>import \"luxe: test\" for Skippable</code></p> <p>no docs found</p> <ul> <li>new(title: <code>Any</code>)</li> <li>run</li> <li>title</li> </ul> <p> Skippable.new(title: <code>Any</code>) \u00b6 returns <code>Skippable</code></p> <p>no docs found   </p> <p> Skippable.run \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Skippable.title \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/test/#stub","title":"Stub","text":"<p><code>import \"luxe: test\" for Stub</code></p> <p>no docs found</p> <ul> <li>new(name: <code>Any</code>)</li> <li>new(name: <code>Any</code>, fakeFn: <code>Any</code>)</li> <li>andCallFake(name: <code>Any</code>, fakeFn: <code>Any</code>)</li> <li>andReturnValue(name: <code>Any</code>, returnValue: <code>Any</code>)</li> <li>called</li> <li>calls</li> <li>firstCall</li> <li>mostRecentCall</li> <li>name</li> <li>reset</li> <li>call</li> <li>call()</li> <li>call(a: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>, k: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>, k: <code>Any</code>, l: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>, k: <code>Any</code>, l: <code>Any</code>, m: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>, k: <code>Any</code>, l: <code>Any</code>, m: <code>Any</code>, n: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>, k: <code>Any</code>, l: <code>Any</code>, m: <code>Any</code>, n: <code>Any</code>, o: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>, k: <code>Any</code>, l: <code>Any</code>, m: <code>Any</code>, n: <code>Any</code>, o: <code>Any</code>, p: <code>Any</code>)</li> </ul> <p> Stub.new(name: <code>Any</code>) \u00b6 returns <code>Stub</code></p> <p>no docs found   </p> <p> Stub.new(name: <code>Any</code>, fakeFn: <code>Any</code>) \u00b6 returns <code>Stub</code></p> <p>no docs found   </p> <p> Stub.andCallFake(name: <code>Any</code>, fakeFn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.andReturnValue(name: <code>Any</code>, returnValue: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.called \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.calls \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.firstCall \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.mostRecentCall \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.name \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.reset \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>, k: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>, k: <code>Any</code>, l: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>, k: <code>Any</code>, l: <code>Any</code>, m: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>, k: <code>Any</code>, l: <code>Any</code>, m: <code>Any</code>, n: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>, k: <code>Any</code>, l: <code>Any</code>, m: <code>Any</code>, n: <code>Any</code>, o: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>, k: <code>Any</code>, l: <code>Any</code>, m: <code>Any</code>, n: <code>Any</code>, o: <code>Any</code>, p: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/test/#stubmatchers","title":"StubMatchers","text":"<p><code>import \"luxe: test\" for StubMatchers</code></p> <p>no docs found</p> <ul> <li>new(value: <code>Any</code>)</li> <li>toHaveBeenCalled</li> <li>toHaveBeenCalled(times: <code>Any</code>)</li> <li>toHaveBeenCalledWith(args: <code>Any</code>)</li> </ul> <p> StubMatchers.new(value: <code>Any</code>) \u00b6 returns <code>StubMatchers</code></p> <p>no docs found   </p> <p> StubMatchers.toHaveBeenCalled \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> StubMatchers.toHaveBeenCalled(times: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> StubMatchers.toHaveBeenCalledWith(args: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/test/#suite","title":"Suite","text":"<p><code>import \"luxe: test\" for Suite</code></p> <p>no docs found</p> <ul> <li>new(name: <code>Any</code>, block: <code>Any</code>)</li> <li>new(name: <code>Any</code>, beforeEaches: <code>Any</code>, afterEaches: <code>Any</code>, block: <code>Any</code>)</li> <li>afterEach</li> <li>afterEach(block: <code>Any</code>)</li> <li>beforeEach</li> <li>beforeEach(block: <code>Any</code>)</li> <li>run(reporter: <code>Any</code>)</li> <li>should(name: <code>Any</code>)</li> <li>should(name: <code>Any</code>, block: <code>Any</code>)</li> <li>skip(block: <code>Any</code>)</li> <li>suite(name: <code>Any</code>)</li> <li>suite(name: <code>Any</code>, block: <code>Any</code>)</li> <li>title</li> </ul> <p> Suite.new(name: <code>Any</code>, block: <code>Any</code>) \u00b6 returns <code>Suite</code></p> <p>no docs found   </p> <p> Suite.new(name: <code>Any</code>, beforeEaches: <code>Any</code>, afterEaches: <code>Any</code>, block: <code>Any</code>) \u00b6 returns <code>Suite</code></p> <p>no docs found   </p> <p> Suite.afterEach \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Suite.afterEach(block: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Suite.beforeEach \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Suite.beforeEach(block: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Suite.run(reporter: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Suite.should(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Suite.should(name: <code>Any</code>, block: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Suite.skip(block: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Suite.suite(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Suite.suite(name: <code>Any</code>, block: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Suite.title \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/toggle/","title":"Toggle","text":""},{"location":"api/v/2024.12.3/toggle/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/toggle/#luxe-toggle-module","title":"<code>luxe: toggle</code> module","text":"<ul> <li>Toggle </li> </ul>"},{"location":"api/v/2024.12.3/toggle/#toggle","title":"Toggle","text":"<p><code>import \"luxe: toggle\" for Toggle</code></p> <p>no docs found</p> <ul> <li>create()</li> <li>valid(toggle: <code>Toggle</code>)</li> <li>destroy(toggle: <code>Toggle</code>)</li> <li>set(toggle: <code>Toggle</code>, handle: <code>Num</code>, state: <code>Bool</code>)</li> <li>get(toggle: <code>Toggle</code>, handle: <code>Num</code>)</li> <li>get(toggle: <code>Toggle</code>)</li> <li>filter(toggle: <code>Toggle</code>, handles: <code>List</code>)</li> <li>link(toggle: <code>Toggle</code>, from_handle: <code>Num</code>, to_handle: <code>Num</code>)</li> </ul> <p> Toggle.create() \u00b6 returns <code>Toggle</code></p> <p>no docs found   </p> <p> Toggle.valid(toggle: <code>Toggle</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Toggle.destroy(toggle: <code>Toggle</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Toggle.set(toggle: <code>Toggle</code>, handle: <code>Num</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Toggle.get(toggle: <code>Toggle</code>, handle: <code>Num</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Toggle.get(toggle: <code>Toggle</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Toggle.filter(toggle: <code>Toggle</code>, handles: <code>List</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Toggle.link(toggle: <code>Toggle</code>, from_handle: <code>Num</code>, to_handle: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/topograph/","title":"Topograph","text":""},{"location":"api/v/2024.12.3/topograph/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/topograph/#luxe-topograph-module","title":"<code>luxe: topograph</code> module","text":"<ul> <li>TopoGraph </li> </ul>"},{"location":"api/v/2024.12.3/topograph/#topograph","title":"TopoGraph","text":"<p><code>import \"luxe: topograph\" for TopoGraph</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>add_vertex(vertex: <code>Any</code>)</li> <li>add_edge(v1: <code>Any</code>, v2: <code>Any</code>)</li> <li>sorted()</li> </ul> <p> TopoGraph.new() \u00b6 returns <code>TopoGraph</code></p> <p>no docs found   </p> <p> TopoGraph.add_vertex(vertex: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TopoGraph.add_edge(v1: <code>Any</code>, v2: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TopoGraph.sorted() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/triangulate/","title":"Triangulate","text":""},{"location":"api/v/2024.12.3/triangulate/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/triangulate/#luxe-triangulate-module","title":"<code>luxe: triangulate</code> module","text":"<ul> <li>Triangulate </li> </ul>"},{"location":"api/v/2024.12.3/triangulate/#triangulate","title":"Triangulate","text":"<p><code>import \"luxe: triangulate\" for Triangulate</code></p> <p>no docs found</p> <ul> <li>get_svg(file_contents: <code>String</code>, units: <code>String</code>, dpi: <code>Num</code>, tolerance: <code>Num</code>)</li> <li>svg_to_image(file_contents: <code>String</code>, units: <code>String</code>, dpi: <code>Num</code>, width: <code>Num</code>, height: <code>Num</code>)</li> <li>svg_to_geometry(file_contents: <code>String</code>, units: <code>String</code>, dpi: <code>Num</code>, resolution: <code>Num</code>, limit: <code>Num</code>, basis: <code>String</code>)</li> <li>svg_to_geometry(file_contents: <code>String</code>, units: <code>String</code>, dpi: <code>Num</code>, resolution: <code>Num</code>, limit: <code>Num</code>)</li> <li>points(points: <code>List</code>)</li> <li>polys(points: <code>List</code>, edges: <code>List</code>)</li> </ul> <p> Triangulate.get_svg(file_contents: <code>String</code>, units: <code>String</code>, dpi: <code>Num</code>, tolerance: <code>Num</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Triangulate.svg_to_image(file_contents: <code>String</code>, units: <code>String</code>, dpi: <code>Num</code>, width: <code>Num</code>, height: <code>Num</code>) \u00b6 returns <code>Image</code></p> <p>no docs found   </p> <p> Triangulate.svg_to_geometry(file_contents: <code>String</code>, units: <code>String</code>, dpi: <code>Num</code>, resolution: <code>Num</code>, limit: <code>Num</code>, basis: <code>String</code>) \u00b6 returns <code>Geometry</code></p> <p>no docs found   </p> <p> Triangulate.svg_to_geometry(file_contents: <code>String</code>, units: <code>String</code>, dpi: <code>Num</code>, resolution: <code>Num</code>, limit: <code>Num</code>) \u00b6 returns <code>Geometry</code></p> <p>no docs found   </p> <p> Triangulate.points(points: <code>List</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Triangulate.polys(points: <code>List</code>, edges: <code>List</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/","title":"Ui","text":""},{"location":"api/v/2024.12.3/ui/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/ui/#luxe-ui-module","title":"<code>luxe: ui</code> module","text":""},{"location":"api/v/2024.12.3/version/","title":"Version","text":""},{"location":"api/v/2024.12.3/version/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/version/#luxe-version-module","title":"<code>luxe: version</code> module","text":""},{"location":"api/v/2024.12.3/world/","title":"World","text":""},{"location":"api/v/2024.12.3/world/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/world/#luxe-world-module","title":"<code>luxe: world</code> module","text":"<ul> <li>Body2D </li> <li>Body3D </li> <li>BodyEvent </li> <li>BodyType </li> <li>Clock </li> <li>Entity </li> <li>EntityContextType </li> <li>EntityEventType </li> <li>MeshColliderType </li> <li>ModifierEventType </li> <li>ModifierSystem </li> <li>Modifiers </li> <li>Overlap </li> <li>Physics2D </li> <li>Physics3D </li> <li>Prototype </li> <li>Scene </li> <li>UI </li> <li>UIBehave </li> <li>UIClear </li> <li>UIContain </li> <li>UIDebugMode </li> <li>UIDrop </li> <li>UIEvent </li> <li>UIImageFlags </li> <li>UILayoutMode </li> <li>UIRenderMode </li> <li>WorldEventType </li> <li>WorldRenderDesc </li> </ul>"},{"location":"api/v/2024.12.3/world/#body2d","title":"Body2D","text":"<p><code>import \"luxe: world\" for Body2D</code></p> <p>no docs found</p> <ul> <li>create(entity: <code>Any</code>)</li> <li>has(entity: <code>Any</code>)</li> <li>create_collider_box(entity: <code>Any</code>, center: <code>Any</code>, size: <code>Any</code>, angle: <code>Any</code>)</li> <li>create_collider_circle(entity: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>)</li> <li>get_center(entity: <code>Any</code>)</li> <li>get_mass(entity: <code>Any</code>)</li> <li>get_inertia(entity: <code>Any</code>)</li> <li>set_type(entity: <code>Any</code>, type: <code>Any</code>)</li> <li>get_type(entity: <code>Any</code>)</li> <li>set_sleeping_allowed(entity: <code>Any</code>, allowed: <code>Any</code>)</li> <li>get_sleeping_allowed(entity: <code>Any</code>)</li> <li>set_sleeping(entity: <code>Any</code>, sleep_state: <code>Any</code>)</li> <li>get_sleeping(entity: <code>Any</code>)</li> <li>set_active(entity: <code>Any</code>, active_state: <code>Any</code>)</li> <li>get_active(entity: <code>Any</code>)</li> <li>set_velocity_linear(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>)</li> <li>get_velocity_linear(entity: <code>Any</code>)</li> <li>set_velocity_angular(entity: <code>Any</code>, angle: <code>Any</code>)</li> <li>get_velocity_angular(entity: <code>Any</code>)</li> <li>set_damping_linear(entity: <code>Any</code>, linear_damping: <code>Any</code>)</li> <li>get_damping_linear(entity: <code>Any</code>)</li> <li>set_damping_angular(entity: <code>Any</code>, angular_damping: <code>Any</code>)</li> <li>get_damping_angular(entity: <code>Any</code>)</li> <li>apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, force_awake: <code>Any</code>)</li> <li>apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>)</li> <li>apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, force_awake: <code>Any</code>)</li> <li>apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>)</li> <li>apply_torque(entity: <code>Any</code>, torque: <code>Any</code>, force_awake: <code>Any</code>)</li> <li>apply_torque(entity: <code>Any</code>, torque: <code>Any</code>)</li> <li>apply_impulse_linear(entity: <code>Any</code>, impulse_x: <code>Any</code>, impulse_y: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, force_awake: <code>Any</code>)</li> <li>apply_impulse_linear(entity: <code>Any</code>, impulse_x: <code>Any</code>, impulse_y: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>)</li> <li>apply_impulse_angular(entity: <code>Any</code>, impulse: <code>Any</code>, force_awake: <code>Any</code>)</li> <li>apply_impulse_angular(entity: <code>Any</code>, impulse: <code>Any</code>)</li> </ul> <p> Body2D.create(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.has(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.create_collider_box(entity: <code>Any</code>, center: <code>Any</code>, size: <code>Any</code>, angle: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.create_collider_circle(entity: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.get_center(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.get_mass(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.get_inertia(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.set_type(entity: <code>Any</code>, type: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.get_type(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.set_sleeping_allowed(entity: <code>Any</code>, allowed: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.get_sleeping_allowed(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.set_sleeping(entity: <code>Any</code>, sleep_state: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.get_sleeping(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.set_active(entity: <code>Any</code>, active_state: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.get_active(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.set_velocity_linear(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.get_velocity_linear(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.set_velocity_angular(entity: <code>Any</code>, angle: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.get_velocity_angular(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.set_damping_linear(entity: <code>Any</code>, linear_damping: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.get_damping_linear(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.set_damping_angular(entity: <code>Any</code>, angular_damping: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.get_damping_angular(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, force_awake: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, force_awake: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.apply_torque(entity: <code>Any</code>, torque: <code>Any</code>, force_awake: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.apply_torque(entity: <code>Any</code>, torque: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.apply_impulse_linear(entity: <code>Any</code>, impulse_x: <code>Any</code>, impulse_y: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, force_awake: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.apply_impulse_linear(entity: <code>Any</code>, impulse_x: <code>Any</code>, impulse_y: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.apply_impulse_angular(entity: <code>Any</code>, impulse: <code>Any</code>, force_awake: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.apply_impulse_angular(entity: <code>Any</code>, impulse: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/world/#body3d","title":"Body3D","text":"<p><code>import \"luxe: world\" for Body3D</code></p> <p>no docs found</p> <ul> <li>create(entity: <code>Any</code>)</li> <li>destroy(entity: <code>Any</code>)</li> <li>has(entity: <code>Any</code>)</li> <li>create_heightfield(entity: <code>Any</code>, image: <code>Any</code>)</li> <li>create_collider_box(entity: <code>Any</code>, center: <code>Any</code>, size: <code>Any</code>, euler: <code>Any</code>, physics_asset: <code>Any</code>)</li> <li>create_collider_box(entity: <code>Any</code>, center: <code>Any</code>, size: <code>Any</code>, euler: <code>Any</code>)</li> <li>create_collider_sphere(entity: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>, physics_asset: <code>Any</code>)</li> <li>create_collider_sphere(entity: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>)</li> <li>create_collider_cylinder(entity: <code>Any</code>, center: <code>Any</code>, size: <code>Any</code>, physics_asset: <code>Any</code>)</li> <li>create_collider_cylinder(entity: <code>Any</code>, center: <code>Any</code>, size: <code>Any</code>)</li> <li>create_collider_capsule(entity: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>, height: <code>Any</code>, physics_asset: <code>Any</code>)</li> <li>create_collider_capsule(entity: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>, height: <code>Any</code>)</li> <li>create_collider_mesh(entity: <code>Any</code>, center: <code>Any</code>, euler: <code>Any</code>, collider_type: <code>MeshColliderType</code>, mesh_asset: <code>Any</code>, mesh_level: <code>Any</code>, physics_asset: <code>Any</code>)</li> <li>create_collider_mesh(entity: <code>Any</code>, center: <code>Any</code>, euler: <code>Any</code>, collider_type: <code>MeshColliderType</code>, mesh_asset: <code>Any</code>, mesh_level: <code>Any</code>)</li> <li>get_aabb(entity: <code>Any</code>)</li> <li>get_center(entity: <code>Any</code>)</li> <li>get_mass(entity: <code>Any</code>)</li> <li>get_inertia(entity: <code>Any</code>)</li> <li>set_physics_asset(entity: <code>Any</code>, physics_asset: <code>Any</code>)</li> <li>on(entity: <code>Any</code>, type: <code>BodyEvent</code>, fn: <code>Any</code>)</li> <li>off(entity: <code>Any</code>, handle: <code>Any</code>)</li> <li>set_channel(entity: <code>Any</code>, channel: <code>Any</code>)</li> <li>set_type(entity: <code>Any</code>, type: <code>Any</code>)</li> <li>get_type(entity: <code>Any</code>)</li> <li>set_sleeping_allowed(entity: <code>Any</code>, allowed: <code>Any</code>)</li> <li>get_sleeping_allowed(entity: <code>Any</code>)</li> <li>set_sleeping(entity: <code>Any</code>, sleep_state: <code>Any</code>)</li> <li>get_sleeping(entity: <code>Any</code>)</li> <li>set_active(entity: <code>Any</code>, active_state: <code>Any</code>)</li> <li>get_active(entity: <code>Any</code>)</li> <li>set_rotation_allowed(entity: <code>Any</code>, axis: <code>Any</code>)</li> <li>get_rotation_allowed(entity: <code>Any</code>)</li> <li>set_velocity_linear(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>)</li> <li>get_velocity_linear(entity: <code>Any</code>)</li> <li>set_velocity_angular(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>)</li> <li>get_velocity_angular(entity: <code>Any</code>)</li> <li>set_damping_linear(entity: <code>Any</code>, linear_damping: <code>Any</code>)</li> <li>get_damping_linear(entity: <code>Any</code>)</li> <li>set_damping_angular(entity: <code>Any</code>, angular_damping: <code>Any</code>)</li> <li>get_damping_angular(entity: <code>Any</code>)</li> <li>apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, force_z: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, force_awake: <code>Any</code>)</li> <li>apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, force_z: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>)</li> <li>apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, force_z: <code>Any</code>, force_awake: <code>Any</code>)</li> <li>apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, force_z: <code>Any</code>)</li> <li>apply_torque(entity: <code>Any</code>, torque_x: <code>Any</code>, torque_y: <code>Any</code>, torque_z: <code>Any</code>, force_awake: <code>Any</code>)</li> <li>apply_torque(entity: <code>Any</code>, torque_x: <code>Any</code>, torque_y: <code>Any</code>, torque_z: <code>Any</code>)</li> <li>apply_impulse_linear(entity: <code>Any</code>, impulse_x: <code>Any</code>, impulse_y: <code>Any</code>, impulse_z: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, force_awake: <code>Any</code>)</li> <li>apply_impulse_linear(entity: <code>Any</code>, impulse_x: <code>Any</code>, impulse_y: <code>Any</code>, impulse_z: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>)</li> <li>apply_impulse_angular(entity: <code>Any</code>, impulse_x: <code>Any</code>, impulse_y: <code>Any</code>, impulse_z: <code>Any</code>, force_awake: <code>Any</code>)</li> <li>apply_impulse_angular(entity: <code>Any</code>, impulse_x: <code>Any</code>, impulse_y: <code>Any</code>, impulse_z: <code>Any</code>)</li> </ul> <p> Body3D.create(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.destroy(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.has(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.create_heightfield(entity: <code>Any</code>, image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.create_collider_box(entity: <code>Any</code>, center: <code>Any</code>, size: <code>Any</code>, euler: <code>Any</code>, physics_asset: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.create_collider_box(entity: <code>Any</code>, center: <code>Any</code>, size: <code>Any</code>, euler: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.create_collider_sphere(entity: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>, physics_asset: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.create_collider_sphere(entity: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.create_collider_cylinder(entity: <code>Any</code>, center: <code>Any</code>, size: <code>Any</code>, physics_asset: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.create_collider_cylinder(entity: <code>Any</code>, center: <code>Any</code>, size: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.create_collider_capsule(entity: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>, height: <code>Any</code>, physics_asset: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.create_collider_capsule(entity: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>, height: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.create_collider_mesh(entity: <code>Any</code>, center: <code>Any</code>, euler: <code>Any</code>, collider_type: <code>MeshColliderType</code>, mesh_asset: <code>Any</code>, mesh_level: <code>Any</code>, physics_asset: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.create_collider_mesh(entity: <code>Any</code>, center: <code>Any</code>, euler: <code>Any</code>, collider_type: <code>MeshColliderType</code>, mesh_asset: <code>Any</code>, mesh_level: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_aabb(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_center(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_mass(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_inertia(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.set_physics_asset(entity: <code>Any</code>, physics_asset: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.on(entity: <code>Any</code>, type: <code>BodyEvent</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.off(entity: <code>Any</code>, handle: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.set_channel(entity: <code>Any</code>, channel: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.set_type(entity: <code>Any</code>, type: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_type(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.set_sleeping_allowed(entity: <code>Any</code>, allowed: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_sleeping_allowed(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.set_sleeping(entity: <code>Any</code>, sleep_state: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_sleeping(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.set_active(entity: <code>Any</code>, active_state: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_active(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.set_rotation_allowed(entity: <code>Any</code>, axis: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_rotation_allowed(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.set_velocity_linear(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_velocity_linear(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.set_velocity_angular(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_velocity_angular(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.set_damping_linear(entity: <code>Any</code>, linear_damping: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_damping_linear(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.set_damping_angular(entity: <code>Any</code>, angular_damping: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_damping_angular(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, force_z: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, force_awake: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, force_z: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, force_z: <code>Any</code>, force_awake: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, force_z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.apply_torque(entity: <code>Any</code>, torque_x: <code>Any</code>, torque_y: <code>Any</code>, torque_z: <code>Any</code>, force_awake: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.apply_torque(entity: <code>Any</code>, torque_x: <code>Any</code>, torque_y: <code>Any</code>, torque_z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.apply_impulse_linear(entity: <code>Any</code>, impulse_x: <code>Any</code>, impulse_y: <code>Any</code>, impulse_z: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, force_awake: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.apply_impulse_linear(entity: <code>Any</code>, impulse_x: <code>Any</code>, impulse_y: <code>Any</code>, impulse_z: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.apply_impulse_angular(entity: <code>Any</code>, impulse_x: <code>Any</code>, impulse_y: <code>Any</code>, impulse_z: <code>Any</code>, force_awake: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.apply_impulse_angular(entity: <code>Any</code>, impulse_x: <code>Any</code>, impulse_y: <code>Any</code>, impulse_z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/world/#bodyevent","title":"BodyEvent","text":"<p><code>import \"luxe: world\" for BodyEvent</code></p> <p>no docs found</p> <ul> <li>invalid</li> <li>overlap</li> <li>collide</li> <li>name(value: <code>Any</code>)</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> BodyEvent.invalid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BodyEvent.overlap \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BodyEvent.collide \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BodyEvent.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BodyEvent.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/world/#bodytype","title":"BodyType","text":"<p><code>import \"luxe: world\" for BodyType</code></p> <p>no docs found</p> <ul> <li>static_body</li> <li>dynamic_body</li> <li>kinematic_body</li> <li>name(value: <code>Any</code>)</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> BodyType.static_body \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BodyType.dynamic_body \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BodyType.kinematic_body \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BodyType.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BodyType.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/world/#clock","title":"Clock","text":"<p><code>import \"luxe: world\" for Clock</code></p> <p>no docs found</p> <ul> <li>create(world: <code>Any</code>, rate: <code>Any</code>, paused: <code>Any</code>)</li> <li>create(world: <code>Any</code>, rate: <code>Any</code>)</li> <li>time(world: <code>Any</code>, clock: <code>Any</code>)</li> </ul> <p> Clock.create(world: <code>Any</code>, rate: <code>Any</code>, paused: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Clock.create(world: <code>Any</code>, rate: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Clock.time(world: <code>Any</code>, clock: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/world/#entity","title":"Entity","text":"<p><code>import \"luxe: world\" for Entity</code></p> <p>Anything that exists in a world is a <code>entity</code>. The entity itself is just a handle (represented by a number) with which modifiers and a name can be associated. Entities are very lightweight, so creating and destroying many of them usually isnt a concern.</p> <p>An entity in itself does not have a transform (you can attach the <code>transform</code> modifier to it to gain that) or any kind of hierarchy (different implicit hierarchies can result from modifiers). Entities can be created manually in code, or loaded as Scenes or Prototypes.</p> <ul> <li>none</li> <li>create(world: <code>World</code>)</li> <li>create(world: <code>World</code>, name: <code>String</code>)</li> <li>valid(entity: <code>Entity</code>)</li> <li>valid_handle(entity: <code>Entity</code>)</li> <li>get_world(entity: <code>Entity</code>)</li> <li>get(uuid: <code>String</code>)</li> <li>get_addressed_in(context_root: <code>Entity</code>, address: <code>List</code>)</li> <li>get_addressed(relative_to: <code>Entity</code>, address: <code>List</code>)</li> <li>resolve(relative_to: <code>Entity</code>, address: <code>List</code>)</li> <li>get_addressed_context(relative_to: <code>Entity</code>, address: <code>List</code>)</li> <li>get_named(world: <code>World</code>, name: <code>String</code>)</li> <li>get_named_all(world: <code>World</code>, name: <code>String</code>)</li> <li>get_named_in(context: <code>Entity</code>, name: <code>String</code>)</li> <li>get_named_all_in(context: <code>Entity</code>, name: <code>String</code>)</li> <li>get_name(entity: <code>Entity</code>)</li> <li>name(entity: <code>Entity</code>)</li> <li>get_folder(entity: <code>Entity</code>)</li> <li>set_folder(entity: <code>Entity</code>, folder: <code>String</code>)</li> <li>get_asset_id(entity: <code>Entity</code>)</li> <li>set_asset_id(entity: <code>Entity</code>, asset_id: <code>String</code>)</li> <li>get_context_asset_id(entity: <code>Entity</code>)</li> <li>set_context_asset_id(entity: <code>Entity</code>, asset_id: <code>String</code>)</li> <li>get_context_type(entity: <code>Entity</code>)</li> <li>get_context_instance_uuid(entity: <code>Entity</code>)</li> <li>get_context(entity: <code>Entity</code>)</li> <li>get_context_origin(entity: <code>Entity</code>)</li> <li>get_context_address(entity: <code>Entity</code>, context: <code>Entity</code>)</li> <li>list_context_all(context: <code>Entity</code>)</li> <li>list_context_direct(context: <code>Entity</code>)</li> <li>get_context_id(context: <code>Entity</code>)</li> <li>get_origin_address(entity: <code>Entity</code>)</li> <li>get_address(entity: <code>Entity</code>)</li> <li>get_context_is_direct(context: <code>Entity</code>, entity: <code>Entity</code>)</li> <li>init_into_context(entity: <code>Entity</code>, context: <code>Entity</code>)</li> <li>init_into_context(entity: <code>Entity</code>, context: <code>Entity</code>, address_uuid: <code>UUID</code>)</li> <li>note_add(entity: <code>Entity</code>, note: <code>String</code>)</li> <li>note_remove(entity: <code>Entity</code>, note: <code>String</code>)</li> <li>note_has(entity: <code>Entity</code>, note: <code>String</code>)</li> <li>notes(entity: <code>Entity</code>)</li> <li>set_name(entity: <code>Entity</code>, name: <code>String</code>)</li> <li>get_uuid(entity: <code>Entity</code>)</li> <li>set_uuid(entity: <code>Entity</code>, uuid_string: <code>String</code>)</li> <li>destroy(entity: <code>Entity</code>)</li> <li>duplicate(entity: <code>Entity</code>)</li> <li>duplicate(entity: <code>Entity</code>, world: <code>World</code>)</li> </ul> <p> Entity.none \u00b6 returns <code>Entity</code></p> <p>An entity representing no value. Note, not for comparisons! Use Entity.valid(entity) for that   </p> <p> Entity.create(world: <code>World</code>) \u00b6 returns <code>Entity</code></p> <p>Creates a new <code>entity</code> in the given <code>world</code>.</p> <pre><code>var player = Entity.create(app.world)\n</code></pre> <p> Entity.create(world: <code>World</code>, name: <code>String</code>) \u00b6 returns <code>Entity</code></p> <p>Creates a new <code>entity</code> in the given <code>world</code> with the specified <code>String</code> name.</p> <pre><code>var player = Entity.create(app.world, \"player\")\n</code></pre> <p> Entity.valid(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>Checks if the given variable references a valid <code>entity</code>.</p> <pre><code>var player = Entity.get_named(app.world, \"player\")\nif (Entity.valid(player)) {\n  Log.print(\"Got the player entity!\")\n}\n</code></pre> <p> Entity.valid_handle(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>Checks if the given variable references a valid <code>entity</code> handle. Note that when an entity is destroyed, it marks the entity as invalid  for Entity.valid(), but the destroy happens at the end of the frame. This means during that frame the entity can still be \"live\", but not valid.</p> <p>This is mostly useful in the detach handlers, where Entity.valid would return false.   </p> <p> Entity.get_world(entity: <code>Entity</code>) \u00b6 returns <code>World</code></p> <p>Get the <code>world</code> a given <code>entity</code> belongs to</p> <pre><code>var world = Entity.get_world(entity)\n</code></pre> <p> Entity.get(uuid: <code>String</code>) \u00b6 returns <code>Entity</code></p> <p>Get the entity with a given UUID. Since an entity can have  a name that is shared by several entities in the same world,  the unique ID of an entity is used to locate exactly one entity. Generally, no two entities will have the same UUID.</p> <pre><code>var entity = Entity.get(\"5b01869b-fd59-4f2c-892f-4c0b726c79a2\")\n\nif (Entity.valid(entity)) {\n  Log.print(\"found entity\")\n}\n</code></pre> <p> Entity.get_addressed_in(context_root: <code>Entity</code>, address: <code>List</code>) \u00b6 returns <code>Entity</code></p> <p>Find an entity by <code>address</code> in the given context (only).  The address is a list of uuids, and the context is a scene root entity,  or prototype root entity.   </p> <p> Entity.get_addressed(relative_to: <code>Entity</code>, address: <code>List</code>) \u00b6 returns <code>Entity</code></p> <p>Find an entity by <code>address</code> relative to the given entity, and will search upward through all contexts in the tree to try and find the addressed entity. The address is a list of uuids.   </p> <p> Entity.resolve(relative_to: <code>Entity</code>, address: <code>List</code>) \u00b6 returns <code>Entity</code></p> <p>Find an entity by <code>address</code> relative to the given entity, and will search upward through all contexts in the tree to try and find the addressed entity. The address is a list of uuids called a <code>Link</code> typically. Alias for <code>Entity.get_addressed</code>.   </p> <p> Entity.get_addressed_context(relative_to: <code>Entity</code>, address: <code>List</code>) \u00b6 returns <code>Entity</code></p> <p>Find an entity by <code>address</code> relative to the given entity, and will search upward through all contexts in the tree to try and find the addressed entity - but this function will return the context it was found in (e.g the context the address is for). The address is a list of uuids.   </p> <p> Entity.get_named(world: <code>World</code>, name: <code>String</code>) \u00b6 returns <code>Entity</code></p> <p>Get the first <code>entity</code> from the given <code>world</code> with the name <code>name</code>. Which entity is returned is unspecified if there are multiple with the same name. If you need to test further use <code>Entity.get_named_all</code>. Returns null if no entity is found by that name.</p> <pre><code>var player = Entity.get_named(app.world, \"player\")\n</code></pre> <p> Entity.get_named_all(world: <code>World</code>, name: <code>String</code>) \u00b6 returns <code>List</code></p> <p>Get a list of all <code>entities</code> from the given <code>world</code> with the name <code>name</code>. Returns a list of entities with an unspecified order. Returns an empty list if no entities are found.</p> <pre><code>var list = Entity.get_named_all(app.world, \"fern\")\nLog.print(\"There are %(list.count) ferns in this forest!\")\n</code></pre> <p> Entity.get_named_in(context: <code>Entity</code>, name: <code>String</code>) \u00b6 returns <code>Entity</code></p> <p>Get the first <code>entity</code> from the given <code>context</code> with the name <code>name</code>. The context is a scene root or a prototype root entity. Which entity is returned is unspecified if there are multiple with the same name. If you need to test further use <code>Entity.get_named_all</code>. Returns null if no entity is found by that name.</p> <pre><code>var prototype = Prototype.create(world, Asset.prototype(\"proto/example\"))\nvar item = Entity.get_named_in(prototype, \"item\")\n</code></pre> <p> Entity.get_named_all_in(context: <code>Entity</code>, name: <code>String</code>) \u00b6 returns <code>List</code></p> <p>Get a list of all <code>entities</code> from the given <code>context</code> with the name <code>name</code>. The context is a scene root or a prototype root entity. Returns a list of entities with an unspecified order. Returns an empty list if no entities are found.</p> <pre><code>  var scene = Scene.load(world, Asset.scene(\"scene/example\")) {\n  var list = Entity.get_named_all_in(scene, \"fern\")\n  Log.print(\"There are %(list.count) ferns in this forest!\")\n}\n</code></pre> <p> Entity.get_name(entity: <code>Entity</code>) \u00b6 returns <code>StringID</code></p> <p>Get the name of a given <code>entity</code> as a hashed string ID. Use <code>import \"luxe: assets\" for Strings</code> with <code>Strings.get(name)</code> to convert to a string. :note: this ID nuance is wip.</p> <pre><code>Entity.set_name(player, \"player\")\nvar name_id = Entity.get_name(player)\nvar name = Strings.get(name_id)\nLog.print(\"Entity name is `%(name)`!\")\n// prints \"Entity name is `player`\"\n</code></pre> <p> Entity.name(entity: <code>Entity</code>) \u00b6 returns <code>String</code></p> <p>Get the name of a given <code>entity</code> as a string. Supports invalid entities (returns <code>&lt;invalid&gt;</code>).</p> <pre><code>Entity.set_name(player, \"player\")\nvar name = Entity.name(player)\nLog.print(\"Entity name is `%(name)`!\")\n// prints \"Entity name is `player`\"\n</code></pre> <p> Entity.get_folder(entity: <code>Entity</code>) \u00b6 returns <code>String</code></p> <p>get the folder of this entity (used for nested display in a world outliner)   </p> <p> Entity.set_folder(entity: <code>Entity</code>, folder: <code>String</code>) \u00b6 returns <code>None</code></p> <p>set the folder of this entity (used for nested display in a world outliner)   </p> <p> Entity.get_asset_id(entity: <code>Entity</code>) \u00b6 returns <code>String</code></p> <p>get the asset ID of this entity (if it has one)   </p> <p> Entity.set_asset_id(entity: <code>Entity</code>, asset_id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>set the asset ID of this entity (used for e.g editor)   </p> <p> Entity.get_context_asset_id(entity: <code>Entity</code>) \u00b6 returns <code>String</code></p> <p>get the context asset ID of this entity (if it has one)   </p> <p> Entity.set_context_asset_id(entity: <code>Entity</code>, asset_id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>set the context asset ID of this entity (used for e.g editor)   </p> <p> Entity.get_context_type(entity: <code>Entity</code>) \u00b6 returns <code>EntityContextType</code></p> <p>get the context type for an entity   </p> <p> Entity.get_context_instance_uuid(entity: <code>Entity</code>) \u00b6 returns <code>String</code></p> <p>get the context uuid for a given entity. Entity should be EntityContextType <code>scene</code> or <code>prototype</code> or null is returned   </p> <p> Entity.get_context(entity: <code>Entity</code>) \u00b6 returns <code>Entity</code></p> <p>get the context this entity belongs to if any   </p> <p> Entity.get_context_origin(entity: <code>Entity</code>) \u00b6 returns <code>Entity</code></p> <p>get the context that this entity originated from. For example if a scene was loaded and inside it there was a prototype and so on, the scene is the origin.   </p> <p> Entity.get_context_address(entity: <code>Entity</code>, context: <code>Entity</code>) \u00b6 returns <code>List</code></p> <p>get the address of the entity within a given context.   </p> <p> Entity.list_context_all(context: <code>Entity</code>) \u00b6 returns <code>Set</code></p> <p>Get all the entities this context created as a Set of entities.   </p> <p> Entity.list_context_direct(context: <code>Entity</code>) \u00b6 returns <code>Set</code></p> <p>Get all the entities this context created directly (rather than indirectly) as a Set of entities.   </p> <p> Entity.get_context_id(context: <code>Entity</code>) \u00b6 returns <code>String</code></p> <p>get the id of the given context.   </p> <p> Entity.get_origin_address(entity: <code>Entity</code>) \u00b6 returns <code>List</code></p> <p>get the address of the entity within it's origin context.   </p> <p> Entity.get_address(entity: <code>Entity</code>) \u00b6 returns <code>List</code></p> <p>get the address of the entity within it's origin context.   </p> <p> Entity.get_context_is_direct(context: <code>Entity</code>, entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>returns true if the given entity is a direct entity in the context. This includes prototype roots spawned into the context (use context type to filter them out).   </p> <p> Entity.init_into_context(entity: <code>Entity</code>, context: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>Initialize an entity into an existing context (typically editor related)   </p> <p> Entity.init_into_context(entity: <code>Entity</code>, context: <code>Entity</code>, address_uuid: <code>UUID</code>) \u00b6 returns <code>unknown</code></p> <p>Initialize an entity into an existing context with an address uuid (typically editor related)   </p> <p> Entity.note_add(entity: <code>Entity</code>, note: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>add a note to this entity (like a lower level tag)   </p> <p> Entity.note_remove(entity: <code>Entity</code>, note: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>remove a note to this entity   </p> <p> Entity.note_has(entity: <code>Entity</code>, note: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>returns true if this note exists, false otherwise   </p> <p> Entity.notes(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>get all the notes on the given entity   </p> <p> Entity.set_name(entity: <code>Entity</code>, name: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Set the name of a given <code>entity</code>.</p> <pre><code>Entity.set_name(player, \"player\")\n</code></pre> <p> Entity.get_uuid(entity: <code>Entity</code>) \u00b6 returns <code>String</code></p> <p>Get the unique ID as a string UUID for a given <code>entity</code>.   </p> <p> Entity.set_uuid(entity: <code>Entity</code>, uuid_string: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Set the unique ID of a given <code>entity</code>. Typically used in special cases, not commonly used on the high level.   </p> <p> Entity.destroy(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>Destroy the given <code>entity</code>, removing it from the world it's in.</p> <p>At the moment destroy is immediate (potentially changing soon), so sometimes you might want <code>Frame.end { Entity.destroy(entity) }</code>  to push the destroy to the end of the frame, so it doesn't happen while iterating a list or when things are still processing it.   </p> <p> Entity.duplicate(entity: <code>Entity</code>) \u00b6 returns <code>Entity</code></p> <p>Duplicate the given <code>entity</code>.  Returns a new entity with the same notes, folder, name and modifiers.   </p> <p> Entity.duplicate(entity: <code>Entity</code>, world: <code>World</code>) \u00b6 returns <code>Entity</code></p> <p>Duplicate the given <code>entity</code> into another world. Returns a new entity with the same notes, folder, name and modifiers. Will not duplicate in same context as origin entity if the new world is different.   </p>"},{"location":"api/v/2024.12.3/world/#entitycontexttype","title":"EntityContextType","text":"<p><code>import \"luxe: world\" for EntityContextType</code></p> <p>no docs found</p> <ul> <li>none</li> <li>scene</li> <li>prototype</li> <li>name(value: <code>EntityContextType</code>)</li> </ul> <p> EntityContextType.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> EntityContextType.scene \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> EntityContextType.prototype \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> EntityContextType.name(value: <code>EntityContextType</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/world/#entityeventtype","title":"EntityEventType","text":"<p><code>import \"luxe: world\" for EntityEventType</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>create</li> <li>destroy</li> <li>load</li> <li>unload</li> <li>modifier</li> <li>name(value: <code>EntityEventType</code>)</li> </ul> <p> EntityEventType.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> EntityEventType.create \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> EntityEventType.destroy \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> EntityEventType.load \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> EntityEventType.unload \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> EntityEventType.modifier \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> EntityEventType.name(value: <code>EntityEventType</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/world/#meshcollidertype","title":"MeshColliderType","text":"<p><code>import \"luxe: world\" for MeshColliderType</code></p> <p>no docs found</p> <ul> <li>static_only</li> <li>dynamic_convex</li> <li>dynamic_concave</li> <li>name(value: <code>Any</code>)</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> MeshColliderType.static_only \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MeshColliderType.dynamic_convex \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MeshColliderType.dynamic_concave \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MeshColliderType.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MeshColliderType.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/world/#modifiereventtype","title":"ModifierEventType","text":"<p><code>import \"luxe: world\" for ModifierEventType</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>attach</li> <li>detach</li> <li>change</li> <li>name(value: <code>ModifierEventType</code>)</li> </ul> <p> ModifierEventType.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierEventType.attach \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierEventType.detach \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierEventType.change \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierEventType.name(value: <code>ModifierEventType</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/world/#modifiersystem","title":"ModifierSystem","text":"<p><code>import \"luxe: world\" for ModifierSystem</code></p> <p>no docs found</p> <ul> <li>priority</li> <li>persist</li> <li>count</li> <li>field</li> <li>items</li> <li>world</li> <li>each(fn: <code>Any</code>)</li> <li>each(unique: <code>Any</code>, fn: <code>Any</code>)</li> <li>find_entity(relative_entity: <code>Any</code>, uuid: <code>Any</code>)</li> <li>create(entity: <code>Any</code>)</li> <li>destroy(entity: <code>Any</code>)</li> <li>get(entity: <code>Any</code>)</li> <li>get(entity: <code>Any</code>, inst: <code>Any</code>)</li> <li>get_slot_at(index: <code>Any</code>)</li> <li>get_slot(entity: <code>Any</code>)</li> <li>get_entity(slot: <code>Any</code>)</li> <li>get_id(slot: <code>Any</code>)</li> <li>get_id_hash(slot: <code>Any</code>)</li> <li>set_entity(slot: <code>Any</code>, entity: <code>Any</code>)</li> <li>editor(editor: <code>Any</code>)</li> <li>init(world: <code>Any</code>)</li> <li>tick(delta: <code>Any</code>)</li> <li>destroy()</li> <li>detached()</li> <li>attached()</li> <li>disable(entity: <code>Any</code>, instance: <code>Any</code>)</li> <li>attach(entity: <code>Any</code>, instance: <code>Any</code>)</li> <li>detach(entity: <code>Any</code>, instance: <code>Any</code>)</li> <li>data</li> <li>id</li> <li>id=(v : Any)</li> <li>on_init(world: <code>Any</code>, data: <code>Any</code>)</li> <li>on_attached()</li> <li>on_detached()</li> <li>on_disabled(entities: <code>Any</code>, state: <code>Any</code>)</li> <li>on_destroying(entities: <code>Any</code>)</li> <li>on_destroyed(entities: <code>Any</code>)</li> <li>on_destroy()</li> <li>on_attach_block(block: <code>Any</code>, block_start: <code>Any</code>, block_end: <code>Any</code>, into: <code>Any</code>)</li> </ul> <p> ModifierSystem.priority \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.persist \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.count \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.field \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.items \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.world \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.each(fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.each(unique: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.find_entity(relative_entity: <code>Any</code>, uuid: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.create(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.destroy(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.get(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.get(entity: <code>Any</code>, inst: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.get_slot_at(index: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.get_slot(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.get_entity(slot: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.get_id(slot: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.get_id_hash(slot: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.set_entity(slot: <code>Any</code>, entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.editor(editor: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.init(world: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.tick(delta: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.destroy() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.detached() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.attached() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.disable(entity: <code>Any</code>, instance: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.attach(entity: <code>Any</code>, instance: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.detach(entity: <code>Any</code>, instance: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.data \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.id=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.on_init(world: <code>Any</code>, data: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.on_attached() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.on_detached() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.on_disabled(entities: <code>Any</code>, state: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.on_destroying(entities: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.on_destroyed(entities: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.on_destroy() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.on_attach_block(block: <code>Any</code>, block_start: <code>Any</code>, block_end: <code>Any</code>, into: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/world/#modifiers","title":"Modifiers","text":"<p><code>import \"luxe: world\" for Modifiers</code></p> <p>no docs found</p> <ul> <li>get_or_create_block(world: <code>Any</code>, module: <code>Any</code>, block_id: <code>Any</code>)</li> <li>attach_uuid(module: <code>Any</code>, entity: <code>Any</code>, uuid: <code>Any</code>)</li> <li>detach_uuid(module: <code>Any</code>, entity: <code>Any</code>, uuid: <code>Any</code>)</li> <li>has(module: <code>Any</code>, entity: <code>Any</code>)</li> <li>set_uuid(module: <code>Any</code>, entity: <code>Any</code>, uuid: <code>Any</code>)</li> <li>get_uuid(module: <code>Any</code>, entity: <code>Any</code>)</li> <li>get_attached(entity: <code>Any</code>)</li> <li>get_attached_types(entity: <code>Any</code>)</li> <li>get_entities(module: <code>Any</code>)</li> <li>get_instances(module: <code>Any</code>)</li> <li>get_module(uuid: <code>Any</code>)</li> <li>get_entity(uuid: <code>Any</code>)</li> <li>has_system_in_world(module: <code>Any</code>, world: <code>Any</code>)</li> <li>get_system_in_world(module: <code>Any</code>, world: <code>Any</code>)</li> <li>get(module: <code>Any</code>, entity: <code>Any</code>)</li> <li>get_system(module: <code>Any</code>, entity: <code>Any</code>)</li> <li>create(module: <code>Any</code>, entity: <code>Any</code>)</li> <li>destroy(module: <code>Any</code>, entity: <code>Any</code>)</li> <li>init(world: <code>Any</code>, modifier: <code>Any</code>, block: <code>Any</code>)</li> <li>get_asset_compiler(type: <code>Any</code>)</li> <li>get_compiler_for_input(modifier_id: <code>Any</code>)</li> <li>get_data_block_type(modifier_id: <code>Any</code>)</li> <li>get_input_block_type(modifier_id: <code>Any</code>)</li> </ul> <p> Modifiers.get_or_create_block(world: <code>Any</code>, module: <code>Any</code>, block_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.attach_uuid(module: <code>Any</code>, entity: <code>Any</code>, uuid: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.detach_uuid(module: <code>Any</code>, entity: <code>Any</code>, uuid: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.has(module: <code>Any</code>, entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.set_uuid(module: <code>Any</code>, entity: <code>Any</code>, uuid: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_uuid(module: <code>Any</code>, entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_attached(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_attached_types(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_entities(module: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_instances(module: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_module(uuid: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_entity(uuid: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.has_system_in_world(module: <code>Any</code>, world: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_system_in_world(module: <code>Any</code>, world: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get(module: <code>Any</code>, entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_system(module: <code>Any</code>, entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.create(module: <code>Any</code>, entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.destroy(module: <code>Any</code>, entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.init(world: <code>Any</code>, modifier: <code>Any</code>, block: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_asset_compiler(type: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_compiler_for_input(modifier_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_data_block_type(modifier_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_input_block_type(modifier_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/world/#overlap","title":"Overlap","text":"<p><code>import \"luxe: world\" for Overlap</code></p> <p>no docs found</p> <ul> <li>none</li> <li>begin</li> <li>end</li> <li>active</li> <li>name(value: <code>Any</code>)</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> Overlap.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Overlap.begin \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Overlap.end \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Overlap.active \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Overlap.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Overlap.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/world/#physics2d","title":"Physics2D","text":"<p><code>import \"luxe: world\" for Physics2D</code></p> <p>no docs found</p> <ul> <li>set_gravity(world: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>)</li> </ul> <p> Physics2D.set_gravity(world: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/world/#physics3d","title":"Physics3D","text":"<p><code>import \"luxe: world\" for Physics3D</code></p> <p>no docs found</p> <ul> <li>set_debug_draw(world: <code>Any</code>, state: <code>Any</code>)</li> <li>set_gravity(world: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>)</li> <li>cast_ray(world: <code>Any</code>, from: <code>Any</code>, to: <code>Any</code>)</li> <li>cast_shape(entity: <code>Any</code>, from: <code>Any</code>, to: <code>Any</code>, scale: <code>Any</code>)</li> <li>cast_shape(entity: <code>Any</code>, from: <code>Any</code>, to: <code>Any</code>)</li> <li>query_sphere(world: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>)</li> <li>query_box(world: <code>Any</code>, center: <code>Any</code>, size: <code>Any</code>)</li> </ul> <p> Physics3D.set_debug_draw(world: <code>Any</code>, state: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Physics3D.set_gravity(world: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Physics3D.cast_ray(world: <code>Any</code>, from: <code>Any</code>, to: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Physics3D.cast_shape(entity: <code>Any</code>, from: <code>Any</code>, to: <code>Any</code>, scale: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Physics3D.cast_shape(entity: <code>Any</code>, from: <code>Any</code>, to: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Physics3D.query_sphere(world: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Physics3D.query_box(world: <code>Any</code>, center: <code>Any</code>, size: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/world/#prototype","title":"Prototype","text":"<p><code>import \"luxe: world\" for Prototype</code></p> <p>Prototypes are collections of entities that are stored together and can be instanced together. Protoype instances can be nested in other prototypes as well as in scenes. If entities in a prototype have a transform modifier without a transform parent, the prototype root will automatically be set as their parent.</p> <p>Once a prototype is instanced in a world, all its entities behave just like other entities in the world and get assigned unique entity UUIDs. Relative prototype UUIDs, or named entities within a prototype can be accessed via the root entity of the prototype instance.</p> <ul> <li>destroy(entity: <code>Entity</code>)</li> <li>has(entity: <code>Entity</code>)</li> <li>get_type(entity: <code>Entity</code>)</li> <li>get_root(entity: <code>Entity</code>)</li> <li>get_tree(entity: <code>Entity</code>)</li> <li>has_tree(entity: <code>Entity</code>)</li> <li>get_ref(entity: <code>Entity</code>, uuid: <code>String</code>)</li> <li>get_ref_of(entity: <code>Entity</code>, target_entity: <code>Entity</code>)</li> <li>get_named(entity: <code>Entity</code>, name: <code>String</code>)</li> <li>get_named_all(entity: <code>Entity</code>, name: <code>String</code>)</li> <li>entity_list(entity: <code>Entity</code>)</li> <li>refs_list(entity: <code>Entity</code>)</li> <li>create(world: <code>World</code>, prototype_id: <code>String</code>, instance_id: <code>String</code>)</li> <li>create(world: <code>World</code>, prototype_id: <code>String</code>, instance_id: <code>String</code>, position: <code>Vec</code>)</li> <li>create(world: <code>World</code>, prototype_id: <code>String</code>, instance_id: <code>String</code>, position: <code>Vec</code>, rotation: <code>Vec</code>)</li> <li>create(world: <code>World</code>, prototype_id: <code>String</code>, instance_id: <code>String</code>, position: <code>Vec</code>, rotation: <code>Vec</code>, scale: <code>Vec</code>)</li> </ul> <p> Prototype.destroy(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Destroys the prototype instance. (called on the root entity and will also destroy member entities that were instanced with it)   </p> <p> Prototype.has(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether a entity has a prototype modifier (is a prototype instance root).   </p> <p> Prototype.get_type(entity: <code>Entity</code>) \u00b6 returns <code>ID</code></p> <p>Get the prototype id the prototype instance was spawned from.   </p> <p> Prototype.get_root(entity: <code>Entity</code>) \u00b6 returns <code>Entity</code></p> <p>Get the \\\"innermost\\\" prototype root if entity is part of a prototype instance. Returns the entity itself if it is a prototype root. Returns null if entity is not part of a prototype instance.   </p> <p> Prototype.get_tree(entity: <code>Entity</code>) \u00b6 returns <code>List</code></p> <p>Get the list of prototype instances this entity is a part of. (List will have 1 elements for unnested prototypes and goes from innermost to outermost instance root for nested prototypes.). Null if entity is not part of prototype instance.   </p> <p> Prototype.has_tree(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether the entity is part of a prototype instance.   </p> <p> Prototype.get_ref(entity: <code>Entity</code>, uuid: <code>String</code>) \u00b6 returns <code>Entity</code></p> <p>Get an entity by its reference (prototype-relative UUID) from its prototype root. (the same prototype asset may be instanced multiple times, so it may be important to find a specific prototype root and ask it for its version of the entity)   </p> <p> Prototype.get_ref_of(entity: <code>Entity</code>, target_entity: <code>Entity</code>) \u00b6 returns <code>String</code></p> <p>Get the reference (prototype-relative UUID) of an entity within a prototype instance. One Entity can be part of multiple nested prototypes and have different references in each context.   </p> <p> Prototype.get_named(entity: <code>Entity</code>, name: <code>String</code>) \u00b6 returns <code>Entity</code></p> <p>Get first entity in a prototype instance with a specific name.   </p> <p> Prototype.get_named_all(entity: <code>Entity</code>, name: <code>String</code>) \u00b6 returns <code>Entity</code></p> <p>Get all entities in a prototype instance with a specific name.   </p> <p> Prototype.entity_list(entity: <code>Entity</code>) \u00b6 returns <code>List</code></p> <p>Get a list of all entities that are part of a prototype instance.   </p> <p> Prototype.refs_list(entity: <code>Entity</code>) \u00b6 returns <code>List</code></p> <p>Get a list of all references (prototype-relative UUIDs) to entities within one prototype instance.   </p> <p> Prototype.create(world: <code>World</code>, prototype_id: <code>String</code>, instance_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Prototype.create(world: <code>World</code>, prototype_id: <code>String</code>, instance_id: <code>String</code>, position: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Prototype.create(world: <code>World</code>, prototype_id: <code>String</code>, instance_id: <code>String</code>, position: <code>Vec</code>, rotation: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Prototype.create(world: <code>World</code>, prototype_id: <code>String</code>, instance_id: <code>String</code>, position: <code>Vec</code>, rotation: <code>Vec</code>, scale: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Instantiate a new prototype into a world with a new name(instance id), position, rotation and scale. You may pass <code>null</code> into position rotation and scale (or call one of the functions that omit those arguments), to give them default values (0,0,0 for position/rotation, 1,1,1 for scale). This function returns the root entity of the newly created prototype instance.   </p>"},{"location":"api/v/2024.12.3/world/#scene","title":"Scene","text":"<p><code>import \"luxe: world\" for Scene</code></p> <p>Scenes are collections of entities that are stored together and can be instanced together. If entities in a scene have a transform modifier without a transform parent, the scene root will automatically be set as their parent.</p> <p>Once a scene is instanced in a world, all its entities behave just like other entities in the world and get assigned unique entity UUIDs. Relative scene UUIDs, or named entities within a scene can be accessed via the root entity of the scene instance.</p> <p>Scenes are mostly referred to by their scene ID. By default for new scenes, this is their asset id, but it can be changed to allow loading multiple scenes from the same asset and have them exist in the same world.</p> <ul> <li>create(world: <code>World</code>, id: <code>String</code>)</li> <li>destroy(world: <code>World</code>, id: <code>String</code>)</li> <li>get_list(world: <code>World</code>)</li> <li>exists(world: <code>World</code>, id: <code>String</code>)</li> <li>entity_list(world: <code>World</code>, id: <code>String</code>)</li> <li>entity_forget(world: <code>World</code>, id: <code>String</code>, entity: <code>Entity</code>)</li> <li>set_id(world: <code>World</code>, id: <code>String</code>, new_id: <code>String</code>)</li> </ul> <p> Scene.create(world: <code>World</code>, id: <code>String</code>) \u00b6 returns <code>Entity</code></p> <p>Instantiate a new scene into a world. This function returns the root entity of the newly created scene instance.   </p> <p> Scene.destroy(world: <code>World</code>, id: <code>String</code>) \u00b6 returns <code>Entity</code></p> <p>Destroy a scene by its id.</p> <pre><code>  Scene.create(app.world, \"scenes/main\")\n  Scene.destroy(app.world, \"scenes/main\")\n</code></pre> <p> Scene.get_list(world: <code>World</code>) \u00b6 returns <code>List</code></p> <p>Get a list of scenes in a world. The list contains the IDs of the scenes (as string IDs).   </p> <p> Scene.exists(world: <code>World</code>, id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Check if a scene is currently instanced in a world.   </p> <p> Scene.entity_list(world: <code>World</code>, id: <code>String</code>) \u00b6 returns <code>List</code></p> <p>Get all entities that are part of an instanced scene.   </p> <p> Scene.entity_forget(world: <code>World</code>, id: <code>String</code>, entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Stop associating an entity with a loaded scene.   </p> <p> Scene.set_id(world: <code>World</code>, id: <code>String</code>, new_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Change the ID of a scene instance. </p> <p>By default this ID is the asset id, but with this function it can be changed and the original scene loaded again without causting conflicts.   </p>"},{"location":"api/v/2024.12.3/world/#ui","title":"UI","text":"<p><code>import \"luxe: world\" for UI</code></p> <p>A <code>UI</code> modifier holds controls which define a 2d user interface with images, buttons, sliders, etc...</p> <pre><code>  //create ui modifier in ui world\n  var ui = Entity.create(app.ui)\n  UI.create(ui, 0, 0, world.width, world.height, 0, app.ui_camera)\n\n  //add controls\n  var control = Control.create(ui)\n  //more control stuff\n\n  //then rebuild the UI\n  UI.commit(ui)\n</code></pre> <ul> <li>create(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, z: <code>Num</code>, camera: <code>Entity</code>)</li> <li>destroy(entity: <code>Entity</code>)</li> <li>has(entity: <code>Entity</code>)</li> <li>commit(entity: <code>Entity</code>)</li> <li>commit_now(entity: <code>Entity</code>)</li> <li>event_cancel(entity: <code>Entity</code>, event_id: <code>ID</code>)</li> <li>event_cancelled(entity: <code>Entity</code>, event_id: <code>ID</code>)</li> <li>set_camera(entity: <code>Entity</code>, camera: <code>Entity</code>)</li> <li>set_render_mode(entity: <code>Entity</code>, mode: <code>UIRenderMode</code>)</li> <li>set_material_basis(entity: <code>Entity</code>, solid: <code>String</code>, text: <code>String</code>)</li> <li>set_bounds(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, z: <code>Num</code>)</li> <li>get_pos(entity: <code>Entity</code>)</li> <li>get_opacity(entity: <code>Entity</code>)</li> <li>set_opacity(entity: <code>Entity</code>, opacity: <code>Num</code>)</li> <li>get_size(entity: <code>Entity</code>)</li> <li>get_debug_control(entity: <code>Entity</code>)</li> <li>get_debug_draw_depth(entity: <code>Entity</code>)</li> <li>get_input_node(entity: <code>Entity</code>)</li> <li>set_input_node(entity: <code>Entity</code>, input_node_id: <code>String</code>)</li> <li>set_layout_mode(entity: <code>Entity</code>, mode: <code>UILayoutMode</code>)</li> <li>set_debug_mode(entity: <code>Entity</code>, mode: <code>UIDebugMode</code>)</li> <li>any_marked()</li> <li>any_focused()</li> <li>get_focused(entity: <code>Entity</code>)</li> <li>get_captured(entity: <code>Entity</code>)</li> <li>get_marked(entity: <code>Entity</code>)</li> <li>get_control_count(entity: <code>Entity</code>)</li> <li>get_control(entity: <code>Entity</code>, index: <code>Num</code>)</li> <li>focus_invalidate(entity: <code>Entity</code>)</li> <li>focus(control: <code>Control</code>)</li> <li>unfocus(control: <code>Control</code>)</li> <li>mark(control: <code>Control</code>)</li> <li>unmark(control: <code>Control</code>)</li> <li>capture(control: <code>Control</code>)</li> <li>uncapture(control: <code>Control</code>)</li> <li>bring_to_front(control: <code>Control</code>)</li> <li>control_at_point(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>mouse_to_canvas(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>dump(ui: <code>Entity</code>)</li> <li>spawn(asset_id: <code>String</code>, parent: <code>Control</code>, instance_id: <code>String</code>)</li> <li>make(ui: <code>Entity</code>, asset: <code>String</code>, instance_id: <code>String</code>)</li> <li>draw_depth_of(control: <code>Control</code>, index: <code>Num</code>)</li> <li>draw_text(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, string: <code>String</code>, size: <code>Num</code>, font: <code>String</code>, color: <code>Color</code>, align: <code>TextAlign</code>, align_vertical: <code>TextAlign</code>)</li> <li>draw_text(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, string: <code>String</code>, size: <code>Num</code>, font: <code>String</code>, color: <code>Color</code>, align: <code>TextAlign</code>, align_vertical: <code>TextAlign</code>)</li> <li>draw_image(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, angle: <code>Num</code>, color: <code>Color</code>, uv: <code>Vec</code>, image: <code>Image</code>, flags: <code>UIImageFlags</code>)</li> <li>draw_image(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, angle: <code>Num</code>, color: <code>Color</code>, uv: <code>Vec</code>, image: <code>Image</code>)</li> <li>draw_quad(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, angle: <code>Num</code>, color: <code>Color</code>)</li> <li>draw_circle(control: <code>Control</code>, ox: <code>Num</code>, oy: <code>Num</code>, oz: <code>Num</code>, rx: <code>Num</code>, ry: <code>Num</code>, start_angle: <code>Num</code>, end_angle: <code>Num</code>, smoothness: <code>Num</code>, color: <code>Color</code>)</li> <li>draw_line(control: <code>Control</code>, x1: <code>Num</code>, y1: <code>Num</code>, x2: <code>Num</code>, y2: <code>Num</code>, z: <code>Num</code>, style: <code>PathStyle</code>)</li> <li>draw_rect(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, angle: <code>Num</code>, style: <code>PathStyle</code>)</li> <li>draw_rect_detailed(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, angle: <code>Num</code>, radius: <code>Num</code>, smoothness: <code>Num</code>, style: <code>PathStyle</code>)</li> <li>draw_quad_detailed(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, angle: <code>Num</code>, radius: <code>Num</code>, smoothness: <code>Num</code>, color: <code>Color</code>)</li> <li>draw_ring(control: <code>Control</code>, ox: <code>Num</code>, oy: <code>Num</code>, oz: <code>Num</code>, rx: <code>Num</code>, ry: <code>Num</code>, start_angle: <code>Num</code>, end_angle: <code>Num</code>, smoothness: <code>Num</code>, style: <code>PathStyle</code>)</li> <li>draw_path(control: <code>Control</code>, points: <code>List</code>, style: <code>PathStyle</code>, closed: <code>Bool</code>)</li> <li>events_emit(control: <code>Control</code>, type: <code>UIEvent</code>)</li> <li>events_emit(control: <code>Control</code>, type: <code>UIEvent</code>, data: <code>Any</code>)</li> <li>events_emit(control: <code>Control</code>, type: <code>UIEvent</code>, data: <code>Any</code>, data_before: <code>Any</code>)</li> </ul> <p> UI.create(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, z: <code>Num</code>, camera: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Create a UI modifier on an Entity. The <code>x</code> <code>y</code> <code>z</code> arguments are the position relative to the world origin, or relative to the <code>Transform</code> on the same entity if one exists. <code>w</code> and <code>h</code> are the width and the height of the canvas, this is both used for the mask texture (and in <code>UIRenderMode.image</code> the ui rendertarget) as well as the (unscaled) size of the UI in worldspace. <code>camera</code> describes a camera that is used to resolve input, most of the time this is the camera rendering the world the UI is in, but it doesnt have to be.   </p> <p> UI.destroy(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Remove a <code>UI</code> modifier from an entity. This also destroys all controls on that <code>UI</code>.   </p> <p> UI.has(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether an Entity has an <code>UI</code> modifier attached.   </p> <p> UI.commit(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Request all changes to the UI are committed before rendering happens   </p> <p> UI.commit_now(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Commit all changes to the UI immediately   </p> <p> UI.event_cancel(entity: <code>Entity</code>, event_id: <code>ID</code>) \u00b6 returns <code>None</code></p> <p>Cancel an event.   </p> <p> UI.event_cancelled(entity: <code>Entity</code>, event_id: <code>ID</code>) \u00b6 returns <code>Bool</code></p> <p>Check whether an event was cancelled before.   </p> <p> UI.set_camera(entity: <code>Entity</code>, camera: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Set the camera used for input calculations. Most of the time this is the camera rendering the world the UI is in, but it doesnt have to be.   </p> <p> UI.set_render_mode(entity: <code>Entity</code>, mode: <code>UIRenderMode</code>) \u00b6 returns <code>None</code></p> <p>Set the render mode of the UI canvas.</p> <p><code>UIRenderMode.world</code> renders the controls directly into the world, while <code>UIRenderMode.image</code> first renders them to an intermediate texture and then renders that.</p> <p><code>UIRenderMode.image</code> is the default as it can avoid artifacts and works in more circumstances, though <code>UIRenderMode.world</code> can lead to more sharp results and slightly better performance.   </p> <p> UI.set_material_basis(entity: <code>Entity</code>, solid: <code>String</code>, text: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Set the material basis the controls (excluding <code>UIImage</code>) is drawn with. By default \"luxe: material_basis/ui_solid\" is the basis for solid controls and \"luxe: material_basis/ui_font\" the basis for text.   </p> <p> UI.set_bounds(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set size and position of an <code>UI</code> modifier. The <code>x</code> <code>y</code> <code>z</code> arguments are the position relative to the world origin, or relative to the <code>Transform</code> on the same entity if one exists. <code>w</code> and <code>h</code> are the width and the height of the canvas, this is both used for the mask texture (and in <code>UIRenderMode.image</code> the ui rendertarget) as well as the (unscaled) size of the UI in worldspace.   </p> <p> UI.get_pos(entity: <code>Entity</code>) \u00b6 returns <code>Vec</code></p> <p>Get position of an <code>UI</code> modifier.   </p> <p> UI.get_opacity(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>Get overall UI opacity   </p> <p> UI.set_opacity(entity: <code>Entity</code>, opacity: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Set overall UI opacity   </p> <p> UI.get_size(entity: <code>Entity</code>) \u00b6 returns <code>Vec</code></p> <p>Get size of an <code>UI</code> modifier.   </p> <p> UI.get_debug_control(entity: <code>Entity</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p> <p> UI.get_debug_draw_depth(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> UI.get_input_node(entity: <code>Entity</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> UI.set_input_node(entity: <code>Entity</code>, input_node_id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.set_layout_mode(entity: <code>Entity</code>, mode: <code>UILayoutMode</code>) \u00b6 returns <code>None</code></p> <p>Set the layout mode of the UI.</p> <p>By default this is <code>UILayoutMode.none</code>, which will do no extra layouting and ignore <code>Control</code> margin, behave and contain.</p> <p><code>UILayoutMode.flex</code> is the default layout implementation which will follow the <code>Control</code> margin, behave and contain settings.</p> <pre><code>  UI.set_layout_mode(ui, UILayoutMode.flex)\n\n  var root = Control.create(ui)\n    Control.set_size(root, 300, 0)\n    Control.set_behave(root, UIBehave.left | UIBehave.top)\n    Control.set_margin(root, 100, 100, 0, 0)\n    Control.set_contain(root, UIContain.column | UIContain.start | UIContain.vfit)\n\n  var text_input = UIText.create(ui)\n    Control.set_behave(text_input, UIBehave.left | UIBehave.top | UIBehave.hfill)\n  Control.child_add(root, text_input)\n\n  var image = UIImage.create(ui)\n    UIImage.set_image(image, Assets.image(\"luxe: image/logo.sprite\"))\n    Control.set_size(image, 300, 300)\n    Control.set_behave(image, UIBehave.left | UIBehave.top | UIBehave.hfill)\n  Control.child_add(root, image)\n</code></pre> <p> UI.set_debug_mode(entity: <code>Entity</code>, mode: <code>UIDebugMode</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.any_marked() \u00b6 returns <code>Bool</code></p> <p>Returns true if any UI has a marked control (any control with input under the mouse)   </p> <p> UI.any_focused() \u00b6 returns <code>Bool</code></p> <p>Returns true if any UI has a focused control   </p> <p> UI.get_focused(entity: <code>Entity</code>) \u00b6 returns <code>Control</code></p> <p>Get currently focussed control. A control being focused means its been clicked on or otherwise focused and will recieve context inputs like keyboard presses on a text input field.   </p> <p> UI.get_captured(entity: <code>Entity</code>) \u00b6 returns <code>Control</code></p> <p>Get captured control, <code>null</code> if none is captured. A control being captured means all inputs will only be sent to this control until it is uncaptured again.   </p> <p> UI.get_marked(entity: <code>Entity</code>) \u00b6 returns <code>Control</code></p> <p>Get marked control, <code>null</code> if none is marked. A control being marked means it is hovered over and can be focused.   </p> <p> UI.get_control_count(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>Get amount of controls in a <code>UI</code>.   </p> <p> UI.get_control(entity: <code>Entity</code>, index: <code>Num</code>) \u00b6 returns <code>Control</code></p> <p>Get a control in a <code>UI</code> by its index. Useful for iterating over all controls.   </p> <p> UI.focus_invalidate(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Unfocus whatever is focussed in a specific <code>UI</code>.   </p> <p> UI.focus(control: <code>Control</code>) \u00b6 returns <code>None</code></p> <p>Focus a control. Will unfocus any previously focused controls on the <code>UI</code>. A control being focused means its been clicked on or otherwise focused and will recieve context inputs like keyboard presses on a text input field.   </p> <p> UI.unfocus(control: <code>Control</code>) \u00b6 returns <code>None</code></p> <p>Unfocus a specific control. If the control is not the focused control in the UI, this does nothing.   </p> <p> UI.mark(control: <code>Control</code>) \u00b6 returns <code>None</code></p> <p>Mark a control. Will unfocus any previously marked controls on the <code>UI</code>. A control being marked means it is hovered over and can be focused.   </p> <p> UI.unmark(control: <code>Control</code>) \u00b6 returns <code>None</code></p> <p>Unmark a specific control. If the control is not the marked control in the UI, this does nothing.   </p> <p> UI.capture(control: <code>Control</code>) \u00b6 returns <code>None</code></p> <p>Capture a control. Until uncaptured all inputs will only go to this control.   </p> <p> UI.uncapture(control: <code>Control</code>) \u00b6 returns <code>None</code></p> <p>Uncapture a control and have inputs be distributed regularly.   </p> <p> UI.bring_to_front(control: <code>Control</code>) \u00b6 returns <code>None</code></p> <p>Bring the control to the front in its current context (globally in the <code>UI</code> or within its parent if its a child)   </p> <p> UI.control_at_point(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>Control</code></p> <p>Get the highest control at a position.   </p> <p> UI.mouse_to_canvas(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>Float2</code></p> <p>Translate from mouse position on screen to canvas coordinates. Uses the set canvas camera.   </p> <p> UI.dump(ui: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Write a bunch of information about the <code>UI</code> and its controls into the console.   </p> <p> UI.spawn(asset_id: <code>String</code>, parent: <code>Control</code>, instance_id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Spawn controls from a ui asset. Puts newly spawned controls into a parent control.   </p> <p> UI.make(ui: <code>Entity</code>, asset: <code>String</code>, instance_id: <code>String</code>) \u00b6 returns <code>Control</code></p> <p>Spawn controls from a ui asset. Creates new root for newly spawned controls and returns that root control.   </p> <p> UI.draw_depth_of(control: <code>Control</code>, index: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.draw_text(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, string: <code>String</code>, size: <code>Num</code>, font: <code>String</code>, color: <code>Color</code>, align: <code>TextAlign</code>, align_vertical: <code>TextAlign</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.draw_text(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, string: <code>String</code>, size: <code>Num</code>, font: <code>String</code>, color: <code>Color</code>, align: <code>TextAlign</code>, align_vertical: <code>TextAlign</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.draw_image(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, angle: <code>Num</code>, color: <code>Color</code>, uv: <code>Vec</code>, image: <code>Image</code>, flags: <code>UIImageFlags</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.draw_image(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, angle: <code>Num</code>, color: <code>Color</code>, uv: <code>Vec</code>, image: <code>Image</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.draw_quad(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, angle: <code>Num</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.draw_circle(control: <code>Control</code>, ox: <code>Num</code>, oy: <code>Num</code>, oz: <code>Num</code>, rx: <code>Num</code>, ry: <code>Num</code>, start_angle: <code>Num</code>, end_angle: <code>Num</code>, smoothness: <code>Num</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.draw_line(control: <code>Control</code>, x1: <code>Num</code>, y1: <code>Num</code>, x2: <code>Num</code>, y2: <code>Num</code>, z: <code>Num</code>, style: <code>PathStyle</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.draw_rect(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, angle: <code>Num</code>, style: <code>PathStyle</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.draw_rect_detailed(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, angle: <code>Num</code>, radius: <code>Num</code>, smoothness: <code>Num</code>, style: <code>PathStyle</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.draw_quad_detailed(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, angle: <code>Num</code>, radius: <code>Num</code>, smoothness: <code>Num</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.draw_ring(control: <code>Control</code>, ox: <code>Num</code>, oy: <code>Num</code>, oz: <code>Num</code>, rx: <code>Num</code>, ry: <code>Num</code>, start_angle: <code>Num</code>, end_angle: <code>Num</code>, smoothness: <code>Num</code>, style: <code>PathStyle</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.draw_path(control: <code>Control</code>, points: <code>List</code>, style: <code>PathStyle</code>, closed: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.events_emit(control: <code>Control</code>, type: <code>UIEvent</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.events_emit(control: <code>Control</code>, type: <code>UIEvent</code>, data: <code>Any</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.events_emit(control: <code>Control</code>, type: <code>UIEvent</code>, data: <code>Any</code>, data_before: <code>Any</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/world/#uibehave","title":"UIBehave","text":"<p><code>import \"luxe: world\" for UIBehave</code></p> <p>no docs found</p> <ul> <li>left</li> <li>top</li> <li>right</li> <li>bottom</li> <li>hfill</li> <li>vfill</li> <li>hcenter</li> <li>vcenter</li> <li>center</li> <li>fill</li> <li>break_line</li> </ul> <p> UIBehave.left \u00b6 returns <code>unknown</code></p> <p>Item anchors to the item to its left or left side of parent   </p> <p> UIBehave.top \u00b6 returns <code>unknown</code></p> <p>Item anchors to the item above it or top side of parent   </p> <p> UIBehave.right \u00b6 returns <code>unknown</code></p> <p>Item anchors to the item to its right or right side of parent   </p> <p> UIBehave.bottom \u00b6 returns <code>unknown</code></p> <p>Item anchors to the item below it or bottom side of parent   </p> <p> UIBehave.hfill \u00b6 returns <code>unknown</code></p> <p>Item anchors to both left and right item or parent borders   </p> <p> UIBehave.vfill \u00b6 returns <code>unknown</code></p> <p>Item anchors to both top and bottom item or parent borders   </p> <p> UIBehave.hcenter \u00b6 returns <code>unknown</code></p> <p>Center item horizontally, with left margin as offset   </p> <p> UIBehave.vcenter \u00b6 returns <code>unknown</code></p> <p>Center item vertically, with top margin as offset   </p> <p> UIBehave.center \u00b6 returns <code>unknown</code></p> <p>Center item in both directions, with left/top margin as offset   </p> <p> UIBehave.fill \u00b6 returns <code>unknown</code></p> <p>Anchor item to all four directions   </p> <p> UIBehave.break_line \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/world/#uiclear","title":"UIClear","text":"<p><code>import \"luxe: world\" for UIClear</code></p> <p>no docs found</p> <ul> <li>destroy</li> <li>remove</li> <li>set_invisible</li> <li>remove_set_invisible</li> </ul> <p> UIClear.destroy \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIClear.remove \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIClear.set_invisible \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIClear.remove_set_invisible \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/world/#uicontain","title":"UIContain","text":"<p><code>import \"luxe: world\" for UIContain</code></p> <p>no docs found</p> <ul> <li>row</li> <li>column</li> <li>layout</li> <li>flex</li> <li>nowrap</li> <li>wrap</li> <li>start</li> <li>middle</li> <li>end</li> <li>justify</li> <li>vfit</li> <li>hfit</li> </ul> <p> UIContain.row \u00b6 returns <code>unknown</code></p> <p>Items go from left to right   </p> <p> UIContain.column \u00b6 returns <code>unknown</code></p> <p>Items go from top to bottom   </p> <p> UIContain.layout \u00b6 returns <code>unknown</code></p> <p>Use Free Layout model   </p> <p> UIContain.flex \u00b6 returns <code>unknown</code></p> <p>Use Flex Layout model   </p> <p> UIContain.nowrap \u00b6 returns <code>unknown</code></p> <p>Stays on a single line   </p> <p> UIContain.wrap \u00b6 returns <code>unknown</code></p> <p>Wraps to multiple lines, wrapping left to right   </p> <p> UIContain.start \u00b6 returns <code>unknown</code></p> <p>Items begin at start of row/column   </p> <p> UIContain.middle \u00b6 returns <code>unknown</code></p> <p>Items begin at middle of row/column   </p> <p> UIContain.end \u00b6 returns <code>unknown</code></p> <p>Items begin at end of row/column   </p> <p> UIContain.justify \u00b6 returns <code>unknown</code></p> <p>Insert spacing between items to stretch elements across whole row/column   </p> <p> UIContain.vfit \u00b6 returns <code>unknown</code></p> <p>Items stretch height to fill vertical space   </p> <p> UIContain.hfit \u00b6 returns <code>unknown</code></p> <p>Items stretch width to fill horizontal space   </p>"},{"location":"api/v/2024.12.3/world/#uidebugmode","title":"UIDebugMode","text":"<p><code>import \"luxe: world\" for UIDebugMode</code></p> <p>no docs found</p> <ul> <li>none</li> <li>basic</li> </ul> <p> UIDebugMode.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIDebugMode.basic \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/world/#uidrop","title":"UIDrop","text":"<p><code>import \"luxe: world\" for UIDrop</code></p> <p>no docs found</p> <ul> <li>start</li> <li>end</li> <li>move</li> <li>drop</li> </ul> <p> UIDrop.start \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIDrop.end \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIDrop.move \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIDrop.drop \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/world/#uievent","title":"UIEvent","text":"<p><code>import \"luxe: world\" for UIEvent</code></p> <p>The built in UI events that all controls can potentially use.</p> <ul> <li>name(value: <code>Any</code>)</li> <li>unknown</li> <li>enter</li> <li>exit</li> <li>press</li> <li>release</li> <li>scroll</li> <li>move</li> <li>key</li> <li>text</li> <li>focus</li> <li>unfocus</li> <li>capture</li> <li>uncapture</li> <li>commit</li> <li>destroy</li> <li>language</li> <li>change</li> <li>bounds</li> <li>drag</li> </ul> <p> UIEvent.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Converts a UIEvent value to a readable name.</p> <pre><code>Log.print(UIEvent.name(UIEvent.move)) //prints \"move\"\n</code></pre> <p> UIEvent.unknown \u00b6 returns <code>unknown</code></p> <p>An event of unknown type, invalid. This is the default value.   </p> <p> UIEvent.enter \u00b6 returns <code>unknown</code></p> <p>An input cursor has entered this control. (e.g on mouse enter). Sends no additional data in the event.</p> <pre><code>if(event.type == UIEvent.enter) {\n  Log.print(\"entered control!\")\n}\n</code></pre> <p> UIEvent.exit \u00b6 returns <code>unknown</code></p> <p>An input cursor has left this control. (e.g on mouse exit) Sends no additional data in the event.</p> <pre><code>if(event.type == UIEvent.exit) {\n  Log.print(\"exited control!\")\n}\n</code></pre> <p> UIEvent.press \u00b6 returns <code>unknown</code></p> <p>An input press event (e.g mouse button was pressed down). a.k.a \"down\" Sends <code>event.x</code>, <code>event.y</code> and <code>event.button</code>.</p> <pre><code>if(event.type == UIEvent.press) {\n  var button = MouseButton.name(event.button)\n  Log.print(\"pressed down on control at `%(event.x)`,`%(event.y)`\")\n  Log.print(\"  button was `%(button)`\")\n}\n</code></pre> <p> UIEvent.release \u00b6 returns <code>unknown</code></p> <p>An input release event (e.g mouse button was released). a.k.a \"up\" Sends <code>event.x</code>, <code>event.y</code> and <code>event.button</code>.</p> <pre><code>if(event.type == UIEvent.press) {\n  var button = MouseButton.name(event.button)\n  Log.print(\"released input on control at `%(event.x)`,`%(event.y)`\")\n  Log.print(\"  button was `%(button)`\")\n}\n</code></pre> <p> UIEvent.scroll \u00b6 returns <code>unknown</code></p> <p>A scroll event (e.g mouse wheel). Sends <code>event.x</code>, <code>event.y</code> where <code>x</code> is the horizontal scroll amount,  and <code>y</code> is the vertical scroll amount.</p> <pre><code>if(event.type == UIEvent.scroll) {\n  Log.print(\"scroll amount `%(event.x)`,`%(event.y)`\")\n}\n</code></pre> <p> UIEvent.move \u00b6 returns <code>unknown</code></p> <p>An input move event (e.g mouse movement). Sends <code>event.x</code>, <code>event.y</code> as the position of the input.</p> <pre><code>if(event.type == UIEvent.press) {\n  Log.print(\"move on control at `%(event.x)`,`%(event.y)`\")\n}\n</code></pre> <p> UIEvent.key \u00b6 returns <code>unknown</code></p> <p>A key input event. Sends a few useful values:</p> <ul> <li><code>event.key</code> - a Key value</li> <li><code>event.scan</code> - a Scan value</li> <li><code>event.mod</code> - a ModState value</li> <li><code>event.down</code> - a <code>Bool</code> value, whether the key is down or not</li> <li><code>event.repeat</code> - a <code>Bool</code> value, whether the event is from a key repeat</li> </ul> <pre><code>if(event.type == UIEvent.key) {\n  var down = event.down ? \"pressed\" : \"released\"\n  Log.print(\"key %(down), key was `%(Key.name(event.key))`\")\n  Log.print(\"  scan `%(Scan.name(event.scan))`, repeat? %(event.repeat)\")\n  if(event.mod.lshift || event.mod.rshift) {\n    Log.print(\"shift was also held down!\")\n  }\n}\n</code></pre> <p> UIEvent.text \u00b6 returns <code>unknown</code></p> <p>A control has sent a text event, which originates from typing.</p> <p>These events allow handling complex input that comes from the OS level IME input dialogs. On the simplest level, displaying <code>event.text</code> is enough to get started. </p> <p>Sends the following:</p> <ul> <li><code>event.text</code> - the latest text displayed</li> <li><code>event.text_start</code> - the start of the modified text</li> <li><code>event.text_length</code> - the length of the modified text</li> <li><code>event.text_type</code> - a TextEvent type (<code>edit</code> or <code>input</code>)</li> </ul> <p>The easiest way to understand might be to see. This video shows this at work.</p> <p>As a user is typing, there may be candidates avaiable to select from,  when this is true, these are sent as <code>TextInput.edit</code> events, with a start and end. When a candidate is selected (or no choices), a <code>TextEvent.input</code> is sent with the <code>text</code>.   </p> <p> UIEvent.focus \u00b6 returns <code>unknown</code></p> <p>A control has gained focus. Sends no additional data in the event.</p> <pre><code>if(event.type == UIEvent.focus) {\n  Log.print(\"gained focus!\")\n}\n</code></pre> <p> UIEvent.unfocus \u00b6 returns <code>unknown</code></p> <p>A control has lost focus. Sends no additional data in the event.</p> <pre><code>if(event.type == UIEvent.unfocus) {\n  Log.print(\"lost focus!\")\n}\n</code></pre> <p> UIEvent.capture \u00b6 returns <code>unknown</code></p> <p>A control has been captured.</p> <pre><code>if(event.type == UIEvent.capture) {\n  Log.print(\"gained input capture!\")\n}\n</code></pre> <p> UIEvent.uncapture \u00b6 returns <code>unknown</code></p> <p>A control has lost capture status.</p> <pre><code>if(event.type == UIEvent.uncapture) {\n  Log.print(\"lost input capture!\")\n}\n</code></pre> <p> UIEvent.commit \u00b6 returns <code>unknown</code></p> <p>When a control has changeable state (like an editable text control), it will send a <code>commit</code> event when the contents are being applied/committed. For example, if you are typing text and hit enter, or unfocus the control.</p> <pre><code>if(event.type == UIEvent.uncapture) {\n  Log.print(\"lost input capture!\")\n}\n</code></pre> <p> UIEvent.destroy \u00b6 returns <code>unknown</code></p> <p>When a control is destroyed you'll get notified here. Keep in mind that it's destroyed.</p> <pre><code>if(event.type == UIEvent.destroy) {\n  Log.print(\"destroyed!\")\n}\n</code></pre> <p> UIEvent.language \u00b6 returns <code>unknown</code></p> <p>When the UI lanuage changes, your control will receive this event.</p> <pre><code>if(event.type == UIEvent.language) {\n  Log.print(\"language changed.. I should update my size..\")\n}\n</code></pre> <p> UIEvent.change \u00b6 returns <code>unknown</code></p> <p>Change events are context specific, but notify you of a change in state. For example, UIWindow sends a change event with UIWindowChange to notify when a window was closed, collapsed or uncollapsed. A UIText sends a change event when the text has been changed, via typing or otherwise.</p> <p>In each case, <code>event.change</code> contains the relevant data.</p> <pre><code>//UIText example\nif(event.type == UIEvent.change) {\n  Log.print(\"text changed `%(event.change)`!\")\n}\n</code></pre> <p> UIEvent.bounds \u00b6 returns <code>unknown</code></p> <p>A control has changed bounds (note: this may not be working as intended right now). Sends <code>event.dx</code>, <code>event.dy</code> and <code>event.dw</code>, <code>event.dh</code> where <code>d</code> means <code>delta</code>. i.e the change in bounds as a difference between now and before.</p> <pre><code>if(event.type == UIEvent.bounds) {\n  if(event.dx != 0) Log.print(\"moved on x by %(event.dx) amount!\")\n  if(event.dy != 0) Log.print(\"moved on y by %(event.dy) amount!\")\n  if(event.dw != 0) Log.print(\"width changed by %(event.dw) amount!\")\n  if(event.dh != 0) Log.print(\"height changed by %(event.dh) amount!\")\n}\n</code></pre> <p> UIEvent.drag \u00b6 returns <code>unknown</code></p> <p>When a control is dragged or dropped on the UI canvas. The data field contains the kind of event, e.g UIDrag.start or UIDrag.end. The x/y is the start, and end_x/end_y is the end (for a start they're the same)</p> <pre><code>if(event.type == UIEvent.drag) {\n  Log.print(\"control drag changed.. %(event.data)\")\n}\n</code></pre>"},{"location":"api/v/2024.12.3/world/#uiimageflags","title":"UIImageFlags","text":"<p><code>import \"luxe: world\" for UIImageFlags</code></p> <p>no docs found</p> <ul> <li>none</li> <li>pixelated</li> <li>use_mips</li> </ul> <p> UIImageFlags.none \u00b6 returns <code>unknown</code></p> <p>uses linear interpolation samplers, interpolating smoothly between pixels.   </p> <p> UIImageFlags.pixelated \u00b6 returns <code>unknown</code></p> <p>uses nearest neighbor samplers, leading to an interpolated look.   </p> <p> UIImageFlags.use_mips \u00b6 returns <code>unknown</code></p> <p>uses trilinear interpolation samplers, interpolating smoothly between pixels and mip levels.   </p>"},{"location":"api/v/2024.12.3/world/#uilayoutmode","title":"UILayoutMode","text":"<p><code>import \"luxe: world\" for UILayoutMode</code></p> <p>no docs found</p> <ul> <li>none</li> <li>flex</li> </ul> <p> UILayoutMode.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILayoutMode.flex \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/world/#uirendermode","title":"UIRenderMode","text":"<p><code>import \"luxe: world\" for UIRenderMode</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>image</li> <li>world</li> </ul> <p> UIRenderMode.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIRenderMode.image \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIRenderMode.world \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/world/#worldeventtype","title":"WorldEventType","text":"<p><code>import \"luxe: world\" for WorldEventType</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>create</li> <li>destroy</li> <li>tick</li> <li>modifier_tick</li> <li>name(value: <code>WorldEventType</code>)</li> </ul> <p> WorldEventType.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WorldEventType.create \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WorldEventType.destroy \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WorldEventType.tick \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WorldEventType.modifier_tick \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WorldEventType.name(value: <code>WorldEventType</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/world/#worldrenderdesc","title":"WorldRenderDesc","text":"<p><code>import \"luxe: world\" for WorldRenderDesc</code></p> <p>no docs found</p> <ul> <li>camera</li> <li>camera=(v : Any)</li> <li>camera(v: <code>Any</code>)</li> <li>cull_camera</li> <li>cull_camera=(v : Any)</li> <li>cull_camera(v: <code>Any</code>)</li> <li>new()</li> </ul> <p> WorldRenderDesc.camera \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WorldRenderDesc.camera=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WorldRenderDesc.camera(v: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WorldRenderDesc.cull_camera \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WorldRenderDesc.cull_camera=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WorldRenderDesc.cull_camera(v: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WorldRenderDesc.new() \u00b6 returns <code>WorldRenderDesc</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/asset/type/","title":"Type","text":""},{"location":"api/v/2024.12.3/asset/type/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/asset/type/#luxe-assettype-module","title":"<code>luxe: asset/type</code> module","text":"<ul> <li>AssetArtifact </li> <li>AssetContext </li> <li>AssetID </li> <li>AssetType </li> <li>AssetTypeID </li> </ul>"},{"location":"api/v/2024.12.3/asset/type/#assetartifact","title":"AssetArtifact","text":"<p><code>import \"luxe: asset/type\" for AssetArtifact</code></p> <p>no docs found</p> <ul> <li>id</li> <li>type</li> <li>path</li> <li>new(type: <code>String</code>, id: <code>String</code>, path: <code>String</code>)</li> </ul> <p> AssetArtifact.id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetArtifact.type \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetArtifact.path \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetArtifact.new(type: <code>String</code>, id: <code>String</code>, path: <code>String</code>) \u00b6 returns <code>AssetArtifact</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/asset/type/#assetcontext","title":"AssetContext","text":"<p><code>import \"luxe: asset/type\" for AssetContext</code></p> <p>no docs found</p> <ul> <li>id</li> <li>db</li> <li>artifacts</li> <li>ast_for_asset</li> <li>errors</li> <li>error(info: <code>String</code>)</li> <li>artifacts_for(type_id: <code>String</code>)</li> <li>ast_for(asset: <code>AssetID</code>)</li> <li>emit_block_def_for(asset: <code>AssetID</code>, block_tag: <code>String</code>, from: <code>String</code>)</li> <li>tagged(tag: <code>String</code>)</li> <li>tag(tag: <code>String</code>, value: <code>Any</code>)</li> <li>TYPE</li> <li>DEV</li> <li>RELEASE</li> <li>new(id: <code>String</code>, db: <code>Any</code>, artifact_root: <code>String</code>)</li> <li>set_modified(type: <code>String</code>, modified: <code>List</code>)</li> <li>get_modified(type: <code>String</code>)</li> <li>get_modified()</li> <li>skip(id: <code>String</code>)</li> <li>skipped(id: <code>String</code>)</li> <li>emit_path(id: <code>String</code>)</li> <li>emit_path(id: <code>String</code>, extra: <code>String</code>)</li> <li>emit(type_id: <code>String</code>, artifact_id: <code>String</code>, artifact_path: <code>String</code>)</li> </ul> <p> AssetContext.id \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetContext.db \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetContext.artifacts \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> AssetContext.ast_for_asset \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> AssetContext.errors \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> AssetContext.error(info: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetContext.artifacts_for(type_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetContext.ast_for(asset: <code>AssetID</code>) \u00b6 returns <code>Result</code></p> <p>no docs found   </p> <p> AssetContext.emit_block_def_for(asset: <code>AssetID</code>, block_tag: <code>String</code>, from: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetContext.tagged(tag: <code>String</code>) \u00b6 returns <code>Any</code></p> <p>no docs found   </p> <p> AssetContext.tag(tag: <code>String</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetContext.TYPE \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetContext.DEV \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetContext.RELEASE \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetContext.new(id: <code>String</code>, db: <code>Any</code>, artifact_root: <code>String</code>) \u00b6 returns <code>AssetContext</code></p> <p>no docs found   </p> <p> AssetContext.set_modified(type: <code>String</code>, modified: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetContext.get_modified(type: <code>String</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> AssetContext.get_modified() \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> AssetContext.skip(id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetContext.skipped(id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetContext.emit_path(id: <code>String</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetContext.emit_path(id: <code>String</code>, extra: <code>String</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetContext.emit(type_id: <code>String</code>, artifact_id: <code>String</code>, artifact_path: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/asset/type/#assetid","title":"AssetID","text":"<p><code>import \"luxe: asset/type\" for AssetID</code></p> <p>no docs found</p> <ul> <li>type_id</li> <li>id</li> <li>asset</li> <li>path</li> <li>ext</li> <li>subtype</li> <li>prefix</li> <li>root</li> <li>meta_uuid</li> <li>new(type_id: <code>String</code>, map: <code>Map</code>)</li> <li>from_id(type_id: <code>String</code>, asset_id: <code>String</code>)</li> <li>refresh()</li> </ul> <p> AssetID.type_id \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetID.id \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetID.asset \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetID.path \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetID.ext \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetID.subtype \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetID.prefix \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetID.root \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetID.meta_uuid \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetID.new(type_id: <code>String</code>, map: <code>Map</code>) \u00b6 returns <code>AssetID</code></p> <p>no docs found   </p> <p> AssetID.from_id(type_id: <code>String</code>, asset_id: <code>String</code>) \u00b6 returns <code>AssetID</code></p> <p>no docs found   </p> <p> AssetID.refresh() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/asset/type/#assettype","title":"AssetType","text":"<p><code>import \"luxe: asset/type\" for AssetType</code></p> <p>no docs found</p> <ul> <li>type_id</li> <li>version_id</li> <li>ext</li> <li>subtype</li> <li>ctx</li> <li>is_loader</li> <li>is_data</li> <li>is_handle</li> <li>version</li> <li>load_before</li> <li>load_after</li> <li>before</li> <li>after</li> <li>pre_early</li> <li>pre_late</li> <li>new(type_id: <code>String</code>, ctx: <code>AssetContext</code>)</li> <li>remap(asset: <code>AssetID</code>, new_id: <code>String</code>)</li> <li>get_remap(map: <code>Map</code>)</li> <li>modify_affected(asset: <code>AssetID</code>)</li> <li>modify(asset: <code>AssetID</code>)</li> <li>unmodify(asset: <code>AssetID</code>)</li> <li>emit_path(asset: <code>AssetID</code>)</li> <li>skip(asset: <code>AssetID</code>)</li> <li>get_data(id: <code>String</code>)</li> <li>set_handle(id: <code>String</code>, handle: <code>Num</code>)</li> <li>pre(assets: <code>List</code>)</li> <li>process(assets: <code>List</code>, each: <code>Fn</code>)</li> <li>loader(assets: <code>List</code>, artifacts: <code>List</code>)</li> </ul> <p> AssetType.type_id \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetType.version_id \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetType.ext \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetType.subtype \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetType.ctx \u00b6 returns <code>AssetContext</code></p> <p>no docs found   </p> <p> AssetType.is_loader \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> AssetType.is_data \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> AssetType.is_handle \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> AssetType.version \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> AssetType.load_before \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> AssetType.load_after \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> AssetType.before \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> AssetType.after \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> AssetType.pre_early \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> AssetType.pre_late \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> AssetType.new(type_id: <code>String</code>, ctx: <code>AssetContext</code>) \u00b6 returns <code>AssetType</code></p> <p>no docs found   </p> <p> AssetType.remap(asset: <code>AssetID</code>, new_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetType.get_remap(map: <code>Map</code>) \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> AssetType.modify_affected(asset: <code>AssetID</code>) \u00b6 returns <code>unknown</code></p> <p>modify all assets that refer to this one   </p> <p> AssetType.modify(asset: <code>AssetID</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetType.unmodify(asset: <code>AssetID</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetType.emit_path(asset: <code>AssetID</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetType.skip(asset: <code>AssetID</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetType.get_data(id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetType.set_handle(id: <code>String</code>, handle: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetType.pre(assets: <code>List</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> AssetType.process(assets: <code>List</code>, each: <code>Fn</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> AssetType.loader(assets: <code>List</code>, artifacts: <code>List</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/asset/type/#assettypeid","title":"AssetTypeID","text":"<p><code>import \"luxe: asset/type\" for AssetTypeID</code></p> <p>no docs found</p> <ul> <li>block</li> <li>block=(v : Any)</li> <li>block_class</li> <li>block_class=(v : Any)</li> <li>loader</li> <li>loader=(v : Any)</li> <li>handler</li> <li>handler=(v : Any)</li> <li>new(map: <code>Map</code>)</li> </ul> <p> AssetTypeID.block \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetTypeID.block=(v : Any) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetTypeID.block_class \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetTypeID.block_class=(v : Any) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetTypeID.loader \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetTypeID.loader=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetTypeID.handler \u00b6 returns <code>AssetType</code></p> <p>no docs found   </p> <p> AssetTypeID.handler=(v : Any) \u00b6 returns <code>AssetType</code></p> <p>no docs found   </p> <p> AssetTypeID.new(map: <code>Map</code>) \u00b6 returns <code>AssetTypeID</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/debug/alloc.block/","title":"Alloc.block","text":""},{"location":"api/v/2024.12.3/debug/alloc.block/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/debug/alloc.block/#luxe-debugallocblock-module","title":"<code>luxe: debug/alloc.block</code> module","text":"<ul> <li>AllocMeta </li> </ul>"},{"location":"api/v/2024.12.3/debug/alloc.block/#allocmeta","title":"AllocMeta","text":"<p><code>import \"luxe: debug/alloc.block\" for AllocMeta</code></p> <p>no docs found</p> <ul> <li><code>var kind : String = \"script\"</code></li> <li><code>var context : String = \"&lt;unknown.wren&gt;\"</code></li> <li><code>var note : String = \"\"</code></li> <li><code>var amount : Num = 0</code></li> </ul>"},{"location":"api/v/2024.12.3/pose/blend.pose_node/","title":"Blend.pose node","text":""},{"location":"api/v/2024.12.3/pose/blend.pose_node/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/pose/blend.pose_node/#luxe-poseblendpose_node-module","title":"<code>luxe: pose/blend.pose_node</code> module","text":"<ul> <li>BlendLayer </li> <li>BlendNode </li> </ul>"},{"location":"api/v/2024.12.3/pose/blend.pose_node/#blendlayer","title":"BlendLayer","text":"<p><code>import \"luxe: pose/blend.pose_node\" for BlendLayer</code></p> <p>no docs found</p> <ul> <li><code>var pose : Num = 0</code></li> <li><code>var weight : Num = 0</code></li> </ul>"},{"location":"api/v/2024.12.3/pose/blend.pose_node/#blendnode","title":"BlendNode","text":"<p><code>import \"luxe: pose/blend.pose_node\" for BlendNode</code></p> <p>no docs found</p> <ul> <li><code>var layers : List = []</code></li> <li><code>var threshold : Num = 0.01</code></li> <li><code>var ratio_1D : Num = -1</code></li> <li>id</li> </ul> <p> BlendNode.id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/pose/ccdik.pose_node/","title":"Ccdik.pose node","text":""},{"location":"api/v/2024.12.3/pose/ccdik.pose_node/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/pose/ccdik.pose_node/#luxe-poseccdikpose_node-module","title":"<code>luxe: pose/ccdik.pose_node</code> module","text":"<ul> <li>CCDIKNode </li> </ul>"},{"location":"api/v/2024.12.3/pose/ccdik.pose_node/#ccdiknode","title":"CCDIKNode","text":"<p><code>import \"luxe: pose/ccdik.pose_node\" for CCDIKNode</code></p> <p>no docs found</p> <ul> <li><code>var input_pose : Num = 0</code></li> <li><code>var target : Float3 = [0, 0, 1]</code></li> <li><code>var start_bone : String = null</code></li> <li><code>var end_bone : String = null</code></li> <li><code>var max_iterations : Num = 10</code></li> <li><code>var min_iterations : Num = 1</code></li> <li><code>var threshold : Num = 0.01</code></li> <li><code>var annealing_exponent : Num = 0</code></li> <li><code>var weight : Num = 1</code></li> <li>id</li> </ul> <p> CCDIKNode.id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/pose/clip.pose_node/","title":"Clip.pose node","text":""},{"location":"api/v/2024.12.3/pose/clip.pose_node/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/pose/clip.pose_node/#luxe-poseclippose_node-module","title":"<code>luxe: pose/clip.pose_node</code> module","text":"<ul> <li>ClipNode </li> </ul>"},{"location":"api/v/2024.12.3/pose/clip.pose_node/#clipnode","title":"ClipNode","text":"<p><code>import \"luxe: pose/clip.pose_node\" for ClipNode</code></p> <p>no docs found</p> <ul> <li><code>var clip : Num = 0</code></li> <li><code>var offset : Num = 0</code></li> <li><code>var rate : Num = 1</code></li> <li><code>var time : Num = 0</code></li> <li>id</li> </ul> <p> ClipNode.id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/pose/look_at_ik.pose_node/","title":"Look at ik.pose node","text":""},{"location":"api/v/2024.12.3/pose/look_at_ik.pose_node/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/pose/look_at_ik.pose_node/#luxe-poselook_at_ikpose_node-module","title":"<code>luxe: pose/look_at_ik.pose_node</code> module","text":"<ul> <li>LookAtIKNode </li> </ul>"},{"location":"api/v/2024.12.3/pose/look_at_ik.pose_node/#lookatiknode","title":"LookAtIKNode","text":"<p><code>import \"luxe: pose/look_at_ik.pose_node\" for LookAtIKNode</code></p> <p>no docs found</p> <ul> <li><code>var input_pose : Num = 0</code></li> <li><code>var bone : String = null</code></li> <li><code>var target : Float3 = [0, 0, 2]</code></li> <li><code>var offset : Float3 = [0, 0, 0]</code></li> <li><code>var forward : Float3 = [0, 0, 1]</code></li> <li><code>var up : Float3 = [0, 1, 0]</code></li> <li><code>var weight : Num = 1</code></li> <li><code>var twist_angle : Num = 0</code></li> <li><code>var pole_vector : Float3 = [0, 0, 1]</code></li> <li>id</li> </ul> <p> LookAtIKNode.id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/pose/two_bone_ik.pose_node/","title":"Two bone ik.pose node","text":""},{"location":"api/v/2024.12.3/pose/two_bone_ik.pose_node/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/pose/two_bone_ik.pose_node/#luxe-posetwo_bone_ikpose_node-module","title":"<code>luxe: pose/two_bone_ik.pose_node</code> module","text":"<ul> <li>TwoBoneIKNode </li> </ul>"},{"location":"api/v/2024.12.3/pose/two_bone_ik.pose_node/#twoboneiknode","title":"TwoBoneIKNode","text":"<p><code>import \"luxe: pose/two_bone_ik.pose_node\" for TwoBoneIKNode</code></p> <p>no docs found</p> <ul> <li><code>var input_pose : Num = 0</code></li> <li><code>var target : Float3 = [0, 0, 1]</code></li> <li><code>var start_bone : String = null</code></li> <li><code>var middle_bone : String = null</code></li> <li><code>var end_bone : String = null</code></li> <li><code>var soften : Num = 0.97</code></li> <li><code>var weight : Num = 1</code></li> <li><code>var twist_angle : Num = 0</code></li> <li><code>var mid_axis : Float3 = [0, 0, 1]</code></li> <li><code>var pole_vector : Float3 = [0, 0, 1]</code></li> <li>id</li> </ul> <p> TwoBoneIKNode.id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/render/font/","title":"Font","text":""},{"location":"api/v/2024.12.3/render/font/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/render/font/#luxe-renderfont-module","title":"<code>luxe: render/font</code> module","text":"<ul> <li>Font </li> </ul>"},{"location":"api/v/2024.12.3/render/font/#font","title":"Font","text":"<p><code>import \"luxe: render/font\" for Font</code></p> <p>no docs found</p> <ul> <li>get_page_image(font: <code>Font</code>, index: <code>Num</code>)</li> </ul> <p> Font.get_page_image(font: <code>Font</code>, index: <code>Num</code>) \u00b6 returns <code>Image</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/string/po/","title":"Po","text":""},{"location":"api/v/2024.12.3/string/po/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/string/po/#luxe-stringpo-module","title":"<code>luxe: string/po</code> module","text":"<ul> <li>PO </li> <li>POData </li> <li>POElement </li> <li>POHeader </li> <li>POString </li> </ul>"},{"location":"api/v/2024.12.3/string/po/#po","title":"PO","text":"<p><code>import \"luxe: string/po\" for PO</code></p> <p>no docs found</p> <ul> <li>parse_header(lines: <code>List</code>)</li> <li>parse_elements(lines: <code>List</code>)</li> <li>parse(asset_id: <code>String</code>, bytes: <code>String</code>)</li> </ul> <p> PO.parse_header(lines: <code>List</code>) \u00b6 returns <code>Result</code></p> <p>no docs found   </p> <p> PO.parse_elements(lines: <code>List</code>) \u00b6 returns <code>List</code></p> <p>converts the lines into chunks separated by lines   </p> <p> PO.parse(asset_id: <code>String</code>, bytes: <code>String</code>) \u00b6 returns <code>Result</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/string/po/#podata","title":"POData","text":"<p><code>import \"luxe: string/po\" for POData</code></p> <p>no docs found</p> <ul> <li>language</li> <li>headers</li> <li>elements</li> <li>new(asset_id: <code>String</code>, language: <code>String</code>, headers: <code>Map</code>)</li> <li>to_string()</li> </ul> <p> POData.language \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> POData.headers \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> POData.elements \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> POData.new(asset_id: <code>String</code>, language: <code>String</code>, headers: <code>Map</code>) \u00b6 returns <code>POData</code></p> <p>no docs found   </p> <p> POData.to_string() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/string/po/#poelement","title":"POElement","text":"<p><code>import \"luxe: string/po\" for POElement</code></p> <p>An element inside the PO file</p> <ul> <li>id</li> <li>key</li> <li>file_index</li> <li>plural_id</li> <li>comments</li> <li>is_plural</li> <li>strings</li> <li>new(file_index: <code>Num</code>, key: <code>String</code>, plural_id: <code>String</code>, id: <code>String</code>, strings: <code>List</code>, comments: <code>List</code>)</li> <li>update_id(id: <code>String</code>)</li> <li>update_comments(comments: <code>List</code>)</li> </ul> <p> POElement.id \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> POElement.key \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> POElement.file_index \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> POElement.plural_id \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> POElement.comments \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> POElement.is_plural \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> POElement.strings \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> POElement.new(file_index: <code>Num</code>, key: <code>String</code>, plural_id: <code>String</code>, id: <code>String</code>, strings: <code>List</code>, comments: <code>List</code>) \u00b6 returns <code>POElement</code></p> <p>no docs found   </p> <p> POElement.update_id(id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> POElement.update_comments(comments: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/string/po/#poheader","title":"POHeader","text":"<p><code>import \"luxe: string/po\" for POHeader</code></p> <p>a single header line</p> <ul> <li>key</li> <li>value</li> <li>file_index</li> <li>new(file_index: <code>Num</code>, key: <code>String</code>, value: <code>String</code>)</li> <li>update_value(value: <code>String</code>)</li> </ul> <p> POHeader.key \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> POHeader.value \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> POHeader.file_index \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> POHeader.new(file_index: <code>Num</code>, key: <code>String</code>, value: <code>String</code>) \u00b6 returns <code>POHeader</code></p> <p>no docs found   </p> <p> POHeader.update_value(value: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/string/po/#postring","title":"POString","text":"<p><code>import \"luxe: string/po\" for POString</code></p> <p>a single msgstr, with an optional [index]</p> <ul> <li>value</li> <li>index</li> <li>new(value: <code>String</code>, index: <code>Num</code>)</li> </ul> <p> POString.value \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> POString.index \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> POString.new(value: <code>String</code>, index: <code>Num</code>) \u00b6 returns <code>POString</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/anim.modifier/","title":"Anim.modifier","text":""},{"location":"api/v/2024.12.3/system/anim.modifier/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/system/anim.modifier/#luxe-systemanimmodifier-module","title":"<code>luxe: system/anim.modifier</code> module","text":"<ul> <li>Anim </li> <li>AnimEvent </li> <li>AnimInterpolation </li> <li>AnimInterval </li> <li>AnimState </li> <li>Data </li> <li>System </li> </ul>"},{"location":"api/v/2024.12.3/system/anim.modifier/#anim","title":"Anim","text":"<p><code>import \"luxe: system/anim.modifier\" for Anim</code></p> <p><code>Anim</code> is an animation player attached to an entity.</p> <p>It plays animations from animation assets or ones created from code.  Animations can target the entity <code>Anim</code> is attached to,  but can target any entity.  For example, a level cutscene could be played back from one entity,  but it drives several other entities. From assets like scenes and prototypes,  <code>Anim</code> provides an autoplay list, for playing when loaded. </p> <p>You can play multiple animations at the same time,  for example, the player might have a walk animation playing  and you play a glowing animation on top. </p> <p><code>Anim</code> supports curve, linear and discrete driven animations  and is expanded on by World Systems that provide animation tracks.</p> <ul> <li>create(entity: <code>Entity</code>)</li> <li>destroy(entity: <code>Entity</code>)</li> <li>has(entity: <code>Entity</code>)</li> <li>valid(entity: <code>Entity</code>, anim: <code>Anim</code>)</li> <li>get_source_id(entity: <code>Entity</code>, anim: <code>Anim</code>)</li> <li>get_state(entity: <code>Entity</code>, anim: <code>Anim</code>)</li> <li>get_active_anims(entity: <code>Entity</code>)</li> <li>play(entity: <code>Entity</code>, anim_lx: <code>ID</code>, time_offset: <code>Num</code>)</li> <li>blend(entity: <code>Entity</code>, anim_lx: <code>ID</code>, blend_time: <code>Num</code>, time_offset: <code>Num</code>)</li> <li>play(entity: <code>Entity</code>, anim_lx: <code>ID</code>)</li> <li>blend(entity: <code>Entity</code>, anim_lx: <code>ID</code>, blend_time: <code>Num</code>)</li> <li>play_only(entity: <code>Entity</code>, anim_lx: <code>ID</code>, time_offset: <code>Num</code>)</li> <li>play_only(entity: <code>Entity</code>, anim_lx: <code>ID</code>)</li> <li>stop(entity: <code>Entity</code>, anim: <code>Anim</code>, reset: <code>Bool</code>)</li> <li>stop(entity: <code>Entity</code>, anim: <code>Anim</code>)</li> <li>stop_all(entity: <code>Entity</code>, reset: <code>Bool</code>)</li> <li>stop_all(entity: <code>Entity</code>)</li> <li>create_track(entity: <code>Entity</code>, anim: <code>Anim</code>, track_id: <code>Any</code>, track_type: <code>Any</code>)</li> <li>has_track(entity: <code>Entity</code>, anim: <code>Anim</code>, track_id: <code>Any</code>)</li> <li>track_set_range(entity: <code>Entity</code>, anim: <code>Anim</code>, track_id: <code>Any</code>, min: <code>Any</code>, max: <code>Any</code>)</li> <li>track_get_range(entity: <code>Entity</code>, anim: <code>Anim</code>, track_id: <code>Any</code>)</li> <li>track_set(entity: <code>Entity</code>, anim: <code>Anim</code>, track_id: <code>Any</code>, property: <code>Any</code>, value: <code>Any</code>)</li> <li>track_set_channel(entity: <code>Entity</code>, anim: <code>Anim</code>, track_id: <code>Any</code>, channel_id: <code>Any</code>, channel_idx: <code>Any</code>, interp: <code>Any</code>, keys: <code>Any</code>)</li> <li>set_play_count(entity: <code>Entity</code>, anim: <code>Anim</code>, play_count: <code>Num</code>)</li> <li>set_rate(entity: <code>Entity</code>, anim: <code>Anim</code>, rate: <code>Num</code>)</li> <li>set_start(entity: <code>Entity</code>, anim: <code>Anim</code>, start: <code>Num</code>)</li> <li>set_end(entity: <code>Entity</code>, anim: <code>Anim</code>, end: <code>Num</code>)</li> <li>set_interval_time(entity: <code>Entity</code>, anim: <code>Anim</code>, time: <code>Num</code>)</li> <li>get_play_count(entity: <code>Entity</code>, anim: <code>Anim</code>)</li> <li>get_rate(entity: <code>Entity</code>, anim: <code>Anim</code>)</li> <li>get_duration(entity: <code>Entity</code>, anim: <code>Anim</code>)</li> <li>get_start(entity: <code>Entity</code>, anim: <code>Anim</code>)</li> <li>get_end(entity: <code>Entity</code>, anim: <code>Anim</code>)</li> <li>get_interval_time(entity: <code>Entity</code>, anim: <code>Anim</code>)</li> <li>on_event(entity: <code>Entity</code>, anim: <code>Anim</code>, fn: <code>Fn</code>)</li> </ul> <p> Anim.create(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>Attach an <code>Anim</code> modifier to <code>entity</code>.</p> <pre><code>var entity = Entity.create(world)\nAnim.create(entity)\n</code></pre> <p> Anim.destroy(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Detach and destroy the <code>Anim</code> attached to <code>entity</code>.</p> <pre><code>Anim.destroy(entity)\n</code></pre> <p> Anim.has(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>Returns whether <code>entity</code> has an <code>Anim</code> modifier attached. </p> <pre><code>if(Anim.has(entity)) {\n  Log.print(\"found anim\")\n}\n</code></pre> <p> Anim.valid(entity: <code>Entity</code>, anim: <code>Anim</code>) \u00b6 returns <code>Bool</code></p> <p>Returns whether the <code>Anim</code> instance is valid for the <code>Anim</code> attached to <code>entity</code>. </p> <pre><code>var anim = Anim.play(entity, \"player/idle\")\nif(!Anim.valid(entity, anim)) {\n  Log.print(\"oh no!\")\n}\n</code></pre> <p> Anim.get_source_id(entity: <code>Entity</code>, anim: <code>Anim</code>) \u00b6 returns <code>ID</code></p> <p>Returns the <code>ID</code> of the animation asset that the <code>Anim</code> instance was played from,  if known, by asking the <code>Anim</code> attached to <code>entity</code>. Returns <code>null</code> if not. </p> <pre><code>var anim = Anim.play(entity, \"player/idle\")\nvar source_id = Anim.get_source_id(entity, anim)\nLog.print(Strings.get(source_id)) //expect: \"player/idle\"\n</code></pre> <p> Anim.get_state(entity: <code>Entity</code>, anim: <code>Anim</code>) \u00b6 returns <code>AnimState</code></p> <p>Return the animation state of the <code>Anim</code> instance, by asking the <code>Anim</code> attached to <code>entity</code>. </p> <pre><code>var anim = Anim.play(entity, \"player/idle\")\nvar state = Anim.get_state(entity, anim)\nif(state == AnimState.playing) {\n  Anim.stop(entity, anim)\n}\n</code></pre> <p> Anim.get_active_anims(entity: <code>Entity</code>) \u00b6 returns <code>List</code></p> <p>Returns a list of <code>Anim</code> instances that are active on the <code>Anim</code> attached to <code>entity</code>. </p> <pre><code>var active = Anim.get_active_anims(entity)\nfor(anim in active) {\n  var state = Anim.get_state(entity, anim)\n  Log.print(AnimState.name(state));\n}\n</code></pre> <p> Anim.play(entity: <code>Entity</code>, anim_lx: <code>ID</code>, time_offset: <code>Num</code>) \u00b6 returns <code>Anim</code></p> <p>Play the animation asset <code>anim_lx</code> on the Anim attached to <code>entity</code>.  The <code>time_offset</code> is a time in seconds to begin playback from.  For example, you might pause an animation and hold onto the animation time when it was paused.  Then when resuming, you can play from the new time. Returns the newly started <code>Anim</code> instance.</p> <pre><code>var anim = Anim.play(entity, \"player/idle\", 0.5)\n</code></pre> <p> Anim.blend(entity: <code>Entity</code>, anim_lx: <code>ID</code>, blend_time: <code>Num</code>, time_offset: <code>Num</code>) \u00b6 returns <code>Anim</code></p> <p>Play the animation asset <code>anim_lx</code> on the <code>Anim</code> attached to <code>entity</code> with a blend fade time.  The <code>time_offset</code> is a time in seconds to begin playback from.  The <code>blend_time</code> is handled by some tracks, not all. Returns the newly started <code>Anim</code> instance.</p> <pre><code>//fade in the animation over 0.6 seconds\nvar anim = Anim.blend(entity, \"player/idle\", 0.6)\n</code></pre> <p> Anim.play(entity: <code>Entity</code>, anim_lx: <code>ID</code>) \u00b6 returns <code>Anim</code></p> <p>Play the animation asset <code>anim_lx</code> on the <code>Anim</code> attached to <code>entity</code>.  Plays from the beginning. Returns the newly started <code>Anim</code> instance.</p> <pre><code>var anim = Anim.play(entity, \"player/idle\")\n</code></pre> <p> Anim.blend(entity: <code>Entity</code>, anim_lx: <code>ID</code>, blend_time: <code>Num</code>) \u00b6 returns <code>Anim</code></p> <p>Play the animation asset <code>anim_lx</code> on the <code>Anim</code> attached to <code>entity</code> with a blend fade time.  Plays from the beginning. Blend time is handled by some tracks, not all. Returns the newly started <code>Anim</code> instance.</p> <pre><code>//fade in the animation over 0.6 seconds\nvar anim = Anim.blend(entity, \"player/idle\", 0.6)\n</code></pre> <p> Anim.play_only(entity: <code>Entity</code>, anim_lx: <code>ID</code>, time_offset: <code>Num</code>) \u00b6 returns <code>Anim</code></p> <p>Play the animation asset <code>anim_lx</code> on the <code>Anim</code> attached to <code>entity</code>, stopping all other active anims,  and only playing this one. The <code>time_offset</code> is a time in seconds to begin playback from.  Returns the newly started <code>Anim</code> instance.</p> <pre><code>var anim = Anim.play_only(entity, \"player/idle\", 0.5)\n</code></pre> <p> Anim.play_only(entity: <code>Entity</code>, anim_lx: <code>ID</code>) \u00b6 returns <code>Anim</code></p> <p>Play the animation asset <code>anim_lx</code> on the <code>Anim</code> attached to <code>entity</code>, stopping all other active anims,  and only playing this one. Returns the newly started <code>Anim</code> instance.</p> <pre><code>var anim = Anim.play_only(entity, \"player/idle\")\n</code></pre> <p> Anim.stop(entity: <code>Entity</code>, anim: <code>Anim</code>, reset: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Stop the <code>Anim</code> instance if playing on the <code>Anim</code> attached to <code>entity</code>.</p> <p>If <code>reset</code> is <code>true</code>, the state of anything that was being animated by this <code>Anim</code> instance,  will be reset to what it was before it was played. For example, if your animation is changing the transform position,  it will revert back to the position at the time the animation was played. </p> <pre><code>var anim = Anim.play(entity, \"player/idle\")\nAnim.stop(entity, anim, true)\n</code></pre> <p> Anim.stop(entity: <code>Entity</code>, anim: <code>Anim</code>) \u00b6 returns <code>None</code></p> <p>Stop the <code>Anim</code> instance if playing on the <code>Anim</code> attached to <code>entity</code>.  State is not reset (see <code>Anim.stop(entity, anim, reset)</code>). </p> <pre><code>var anim = Anim.play(entity, \"player/idle\")\nAnim.stop(entity, anim)\n</code></pre> <p> Anim.stop_all(entity: <code>Entity</code>, reset: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Stop all active <code>Anim</code> instances playing on the <code>Anim</code> attached to <code>entity</code>.  If <code>reset</code> is <code>true</code>, state will be reset to the state before the animation started (see <code>Anim.stop(entity, anim, reset)</code>). </p> <pre><code>var anim = Anim.play(entity, \"player/idle\")\nAnim.stop_all(entity, true)\n</code></pre> <p> Anim.stop_all(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Stop all active <code>Anim</code> instances playing on the <code>Anim</code> attached to <code>entity</code>.  State is not reset (see <code>Anim.stop(entity, anim, reset)</code>). </p> <pre><code>var anim = Anim.play(entity, \"player/idle\")\nAnim.stop_all(entity)\n</code></pre> <p> Anim.create_track(entity: <code>Entity</code>, anim: <code>Anim</code>, track_id: <code>Any</code>, track_type: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Anim.has_track(entity: <code>Entity</code>, anim: <code>Anim</code>, track_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Anim.track_set_range(entity: <code>Entity</code>, anim: <code>Anim</code>, track_id: <code>Any</code>, min: <code>Any</code>, max: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Anim.track_get_range(entity: <code>Entity</code>, anim: <code>Anim</code>, track_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Anim.track_set(entity: <code>Entity</code>, anim: <code>Anim</code>, track_id: <code>Any</code>, property: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Anim.track_set_channel(entity: <code>Entity</code>, anim: <code>Anim</code>, track_id: <code>Any</code>, channel_id: <code>Any</code>, channel_idx: <code>Any</code>, interp: <code>Any</code>, keys: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Anim.set_play_count(entity: <code>Entity</code>, anim: <code>Anim</code>, play_count: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the amount of times to play the <code>Anim</code> instance on the <code>Anim</code> attached to <code>entity</code>.  The <code>play_count</code> value can be <code>0</code>, which will loop forever.</p> <pre><code>//play 3 times and then end\nvar anim = Anim.play(entity, \"player/idle\")\nAnim.set_play_count(entity, anim, 3)\n</code></pre> <p> Anim.set_rate(entity: <code>Entity</code>, anim: <code>Anim</code>, rate: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the playback rate of the <code>Anim</code> instance on the <code>Anim</code> attached to <code>entity</code>.  The rate of <code>1</code> is the default speed. <code>0.5</code> is half speed, and <code>2</code> is twice as fast. </p> <pre><code>var anim = Anim.play(entity, \"player/idle\")\nAnim.set_rate(entity, anim, 0.5)\n</code></pre> <p> Anim.set_start(entity: <code>Entity</code>, anim: <code>Anim</code>, start: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the start marker of the <code>Anim</code> instance on the <code>Anim</code> attached to <code>entity</code>. note This API is WIP. </p> <pre><code>Anim.set_start(entity, anim, 0)\n</code></pre> <p> Anim.set_end(entity: <code>Entity</code>, anim: <code>Anim</code>, end: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the end marker of the <code>Anim</code> instance on the <code>Anim</code> attached to <code>entity</code>. note This API is WIP. </p> <pre><code>Anim.set_end(entity, anim, 1)\n</code></pre> <p> Anim.set_interval_time(entity: <code>Entity</code>, anim: <code>Anim</code>, time: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the current playback time of the <code>Anim</code> instance on the <code>Anim</code> attached to <code>entity</code>. note This API is WIP. </p> <pre><code>Anim.set_interval_time(entity, anim, 0.5)\n</code></pre> <p> Anim.get_play_count(entity: <code>Entity</code>, anim: <code>Anim</code>) \u00b6 returns <code>Num</code></p> <p>Return the play count of the <code>Anim</code> instance on the <code>Anim</code> attached to <code>entity</code>. </p> <pre><code>var play_count = Anim.get_play_count(entity, anim)\n</code></pre> <p> Anim.get_rate(entity: <code>Entity</code>, anim: <code>Anim</code>) \u00b6 returns <code>Num</code></p> <p>Return the rate of playback of the <code>Anim</code> instance on the <code>Anim</code> attached to <code>entity</code>. </p> <pre><code>var play_count = Anim.get_play_count(entity, anim)\n</code></pre> <p> Anim.get_duration(entity: <code>Entity</code>, anim: <code>Anim</code>) \u00b6 returns <code>Num</code></p> <p>Return the duration of the <code>Anim</code> instance on the <code>Anim</code> attached to <code>entity</code>. </p> <pre><code>var play_count = Anim.get_play_count(entity, anim)\n</code></pre> <p> Anim.get_start(entity: <code>Entity</code>, anim: <code>Anim</code>) \u00b6 returns <code>Num</code></p> <p>Return the start marker of the <code>Anim</code> instance on the <code>Anim</code> attached to <code>entity</code>. </p> <pre><code>var play_count = Anim.get_play_count(entity, anim)\n</code></pre> <p> Anim.get_end(entity: <code>Entity</code>, anim: <code>Anim</code>) \u00b6 returns <code>Num</code></p> <p>Return the end marker of the <code>Anim</code> instance on the <code>Anim</code> attached to <code>entity</code>. </p> <pre><code>var play_count = Anim.get_play_count(entity, anim)\n</code></pre> <p> Anim.get_interval_time(entity: <code>Entity</code>, anim: <code>Anim</code>) \u00b6 returns <code>Num</code></p> <p>Return the current playback time of the <code>Anim</code> instance on the <code>Anim</code> attached to entity. note This API is WIP. </p> <pre><code>var play_count = Anim.get_play_count(entity, anim)\n</code></pre> <p> Anim.on_event(entity: <code>Entity</code>, anim: <code>Anim</code>, fn: <code>Fn</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/anim.modifier/#animevent","title":"AnimEvent","text":"<p><code>import \"luxe: system/anim.modifier\" for AnimEvent</code></p> <p>no docs found</p> <ul> <li>start</li> <li>tick</li> <li>complete</li> </ul> <p> AnimEvent.start \u00b6 returns <code>unknown</code></p> <p>An event fired when an animation started playing.   </p> <p> AnimEvent.tick \u00b6 returns <code>unknown</code></p> <p>An event fired when an animation is updated, but only if the track is set to emit the event.   </p> <p> AnimEvent.complete \u00b6 returns <code>unknown</code></p> <p>An event fired when an animation is stopped or done playing.   </p>"},{"location":"api/v/2024.12.3/system/anim.modifier/#animinterpolation","title":"AnimInterpolation","text":"<p><code>import \"luxe: system/anim.modifier\" for AnimInterpolation</code></p> <p>An enum for types of interpolation in animation tracks.</p> <ul> <li>unknown</li> <li>curve</li> <li>linear</li> <li>discrete</li> <li>name(value: <code>AnimInterpolation</code>)</li> <li>from_string(value: <code>String</code>)</li> </ul> <p> AnimInterpolation.unknown \u00b6 returns <code>unknown</code></p> <p>An invalid or unknown value.</p> <pre><code>if(value == AnimInterpolation.unknown) {\n  Log.print(\"unknown interpolation type!\")\n}\n</code></pre> <p> AnimInterpolation.curve \u00b6 returns <code>unknown</code></p> <p>The animation values between keys will be interpolated  according to the curve defined by the keys themselves. </p> <pre><code>if(value == AnimInterpolation.curve) {\n  Log.print(\"curve\")\n}\n</code></pre> <p> AnimInterpolation.linear \u00b6 returns <code>unknown</code></p> <p>The animation values between keys will be interpolated linearly.  For example if your keys were <code>{ time=0 value=0 }</code> and <code>{ time=1 value=4 }</code>,  at the time of <code>0.5</code> the value would be <code>2</code>, half of the next key. </p> <pre><code>if(value == AnimInterpolation.linear) {\n  Log.print(\"linear\")\n}\n</code></pre> <p> AnimInterpolation.discrete \u00b6 returns <code>unknown</code></p> <p>The animation values between keys would not be interpolated,  they would jump from one value to the next.  For example if your keys were <code>{ time=0 value=0 }</code> and <code>{ time=1 value=3 }</code>,  with discrete the value at time <code>0.5</code> is still <code>0</code>  (instead of <code>1.5</code> with linear).  It will only change to <code>3</code> when the next key is reached. </p> <pre><code>if(value == AnimInterpolation.discrete) {\n  Log.print(\"discrete\")\n}\n</code></pre> <p> AnimInterpolation.name(value: <code>AnimInterpolation</code>) \u00b6 returns <code>String</code></p> <p>Convert an <code>AnimInterpolation</code> value to a string. </p> <pre><code>var type = AnimInterpolation.linear\nvar name = AnimInterpolation.name(type)\nLog.print(\"type is %(name)\") //expect: \"linear\"\n</code></pre> <p> AnimInterpolation.from_string(value: <code>String</code>) \u00b6 returns <code>AnimInterpolation</code></p> <p>Get the <code>AnimInterpolation</code> value to a name.</p> <pre><code>var type = AnimInterpolation.from_string(\"discrete\")\nLog.print(\"discrete is value %(type)\") //expect: \"3\", the internal value\n</code></pre>"},{"location":"api/v/2024.12.3/system/anim.modifier/#animinterval","title":"AnimInterval","text":"<p><code>import \"luxe: system/anim.modifier\" for AnimInterval</code></p> <p>no docs found</p> <ul> <li>create(world: <code>Any</code>, duration: <code>Any</code>, rate: <code>Any</code>)</li> <li>create(world: <code>Any</code>, duration: <code>Any</code>)</li> <li>time(world: <code>Any</code>, anim: <code>Any</code>)</li> <li>set_time(world: <code>Any</code>, anim: <code>Any</code>, time: <code>Any</code>)</li> <li>set_now(world: <code>Any</code>, anim: <code>Any</code>, offset: <code>Any</code>)</li> <li>set_now(world: <code>Any</code>, anim: <code>Any</code>)</li> <li>set_play_count(world: <code>Any</code>, anim: <code>Any</code>, count: <code>Any</code>)</li> <li>set_clock(world: <code>Any</code>, anim: <code>Any</code>, clock: <code>Any</code>)</li> <li>set_rate(world: <code>Any</code>, anim: <code>Any</code>, rate: <code>Any</code>)</li> <li>set_duration(world: <code>Any</code>, anim: <code>Any</code>, duration: <code>Any</code>)</li> <li>set_start(world: <code>Any</code>, anim: <code>Any</code>, start: <code>Any</code>)</li> <li>set_end(world: <code>Any</code>, anim: <code>Any</code>, end: <code>Any</code>)</li> <li>get_now(world: <code>Any</code>, anim: <code>Any</code>)</li> <li>get_play_count(world: <code>Any</code>, anim: <code>Any</code>)</li> <li>get_clock(world: <code>Any</code>, anim: <code>Any</code>)</li> <li>get_rate(world: <code>Any</code>, anim: <code>Any</code>)</li> <li>get_duration(world: <code>Any</code>, anim: <code>Any</code>)</li> <li>get_start(world: <code>Any</code>, anim: <code>Any</code>)</li> <li>get_end(world: <code>Any</code>, anim: <code>Any</code>)</li> </ul> <p> AnimInterval.create(world: <code>Any</code>, duration: <code>Any</code>, rate: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.create(world: <code>Any</code>, duration: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.time(world: <code>Any</code>, anim: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.set_time(world: <code>Any</code>, anim: <code>Any</code>, time: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.set_now(world: <code>Any</code>, anim: <code>Any</code>, offset: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.set_now(world: <code>Any</code>, anim: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.set_play_count(world: <code>Any</code>, anim: <code>Any</code>, count: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.set_clock(world: <code>Any</code>, anim: <code>Any</code>, clock: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.set_rate(world: <code>Any</code>, anim: <code>Any</code>, rate: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.set_duration(world: <code>Any</code>, anim: <code>Any</code>, duration: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.set_start(world: <code>Any</code>, anim: <code>Any</code>, start: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.set_end(world: <code>Any</code>, anim: <code>Any</code>, end: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.get_now(world: <code>Any</code>, anim: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.get_play_count(world: <code>Any</code>, anim: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.get_clock(world: <code>Any</code>, anim: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.get_rate(world: <code>Any</code>, anim: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.get_duration(world: <code>Any</code>, anim: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.get_start(world: <code>Any</code>, anim: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.get_end(world: <code>Any</code>, anim: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/anim.modifier/#animstate","title":"AnimState","text":"<p><code>import \"luxe: system/anim.modifier\" for AnimState</code></p> <p>An enum for the state of an <code>Anim</code> instance.</p> <ul> <li>inactive</li> <li>playing</li> <li>ending</li> <li>complete</li> <li>name(value: <code>Num</code>)</li> <li>from_string(value: <code>String</code>)</li> </ul> <p> AnimState.inactive \u00b6 returns <code>Num</code></p> <p>The animation is inactive. :todo: This may be obsolete.</p> <pre><code>var state = Anim.get_state(entity, anim)\nif(state == AnimState.inactive) {\n  Log.print(\"anim is inactive\")\n}\n</code></pre> <p> AnimState.playing \u00b6 returns <code>Num</code></p> <p>The animation is active and is playing.</p> <pre><code>var state = Anim.get_state(entity, anim)\nif(state == AnimState.playing) {\n  Log.print(\"anim is playing\")\n}\n</code></pre> <p> AnimState.ending \u00b6 returns <code>Num</code></p> <p>The animation is ending, and will be marked complete next update.</p> <pre><code>var state = Anim.get_state(entity, anim)\nif(state == AnimState.ending) {\n  Log.print(\"anim is ending\")\n}\n</code></pre> <p> AnimState.complete \u00b6 returns <code>Num</code></p> <p>The animation has ended and is complete.</p> <pre><code>var state = Anim.get_state(entity, anim)\nif(state == AnimState.complete) {\n  Log.print(\"anim is complete\")\n}\n</code></pre> <p> AnimState.name(value: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Convert an <code>AnimState</code> value to a string.</p> <pre><code>var type = AnimState.ending\nvar name = AnimState.name(type)\nLog.print(\"type is %(name)\") //expect: \"ending\"\n</code></pre> <p> AnimState.from_string(value: <code>String</code>) \u00b6 returns <code>Num</code></p> <p>Convert a string to an enum value.</p> <pre><code>var state = AnimState.from_string(\"ending\")\nvar same = state == AnimState.ending //true\n</code></pre>"},{"location":"api/v/2024.12.3/system/anim.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/anim.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var play : List = []</code></li> </ul>"},{"location":"api/v/2024.12.3/system/anim.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/anim.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/camera.modifier/","title":"Camera.modifier","text":""},{"location":"api/v/2024.12.3/system/camera.modifier/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/system/camera.modifier/#luxe-systemcameramodifier-module","title":"<code>luxe: system/camera.modifier</code> module","text":"<ul> <li>Camera </li> <li>CameraProjection </li> <li>CameraViewType </li> <li>Data </li> <li>PerEntityInfo </li> <li>System </li> </ul>"},{"location":"api/v/2024.12.3/system/camera.modifier/#camera","title":"Camera","text":"<p><code>import \"luxe: system/camera.modifier\" for Camera</code></p> <p>no docs found</p> <ul> <li>create(entity: <code>Any</code>)</li> <li>destroy(entity: <code>Any</code>)</li> <li>has(entity: <code>Any</code>)</li> <li>get_default(world: <code>Any</code>)</li> <li>set_default(world: <code>Any</code>, camera: <code>Any</code>)</li> <li>set_fov_vertical(entity: <code>Any</code>, fov_vertical: <code>Any</code>)</li> <li>get_fov_vertical(entity: <code>Any</code>)</li> <li>get_projection(entity: <code>Any</code>)</li> <li>set_zoom2D(entity: <code>Entity</code>, zoom: <code>Num</code>)</li> <li>get_zoom2D(entity: <code>Any</code>)</li> <li>get_near(entity: <code>Any</code>)</li> <li>get_far(entity: <code>Any</code>)</li> <li>get_aspect(entity: <code>Any</code>)</li> <li>get_frustum(entity: <code>Any</code>)</li> <li>perspective(entity: <code>Any</code>, fov_vertical: <code>Any</code>, aspect: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>)</li> <li>ortho(entity: <code>Any</code>, left: <code>Any</code>, top: <code>Any</code>, right: <code>Any</code>, bottom: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>)</li> <li>look_at(entity: <code>Any</code>, from: <code>Any</code>, to: <code>Any</code>, up: <code>Any</code>)</li> <li>set2D(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, width: <code>Any</code>, height: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>)</li> <li>set3D(entity: <code>Any</code>, fov_vertical: <code>Any</code>, aspect: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>)</li> <li>screen_point_to_world(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>)</li> <li>world_point_to_screen(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>, pos_z: <code>Any</code>)</li> <li>world_point_to_view(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>, pos_z: <code>Any</code>, into: <code>Any</code>)</li> <li>world_point_to_view(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>, pos_z: <code>Any</code>)</li> <li>view_point_to_world(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>, pos_z: <code>Any</code>)</li> <li>world_point_to_clip(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>, pos_z: <code>Any</code>)</li> <li>clip_point_to_world(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>, pos_z: <code>Any</code>)</li> <li>get_view_matrix(entity: <code>Any</code>, into_matrix: <code>Any</code>)</li> <li>get_projection_matrix(entity: <code>Any</code>, into_matrix: <code>Any</code>)</li> <li>get_view_projection_matrix(entity: <code>Any</code>, into_matrix: <code>Any</code>)</li> <li>set_view_matrix(entity: <code>Any</code>, matrix: <code>Any</code>)</li> <li>set_projection_matrix(entity: <code>Any</code>, matrix: <code>Any</code>)</li> <li>cull(camera: <code>Any</code>, render_set: <code>Any</code>)</li> <li>froxelize(camera: <code>Any</code>, slices: <code>Any</code>, entity_info_list: <code>Any</code>, cluster_image: <code>Any</code>, items_image: <code>Any</code>)</li> <li>cut(camera: <code>Entity</code>, to_camera: <code>Entity</code>)</li> <li>blend(camera: <code>Entity</code>, from_camera: <code>Entity</code>, to_camera: <code>Entity</code>, t: <code>Num</code>)</li> <li>blend(camera: <code>Entity</code>, to_camera: <code>Entity</code>, t: <code>Num</code>)</li> </ul> <p> Camera.create(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.destroy(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.has(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.get_default(world: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.set_default(world: <code>Any</code>, camera: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.set_fov_vertical(entity: <code>Any</code>, fov_vertical: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.get_fov_vertical(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.get_projection(entity: <code>Any</code>) \u00b6 returns <code>CameraProjection</code></p> <p>no docs found   </p> <p> Camera.set_zoom2D(entity: <code>Entity</code>, zoom: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Camera.get_zoom2D(entity: <code>Any</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Camera.get_near(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.get_far(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.get_aspect(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.get_frustum(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.perspective(entity: <code>Any</code>, fov_vertical: <code>Any</code>, aspect: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.ortho(entity: <code>Any</code>, left: <code>Any</code>, top: <code>Any</code>, right: <code>Any</code>, bottom: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.look_at(entity: <code>Any</code>, from: <code>Any</code>, to: <code>Any</code>, up: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.set2D(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, width: <code>Any</code>, height: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.set3D(entity: <code>Any</code>, fov_vertical: <code>Any</code>, aspect: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.screen_point_to_world(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.world_point_to_screen(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>, pos_z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.world_point_to_view(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>, pos_z: <code>Any</code>, into: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.world_point_to_view(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>, pos_z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.view_point_to_world(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>, pos_z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.world_point_to_clip(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>, pos_z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.clip_point_to_world(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>, pos_z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.get_view_matrix(entity: <code>Any</code>, into_matrix: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.get_projection_matrix(entity: <code>Any</code>, into_matrix: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.get_view_projection_matrix(entity: <code>Any</code>, into_matrix: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.set_view_matrix(entity: <code>Any</code>, matrix: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.set_projection_matrix(entity: <code>Any</code>, matrix: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.cull(camera: <code>Any</code>, render_set: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.froxelize(camera: <code>Any</code>, slices: <code>Any</code>, entity_info_list: <code>Any</code>, cluster_image: <code>Any</code>, items_image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.cut(camera: <code>Entity</code>, to_camera: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.blend(camera: <code>Entity</code>, from_camera: <code>Entity</code>, to_camera: <code>Entity</code>, t: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.blend(camera: <code>Entity</code>, to_camera: <code>Entity</code>, t: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/camera.modifier/#cameraprojection","title":"CameraProjection","text":"<p><code>import \"luxe: system/camera.modifier\" for CameraProjection</code></p> <p>no docs found</p> <ul> <li>ortho</li> <li>perspective</li> <li>custom</li> </ul> <p> CameraProjection.ortho \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CameraProjection.perspective \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CameraProjection.custom \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/camera.modifier/#cameraviewtype","title":"CameraViewType","text":"<p><code>import \"luxe: system/camera.modifier\" for CameraViewType</code></p> <p>no docs found</p> <ul> <li>view_2D</li> <li>view_3D</li> <li>custom</li> </ul> <p> CameraViewType.view_2D \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CameraViewType.view_3D \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CameraViewType.custom \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/camera.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/camera.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var align_to_view : Num = 0</code></li> <li><code>var kind : CameraViewType = CameraViewType.view_2D</code></li> <li><code>var offset : Float2 = [0, 0]</code></li> <li><code>var size : Float2 = [0, 0]</code></li> <li><code>var near_2d : Num = -2000</code></li> <li><code>var far_2d : Num = 2000</code></li> <li><code>var zoom : Num = 1</code></li> <li><code>var fov_vertical : Num = 60</code></li> <li><code>var aspect : Num = 0</code></li> <li><code>var near_3d : Num = 0.1</code></li> <li><code>var far_3d : Num = 100</code></li> <li><code>var default : Bool = false</code></li> <li><code>var debug_draw : Bool = false</code></li> <li><code>var debug_color : Color = [0.965, 0, 0.486, 1]</code></li> <li><code>var debug_thickness : Num = 1</code></li> </ul>"},{"location":"api/v/2024.12.3/system/camera.modifier/#perentityinfo","title":"PerEntityInfo","text":"<p><code>import \"luxe: system/camera.modifier\" for PerEntityInfo</code></p> <p>no docs found</p> <ul> <li><code>var entity : Num = 0</code></li> <li><code>var window : Any = null</code></li> <li><code>var preview : Any = null</code></li> <li><code>var world_edit : Any = null</code></li> <li>new(in_entity: <code>Any</code>)</li> <li>destroy()</li> <li>show(state: <code>Bool</code>)</li> <li>update()</li> </ul> <p> PerEntityInfo.new(in_entity: <code>Any</code>) \u00b6 returns <code>PerEntityInfo</code></p> <p>no docs found   </p> <p> PerEntityInfo.destroy() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PerEntityInfo.show(state: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PerEntityInfo.update() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/camera.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/camera.modifier\" for System</code></p> <p>no docs found</p> <ul> <li><code>var draw : Draw = null</code></li> <li><code>var style : null = PathStyle.new</code></li> <li><code>var window : Any = null</code></li> <li><code>var preview : Any = null</code></li> <li><code>var world_edit : Any = null</code></li> <li><code>var current_selection : PerEntityInfo = null</code></li> <li>new(world: <code>World</code>)</li> <li>editor_init(world: <code>World</code>)</li> <li>init(world: <code>World</code>)</li> <li>editor_attach(entity: <code>Entity</code>, data: <code>Data</code>)</li> <li>editor_detach(entity: <code>Entity</code>, data: <code>Data</code>)</li> <li>tick(delta: <code>Num</code>)</li> <li>editor_change(entity: <code>Entity</code>, change: <code>ModifierChange</code>)</li> <li>editor_tick(delta: <code>Num</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p> <p> System.editor_init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.editor_attach(entity: <code>Entity</code>, data: <code>Data</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.editor_detach(entity: <code>Entity</code>, data: <code>Data</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.tick(delta: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.editor_change(entity: <code>Entity</code>, change: <code>ModifierChange</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.editor_tick(delta: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/mesh.modifier/","title":"Mesh.modifier","text":""},{"location":"api/v/2024.12.3/system/mesh.modifier/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/system/mesh.modifier/#luxe-systemmeshmodifier-module","title":"<code>luxe: system/mesh.modifier</code> module","text":"<ul> <li>Data </li> <li>InstancedMode </li> <li>Mesh </li> <li>System </li> </ul>"},{"location":"api/v/2024.12.3/system/mesh.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/mesh.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var mesh : Asset = null</code></li> <li><code>var material : Asset = null</code></li> <li><code>var instanced : InstancedMode = InstancedMode.none</code></li> <li><code>var own_materials : Bool = false</code></li> </ul>"},{"location":"api/v/2024.12.3/system/mesh.modifier/#instancedmode","title":"InstancedMode","text":"<p><code>import \"luxe: system/mesh.modifier\" for InstancedMode</code></p> <p>no docs found</p> <ul> <li>none</li> <li>group_auto</li> <li>group_custom</li> </ul> <p> InstancedMode.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InstancedMode.group_auto \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InstancedMode.group_custom \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/mesh.modifier/#mesh","title":"Mesh","text":"<p><code>import \"luxe: system/mesh.modifier\" for Mesh</code></p> <p>no docs found</p> <ul> <li>create(entity: <code>Entity</code>)</li> <li>create(entity: <code>Entity</code>, material: <code>Material</code>, mesh_lx: <code>String</code>)</li> <li>destroy(entity: <code>Entity</code>)</li> <li>set_instanced_auto_units(world: <code>World</code>, grid_units_cell_size: <code>Num</code>)</li> <li>get_instanced_auto_units(world: <code>World</code>)</li> <li>has(entity: <code>Entity</code>)</li> <li>clear(entity: <code>Entity</code>)</li> <li>level_get_element_count(entity: <code>Entity</code>, level: <code>Num</code>)</li> <li>level_get_count(entity: <code>Entity</code>)</li> <li>level_set_active(entity: <code>Entity</code>, level: <code>Num</code>, disable_current: <code>Bool</code>)</li> <li>level_get_active(entity: <code>Entity</code>)</li> <li>level_set_enabled(entity: <code>Entity</code>, level: <code>Num</code>, state: <code>Bool</code>)</li> <li>level_get_enabled(entity: <code>Entity</code>, level: <code>Num</code>)</li> <li>set_asset(entity: <code>Entity</code>, asset_id: <code>String</code>)</li> <li>set_instanced_group(entity: <code>Entity</code>, group_id: <code>String</code>)</li> <li>get_instanced_group(entity: <code>Entity</code>)</li> <li>set_instanced(entity: <code>Entity</code>, state: <code>Bool</code>)</li> <li>get_instanced(entity: <code>Entity</code>)</li> <li>get_source_id(entity: <code>Entity</code>)</li> <li>get_default_material(entity: <code>Entity</code>)</li> <li>set_default_material(entity: <code>Entity</code>, material: <code>Material</code>)</li> <li>get_geometry(entity: <code>Entity</code>, level: <code>Num</code>, element: <code>Num</code>)</li> <li>get_geometry(entity: <code>Entity</code>)</li> <li>obb_intersect_ray(entity: <code>Entity</code>, ray_x: <code>Num</code>, ray_y: <code>Num</code>, ray_z: <code>Num</code>, ray_dir_x: <code>Num</code>, ray_dir_y: <code>Num</code>, ray_dir_z: <code>Num</code>)</li> </ul> <p> Mesh.create(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Mesh.create(entity: <code>Entity</code>, material: <code>Material</code>, mesh_lx: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Mesh.destroy(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Mesh.set_instanced_auto_units(world: <code>World</code>, grid_units_cell_size: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Mesh.get_instanced_auto_units(world: <code>World</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Mesh.has(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Mesh.clear(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.level_get_element_count(entity: <code>Entity</code>, level: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.level_get_count(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.level_set_active(entity: <code>Entity</code>, level: <code>Num</code>, disable_current: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.level_get_active(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.level_set_enabled(entity: <code>Entity</code>, level: <code>Num</code>, state: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.level_get_enabled(entity: <code>Entity</code>, level: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.set_asset(entity: <code>Entity</code>, asset_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.set_instanced_group(entity: <code>Entity</code>, group_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.get_instanced_group(entity: <code>Entity</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Mesh.set_instanced(entity: <code>Entity</code>, state: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.get_instanced(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Mesh.get_source_id(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.get_default_material(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.set_default_material(entity: <code>Entity</code>, material: <code>Material</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.get_geometry(entity: <code>Entity</code>, level: <code>Num</code>, element: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.get_geometry(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.obb_intersect_ray(entity: <code>Entity</code>, ray_x: <code>Num</code>, ray_y: <code>Num</code>, ray_z: <code>Num</code>, ray_dir_x: <code>Num</code>, ray_dir_y: <code>Num</code>, ray_dir_z: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/mesh.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/mesh.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/nav.modifier/","title":"Nav.modifier","text":""},{"location":"api/v/2024.12.3/system/nav.modifier/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/system/nav.modifier/#luxe-systemnavmodifier-module","title":"<code>luxe: system/nav.modifier</code> module","text":"<ul> <li>Data </li> <li>Nav </li> <li>Partition </li> <li>System </li> </ul>"},{"location":"api/v/2024.12.3/system/nav.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/nav.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var rebuild : Num = 1</code></li> <li><code>var mesh : Asset = null</code></li> <li><code>var tile_size : Num = 32</code></li> <li><code>var cell_size : Num = 0.3</code></li> <li><code>var cell_height : Num = 0.2</code></li> <li><code>var height : Num = 2</code></li> <li><code>var radius : Num = 0.6</code></li> <li><code>var max_climb : Num = 0.9</code></li> <li><code>var max_slope : Num = 45</code></li> <li><code>var min_region_size : Num = 8</code></li> <li><code>var merged_region_size : Num = 20</code></li> <li><code>var max_edge_length : Num = 12</code></li> <li><code>var max_edge_error : Num = 1.3</code></li> <li><code>var verts_per_poly : Num = 6</code></li> <li><code>var detail_sample_distance : Num = 6</code></li> <li><code>var detail_sample_max_error : Num = 1</code></li> <li><code>var partition : Partition = Partition.watershed</code></li> <li><code>var no_low_hanging : Bool = true</code></li> <li><code>var no_ledge_spans : Bool = true</code></li> <li><code>var no_walkable_low_spans : Bool = true</code></li> <li><code>var debug_draw : Bool = false</code></li> <li><code>var keep_debug_data : Bool = false</code></li> </ul>"},{"location":"api/v/2024.12.3/system/nav.modifier/#nav","title":"Nav","text":"<p><code>import \"luxe: system/nav.modifier\" for Nav</code></p> <p>no docs found</p> <ul> <li>raycast(entity: <code>Entity</code>, start: <code>Float3</code>, end: <code>Float3</code>, extents: <code>Float3</code>)</li> <li>nearest_point(entity: <code>Entity</code>, start: <code>Float3</code>, extents: <code>Float3</code>)</li> <li>get_path(entity: <code>Entity</code>, start: <code>Float3</code>, end: <code>Float3</code>, extents: <code>Float3</code>)</li> </ul> <p> Nav.raycast(entity: <code>Entity</code>, start: <code>Float3</code>, end: <code>Float3</code>, extents: <code>Float3</code>) \u00b6 returns <code>Float3</code></p> <p>no docs found   </p> <p> Nav.nearest_point(entity: <code>Entity</code>, start: <code>Float3</code>, extents: <code>Float3</code>) \u00b6 returns <code>Float3</code></p> <p>no docs found   </p> <p> Nav.get_path(entity: <code>Entity</code>, start: <code>Float3</code>, end: <code>Float3</code>, extents: <code>Float3</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/nav.modifier/#partition","title":"Partition","text":"<p><code>import \"luxe: system/nav.modifier\" for Partition</code></p> <p>no docs found</p> <ul> <li>watershed</li> <li>monotone</li> <li>layers</li> </ul> <p> Partition.watershed \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Partition.monotone \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Partition.layers \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/nav.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/nav.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/skeleton.modifier/","title":"Skeleton.modifier","text":""},{"location":"api/v/2024.12.3/system/skeleton.modifier/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/system/skeleton.modifier/#luxe-systemskeletonmodifier-module","title":"<code>luxe: system/skeleton.modifier</code> module","text":"<ul> <li>Data </li> <li>Skeleton </li> <li>System </li> </ul>"},{"location":"api/v/2024.12.3/system/skeleton.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/skeleton.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var skeleton : Asset = null</code></li> <li><code>var draw_skeleton : Bool = false</code></li> </ul>"},{"location":"api/v/2024.12.3/system/skeleton.modifier/#skeleton","title":"Skeleton","text":"<p><code>import \"luxe: system/skeleton.modifier\" for Skeleton</code></p> <p>no docs found</p> <ul> <li>has(entity: <code>Entity</code>)</li> <li>set_pose(entity: <code>Entity</code>, pose: <code>Pose</code>)</li> <li>get_pose(entity: <code>Entity</code>)</li> <li>get_skeleton(entity: <code>Entity</code>)</li> </ul> <p> Skeleton.has(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Skeleton.set_pose(entity: <code>Entity</code>, pose: <code>Pose</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Skeleton.get_pose(entity: <code>Entity</code>) \u00b6 returns <code>Pose</code></p> <p>no docs found   </p> <p> Skeleton.get_skeleton(entity: <code>Entity</code>) \u00b6 returns <code>Skeleton</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/skeleton.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/skeleton.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/skin.modifier/","title":"Skin.modifier","text":""},{"location":"api/v/2024.12.3/system/skin.modifier/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/system/skin.modifier/#luxe-systemskinmodifier-module","title":"<code>luxe: system/skin.modifier</code> module","text":"<ul> <li>Data </li> <li>Skin </li> <li>System </li> </ul>"},{"location":"api/v/2024.12.3/system/skin.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/skin.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var mesh_entity : Link = null</code></li> <li><code>var skeleton_entity : Link = null</code></li> </ul>"},{"location":"api/v/2024.12.3/system/skin.modifier/#skin","title":"Skin","text":"<p><code>import \"luxe: system/skin.modifier\" for Skin</code></p> <p>no docs found</p>"},{"location":"api/v/2024.12.3/system/skin.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/skin.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/sound.modifier/","title":"Sound.modifier","text":""},{"location":"api/v/2024.12.3/system/sound.modifier/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/system/sound.modifier/#luxe-systemsoundmodifier-module","title":"<code>luxe: system/sound.modifier</code> module","text":"<ul> <li>Data </li> <li>Sound </li> <li>SoundAttenuation </li> <li>System </li> </ul>"},{"location":"api/v/2024.12.3/system/sound.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/sound.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var source : Asset = null</code></li> <li><code>var bus : Asset = null</code></li> <li><code>var volume : Num = -1</code></li> <li><code>var pan : Num = 0</code></li> <li><code>var pitch : Num = 1</code></li> <li><code>var looping : Bool = false</code></li> <li><code>var world_space : Bool = false</code></li> <li><code>var debug_draw : Bool = true</code></li> <li><code>var attenuation : SoundAttenuation = SoundAttenuation.none</code></li> <li><code>var range : Float2 = [1, 10]</code></li> <li><code>var rolloff : Num = 1</code></li> <li><code>var simulate_doppler : Bool = false</code></li> <li><code>var doppler_factor : Num = 1</code></li> </ul>"},{"location":"api/v/2024.12.3/system/sound.modifier/#sound","title":"Sound","text":"<p><code>import \"luxe: system/sound.modifier\" for Sound</code></p> <p>no docs found</p>"},{"location":"api/v/2024.12.3/system/sound.modifier/#soundattenuation","title":"SoundAttenuation","text":"<p><code>import \"luxe: system/sound.modifier\" for SoundAttenuation</code></p> <p>no docs found</p> <ul> <li>none</li> <li>inverse_distance</li> <li>linear_distance</li> <li>exponential_distance</li> </ul> <p> SoundAttenuation.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SoundAttenuation.inverse_distance \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SoundAttenuation.linear_distance \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SoundAttenuation.exponential_distance \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/sound.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/sound.modifier\" for System</code></p> <p>no docs found</p> <ul> <li><code>var draw : Draw = null</code></li> <li><code>var style : null = PathStyle.new</code></li> <li><code>var last_pos : Map = {}</code></li> <li>new(world: <code>World</code>)</li> <li>init(world: <code>World</code>)</li> <li>editor_init(world: <code>World</code>)</li> <li>attach(entity: <code>Entity</code>, data: <code>Data</code>)</li> <li>detach(entity: <code>Entity</code>, data: <code>Data</code>)</li> <li>get_attenuation(attn: <code>SoundAttenuation</code>)</li> <li>tick(delta: <code>Num</code>)</li> <li>draw(entity: <code>Entity</code>, data: <code>Data</code>)</li> <li>editor_change(entity: <code>Entity</code>, change: <code>ModifierChange</code>)</li> <li>editor_tick(delta: <code>Num</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p> <p> System.init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.editor_init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.attach(entity: <code>Entity</code>, data: <code>Data</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.detach(entity: <code>Entity</code>, data: <code>Data</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.get_attenuation(attn: <code>SoundAttenuation</code>) \u00b6 returns <code>AudioAttenuation</code></p> <p>no docs found   </p> <p> System.tick(delta: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.draw(entity: <code>Entity</code>, data: <code>Data</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.editor_change(entity: <code>Entity</code>, change: <code>ModifierChange</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.editor_tick(delta: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/sprite.modifier/","title":"Sprite.modifier","text":""},{"location":"api/v/2024.12.3/system/sprite.modifier/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/system/sprite.modifier/#luxe-systemspritemodifier-module","title":"<code>luxe: system/sprite.modifier</code> module","text":"<ul> <li>Advanced </li> <li>Data </li> <li>Dissolve </li> <li>HSV </li> <li>Outline </li> <li>Shadow </li> <li>Shine </li> <li>Sprite </li> <li>SpriteBillboard </li> <li>System </li> </ul>"},{"location":"api/v/2024.12.3/system/sprite.modifier/#advanced","title":"Advanced","text":"<p><code>import \"luxe: system/sprite.modifier\" for Advanced</code></p> <p>no docs found</p> <ul> <li><code>var auto_size : Bool = true</code></li> <li><code>var material_input : String = \"sprite.image\"</code></li> <li><code>var HSV : HSV = Object</code></li> <li><code>var outline : Outline = Object</code></li> <li><code>var shadow : Shadow = Object</code></li> <li><code>var dissolve : Dissolve = Object</code></li> <li><code>var shine : Shine = Object</code></li> </ul>"},{"location":"api/v/2024.12.3/system/sprite.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/sprite.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var image : Asset = \"luxe: image/logo\"</code></li> <li><code>var size : Float2 = [64, 64]</code></li> <li><code>var origin : Float2 = [0.5, 0.5]</code></li> <li><code>var skew : Float2 = [0, 0]</code></li> <li><code>var color : Color = [1, 1, 1, 1]</code></li> <li><code>var uv : Float4 = [0, 0, 1, 1]</code></li> <li><code>var flip_x : Bool = false</code></li> <li><code>var flip_y : Bool = false</code></li> <li><code>var pixelated : Bool = false</code></li> <li><code>var billboard : SpriteBillboard = SpriteBillboard.none</code></li> <li><code>var billboard_lock : Float3 = [0, 0, 0]</code></li> <li><code>var atlas : Asset = null</code></li> <li><code>var atlas_image_id : String = null</code></li> <li><code>var material : Asset = null</code></li> <li><code>var advanced : Advanced = Object</code></li> </ul>"},{"location":"api/v/2024.12.3/system/sprite.modifier/#dissolve","title":"Dissolve","text":"<p><code>import \"luxe: system/sprite.modifier\" for Dissolve</code></p> <p>no docs found</p> <ul> <li><code>var enabled : Bool = false</code></li> <li><code>var image : Asset = null</code></li> <li><code>var uv : Float4 = [0, 0, 1, 1]</code></li> <li><code>var value : Num = 1</code></li> </ul>"},{"location":"api/v/2024.12.3/system/sprite.modifier/#hsv","title":"HSV","text":"<p><code>import \"luxe: system/sprite.modifier\" for HSV</code></p> <p>no docs found</p> <ul> <li><code>var enabled : Bool = false</code></li> <li><code>var hue_change : Num = 0</code></li> <li><code>var saturation : Num = 1</code></li> <li><code>var value : Num = 1</code></li> </ul>"},{"location":"api/v/2024.12.3/system/sprite.modifier/#outline","title":"Outline","text":"<p><code>import \"luxe: system/sprite.modifier\" for Outline</code></p> <p>no docs found</p> <ul> <li><code>var enabled : Bool = false</code></li> <li><code>var color : Color = [1, 1, 1, 1]</code></li> <li><code>var thickness : Num = 0</code></li> </ul>"},{"location":"api/v/2024.12.3/system/sprite.modifier/#shadow","title":"Shadow","text":"<p><code>import \"luxe: system/sprite.modifier\" for Shadow</code></p> <p>no docs found</p> <ul> <li><code>var enabled : Bool = false</code></li> <li><code>var offset : Float2 = [0, 0]</code></li> <li><code>var color : Color = [0, 0, 0, 1]</code></li> <li><code>var softness : Num = 0</code></li> </ul>"},{"location":"api/v/2024.12.3/system/sprite.modifier/#shine","title":"Shine","text":"<p><code>import \"luxe: system/sprite.modifier\" for Shine</code></p> <p>no docs found</p> <ul> <li><code>var enabled : Bool = false</code></li> <li><code>var color : Color = [1, 0.92, 0.16, 1]</code></li> <li><code>var direction : Float2 = [0, 0]</code></li> <li><code>var width : Num = 0</code></li> <li><code>var speed : Num = 0</code></li> <li><code>var spacing : Num = 0</code></li> </ul>"},{"location":"api/v/2024.12.3/system/sprite.modifier/#sprite","title":"Sprite","text":"<p><code>import \"luxe: system/sprite.modifier\" for Sprite</code></p> <p>A sprite is an image attached to an entity.  The <code>Sprite</code> modifier provides flipping, sizing, sub images and more. To attach a sprite to an entity, call <code>Sprite.create</code>:</p> <pre><code>var entity = Entity.create(world)\nvar material = Assets.material(\"luxe: material/logo\")\nSprite.create(entity, material, 128, 128)\n</code></pre> <ul> <li>create(entity: <code>Entity</code>, image: <code>Image</code>, width: <code>Num</code>, height: <code>Num</code>)</li> <li>create(entity: <code>Entity</code>, image: <code>Image</code>)</li> <li>create(entity: <code>Entity</code>)</li> <li>create_with(entity: <code>Entity</code>, material: <code>Material</code>, width: <code>Num</code>, height: <code>Num</code>)</li> <li>create_with(entity: <code>Entity</code>, material: <code>Material</code>)</li> <li>create(entity: <code>Entity</code>, atlas: <code>Atlas</code>, atlas_image: <code>String</code>)</li> <li>destroy(entity: <code>Entity</code>)</li> <li>has(entity: <code>Entity</code>)</li> <li>contains(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>set_material(entity: <code>Entity</code>, material: <code>Material</code>)</li> <li>get_material(entity: <code>Entity</code>)</li> <li>set_image(entity: <code>Entity</code>, image: <code>Image</code>)</li> <li>get_image(entity: <code>Entity</code>)</li> <li>set_origin(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>get_origin(entity: <code>Entity</code>)</li> <li>set_flip_h(entity: <code>Entity</code>, flipped: <code>Bool</code>)</li> <li>get_flip_h(entity: <code>Entity</code>)</li> <li>set_flip_v(entity: <code>Entity</code>, flipped: <code>Bool</code>)</li> <li>get_flip_v(entity: <code>Entity</code>)</li> <li>set_billboard(entity: <code>Entity</code>, kind: <code>SpriteBillboard</code>, lock: <code>Float3</code>)</li> <li>get_billboard(entity: <code>Entity</code>)</li> <li>set_size(entity: <code>Entity</code>, width: <code>Num</code>, height: <code>Num</code>)</li> <li>set_width(entity: <code>Entity</code>, width: <code>Num</code>)</li> <li>get_width(entity: <code>Entity</code>)</li> <li>set_height(entity: <code>Entity</code>, height: <code>Num</code>)</li> <li>get_height(entity: <code>Entity</code>)</li> <li>set_alpha(entity: <code>Entity</code>, alpha: <code>Num</code>)</li> <li>get_alpha(entity: <code>Entity</code>)</li> <li>set_color(entity: <code>Entity</code>, color: <code>Color</code>)</li> <li>set_color(entity: <code>Entity</code>, r: <code>Num</code>, g: <code>Num</code>, b: <code>Num</code>, a: <code>Num</code>)</li> <li>get_color(entity: <code>Entity</code>)</li> <li>set_uv(entity: <code>Entity</code>, x0: <code>Num</code>, y0: <code>Num</code>, x1: <code>Num</code>, y1: <code>Num</code>)</li> <li>get_uv(entity: <code>Entity</code>)</li> <li>set_skew(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>get_skew(entity: <code>Entity</code>)</li> <li>get_geometry(entity: <code>Entity</code>)</li> <li>set_geometry(entity: <code>Entity</code>, geo: <code>Geometry</code>)</li> <li>get_auto_size(entity: <code>Entity</code>)</li> <li>set_auto_size(entity: <code>Entity</code>, value: <code>Bool</code>)</li> <li>get_material_input(entity: <code>Entity</code>)</li> <li>set_material_input(entity: <code>Entity</code>, value: <code>Bool</code>)</li> <li>get_hsv_adjust(entity: <code>Entity</code>)</li> <li>set_hsv_adjust(entity: <code>Entity</code>, enabled: <code>Bool</code>, hue_change: <code>Num</code>, saturation: <code>Num</code>, value: <code>Num</code>)</li> <li>set_effect_HSV_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>)</li> <li>get_effect_HSV_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>)</li> <li>set_effect_HSV_hue_change(entity: <code>Entity</code>, hue_change: <code>Num</code>)</li> <li>get_effect_HSV_hue_change(entity: <code>Entity</code>, hue_change: <code>Num</code>)</li> <li>set_effect_HSV_saturation(entity: <code>Entity</code>, saturation: <code>Num</code>)</li> <li>get_effect_HSV_saturation(entity: <code>Entity</code>, saturation: <code>Num</code>)</li> <li>set_effect_HSV_value(entity: <code>Entity</code>, value: <code>Num</code>)</li> <li>get_effect_HSV_value(entity: <code>Entity</code>, value: <code>Num</code>)</li> <li>get_outline(entity: <code>Entity</code>)</li> <li>set_outline(entity: <code>Entity</code>, enabled: <code>Bool</code>, color: <code>Color</code>, thickness: <code>Num</code>)</li> <li>set_effect_outline_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>)</li> <li>get_effect_outline_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>)</li> <li>set_effect_outline_color(entity: <code>Entity</code>, color: <code>Color</code>)</li> <li>get_effect_outline_color(entity: <code>Entity</code>, color: <code>Color</code>)</li> <li>set_effect_outline_thickness(entity: <code>Entity</code>, thickness: <code>Num</code>)</li> <li>get_effect_outline_thickness(entity: <code>Entity</code>, thickness: <code>Num</code>)</li> <li>get_shadow(entity: <code>Entity</code>)</li> <li>set_shadow(entity: <code>Entity</code>, enabled: <code>Bool</code>, offset: <code>Num</code>, color: <code>Color</code>, softness: <code>Num</code>)</li> <li>set_effect_shadow_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>)</li> <li>get_effect_shadow_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>)</li> <li>set_effect_shadow_offset(entity: <code>Entity</code>, offset: <code>Vector2</code>)</li> <li>get_effect_shadow_offset(entity: <code>Entity</code>, offset: <code>Vector2</code>)</li> <li>set_effect_shadow_color(entity: <code>Entity</code>, color: <code>Color</code>)</li> <li>get_effect_shadow_color(entity: <code>Entity</code>, color: <code>Color</code>)</li> <li>get_dissolve(entity: <code>Entity</code>)</li> <li>set_dissolve(entity: <code>Entity</code>, enabled: <code>Bool</code>, image: <code>Image</code>, uv: <code>List</code>, value: <code>Num</code>)</li> <li>set_effect_dissolve_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>)</li> <li>get_effect_dissolve_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>)</li> <li>set_effect_dissolve_image(entity: <code>Entity</code>, image: <code>Image</code>)</li> <li>get_effect_dissolve_image(entity: <code>Entity</code>, image: <code>Image</code>)</li> <li>set_effect_dissolve_uv(entity: <code>Entity</code>, uv: <code>Vector4</code>)</li> <li>get_effect_dissolve_uv(entity: <code>Entity</code>, uv: <code>Vector4</code>)</li> <li>set_effect_dissolve_value(entity: <code>Entity</code>, value: <code>Num</code>)</li> <li>get_effect_dissolve_value(entity: <code>Entity</code>, value: <code>Num</code>)</li> <li>get_shine(entity: <code>Entity</code>)</li> <li>set_shine(entity: <code>Entity</code>, enabled: <code>Bool</code>, color: <code>Num</code>, direction: <code>Vector2</code>, width: <code>Num</code>, speed: <code>Num</code>, spacing: <code>Num</code>)</li> <li>set_effect_shine_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>)</li> <li>get_effect_shine_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>)</li> <li>set_effect_shine_color(entity: <code>Entity</code>, color: <code>Color</code>)</li> <li>get_effect_shine_color(entity: <code>Entity</code>, color: <code>Color</code>)</li> <li>set_effect_shine_direction(entity: <code>Entity</code>, direction: <code>Vector2</code>)</li> <li>get_effect_shine_direction(entity: <code>Entity</code>, direction: <code>Vector2</code>)</li> <li>set_effect_shine_width(entity: <code>Entity</code>, width: <code>Num</code>)</li> <li>get_effect_shine_width(entity: <code>Entity</code>, width: <code>Num</code>)</li> <li>set_effect_shine_speed(entity: <code>Entity</code>, speed: <code>Num</code>)</li> <li>get_effect_shine_speed(entity: <code>Entity</code>, speed: <code>Num</code>)</li> <li>set_effect_shine_spacing(entity: <code>Entity</code>, spacing: <code>Num</code>)</li> <li>get_effect_shine_spacing(entity: <code>Entity</code>, spacing: <code>Num</code>)</li> </ul> <p> Sprite.create(entity: <code>Entity</code>, image: <code>Image</code>, width: <code>Num</code>, height: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Attach a <code>Sprite</code> modifier to <code>entity</code>, drawn using <code>image</code>, with a given size of <code>width</code>x<code>height</code>.</p> <pre><code>var entity = Entity.create(world)\nvar image = Assets.image(\"luxe: image/logo\")\nSprite.create(entity, material, 128, 128)\n</code></pre> <p> Sprite.create(entity: <code>Entity</code>, image: <code>Image</code>) \u00b6 returns <code>None</code></p> <p>Attach a <code>Sprite</code> modifier to <code>entity</code>, drawn using <code>image</code>. The size of the sprite will be determined by the size of the image.</p> <pre><code>var entity = Entity.create(world)\nvar image = Assets.image(\"luxe: image/logo\")\nSprite.create(entity, image)\n</code></pre> <p> Sprite.create(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Attach a <code>Sprite</code> modifier to <code>entity</code>, drawn using a default <code>image</code>. Use <code>Sprite.set_image</code> or <code>Sprite.set_material</code> to change it later.</p> <pre><code>var entity = Entity.create(world)\nSprite.create(entity)\n</code></pre> <p> Sprite.create_with(entity: <code>Entity</code>, material: <code>Material</code>, width: <code>Num</code>, height: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Attach a <code>Sprite</code> modifier to <code>entity</code>, drawn using <code>material</code>, with a size of <code>width</code>x<code>height</code>.</p> <pre><code>var entity = Entity.create(world)\nvar material = Assets.material(\"luxe: material/logo\")\nSprite.create_with(entity, material, 128, 128)\n</code></pre> <p> Sprite.create_with(entity: <code>Entity</code>, material: <code>Material</code>) \u00b6 returns <code>None</code></p> <p>Attach a <code>Sprite</code> modifier to <code>entity</code>, drawn using <code>material</code>. The size of the sprite will be determined by the <code>sprite.image</code> slot in the material.</p> <pre><code>var entity = Entity.create(world)\nvar material = Assets.material(\"luxe: material/logo\")\nSprite.create(entity, material)\n</code></pre> <p> Sprite.create(entity: <code>Entity</code>, atlas: <code>Atlas</code>, atlas_image: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Attach a <code>Sprite</code> modifier to <code>entity</code>, drawn using the <code>atlas</code>,  using the image name in the atlas as <code>atlas_image</code>, with a size defined by the image in the atlas.</p> <pre><code>var entity = Entity.create(world)\nvar atlas = Assets.atlas(\"atlas/example\")\nvar image_name = \"images/atlas/example/tree\"\nSprite.create(entity, atlas, image_name)\n</code></pre> <p> Sprite.destroy(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Detach and destroy the <code>Sprite</code> attached to <code>entity</code></p> <pre><code>Sprite.destroy(entity)\n</code></pre> <p> Sprite.has(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if <code>entity</code> has a <code>Sprite</code> modifier attached.</p> <pre><code>if(Sprite.has(entity)) {\n  Log.print(\"found sprite\")\n}\n</code></pre> <p> Sprite.contains(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if the <code>Sprite</code> attached to <code>entity</code> contains the point at <code>x</code>,<code>y</code> (in world units). Note that the function is based on the sprite <code>width</code> and <code>height</code>, it is not pixel perfect.</p> <pre><code>//Convert mouse coords to world units\nvar pos = Camera.screen_point_to_world(\n    app.camera,\n    Input.mouse_x(),\n    Input.mouse_y())\n//Check if point is inside the sprite\nif(Sprite.contains(entity, pos.x, pos.y)) {\n  Log.print(\"mouse inside sprite!\")\n}\n</code></pre> <p> Sprite.set_material(entity: <code>Entity</code>, material: <code>Material</code>) \u00b6 returns <code>None</code></p> <p>Change the material that the <code>Sprite</code> attached to <code>entity</code> is drawn with, so it will draw with <code>material</code> instead.</p> <pre><code>var material = Assets.material(\"luxe: material/logo.sprite\")\nSprite.set_material(entity, material)\n</code></pre> <p> Sprite.get_material(entity: <code>Entity</code>) \u00b6 returns <code>Material</code></p> <p>Returns the current material that the <code>Sprite</code> attached to <code>entity</code> is drawn with.</p> <pre><code>var material = Sprite.get_material(entity)\n</code></pre> <p> Sprite.set_image(entity: <code>Entity</code>, image: <code>Image</code>) \u00b6 returns <code>None</code></p> <p>Change the image that the <code>Sprite</code> attached to <code>entity</code> is drawn with.</p> <pre><code>var image = Assets.image(\"luxe: image/logo.sprite\")\nSprite.set_image(entity, image)\n</code></pre> <p> Sprite.get_image(entity: <code>Entity</code>) \u00b6 returns <code>Image</code></p> <p>Returns the current image that the <code>Sprite</code> attached to <code>entity</code> is drawn with.</p> <pre><code>var image = Sprite.get_image(entity)\n</code></pre> <p> Sprite.set_origin(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Sets the origin of the sprite in relation to the <code>Transform</code> on <code>entity</code>. The <code>x</code> and <code>y</code> values are <code>0...1</code> range, where <code>0, 0</code> is bottom left, and <code>1, 1</code> is top right. A centered sprite is <code>0.5, 0.5</code>. To set the origin to the center, bottom you'd use <code>0.5, 0</code>.</p> <pre><code>//centered\nSprite.set_origin(entity, 0.5, 0.5)\n//bottom left\nSprite.set_origin(entity, 0, 0)\n//bottom center\nSprite.set_origin(entity, 0.5, 0)\n</code></pre> <p> Sprite.get_origin(entity: <code>Entity</code>) \u00b6 returns <code>Float2</code></p> <p>Returns the current origin for the Sprite attached to <code>entity</code>.</p> <pre><code>var origin = Sprite.get_origin(entity)\nLog.print(origin) //[0.5, 0.5]\n</code></pre> <p> Sprite.set_flip_h(entity: <code>Entity</code>, flipped: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set whether the <code>Sprite</code> attached to <code>entity</code> is <code>flipped</code> horizontally.</p> <pre><code>Sprite.set_flip_h(entity, true)\n</code></pre> <p> Sprite.get_flip_h(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if the <code>Sprite</code> attached to <code>entity</code> is flipped horizontally.</p> <pre><code>var flipped = Sprite.get_flip_h(entity)\n</code></pre> <p> Sprite.set_flip_v(entity: <code>Entity</code>, flipped: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set whether the <code>Sprite</code> attached to <code>entity</code> is <code>flipped</code> vertically.</p> <pre><code>Sprite.set_flip_v(entity, true)\n</code></pre> <p> Sprite.get_flip_v(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if the <code>Sprite</code> attached to <code>entity</code> is flipped vertically.</p> <pre><code>var flipped = Sprite.get_flip_v(entity)\n</code></pre> <p> Sprite.set_billboard(entity: <code>Entity</code>, kind: <code>SpriteBillboard</code>, lock: <code>Float3</code>) \u00b6 returns <code>None</code></p> <p>Set how the <code>Sprite</code> attached to <code>entity</code> behaves as a <code>billboard</code> sprite. The lock field is 0 for unlocked rotation, 1 for locked rotation on that axis.</p> <pre><code>Sprite.set_billboard(entity, SpriteBillboard.fixed_scale, [0,1,0])\n</code></pre> <p> Sprite.get_billboard(entity: <code>Entity</code>) \u00b6 returns <code>SpriteBillboard</code></p> <p>Get how the <code>Sprite</code> attached to <code>entity</code> behaves as a <code>billboard</code> sprite.</p> <pre><code>var kind = Sprite.get_billboard(entity)\nif(kind == SpriteBillboard.fixed_scale) { ... }\n</code></pre> <p> Sprite.set_size(entity: <code>Entity</code>, width: <code>Num</code>, height: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Resize the <code>Sprite</code> attached to <code>entity</code> to be <code>width</code>x<code>height</code>.</p> <pre><code>Sprite.set_size(entity, 256, 256)\n</code></pre> <p> Sprite.set_width(entity: <code>Entity</code>, width: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Resize the <code>Sprite</code> attached to <code>entity</code> to have a new <code>width</code>.</p> <pre><code>Sprite.set_width(entity, 64)\n</code></pre> <p> Sprite.get_width(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>Returns the width of the <code>Sprite</code> attached to <code>entity</code>.</p> <pre><code>var width = Sprite.get_width(entity)\n</code></pre> <p> Sprite.set_height(entity: <code>Entity</code>, height: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Resize the <code>Sprite</code> attached to <code>entity</code> to have a new <code>height</code>.</p> <pre><code>Sprite.set_height(entity, 64)\n</code></pre> <p> Sprite.get_height(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>Returns the height of the <code>Sprite</code> attached to <code>entity</code>.</p> <pre><code>var height = Sprite.get_height(entity)\n</code></pre> <p> Sprite.set_alpha(entity: <code>Entity</code>, alpha: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Change the alpha (transparency) of the <code>Sprite</code> attached to <code>entity</code> to be <code>alpha</code>. Modifies the color.</p> <pre><code>Sprite.set_alpha(entity, 0.5)\n</code></pre> <p> Sprite.get_alpha(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>Returns the current alpha of the <code>Sprite</code> attached to <code>entity</code>.</p> <pre><code>var a = Sprite.get_alpha(entity)\n</code></pre> <p> Sprite.set_color(entity: <code>Entity</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>Set the color of the <code>Sprite</code> attached to <code>entity</code> to be a color.  The default color is white, <code>[1, 1, 1, 1]</code>, so to undo a color change, set it to that.</p> <pre><code>var color = Color.hex(0xf6007c)\nSprite.set_color(entity, color)\n</code></pre> <p> Sprite.set_color(entity: <code>Entity</code>, r: <code>Num</code>, g: <code>Num</code>, b: <code>Num</code>, a: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the color of the <code>Sprite</code> attached to <code>entity</code> to be a color of <code>r</code>,<code>g</code>,<code>b</code>,<code>a</code>.  The default color is white, <code>[1, 1, 1, 1]</code>, so to undo a color change, set it to that.</p> <pre><code>Sprite.set_color(entity, r, g, b, a)\n</code></pre> <p> Sprite.get_color(entity: <code>Entity</code>) \u00b6 returns <code>Color</code></p> <p>Returns the current color of the <code>Sprite</code> attached to <code>entity</code>.</p> <pre><code>var color = Sprite.get_color(entity)\n</code></pre> <p> Sprite.set_uv(entity: <code>Entity</code>, x0: <code>Num</code>, y0: <code>Num</code>, x1: <code>Num</code>, y1: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the UV coordinates for the <code>Sprite</code> attached to <code>entity</code> with top left at <code>x0</code>,<code>y0</code> and bottom right <code>x1</code>,<code>y1</code>. The default is <code>0, 0, 1, 1</code>, a full rectangle in UV coordinate space. If you want to tile the image on a sprite, set it to values &gt; 1.</p> <pre><code>//tile 4 times on both x and y\nSprite.set_uv(entity, 0, 0, 4, 4)\n</code></pre> <p> Sprite.get_uv(entity: <code>Entity</code>) \u00b6 returns <code>Float4</code></p> <p>Returns the current uv of the <code>Sprite</code> attached to <code>entity</code>.</p> <pre><code>var uv = Sprite.get_uv(entity)\n</code></pre> <p> Sprite.set_skew(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the skew amounts for the <code>Sprite</code> attached to <code>entity</code>. The values of <code>x</code> and <code>y</code> are between <code>0 ... 1</code>, where 1 is the most skew and 0 is none.</p> <pre><code>Sprite.set_skew(entity, 0, 0.25)\n</code></pre> <p> Sprite.get_skew(entity: <code>Entity</code>) \u00b6 returns <code>Float2</code></p> <p>Return the skew for the <code>Sprite</code> attached to <code>entity</code>.</p> <pre><code>var skew = Sprite.get_skew(entity)\n</code></pre> <p> Sprite.get_geometry(entity: <code>Entity</code>) \u00b6 returns <code>Geometry</code></p> <p>Returns the render Geometry for the <code>Sprite</code> attached to <code>entity</code>. The geometry is owned by the sprite, so be aware when modifying it.</p> <pre><code>var geometry = Sprite.get_geometry(entity)\n</code></pre> <p> Sprite.set_geometry(entity: <code>Entity</code>, geo: <code>Geometry</code>) \u00b6 returns <code>unknown</code></p> <p>Sets the render Geometry for the <code>Sprite</code> attached to <code>entity</code>.</p> <pre><code>Sprite.set_geometry(entity, geo)\n</code></pre> <p> Sprite.get_auto_size(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Sprite.set_auto_size(entity: <code>Entity</code>, value: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>When setting an image or material, resize the sprite to the image size   </p> <p> Sprite.get_material_input(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Sprite.set_material_input(entity: <code>Entity</code>, value: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>For custom materials, the material input ID for the image.   </p> <p> Sprite.get_hsv_adjust(entity: <code>Entity</code>) \u00b6 returns <code>HSV</code></p> <p>no docs found   </p> <p> Sprite.set_hsv_adjust(entity: <code>Entity</code>, enabled: <code>Bool</code>, hue_change: <code>Num</code>, saturation: <code>Num</code>, value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the values for the hsv adjustment effect. The effect applies several operations on the colors of the sprite in sRGB HSV space. Saturation and Value changes are applied with exponents as <code>value ^ adjustment</code>.   </p> <p> Sprite.set_effect_HSV_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_HSV_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_HSV_hue_change(entity: <code>Entity</code>, hue_change: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_HSV_hue_change(entity: <code>Entity</code>, hue_change: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_HSV_saturation(entity: <code>Entity</code>, saturation: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_HSV_saturation(entity: <code>Entity</code>, saturation: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_HSV_value(entity: <code>Entity</code>, value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_HSV_value(entity: <code>Entity</code>, value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_outline(entity: <code>Entity</code>) \u00b6 returns <code>Outline</code></p> <p>no docs found   </p> <p> Sprite.set_outline(entity: <code>Entity</code>, enabled: <code>Bool</code>, color: <code>Color</code>, thickness: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the values of the outline effect.   </p> <p> Sprite.set_effect_outline_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_outline_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_outline_color(entity: <code>Entity</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_outline_color(entity: <code>Entity</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_outline_thickness(entity: <code>Entity</code>, thickness: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_outline_thickness(entity: <code>Entity</code>, thickness: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_shadow(entity: <code>Entity</code>) \u00b6 returns <code>Shadow</code></p> <p>no docs found   </p> <p> Sprite.set_shadow(entity: <code>Entity</code>, enabled: <code>Bool</code>, offset: <code>Num</code>, color: <code>Color</code>, softness: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the values for the shadow effect. Shadows are the same color as the base sprite image, but only have a single color.   </p> <p> Sprite.set_effect_shadow_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_shadow_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_shadow_offset(entity: <code>Entity</code>, offset: <code>Vector2</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_shadow_offset(entity: <code>Entity</code>, offset: <code>Vector2</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_shadow_color(entity: <code>Entity</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_shadow_color(entity: <code>Entity</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_dissolve(entity: <code>Entity</code>) \u00b6 returns <code>Dissolve</code></p> <p>no docs found   </p> <p> Sprite.set_dissolve(entity: <code>Entity</code>, enabled: <code>Bool</code>, image: <code>Image</code>, uv: <code>List</code>, value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the values for the hsv adjustment effect. The effect applies several operations on the colors of the sprite in sRGB HSV space. Saturation and Value changes are applied with exponents as <code>value ^ adjustment</code>.   </p> <p> Sprite.set_effect_dissolve_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_dissolve_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_dissolve_image(entity: <code>Entity</code>, image: <code>Image</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_dissolve_image(entity: <code>Entity</code>, image: <code>Image</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_dissolve_uv(entity: <code>Entity</code>, uv: <code>Vector4</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_dissolve_uv(entity: <code>Entity</code>, uv: <code>Vector4</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_dissolve_value(entity: <code>Entity</code>, value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_dissolve_value(entity: <code>Entity</code>, value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_shine(entity: <code>Entity</code>) \u00b6 returns <code>Shine</code></p> <p>no docs found   </p> <p> Sprite.set_shine(entity: <code>Entity</code>, enabled: <code>Bool</code>, color: <code>Num</code>, direction: <code>Vector2</code>, width: <code>Num</code>, speed: <code>Num</code>, spacing: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the values for the hsv adjustment effect. The effect applies several operations on the colors of the sprite in sRGB HSV space. Saturation and Value changes are applied with exponents as <code>value ^ adjustment</code>.   </p> <p> Sprite.set_effect_shine_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_shine_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_shine_color(entity: <code>Entity</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_shine_color(entity: <code>Entity</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_shine_direction(entity: <code>Entity</code>, direction: <code>Vector2</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_shine_direction(entity: <code>Entity</code>, direction: <code>Vector2</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_shine_width(entity: <code>Entity</code>, width: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_shine_width(entity: <code>Entity</code>, width: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_shine_speed(entity: <code>Entity</code>, speed: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_shine_speed(entity: <code>Entity</code>, speed: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_shine_spacing(entity: <code>Entity</code>, spacing: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_shine_spacing(entity: <code>Entity</code>, spacing: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/sprite.modifier/#spritebillboard","title":"SpriteBillboard","text":"<p><code>import \"luxe: system/sprite.modifier\" for SpriteBillboard</code></p> <p>no docs found</p> <ul> <li>none</li> <li>billboard</li> <li>fixed_scale</li> <li>fixed_screen_scale</li> </ul> <p> SpriteBillboard.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SpriteBillboard.billboard \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SpriteBillboard.fixed_scale \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SpriteBillboard.fixed_screen_scale \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/sprite.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/sprite.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/tags.modifier/","title":"Tags.modifier","text":""},{"location":"api/v/2024.12.3/system/tags.modifier/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/system/tags.modifier/#luxe-systemtagsmodifier-module","title":"<code>luxe: system/tags.modifier</code> module","text":"<ul> <li>Data </li> <li>System </li> <li>Tags </li> </ul>"},{"location":"api/v/2024.12.3/system/tags.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/tags.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var tags : List = []</code></li> </ul>"},{"location":"api/v/2024.12.3/system/tags.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/tags.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/tags.modifier/#tags","title":"Tags","text":"<p><code>import \"luxe: system/tags.modifier\" for Tags</code></p> <p>no docs found</p> <ul> <li>create(entity: <code>Any</code>)</li> <li>destroy(entity: <code>Any</code>)</li> <li>has(entity: <code>Any</code>)</li> <li>add(entity: <code>Any</code>, tag: <code>Any</code>)</li> <li>remove(entity: <code>Any</code>, tag: <code>Any</code>)</li> <li>list(world: <code>Any</code>, tag: <code>Any</code>)</li> <li>list(entity: <code>Any</code>)</li> <li>has_tag(entity: <code>Any</code>, tag: <code>Any</code>)</li> </ul> <p> Tags.create(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tags.destroy(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tags.has(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tags.add(entity: <code>Any</code>, tag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tags.remove(entity: <code>Any</code>, tag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tags.list(world: <code>Any</code>, tag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tags.list(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tags.has_tag(entity: <code>Any</code>, tag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/text.modifier/","title":"Text.modifier","text":""},{"location":"api/v/2024.12.3/system/text.modifier/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/system/text.modifier/#luxe-systemtextmodifier-module","title":"<code>luxe: system/text.modifier</code> module","text":"<ul> <li>Data </li> <li>System </li> <li>Text </li> <li>TextAlignH </li> <li>TextAlignV </li> </ul>"},{"location":"api/v/2024.12.3/system/text.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/text.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var text : String = \"hello\"</code></li> <li><code>var size : Num = 16</code></li> <li><code>var align : TextAlignH = TextAlignH.center</code></li> <li><code>var vertical : TextAlignV = TextAlignV.center</code></li> <li><code>var color : Color = [1, 1, 1, 1]</code></li> <li><code>var bounds : Float4 = [0, 0, 0, 0]</code></li> <li><code>var font : Asset = \"luxe: font/lato\"</code></li> <li><code>var material : Asset = \"luxe: material/font\"</code></li> </ul>"},{"location":"api/v/2024.12.3/system/text.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/text.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/text.modifier/#text","title":"Text","text":"<p><code>import \"luxe: system/text.modifier\" for Text</code></p> <p>no docs found</p> <ul> <li>create(entity: <code>Any</code>, material: <code>Any</code>, default_size: <code>Any</code>, default_font: <code>Any</code>, default_color: <code>Any</code>)</li> <li>destroy(entity: <code>Any</code>)</li> <li>set_size(entity: <code>Any</code>, default_size: <code>Any</code>)</li> <li>get_size(entity: <code>Any</code>)</li> <li>set_font(entity: <code>Any</code>, default_font: <code>Any</code>)</li> <li>get_font(entity: <code>Any</code>)</li> <li>set_style(entity: <code>Entity</code>, style: <code>TextStyle</code>)</li> <li>get_style(entity: <code>Entity</code>)</li> <li>set_outline(entity: <code>Entity</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>)</li> <li>set_shadow(entity: <code>Entity</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>)</li> <li>set_max_visible(entity: <code>Entity</code>, max_visible: <code>Num</code>)</li> <li>get_max_visible(entity: <code>Entity</code>)</li> <li>set_color(entity: <code>Any</code>, default_color: <code>Any</code>)</li> <li>get_color(entity: <code>Any</code>)</li> <li>set_align(entity: <code>Any</code>, align: <code>Any</code>, align_vertical: <code>Any</code>)</li> <li>set_align(entity: <code>Any</code>, align: <code>Any</code>)</li> <li>get_align(entity: <code>Any</code>)</li> <li>set_align_vertical(entity: <code>Any</code>, align_vertical: <code>Any</code>)</li> <li>get_align_vertical(entity: <code>Any</code>)</li> <li>set_bounds(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>)</li> <li>get_bounds(entity: <code>Any</code>)</li> <li>set_attr(entity: <code>Entity</code>, start: <code>Num</code>, length: <code>Num</code>, type: <code>TextAttrType</code>, key: <code>String</code>, value: <code>Any</code>)</li> <li>attr_clear(entity: <code>Any</code>)</li> <li>commit(entity: <code>Any</code>)</li> <li>get_render_text(entity: <code>Any</code>)</li> <li>get_geometry(entity: <code>Any</code>)</li> <li>get_extents(entity: <code>Any</code>, offset: <code>Any</code>, count: <code>Any</code>)</li> <li>get_extents(entity: <code>Any</code>)</li> <li>contains(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>)</li> <li>has(entity: <code>Any</code>)</li> <li>set_loc(entity: <code>Entity</code>, space: <code>String</code>, key: <code>String</code>)</li> <li>set_loc(entity: <code>Entity</code>, key: <code>String</code>)</li> <li>set_loc_with_args(entity: <code>Entity</code>, space: <code>String</code>, key: <code>String</code>, args: <code>List</code>)</li> <li>set_loc_with_args(entity: <code>Entity</code>, key: <code>String</code>, args: <code>List</code>)</li> <li>get_text(entity: <code>Any</code>)</li> <li>set_text_buffer(entity: <code>Any</code>, string: <code>Any</code>)</li> <li>set_text(entity: <code>Any</code>, string: <code>Any</code>)</li> </ul> <p> Text.create(entity: <code>Any</code>, material: <code>Any</code>, default_size: <code>Any</code>, default_font: <code>Any</code>, default_color: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.destroy(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_size(entity: <code>Any</code>, default_size: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.get_size(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_font(entity: <code>Any</code>, default_font: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.get_font(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_style(entity: <code>Entity</code>, style: <code>TextStyle</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Text.get_style(entity: <code>Entity</code>) \u00b6 returns <code>TextStyle</code></p> <p>no docs found   </p> <p> Text.set_outline(entity: <code>Entity</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_shadow(entity: <code>Entity</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_max_visible(entity: <code>Entity</code>, max_visible: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Text.get_max_visible(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Text.set_color(entity: <code>Any</code>, default_color: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.get_color(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_align(entity: <code>Any</code>, align: <code>Any</code>, align_vertical: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_align(entity: <code>Any</code>, align: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.get_align(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_align_vertical(entity: <code>Any</code>, align_vertical: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.get_align_vertical(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_bounds(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.get_bounds(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_attr(entity: <code>Entity</code>, start: <code>Num</code>, length: <code>Num</code>, type: <code>TextAttrType</code>, key: <code>String</code>, value: <code>Any</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Text.attr_clear(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.commit(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.get_render_text(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.get_geometry(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.get_extents(entity: <code>Any</code>, offset: <code>Any</code>, count: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.get_extents(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.contains(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.has(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_loc(entity: <code>Entity</code>, space: <code>String</code>, key: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_loc(entity: <code>Entity</code>, key: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_loc_with_args(entity: <code>Entity</code>, space: <code>String</code>, key: <code>String</code>, args: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_loc_with_args(entity: <code>Entity</code>, key: <code>String</code>, args: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.get_text(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_text_buffer(entity: <code>Any</code>, string: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_text(entity: <code>Any</code>, string: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/text.modifier/#textalignh","title":"TextAlignH","text":"<p><code>import \"luxe: system/text.modifier\" for TextAlignH</code></p> <p>no docs found</p> <ul> <li>left</li> <li>center</li> <li>right</li> </ul> <p> TextAlignH.left \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAlignH.center \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAlignH.right \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/text.modifier/#textalignv","title":"TextAlignV","text":"<p><code>import \"luxe: system/text.modifier\" for TextAlignV</code></p> <p>no docs found</p> <ul> <li>top</li> <li>center</li> <li>bottom</li> </ul> <p> TextAlignV.top \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAlignV.center \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAlignV.bottom \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/tiles.modifier/","title":"Tiles.modifier","text":""},{"location":"api/v/2024.12.3/system/tiles.modifier/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/system/tiles.modifier/#luxe-systemtilesmodifier-module","title":"<code>luxe: system/tiles.modifier</code> module","text":"<ul> <li>Data </li> <li>System </li> <li>Tile </li> <li>Tiles </li> </ul>"},{"location":"api/v/2024.12.3/system/tiles.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/tiles.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var tiles : Asset = null</code></li> </ul>"},{"location":"api/v/2024.12.3/system/tiles.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/tiles.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/tiles.modifier/#tile","title":"Tile","text":"<p><code>import \"luxe: system/tiles.modifier\" for Tile</code></p> <p>no docs found</p> <ul> <li>create(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, depth: <code>Any</code>, visual_id: <code>Any</code>)</li> <li>destroy(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>destroy_at(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, depth: <code>Any</code>)</li> <li>exists_at(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, depth: <code>Any</code>)</li> <li>get_at(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, depth: <code>Any</code>)</li> <li>get_all(entity: <code>Any</code>, into: <code>Any</code>)</li> <li>get_all_at(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, into: <code>Any</code>)</li> <li>get_all_at_depth(entity: <code>Any</code>, depth: <code>Any</code>, into: <code>Any</code>)</li> <li>get_all_with_tag(entity: <code>Any</code>, tag: <code>Any</code>, into: <code>Any</code>)</li> <li>get_all_with_visual(entity: <code>Any</code>, visual: <code>Any</code>, into: <code>Any</code>)</li> <li>add_tag(entity: <code>Any</code>, tile: <code>Any</code>, tag: <code>Any</code>)</li> <li>remove_tag(entity: <code>Any</code>, tile: <code>Any</code>, tag: <code>Any</code>)</li> <li>has_tag(entity: <code>Any</code>, tile: <code>Any</code>, tag: <code>Any</code>)</li> <li>get_tags(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>clear_tags(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>set(entity: <code>Any</code>, tile: <code>Any</code>, key: <code>Any</code>, value: <code>Any</code>)</li> <li>get(entity: <code>Any</code>, tile: <code>Any</code>, key: <code>Any</code>, default: <code>Any</code>)</li> <li>set_coord(entity: <code>Any</code>, tile: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>)</li> <li>get_coord_x(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>get_coord_y(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>set_depth(entity: <code>Any</code>, tile: <code>Any</code>, depth: <code>Any</code>)</li> <li>get_depth(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>set_offset(entity: <code>Any</code>, tile: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>)</li> <li>set_offset_x(entity: <code>Any</code>, tile: <code>Any</code>, x: <code>Any</code>)</li> <li>set_offset_y(entity: <code>Any</code>, tile: <code>Any</code>, y: <code>Any</code>)</li> <li>get_offset_x(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>get_offset_y(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>reset_size(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>set_size(entity: <code>Any</code>, tile: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>)</li> <li>set_size_x(entity: <code>Any</code>, tile: <code>Any</code>, x: <code>Any</code>)</li> <li>set_size_y(entity: <code>Any</code>, tile: <code>Any</code>, y: <code>Any</code>)</li> <li>get_size_x(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>get_size_y(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>set_flip(entity: <code>Any</code>, tile: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>)</li> <li>set_flip_x(entity: <code>Any</code>, tile: <code>Any</code>, flip: <code>Any</code>)</li> <li>set_flip_y(entity: <code>Any</code>, tile: <code>Any</code>, flip: <code>Any</code>)</li> <li>get_flip_x(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>get_flip_y(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>set_visual(entity: <code>Any</code>, tile: <code>Any</code>, visual: <code>Any</code>)</li> <li>get_visual(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>set_angle(entity: <code>Any</code>, tile: <code>Any</code>, angle: <code>Any</code>)</li> <li>get_angle(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>set_color(entity: <code>Any</code>, tile: <code>Any</code>, color: <code>Any</code>)</li> <li>get_color(entity: <code>Any</code>, tile: <code>Any</code>)</li> </ul> <p> Tile.create(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, depth: <code>Any</code>, visual_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.destroy(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.destroy_at(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, depth: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.exists_at(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, depth: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_at(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, depth: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_all(entity: <code>Any</code>, into: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_all_at(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, into: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_all_at_depth(entity: <code>Any</code>, depth: <code>Any</code>, into: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_all_with_tag(entity: <code>Any</code>, tag: <code>Any</code>, into: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_all_with_visual(entity: <code>Any</code>, visual: <code>Any</code>, into: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.add_tag(entity: <code>Any</code>, tile: <code>Any</code>, tag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.remove_tag(entity: <code>Any</code>, tile: <code>Any</code>, tag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.has_tag(entity: <code>Any</code>, tile: <code>Any</code>, tag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_tags(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.clear_tags(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set(entity: <code>Any</code>, tile: <code>Any</code>, key: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get(entity: <code>Any</code>, tile: <code>Any</code>, key: <code>Any</code>, default: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_coord(entity: <code>Any</code>, tile: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_coord_x(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_coord_y(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_depth(entity: <code>Any</code>, tile: <code>Any</code>, depth: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_depth(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_offset(entity: <code>Any</code>, tile: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_offset_x(entity: <code>Any</code>, tile: <code>Any</code>, x: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_offset_y(entity: <code>Any</code>, tile: <code>Any</code>, y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_offset_x(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_offset_y(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.reset_size(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_size(entity: <code>Any</code>, tile: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_size_x(entity: <code>Any</code>, tile: <code>Any</code>, x: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_size_y(entity: <code>Any</code>, tile: <code>Any</code>, y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_size_x(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_size_y(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_flip(entity: <code>Any</code>, tile: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_flip_x(entity: <code>Any</code>, tile: <code>Any</code>, flip: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_flip_y(entity: <code>Any</code>, tile: <code>Any</code>, flip: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_flip_x(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_flip_y(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_visual(entity: <code>Any</code>, tile: <code>Any</code>, visual: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_visual(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_angle(entity: <code>Any</code>, tile: <code>Any</code>, angle: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_angle(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_color(entity: <code>Any</code>, tile: <code>Any</code>, color: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_color(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/tiles.modifier/#tiles","title":"Tiles","text":"<p><code>import \"luxe: system/tiles.modifier\" for Tiles</code></p> <p>no docs found</p> <ul> <li>create(entity: <code>Any</code>, grid_size_x: <code>Any</code>, grid_size_y: <code>Any</code>)</li> <li>create(entity: <code>Any</code>, asset: <code>Any</code>)</li> <li>destroy(entity: <code>Any</code>)</li> <li>clear(entity: <code>Any</code>)</li> <li>has(entity: <code>Any</code>)</li> <li>commit(entity: <code>Any</code>)</li> <li>set_grid_size(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>)</li> <li>get_grid_size(entity: <code>Any</code>)</li> <li>set_asset(entity: <code>Any</code>, asset_id: <code>Any</code>)</li> <li>get_asset_id(entity: <code>Any</code>)</li> <li>set_asset_id(entity: <code>Any</code>, asset_id: <code>Any</code>)</li> <li>define_source(entity: <code>Any</code>, source_id: <code>Any</code>, material: <code>Any</code>)</li> <li>undefine_source(entity: <code>Any</code>, source_id: <code>Any</code>)</li> <li>has_source(entity: <code>Any</code>, source_id: <code>Any</code>)</li> <li>define_visual(entity: <code>Any</code>, source_id: <code>Any</code>, visual_id: <code>Any</code>, options: <code>Any</code>)</li> <li>undefine_visual(entity: <code>Any</code>, source_id: <code>Any</code>, visual_id: <code>Any</code>)</li> <li>has_visual(entity: <code>Any</code>, visual_id: <code>Any</code>)</li> <li>get_bounds_rects(entity: <code>Any</code>, tiles: <code>Any</code>, into: <code>Any</code>)</li> </ul> <p> Tiles.create(entity: <code>Any</code>, grid_size_x: <code>Any</code>, grid_size_y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.create(entity: <code>Any</code>, asset: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.destroy(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.clear(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.has(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.commit(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.set_grid_size(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.get_grid_size(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.set_asset(entity: <code>Any</code>, asset_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.get_asset_id(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.set_asset_id(entity: <code>Any</code>, asset_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.define_source(entity: <code>Any</code>, source_id: <code>Any</code>, material: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.undefine_source(entity: <code>Any</code>, source_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.has_source(entity: <code>Any</code>, source_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.define_visual(entity: <code>Any</code>, source_id: <code>Any</code>, visual_id: <code>Any</code>, options: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.undefine_visual(entity: <code>Any</code>, source_id: <code>Any</code>, visual_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.has_visual(entity: <code>Any</code>, visual_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.get_bounds_rects(entity: <code>Any</code>, tiles: <code>Any</code>, into: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/transform.change.block/","title":"Transform.change.block","text":""},{"location":"api/v/2024.12.3/system/transform.change.block/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/system/transform.change.block/#luxe-systemtransformchangeblock-module","title":"<code>luxe: system/transform.change.block</code> module","text":"<ul> <li>TransformChange </li> </ul>"},{"location":"api/v/2024.12.3/system/transform.change.block/#transformchange","title":"TransformChange","text":"<p><code>import \"luxe: system/transform.change.block\" for TransformChange</code></p> <p>no docs found</p> <ul> <li><code>var entity : Num = 0</code></li> <li><code>var pos : Float3 = [0, 0, 0]</code></li> <li><code>var rotation : Float4 = [0, 0, 0, 1]</code></li> <li><code>var scale : Float3 = [1, 1, 1]</code></li> <li><code>var tag : String = \"unknown\"</code></li> </ul>"},{"location":"api/v/2024.12.3/system/transform.modifier/","title":"Transform.modifier","text":""},{"location":"api/v/2024.12.3/system/transform.modifier/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/system/transform.modifier/#luxe-systemtransformmodifier-module","title":"<code>luxe: system/transform.modifier</code> module","text":"<ul> <li>Data </li> <li>System </li> <li>Transform </li> <li>TransformApplyMask </li> </ul>"},{"location":"api/v/2024.12.3/system/transform.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/transform.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var pos : Double3 = [0, 0, 0]</code></li> <li><code>var rotation : Float3 = [0, 0, 0]</code></li> <li><code>var scale : Float3 = [1, 1, 1]</code></li> <li><code>var link : Link = null</code></li> </ul>"},{"location":"api/v/2024.12.3/system/transform.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/transform.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/transform.modifier/#transform","title":"Transform","text":"<p><code>import \"luxe: system/transform.modifier\" for Transform</code></p> <p>A transform modifier defines where a entity is. That includes position, rotation and scale. A <code>Transform</code> can also be linked to another <code>Transform</code>, in which case its values are relative to their link target.</p> <p>While not all entities need to be \"somewhere\" locally, a lot of them do, which is when this modifier is used. Other modifiers on the same entity aren't required to read and react to the <code>Transform</code>, but most do, allowing you to use this to move things (like Sprites, Meshes, Physics shapes, etc...).</p> <ul> <li>id</li> <li>create(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>create(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>create(entity: <code>Entity</code>)</li> <li>destroy(entity: <code>Entity</code>)</li> <li>has(entity: <code>Entity</code>)</li> <li>get_link(entity: <code>Entity</code>)</li> <li>get_linked(entity: <code>Entity</code>)</li> <li>link(entity: <code>Entity</code>, target_entity: <code>Entity</code>, reset_local: <code>Bool</code>)</li> <li>link(entity: <code>Entity</code>, target_entity: <code>Entity</code>)</li> <li>unlink(entity: <code>Entity</code>, reset_local: <code>Bool</code>)</li> <li>unlink(entity: <code>Entity</code>)</li> <li>look_at_and_move(entity: <code>Entity</code>, pos: <code>Vec</code>, target: <code>Vec</code>, up: <code>Vec</code>, invert: <code>Bool</code>)</li> <li>look_at_and_move(entity: <code>Entity</code>, pos: <code>Vec</code>, target: <code>Vec</code>, up: <code>Vec</code>)</li> <li>look_at_and_move(entity: <code>Entity</code>, pos: <code>Vec</code>, target: <code>Vec</code>)</li> <li>look_at(entity: <code>Entity</code>, target: <code>Vec</code>, up: <code>Vec</code>, invert: <code>Bool</code>)</li> <li>look_at(entity: <code>Entity</code>, target: <code>Vec</code>, up: <code>Vec</code>)</li> <li>look_at(entity: <code>Entity</code>, target: <code>Vec</code>)</li> <li>set_snap(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>set_snap(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>set_pos(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>set_pos(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>set_pos_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>set_pos_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>set_pos_x(entity: <code>Entity</code>, x: <code>Num</code>)</li> <li>set_pos_y(entity: <code>Entity</code>, y: <code>Num</code>)</li> <li>set_pos_z(entity: <code>Entity</code>, z: <code>Num</code>)</li> <li>set_pos_x_world(entity: <code>Entity</code>, x: <code>Num</code>)</li> <li>set_pos_y_world(entity: <code>Entity</code>, y: <code>Num</code>)</li> <li>set_pos_z_world(entity: <code>Entity</code>, z: <code>Num</code>)</li> <li>set_scale(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>set_scale(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>set_rotation_slerp_angle_axis(entity: <code>Entity</code>, axis: <code>Vec</code>, from: <code>Num</code>, to: <code>Num</code>, t: <code>Num</code>)</li> <li>set_rotation_slerp_angle_axis_world(entity: <code>Entity</code>, axis: <code>Vec</code>, from: <code>Num</code>, to: <code>Num</code>, t: <code>Num</code>)</li> <li>set_rotation_slerp(entity: <code>Entity</code>, from: <code>Vec</code>, to: <code>Vec</code>, t: <code>Num</code>)</li> <li>set_rotation_slerp_world(entity: <code>Entity</code>, from: <code>Vec</code>, to: <code>Vec</code>, t: <code>Num</code>)</li> <li>set_rotation(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>)</li> <li>set_rotation_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>)</li> <li>set_angle_axis(entity: <code>Entity</code>, degrees: <code>Any</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>set_angle_axis_world(entity: <code>Entity</code>, degrees: <code>Any</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>set_euler(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>set_euler_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>set_euler_x(entity: <code>Entity</code>, x: <code>Num</code>)</li> <li>set_euler_y(entity: <code>Entity</code>, y: <code>Num</code>)</li> <li>set_euler_z(entity: <code>Entity</code>, z: <code>Num</code>)</li> <li>set_euler_x_world(entity: <code>Entity</code>, x: <code>Num</code>)</li> <li>set_euler_y_world(entity: <code>Entity</code>, y: <code>Num</code>)</li> <li>set_euler_z_world(entity: <code>Entity</code>, z: <code>Num</code>)</li> <li>rotate_angle_axis_slerp(entity: <code>Entity</code>, axis: <code>Vec</code>, angle_amount: <code>Num</code>)</li> <li>rotate_angle_axis_slerp_world(entity: <code>Entity</code>, axis: <code>Vec</code>, angle_amount: <code>Num</code>)</li> <li>rotate_around_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, axis_x: <code>Num</code>, axis_y: <code>Num</code>, axis_z: <code>Num</code>, degrees: <code>Num</code>)</li> <li>rotate_around(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, axis_x: <code>Num</code>, axis_y: <code>Num</code>, axis_z: <code>Num</code>, degrees: <code>Num</code>)</li> <li>rotate_angle_axis(entity: <code>Entity</code>, degrees: <code>Any</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>rotate_angle_axis_world(entity: <code>Entity</code>, degrees: <code>Any</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>rotate_euler(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>rotate_euler_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>translate(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>translate(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>get_pos(entity: <code>Entity</code>)</li> <li>get_pos_x(entity: <code>Entity</code>)</li> <li>get_pos_y(entity: <code>Entity</code>)</li> <li>get_pos_z(entity: <code>Entity</code>)</li> <li>get_pos_world(entity: <code>Entity</code>)</li> <li>get_pos_world_unsnapped(entity: <code>Entity</code>)</li> <li>get_pos_x_world(entity: <code>Entity</code>)</li> <li>get_pos_y_world(entity: <code>Entity</code>)</li> <li>get_pos_z_world(entity: <code>Entity</code>)</li> <li>rotate2D(entity: <code>Entity</code>, degrees: <code>Num</code>)</li> <li>set_angle2D(entity: <code>Entity</code>, degrees: <code>Num</code>)</li> <li>set_angle2D_world(entity: <code>Entity</code>, degrees: <code>Num</code>)</li> <li>get_angle2D(entity: <code>Entity</code>)</li> <li>get_angle2D_world(entity: <code>Entity</code>)</li> <li>set_depth2D(entity: <code>Entity</code>, depth: <code>Num</code>)</li> <li>get_depth2D(entity: <code>Entity</code>)</li> <li>set_depth2D_world(entity: <code>Entity</code>, depth: <code>Num</code>)</li> <li>get_depth2D_world(entity: <code>Entity</code>)</li> <li>get_world_matrix(entity: <code>Entity</code>, into_matrix: <code>Floats</code>)</li> <li>get_rotation(entity: <code>Entity</code>)</li> <li>get_rotation_world(entity: <code>Entity</code>)</li> <li>get_rotation_matrix(entity: <code>Entity</code>, into_matrix: <code>Floats</code>)</li> <li>get_euler(entity: <code>Entity</code>)</li> <li>get_euler_x(entity: <code>Entity</code>)</li> <li>get_euler_y(entity: <code>Entity</code>)</li> <li>get_euler_z(entity: <code>Entity</code>)</li> <li>get_euler_world(entity: <code>Entity</code>)</li> <li>get_euler_x_world(entity: <code>Entity</code>)</li> <li>get_euler_y_world(entity: <code>Entity</code>)</li> <li>get_euler_z_world(entity: <code>Entity</code>)</li> <li>get_scale(entity: <code>Entity</code>)</li> <li>get_scale_x(entity: <code>Entity</code>)</li> <li>get_scale_y(entity: <code>Entity</code>)</li> <li>get_scale_z(entity: <code>Entity</code>)</li> <li>get_scale_world(entity: <code>Entity</code>)</li> <li>get_scale_x_world(entity: <code>Entity</code>)</li> <li>get_scale_y_world(entity: <code>Entity</code>)</li> <li>get_scale_z_world(entity: <code>Entity</code>)</li> <li>get_right(entity: <code>Entity</code>)</li> <li>get_forward(entity: <code>Entity</code>)</li> <li>get_up(entity: <code>Entity</code>)</li> <li>sync(entity: <code>Entity</code>)</li> <li>sync_block(entity: <code>Entity</code>, mask: <code>TransformApplyMask</code>)</li> <li>sync_world(world: <code>World</code>)</li> <li>transform_by(entity: <code>Entity</code>, other: <code>Entity</code>)</li> <li>scale_by(entity: <code>Entity</code>, scale: <code>Float3</code>, origin: <code>Float3</code>)</li> <li>rotate_euler_by(entity: <code>Entity</code>, euler: <code>Float3</code>, origin: <code>Float3</code>)</li> <li>local_vector_to_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>world_vector_to_local(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>local_dir_to_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>world_dir_to_local(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>local_point_to_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>local_point_to_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, scaled: <code>Bool</code>)</li> <li>world_point_to_local(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>world_point_to_local(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, scaled: <code>Bool</code>)</li> <li>listen_all(world: <code>World</code>, fn: <code>Fn</code>)</li> <li>unlisten_all(world: <code>World</code>, handle: <code>Handle</code>)</li> <li>listen(entity: <code>Entity</code>, fn: <code>Fn</code>)</li> <li>unlisten(entity: <code>Entity</code>, handle: <code>Handle</code>)</li> </ul> <p> Transform.id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Transform.create(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Attach a <code>Transform</code> modifier to an entity with the given <code>x</code> and <code>y</code> position (with a z of 0)   </p> <p> Transform.create(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Attach a <code>Transform</code> modifier to an entity with the given <code>x</code>, <code>y</code> and <code>z</code> position   </p> <p> Transform.create(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Attach a <code>Transform</code> modifier to an entity.   </p> <p> Transform.destroy(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Detatch a <code>Transform</code> modifier from an entity.   </p> <p> Transform.has(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>get whether an entity has an attached <code>Transform</code>.   </p> <p> Transform.get_link(entity: <code>Entity</code>) \u00b6 returns <code>Entity</code></p> <p>Get what entity this entity is linked to. So what entity the position/rotation/scale of this transform are relative to. Linked to entity always has a <code>Transform</code> of its own. In case <code>Transform</code> isn't linked to anything, returns <code>null</code> and transformations are global.   </p> <p> Transform.get_linked(entity: <code>Entity</code>) \u00b6 returns <code>List</code></p> <p>Get what entities are linked to this entity (opposite relationship as <code>get_link</code>). Transformation values of linked entities are relative to this entity.   </p> <p> Transform.link(entity: <code>Entity</code>, target_entity: <code>Entity</code>, reset_local: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Link one <code>Transform</code> to another. The <code>Transform</code> values will now be be relative to the link target, meaning the link target <code>Transform</code> position, rotation and scale all apply to the local position, rotation, scale of this <code>Transform</code>. When using non-uniform scales somewhere in your transform link hierarchy you can get transform deformations that would not be possible with just a single transform.</p> <p>In other environments, this transform link is often part of the object hierarchy, but here it's specific to transforms and other hierarchies aren't bound to follow the same links.   </p> <p> Transform.link(entity: <code>Entity</code>, target_entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Link one <code>Transform</code> to another. The <code>Transform</code> values will now be be relative to the link target, meaning the link target <code>Transform</code> position, rotation and scale all apply to the local position, rotation, scale of this <code>Transform</code>. When using non-uniform scales somewhere in your transform link hierarchy you can get transform deformations that would not be possible with just a single transform.</p> <p>In other environments, this transform link is often part of the object hierarchy, but here it's specific to transforms and other hierarchies aren't bound to follow the same links.   </p> <p> Transform.unlink(entity: <code>Entity</code>, reset_local: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Unlink a <code>Transform</code>. Local position will be kept (unless reset), so if your parent isnt at the origin, expect the transform to move, or save and reapply the world position.   </p> <p> Transform.unlink(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Unlink a <code>Transform</code>. Local position will be kept, so if your parent isnt at the origin, expect the transform to move, or save and reapply the world position.</p> <pre><code>  //get the current jar position\n  var pos = Transform.get_pos_world(_jar)\n  //unlink the jar from the player first\n  Transform.unlink(_jar)\n  //set the position for the jar, which now refers \n  //to world space since the jar has no parent\n  //this makes the jar stay in the same place\n  Transform.set_pos(_jar, pos.x, pos.y, pos.z)\n</code></pre> <p> Transform.look_at_and_move(entity: <code>Entity</code>, pos: <code>Vec</code>, target: <code>Vec</code>, up: <code>Vec</code>, invert: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Move <code>Transform</code> somewhere else, then look towards target position.   </p> <p> Transform.look_at_and_move(entity: <code>Entity</code>, pos: <code>Vec</code>, target: <code>Vec</code>, up: <code>Vec</code>) \u00b6 returns <code>None</code></p> <p>Move <code>Transform</code> somewhere else, then look towards target position.   </p> <p> Transform.look_at_and_move(entity: <code>Entity</code>, pos: <code>Vec</code>, target: <code>Vec</code>) \u00b6 returns <code>None</code></p> <p>Move <code>Transform</code> somewhere else, then look towards target position.   </p> <p> Transform.look_at(entity: <code>Entity</code>, target: <code>Vec</code>, up: <code>Vec</code>, invert: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Rotate <code>Transform</code> to look at a position in worldspace,        rotated around that new view axis so the <code>Transform</code> 'up' aligns with the <code>up</code> input as closely as possible.   </p> <p> Transform.look_at(entity: <code>Entity</code>, target: <code>Vec</code>, up: <code>Vec</code>) \u00b6 returns <code>None</code></p> <p>Rotate <code>Transform</code> to look at a position in worldspace,        rotated around that new view axis so the <code>Transform</code> 'up' aligns with the <code>up</code> input as closely as possible.   </p> <p> Transform.look_at(entity: <code>Entity</code>, target: <code>Vec</code>) \u00b6 returns <code>None</code></p> <p>Rotate <code>Transform</code> to look at a position in worldspace.   </p> <p> Transform.set_snap(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set <code>Transform</code> position to snap at specific intervals. (midpoints round away from 0)</p> <pre><code>  var entity = Entity.create(world)\n  Transform.create(entity)\n  Transform.set_snap(entity, 2, 2, 2)\n  Transform.set_pos(entity, 0.5, 1.5, -3)\n  Log.print(Transform.get_pos(entity)) //[0, 2, -4]\n</code></pre> <p> Transform.set_snap(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set <code>Transform</code> position to snap at specific intervals.   </p> <p> Transform.set_pos(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set local position of a <code>Transform</code>.   </p> <p> Transform.set_pos(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set local position of a <code>Transform</code>.   </p> <p> Transform.set_pos_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set global position of a <code>Transform</code>.   </p> <p> Transform.set_pos_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set global position of a <code>Transform</code>.   </p> <p> Transform.set_pos_x(entity: <code>Entity</code>, x: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set <code>x</code> component of local <code>Transform</code> pos.   </p> <p> Transform.set_pos_y(entity: <code>Entity</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set <code>y</code> component of local <code>Transform</code> pos.   </p> <p> Transform.set_pos_z(entity: <code>Entity</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set <code>z</code> component of local <code>Transform</code> pos.   </p> <p> Transform.set_pos_x_world(entity: <code>Entity</code>, x: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set <code>x</code> component of global <code>Transform</code> pos.   </p> <p> Transform.set_pos_y_world(entity: <code>Entity</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set <code>y</code> component of global <code>Transform</code> pos.   </p> <p> Transform.set_pos_z_world(entity: <code>Entity</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set <code>z</code> component of global <code>Transform</code> pos.   </p> <p> Transform.set_scale(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set x and y scale of a <code>Transform</code>, keeping z scale unchanged.   </p> <p> Transform.set_scale(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set local scale of a <code>Transform</code>. Setting the scale in a global context isnt available, as link hierarchies with rotations and nonuniform scalings can lead to weird and hard to predict states for that.   </p> <p> Transform.set_rotation_slerp_angle_axis(entity: <code>Entity</code>, axis: <code>Vec</code>, from: <code>Num</code>, to: <code>Num</code>, t: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.set_rotation_slerp_angle_axis_world(entity: <code>Entity</code>, axis: <code>Vec</code>, from: <code>Num</code>, to: <code>Num</code>, t: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.set_rotation_slerp(entity: <code>Entity</code>, from: <code>Vec</code>, to: <code>Vec</code>, t: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.set_rotation_slerp_world(entity: <code>Entity</code>, from: <code>Vec</code>, to: <code>Vec</code>, t: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.set_rotation(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set local rotation in quaternions.</p> <p>(Quaternions are how rotations are handled by the engine internally, though it can be hard to understand how to manipulate them, so feel free to stick to euler angles using <code>set_euler(entity, x, y, z)</code>.)   </p> <p> Transform.set_rotation_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set global rotation in quaternions.</p> <p>(Quaternions are how rotations are handled by the engine internally, though it can be hard to understand how to manipulate them, so feel free to stick to euler angles using <code>set_euler_world(entity, x, y, z)</code>.)   </p> <p> Transform.set_angle_axis(entity: <code>Entity</code>, degrees: <code>Any</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set local rotation as a rotation around an axis.</p> <p>Rotation direction is left-handed (counter-clockwise when looking in the direction of the axis.)   </p> <p> Transform.set_angle_axis_world(entity: <code>Entity</code>, degrees: <code>Any</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set global rotation as a rotation around an axis.</p> <p>Rotation direction is left-handed (counter-clockwise when looking in the direction of the axis.)   </p> <p> Transform.set_euler(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set local rotation as xyz euler angles.   </p> <p> Transform.set_euler_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set global rotation as xyz euler angles.   </p> <p> Transform.set_euler_x(entity: <code>Entity</code>, x: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.set_euler_y(entity: <code>Entity</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.set_euler_z(entity: <code>Entity</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.set_euler_x_world(entity: <code>Entity</code>, x: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.set_euler_y_world(entity: <code>Entity</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.set_euler_z_world(entity: <code>Entity</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.rotate_angle_axis_slerp(entity: <code>Entity</code>, axis: <code>Vec</code>, angle_amount: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.rotate_angle_axis_slerp_world(entity: <code>Entity</code>, axis: <code>Vec</code>, angle_amount: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.rotate_around_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, axis_x: <code>Num</code>, axis_y: <code>Num</code>, axis_z: <code>Num</code>, degrees: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Rotate around an axis in world space.   </p> <p> Transform.rotate_around(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, axis_x: <code>Num</code>, axis_y: <code>Num</code>, axis_z: <code>Num</code>, degrees: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Rotate around an axis in local space.   </p> <p> Transform.rotate_angle_axis(entity: <code>Entity</code>, degrees: <code>Any</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Rotate on the spot around an axis in local coordinates.   </p> <p> Transform.rotate_angle_axis_world(entity: <code>Entity</code>, degrees: <code>Any</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Rotate on the spot around an axis in global coordinates.   </p> <p> Transform.rotate_euler(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Rotate by euler angles in local space.   </p> <p> Transform.rotate_euler_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Rotate by euler angles in global space.   </p> <p> Transform.translate(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Move <code>Transform</code> in local space.   </p> <p> Transform.translate(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Move <code>Transform</code> in local space.   </p> <p> Transform.get_pos(entity: <code>Entity</code>) \u00b6 returns <code>Vec</code></p> <p>Get position local space (relative to link <code>Transform</code>).   </p> <p> Transform.get_pos_x(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_pos_y(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_pos_z(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_pos_world(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>Get position global space.   </p> <p> Transform.get_pos_world_unsnapped(entity: <code>Entity</code>) \u00b6 returns <code>Vec</code></p> <p>Get position global space independently of <code>set_snap</code> settings.   </p> <p> Transform.get_pos_x_world(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_pos_y_world(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_pos_z_world(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.rotate2D(entity: <code>Entity</code>, degrees: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Rotate the <code>Transform</code> in local space.</p> <p>This technically rotates around the z axis, since thats the only axis we care about in 2d contexts.   </p> <p> Transform.set_angle2D(entity: <code>Entity</code>, degrees: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the 2d angle in local space.</p> <p>This is technically the same as <code>set_euler_z</code>(doesnt touch x or y), since thats the only axis we care about in 2d contexts.   </p> <p> Transform.set_angle2D_world(entity: <code>Entity</code>, degrees: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the 2d angle in global space.</p> <p>This is technically the same as <code>set_euler_z</code>(doesnt touch x or y), since thats the only axis we care about in 2d contexts.   </p> <p> Transform.get_angle2D(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>Get the 2d angle in local space.</p> <p>This is technically the same as <code>get_euler_z</code>, since thats the only axis we care about in 2d contexts.   </p> <p> Transform.get_angle2D_world(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>Get the 2d angle in global space.</p> <p>This is technically the same as <code>get_euler_z_world</code>, since thats the only axis we care about in 2d contexts.   </p> <p> Transform.set_depth2D(entity: <code>Entity</code>, depth: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the local depth (relative to link <code>Transform</code>).</p> <p>This is technically the same as <code>set_pos_z</code>.   </p> <p> Transform.get_depth2D(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>Get the local depth (relative to link <code>Transform</code>).</p> <p>This is technically the same as <code>get_pos_z</code>.   </p> <p> Transform.set_depth2D_world(entity: <code>Entity</code>, depth: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the global depth.</p> <p>This is technically the same as <code>set_pos_z_world</code>.   </p> <p> Transform.get_depth2D_world(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>Get the global depth.</p> <p>This is technically the same as <code>get_pos_z_world</code>.   </p> <p> Transform.get_world_matrix(entity: <code>Entity</code>, into_matrix: <code>Floats</code>) \u00b6 returns <code>None</code></p> <p>Get 4x4 world transform matrix (column major array).</p> <pre><code>  var ent = Entity.create(app.world)\n  Transform.create(ent)\n  Transform.set_pos(ent, 2, 3, 4)\n  var matrix = Floats.new(16)\n  Transform.get_world_matrix(ent, matrix)\n  //matrix is now [1,0,0,0, 0,1,0,0, 0,0,1,0, 2,3,4,1]\n</code></pre> <p> Transform.get_rotation(entity: <code>Entity</code>) \u00b6 returns <code>Quat</code></p> <p>Get local quaternion rotation.</p> <p>(Note that quaternions can be unfamiliar and hard to manipulate, so if you're not familiar with them you might want to use <code>get_euler</code> instead)   </p> <p> Transform.get_rotation_world(entity: <code>Entity</code>) \u00b6 returns <code>Quat</code></p> <p>Get global quaternion rotation.</p> <p>(Note that quaternions can be unfamiliar and hard to manipulate, so if you're not familiar with them you might want to use <code>get_euler_world</code> instead)   </p> <p> Transform.get_rotation_matrix(entity: <code>Entity</code>, into_matrix: <code>Floats</code>) \u00b6 returns <code>None</code></p> <p>Get 4x4 world rotation matrix (column major array).   </p> <p> Transform.get_euler(entity: <code>Entity</code>) \u00b6 returns <code>Vec</code></p> <p>Get local euler angles.   </p> <p> Transform.get_euler_x(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_euler_y(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_euler_z(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_euler_world(entity: <code>Entity</code>) \u00b6 returns <code>Vec</code></p> <p>Get global euler angles.   </p> <p> Transform.get_euler_x_world(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_euler_y_world(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_euler_z_world(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_scale(entity: <code>Entity</code>) \u00b6 returns <code>Vec</code></p> <p>Get local scale.   </p> <p> Transform.get_scale_x(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_scale_y(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_scale_z(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_scale_world(entity: <code>Entity</code>) \u00b6 returns <code>Vec</code></p> <p>Get global scale. Note that through rotations and non-uniform scale in the transform link hierarchy, getting an accurate world scale might be impossible, making this lossy.   </p> <p> Transform.get_scale_x_world(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_scale_y_world(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_scale_z_world(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_right(entity: <code>Entity</code>) \u00b6 returns <code>Vec</code></p> <p>Get the \"right\" direction of the <code>Transform</code>. Same direction as the red arrow in the translation gizmo in the editor.   </p> <p> Transform.get_forward(entity: <code>Entity</code>) \u00b6 returns <code>Vec</code></p> <p>Get the \"forward\" direction of the <code>Transform</code>. Same direction as the green arrow in the translation gizmo in the editor.   </p> <p> Transform.get_up(entity: <code>Entity</code>) \u00b6 returns <code>Vec</code></p> <p>Get the \"up\" direction of the <code>Transform</code>. Same direction as the blue arrow in the translation gizmo in the editor.   </p> <p> Transform.sync(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Forces a sync of the <code>Transform</code>. Will trigger listen functions. This usually shouldn't be needed as <code>Transform</code> sync automatically when updated.   </p> <p> Transform.sync_block(entity: <code>Entity</code>, mask: <code>TransformApplyMask</code>) \u00b6 returns <code>None</code></p> <p>Forces a sync of the <code>Transform</code> block data. Will trigger block listener functions. This usually shouldn't be needed as <code>Transform</code> sync automatically when updated.   </p> <p> Transform.sync_world(world: <code>World</code>) \u00b6 returns <code>None</code></p> <p>Forces a sync of all <code>Transform</code> in a world. Will trigger listen functions. This usually shouldn't be needed as <code>Transform</code> sync automatically when updated.   </p> <p> Transform.transform_by(entity: <code>Entity</code>, other: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Transform the given entity by another entities transform. e.g set world using the other as a parent   </p> <p> Transform.scale_by(entity: <code>Entity</code>, scale: <code>Float3</code>, origin: <code>Float3</code>) \u00b6 returns <code>None</code></p> <p>Transform the given entity scale by the value around the given origin   </p> <p> Transform.rotate_euler_by(entity: <code>Entity</code>, euler: <code>Float3</code>, origin: <code>Float3</code>) \u00b6 returns <code>None</code></p> <p>Transform the given entity rotation around the origin, by euler amount (radians)   </p> <p> Transform.local_vector_to_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>Vec</code></p> <p>Convert a vector from local space to world space. (applies scale and rotation, but not translation)   </p> <p> Transform.world_vector_to_local(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>Vec</code></p> <p>Convert a vector from world space to local space. (applies scale and rotation, but not translation)   </p> <p> Transform.local_dir_to_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>Vec</code></p> <p>Convert a direction from local space to world space. (applies only rotation, not rotation or translation)   </p> <p> Transform.world_dir_to_local(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>Vec</code></p> <p>Convert a direction from world space to local space. (applies only rotation, not rotation or translation)   </p> <p> Transform.local_point_to_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>Vec</code></p> <p>Convert a point from local space to world space. (applies translation, rotation and scale)   </p> <p> Transform.local_point_to_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, scaled: <code>Bool</code>) \u00b6 returns <code>Vec</code></p> <p>Convert a point from local space to world space. (applies translation, rotation and optionally, scale)   </p> <p> Transform.world_point_to_local(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>Vec</code></p> <p>Convert a point from world space to local space. (applies translation, rotation and scale)   </p> <p> Transform.world_point_to_local(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, scaled: <code>Bool</code>) \u00b6 returns <code>Vec</code></p> <p>Convert a point from world space to local space. (applies translation, rotation and optionally, scale)   </p> <p> Transform.listen_all(world: <code>World</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>no docs found   </p> <p> Transform.unlisten_all(world: <code>World</code>, handle: <code>Handle</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.listen(entity: <code>Entity</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>no docs found   </p> <p> Transform.unlisten(entity: <code>Entity</code>, handle: <code>Handle</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/transform.modifier/#transformapplymask","title":"TransformApplyMask","text":"<p><code>import \"luxe: system/transform.modifier\" for TransformApplyMask</code></p> <p>no docs found</p> <ul> <li>pos</li> <li>scale</li> <li>rotation</li> <li>modified</li> <li>all_modified</li> </ul> <p> TransformApplyMask.pos \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TransformApplyMask.scale \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TransformApplyMask.rotation \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TransformApplyMask.modified \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TransformApplyMask.all_modified \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/values.modifier/","title":"Values.modifier","text":""},{"location":"api/v/2024.12.3/system/values.modifier/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/system/values.modifier/#luxe-systemvaluesmodifier-module","title":"<code>luxe: system/values.modifier</code> module","text":"<ul> <li>Data </li> <li>Value </li> <li>Values </li> <li>ValuesKind </li> <li>ValuesType </li> </ul>"},{"location":"api/v/2024.12.3/system/values.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/values.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var values : List = []</code></li> </ul>"},{"location":"api/v/2024.12.3/system/values.modifier/#value","title":"Value","text":"<p><code>import \"luxe: system/values.modifier\" for Value</code></p> <p>no docs found</p> <ul> <li><code>var kind : ValuesKind = ValuesKind.number</code></li> <li><code>var name : String = \"value\"</code></li> <li><code>var number : Num = 0</code></li> <li><code>var string : String = \"\"</code></li> <li><code>var boolean : Bool = false</code></li> <li><code>var float2 : Float2 = [0, 0]</code></li> <li><code>var float3 : Float3 = [0, 0, 0]</code></li> <li><code>var float4 : Float4 = [0, 0, 0, 0]</code></li> <li><code>var color : Color = [1, 1, 1, 1]</code></li> </ul>"},{"location":"api/v/2024.12.3/system/values.modifier/#values","title":"Values","text":"<p><code>import \"luxe: system/values.modifier\" for Values</code></p> <p>Values is a modifier that lets you store Key -&gt; Value pairs. Store values like numbers,  strings, and colors on an entity, which can then be accessed by name (a Key).</p> <pre><code>//we can use an enum for keys\nclass Keys {\n  static watered { \"watered\" }\n  static apples { \"apples\" }\n}\nvar tree = Entity.create(world)\nValues.create(tree)\nValues.set(tree, Keys.watered, true)\nValues.set(tree, Keys.apples, 10)\nValues.set(tree, \"keys are strings\", true)\n\nvar watered = Values.get(tree, Keys.watered, false)\nvar apples = Values.get(tree, Keys.apples, -1)\nLog.print(\"The tree is %(watered ? \"watered\" : \"thirsty\") and has %(apples) apples!\")\n</code></pre> <ul> <li>create(entity: <code>Entity</code>)</li> <li>destroy(entity: <code>Entity</code>)</li> <li>has(entity: <code>Entity</code>)</li> <li>has_key(entity: <code>Entity</code>, key: <code>String</code>)</li> <li>remove_key(entity: <code>Entity</code>, key: <code>String</code>)</li> <li>get_keys(entity: <code>Entity</code>)</li> <li>get(entity: <code>Entity</code>, key: <code>String</code>, default: <code>Any</code>)</li> <li>set(entity: <code>Entity</code>, key: <code>String</code>, value: <code>Any</code>)</li> </ul> <p> Values.create(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Attach a <code>Values</code> modifier to <code>entity</code>.</p> <pre><code>var entity = Entity.create(world)\nValues.create(entity)\n</code></pre> <p> Values.destroy(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Detach and destroy the <code>Values</code> attached to <code>entity</code></p> <pre><code>Values.destroy(entity)\n</code></pre> <p> Values.has(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if <code>entity</code> has a <code>Values</code> modifier attached.</p> <pre><code>if(Values.has(entity)) {\n  Log.print(\"Has a Values modifier!\")\n}\n</code></pre> <p> Values.has_key(entity: <code>Entity</code>, key: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true the entity's Values modifier has a value with the given 'key'</p> <pre><code>if(Values.has_key(entity, \"apples\")) {\n  Log.print(\"The tree has some apples!\")\n}\n</code></pre> <p> Values.remove_key(entity: <code>Entity</code>, key: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Removes a value by key from 'entity's Values modifier, if it exists</p> <pre><code>Values.remove_key(tree, \"apples\")\n</code></pre> <p> Values.get_keys(entity: <code>Entity</code>) \u00b6 returns <code>List</code></p> <p>Get a List of all the String keys for values on 'entity's Values modifier</p> <pre><code>var keys = Values.get_keys(grass)\nfor (key in keys) {\n  Log.print(\"Has Value Key: %(key)\")\n}\n</code></pre> <p> Values.get(entity: <code>Entity</code>, key: <code>String</code>, default: <code>Any</code>) \u00b6 returns <code>Any</code></p> <p>Get the current value stored with <code>key</code> on the Values modifier on <code>entity</code>, with a default value which is returned if the key isn't found.</p> <pre><code>var seeds = Values.get(watermelon, \"seeds\", 0)\nLog.print(\"The watermelon has %(seeds) seeds!\")\n</code></pre> <p> Values.set(entity: <code>Entity</code>, key: <code>String</code>, value: <code>Any</code>) \u00b6 returns <code>None</code></p> <p>Set the value stored at the 'key' on the Values modifier on 'entity'.</p> <pre><code>if(Values.has(seed)) {\n  Values.set(seed, \"planted\", true)\n}\n</code></pre>"},{"location":"api/v/2024.12.3/system/values.modifier/#valueskind","title":"ValuesKind","text":"<p><code>import \"luxe: system/values.modifier\" for ValuesKind</code></p> <p>no docs found</p> <ul> <li>number</li> <li>string</li> <li>boolean</li> <li>float2</li> <li>float3</li> <li>float4</li> <li>color</li> </ul> <p> ValuesKind.number \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesKind.string \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesKind.boolean \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesKind.float2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesKind.float3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesKind.float4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesKind.color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/values.modifier/#valuestype","title":"ValuesType","text":"<p><code>import \"luxe: system/values.modifier\" for ValuesType</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>bool</li> <li>number</li> <li>string</li> <li>float2</li> <li>float3</li> <li>float4</li> <li>name(value: <code>Any</code>)</li> </ul> <p> ValuesType.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesType.bool \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesType.number \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesType.string \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesType.float2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesType.float3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesType.float4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesType.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/vfx.modifier/","title":"Vfx.modifier","text":""},{"location":"api/v/2024.12.3/system/vfx.modifier/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/system/vfx.modifier/#luxe-systemvfxmodifier-module","title":"<code>luxe: system/vfx.modifier</code> module","text":"<ul> <li>Data </li> <li>System </li> <li>Vfx </li> </ul>"},{"location":"api/v/2024.12.3/system/vfx.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/vfx.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var asset : Asset = null</code></li> </ul>"},{"location":"api/v/2024.12.3/system/vfx.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/vfx.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/vfx.modifier/#vfx","title":"Vfx","text":"<p><code>import \"luxe: system/vfx.modifier\" for Vfx</code></p> <p>no docs found</p>"},{"location":"api/v/2024.12.3/system/wires.modifier/","title":"Wires.modifier","text":""},{"location":"api/v/2024.12.3/system/wires.modifier/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/system/wires.modifier/#luxe-systemwiresmodifier-module","title":"<code>luxe: system/wires.modifier</code> module","text":"<ul> <li>Connection </li> <li>Data </li> <li>System </li> <li>WireNode </li> <li>WireTarget </li> <li>Wires </li> </ul>"},{"location":"api/v/2024.12.3/system/wires.modifier/#connection","title":"Connection","text":"<p><code>import \"luxe: system/wires.modifier\" for Connection</code></p> <p>no docs found</p> <ul> <li><code>var from : WireTarget = Object</code></li> <li><code>var to : WireTarget = Object</code></li> </ul>"},{"location":"api/v/2024.12.3/system/wires.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/wires.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var connections : List = []</code></li> </ul>"},{"location":"api/v/2024.12.3/system/wires.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/wires.modifier\" for System</code></p> <p>no docs found</p> <ul> <li><code>var nodes : Map = {}</code></li> <li><code>var nodes_from_panel : Map = {}</code></li> <li><code>var right_panel : Control = 0</code></li> <li><code>var left_panel : Control = 0</code></li> <li><code>var world_editor : Any = null</code></li> <li>new(world: <code>World</code>)</li> <li>init(world: <code>World</code>)</li> <li>copy_target(src: <code>WireTarget</code>, to: <code>WireTarget</code>)</li> <li>refresh_entity(node: <code>WireNode</code>)</li> <li>get_drop_node(x: <code>Num</code>, y: <code>Num</code>)</li> <li>remove_block_connection(entity: <code>Entity</code>, target: <code>WireTarget</code>)</li> <li>find_connection_index(entity: <code>Entity</code>, target: <code>WireTarget</code>)</li> <li>find_wire_in_list(wires: <code>List</code>, wire_id: <code>Num</code>)</li> <li>find_wire(target: <code>WireTarget</code>)</li> <li>make_placeholder_wire(entity: <code>Entity</code>, do_doc: <code>Bool</code>)</li> <li>make_node(out: <code>Bool</code>, entity: <code>Entity</code>, from: <code>WireTarget</code>, to: <code>WireTarget</code>)</li> <li>refresh_wires(window: <code>UIPanel</code>, window_w: <code>Num</code>, but: <code>UIButton</code>)</li> <li>editor_init(world: <code>World</code>)</li> <li>editor_attach(entity: <code>Entity</code>, wires: <code>Data</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p> <p> System.init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.copy_target(src: <code>WireTarget</code>, to: <code>WireTarget</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.refresh_entity(node: <code>WireNode</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.get_drop_node(x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>WireNode</code></p> <p>no docs found   </p> <p> System.remove_block_connection(entity: <code>Entity</code>, target: <code>WireTarget</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.find_connection_index(entity: <code>Entity</code>, target: <code>WireTarget</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.find_wire_in_list(wires: <code>List</code>, wire_id: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.find_wire(target: <code>WireTarget</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.make_placeholder_wire(entity: <code>Entity</code>, do_doc: <code>Bool</code>) \u00b6 returns <code>Connection</code></p> <p>no docs found   </p> <p> System.make_node(out: <code>Bool</code>, entity: <code>Entity</code>, from: <code>WireTarget</code>, to: <code>WireTarget</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.refresh_wires(window: <code>UIPanel</code>, window_w: <code>Num</code>, but: <code>UIButton</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.editor_init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.editor_attach(entity: <code>Entity</code>, wires: <code>Data</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/wires.modifier/#wirenode","title":"WireNode","text":"<p><code>import \"luxe: system/wires.modifier\" for WireNode</code></p> <p>no docs found</p> <ul> <li><code>var uuid : String = ID.uuid</code></li> <li><code>var panel : UIPanel = null</code></li> <li><code>var entity : Entity = Entity.none</code></li> <li><code>var out : Bool = true</code></li> <li><code>var from : WireTarget = null</code></li> <li><code>var to : WireTarget = null</code></li> <li><code>var other_uuid : String = null</code></li> <li><code>var label : UILabel = null</code></li> <li><code>var change : UILabel = null</code></li> <li><code>var icon : UIImage = null</code></li> <li><code>var endpoint : Control = null</code></li> <li><code>var cable_control : Control = null</code></li> <li><code>var draw_control : Control = null</code></li> <li><code>var resolve_node : Fn = null</code></li> <li><code>var resolve_wire : Fn = null</code></li> <li><code>var cable : Cable = Cable.new</code></li> <li><code>var style : PathStyle = PathStyle.new</code></li> <li><code>var cable_phase : Num = 0</code></li> <li><code>var cable_drag : Bool = false</code></li> <li>valid_wire</li> <li>wire</li> <li>draw_depth</li> <li>order</li> <li>disconnect()</li> <li>new()</li> <li>destroy()</li> <li>highlight(state: <code>Bool</code>)</li> <li>from_entity</li> <li>to_entity</li> <li>from_node</li> <li>to_node</li> <li>make_cable()</li> </ul> <p> WireNode.valid_wire \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> WireNode.wire \u00b6 returns <code>WireData</code></p> <p>no docs found   </p> <p> WireNode.draw_depth \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> WireNode.order \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> WireNode.disconnect() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WireNode.new() \u00b6 returns <code>WireNode</code></p> <p>no docs found   </p> <p> WireNode.destroy() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WireNode.highlight(state: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WireNode.from_entity \u00b6 returns <code>Entity</code></p> <p>no docs found   </p> <p> WireNode.to_entity \u00b6 returns <code>Entity</code></p> <p>no docs found   </p> <p> WireNode.from_node \u00b6 returns <code>WireNode</code></p> <p>no docs found   </p> <p> WireNode.to_node \u00b6 returns <code>WireNode</code></p> <p>no docs found   </p> <p> WireNode.make_cable() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/wires.modifier/#wiretarget","title":"WireTarget","text":"<p><code>import \"luxe: system/wires.modifier\" for WireTarget</code></p> <p>no docs found</p> <ul> <li><code>var wire : Num = 0</code></li> <li><code>var link : Link = null</code></li> <li><code>var context : Asset = null</code></li> <li><code>var order : Num = 0</code></li> <li><code>var split : Bool = false</code></li> </ul>"},{"location":"api/v/2024.12.3/system/wires.modifier/#wires","title":"Wires","text":"<p><code>import \"luxe: system/wires.modifier\" for Wires</code></p> <p>no docs found</p>"},{"location":"api/v/2024.12.3/system/physics/body3D.modifier/","title":"body3D.modifier","text":""},{"location":"api/v/2024.12.3/system/physics/body3D.modifier/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/system/physics/body3D.modifier/#luxe-systemphysicsbody3dmodifier-module","title":"<code>luxe: system/physics/body3D.modifier</code> module","text":"<ul> <li>Body3D </li> <li>Data </li> <li>MotionQuality </li> <li>MotionType </li> <li>System </li> </ul>"},{"location":"api/v/2024.12.3/system/physics/body3D.modifier/#body3d","title":"Body3D","text":"<p><code>import \"luxe: system/physics/body3D.modifier\" for Body3D</code></p> <p>no docs found</p> <ul> <li>unlisten(entity: <code>Entity</code>, handle: <code>Handle</code>)</li> <li>listen(entity: <code>Entity</code>, fn: <code>Fn</code>)</li> </ul> <p> Body3D.unlisten(entity: <code>Entity</code>, handle: <code>Handle</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Body3D.listen(entity: <code>Entity</code>, fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/physics/body3D.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/physics/body3D.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var motion_type : MotionType = MotionType.is_dynamic</code></li> <li><code>var motion_quality : MotionQuality = MotionQuality.discrete</code></li> <li><code>var is_sensor : Bool = false</code></li> <li><code>var allow_sleeping : Bool = true</code></li> <li><code>var friction : Num = 0.2</code></li> <li><code>var restitution : Num = 0.0</code></li> <li><code>var linear_damping : Num = 0.05</code></li> <li><code>var angular_damping : Num = 0.05</code></li> <li><code>var max_linear_velocity : Num = 500.0</code></li> <li><code>var max_angular_velocity : Num = 2700</code></li> <li><code>var gravity_factor : Num = 1</code></li> <li><code>var mass : Num = 1</code></li> <li><code>var lock_movement : Float3 = [0, 0, 0]</code></li> <li><code>var lock_rotation : Float3 = [0, 0, 0]</code></li> <li><code>var use_manifold_reduction : Bool = true</code></li> <li><code>var allow_dynamic_or_kinematic : Bool = false</code></li> <li><code>var collide_kinematic_vs_non_dynamic : Bool = false</code></li> <li><code>var apply_gyroscopic_force : Bool = false</code></li> <li><code>var enhanced_internal_edge_removal : Bool = false</code></li> <li><code>var velocity_steps_override : Num = 0</code></li> <li><code>var position_steps_override : Num = 0</code></li> </ul>"},{"location":"api/v/2024.12.3/system/physics/body3D.modifier/#motionquality","title":"MotionQuality","text":"<p><code>import \"luxe: system/physics/body3D.modifier\" for MotionQuality</code></p> <p>no docs found</p> <ul> <li>discrete</li> <li>linear_cast</li> </ul> <p> MotionQuality.discrete \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MotionQuality.linear_cast \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/physics/body3D.modifier/#motiontype","title":"MotionType","text":"<p><code>import \"luxe: system/physics/body3D.modifier\" for MotionType</code></p> <p>no docs found</p> <ul> <li>is_static</li> <li>is_dynamic</li> <li>is_kinematic</li> </ul> <p> MotionType.is_static \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MotionType.is_dynamic \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MotionType.is_kinematic \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/physics/body3D.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/physics/body3D.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> <li>init(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p> <p> System.init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/physics/box_collider3D.modifier/","title":"box collider3D.modifier","text":""},{"location":"api/v/2024.12.3/system/physics/box_collider3D.modifier/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/system/physics/box_collider3D.modifier/#luxe-systemphysicsbox_collider3dmodifier-module","title":"<code>luxe: system/physics/box_collider3D.modifier</code> module","text":"<ul> <li>BoxCollider3D </li> <li>Data </li> <li>System </li> </ul>"},{"location":"api/v/2024.12.3/system/physics/box_collider3D.modifier/#boxcollider3d","title":"BoxCollider3D","text":"<p><code>import \"luxe: system/physics/box_collider3D.modifier\" for BoxCollider3D</code></p> <p>no docs found</p>"},{"location":"api/v/2024.12.3/system/physics/box_collider3D.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/physics/box_collider3D.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var body : Link = null</code></li> <li><code>var density : Num = 1000</code></li> <li><code>var size : Float3 = [1, 1, 1]</code></li> </ul>"},{"location":"api/v/2024.12.3/system/physics/box_collider3D.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/physics/box_collider3D.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> <li>init(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p> <p> System.init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/physics/capsule_collider3D.modifier/","title":"capsule collider3D.modifier","text":""},{"location":"api/v/2024.12.3/system/physics/capsule_collider3D.modifier/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/system/physics/capsule_collider3D.modifier/#luxe-systemphysicscapsule_collider3dmodifier-module","title":"<code>luxe: system/physics/capsule_collider3D.modifier</code> module","text":"<ul> <li>CapsuleCollider3D </li> <li>Data </li> <li>System </li> </ul>"},{"location":"api/v/2024.12.3/system/physics/capsule_collider3D.modifier/#capsulecollider3d","title":"CapsuleCollider3D","text":"<p><code>import \"luxe: system/physics/capsule_collider3D.modifier\" for CapsuleCollider3D</code></p> <p>no docs found</p>"},{"location":"api/v/2024.12.3/system/physics/capsule_collider3D.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/physics/capsule_collider3D.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var body : Link = null</code></li> <li><code>var density : Num = 1000</code></li> <li><code>var height : Num = 2</code></li> <li><code>var width : Num = 1</code></li> </ul>"},{"location":"api/v/2024.12.3/system/physics/capsule_collider3D.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/physics/capsule_collider3D.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> <li>init(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p> <p> System.init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/physics/cast_ray.block/","title":"Cast ray.block","text":""},{"location":"api/v/2024.12.3/system/physics/cast_ray.block/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/system/physics/cast_ray.block/#luxe-systemphysicscast_rayblock-module","title":"<code>luxe: system/physics/cast_ray.block</code> module","text":"<ul> <li>CastRayResult </li> </ul>"},{"location":"api/v/2024.12.3/system/physics/cast_ray.block/#castrayresult","title":"CastRayResult","text":"<p><code>import \"luxe: system/physics/cast_ray.block\" for CastRayResult</code></p> <p>no docs found</p> <ul> <li><code>var body_entity : Num = 0</code></li> <li><code>var collider_entity : Num = 0</code></li> <li><code>var pos : Double3 = [0, 0, 0]</code></li> <li><code>var normal : Float3 = [0, 1, 0]</code></li> <li><code>var distance : Num = 0</code></li> </ul>"},{"location":"api/v/2024.12.3/system/physics/character3D.modifier/","title":"character3D.modifier","text":""},{"location":"api/v/2024.12.3/system/physics/character3D.modifier/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/system/physics/character3D.modifier/#luxe-systemphysicscharacter3dmodifier-module","title":"<code>luxe: system/physics/character3D.modifier</code> module","text":"<ul> <li>BackFaceMode </li> <li>Character3D </li> <li>Data </li> <li>System </li> </ul>"},{"location":"api/v/2024.12.3/system/physics/character3D.modifier/#backfacemode","title":"BackFaceMode","text":"<p><code>import \"luxe: system/physics/character3D.modifier\" for BackFaceMode</code></p> <p>no docs found</p> <ul> <li>ignore</li> <li>collide</li> </ul> <p> BackFaceMode.ignore \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BackFaceMode.collide \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/physics/character3D.modifier/#character3d","title":"Character3D","text":"<p><code>import \"luxe: system/physics/character3D.modifier\" for Character3D</code></p> <p>no docs found</p>"},{"location":"api/v/2024.12.3/system/physics/character3D.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/physics/character3D.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var target : Link = null</code></li> <li><code>var height : Num = 2</code></li> <li><code>var width : Num = 1</code></li> <li><code>var input : Float3 = [0, 0, 0]</code></li> <li><code>var speed : Num = 1</code></li> <li><code>var velocity : Float3 = [0, 0, 0]</code></li> <li><code>var mass : Num = 70</code></li> <li><code>var max_strength : Num = 100</code></li> <li><code>var shape_offset : Float3 = [0, 0, 0]</code></li> <li><code>var backface_mode : BackFaceMode = BackFaceMode.collide</code></li> <li><code>var predictive_contact_distance : Num = 0.1</code></li> <li><code>var max_collision_iterations : Num = 5</code></li> <li><code>var max_constraint_iterations : Num = 5</code></li> <li><code>var min_time_remaining : Num = 0.0001</code></li> <li><code>var collision_tolerance : Num = 0.001</code></li> <li><code>var character_padding : Num = 0.02</code></li> <li><code>var max_hits : Num = 256</code></li> <li><code>var hit_reduction_cos_max_angle : Num = 0.999</code></li> <li><code>var penetration_recovery_speed : Num = 1</code></li> </ul>"},{"location":"api/v/2024.12.3/system/physics/character3D.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/physics/character3D.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> <li>init(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p> <p> System.init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/physics/contact.block/","title":"Contact.block","text":""},{"location":"api/v/2024.12.3/system/physics/contact.block/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/system/physics/contact.block/#luxe-systemphysicscontactblock-module","title":"<code>luxe: system/physics/contact.block</code> module","text":"<ul> <li>Contact </li> <li>ContactHelper </li> <li>ContactKind </li> </ul>"},{"location":"api/v/2024.12.3/system/physics/contact.block/#contact","title":"Contact","text":"<p><code>import \"luxe: system/physics/contact.block\" for Contact</code></p> <p>no docs found</p> <ul> <li><code>var kind : ContactKind = ContactKind.none</code></li> <li><code>var body : Num = 0</code></li> <li><code>var collider : Num = 0</code></li> <li><code>var contacts : List = []</code></li> <li><code>var other_body : Num = 0</code></li> <li><code>var other_collider : Num = 0</code></li> <li><code>var other_contacts : List = []</code></li> <li><code>var normal : Float3 = [0, 0, 0]</code></li> <li><code>var overlap : Num = 0</code></li> </ul>"},{"location":"api/v/2024.12.3/system/physics/contact.block/#contacthelper","title":"ContactHelper","text":"<p><code>import \"luxe: system/physics/contact.block\" for ContactHelper</code></p> <p>no docs found</p> <ul> <li>get_other(body: <code>Entity</code>, contact: <code>Contact</code>)</li> <li>get_other_collider(collider: <code>Entity</code>, contact: <code>Contact</code>)</li> </ul> <p> ContactHelper.get_other(body: <code>Entity</code>, contact: <code>Contact</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ContactHelper.get_other_collider(collider: <code>Entity</code>, contact: <code>Contact</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/physics/contact.block/#contactkind","title":"ContactKind","text":"<p><code>import \"luxe: system/physics/contact.block\" for ContactKind</code></p> <p>no docs found</p> <ul> <li>none</li> <li>begin</li> <li>end</li> <li>active</li> </ul> <p> ContactKind.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ContactKind.begin \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ContactKind.end \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ContactKind.active \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/physics/mesh_collider3D.modifier/","title":"mesh collider3D.modifier","text":""},{"location":"api/v/2024.12.3/system/physics/mesh_collider3D.modifier/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/system/physics/mesh_collider3D.modifier/#luxe-systemphysicsmesh_collider3dmodifier-module","title":"<code>luxe: system/physics/mesh_collider3D.modifier</code> module","text":"<ul> <li>Data </li> <li>MeshCollider3D </li> <li>System </li> </ul>"},{"location":"api/v/2024.12.3/system/physics/mesh_collider3D.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/physics/mesh_collider3D.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var body : Link = null</code></li> <li><code>var mesh : Asset = null</code></li> <li><code>var level : Num = 0</code></li> </ul>"},{"location":"api/v/2024.12.3/system/physics/mesh_collider3D.modifier/#meshcollider3d","title":"MeshCollider3D","text":"<p><code>import \"luxe: system/physics/mesh_collider3D.modifier\" for MeshCollider3D</code></p> <p>no docs found</p>"},{"location":"api/v/2024.12.3/system/physics/mesh_collider3D.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/physics/mesh_collider3D.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> <li>init(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p> <p> System.init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/physics/physics3D.modifier/","title":"physics3D.modifier","text":""},{"location":"api/v/2024.12.3/system/physics/physics3D.modifier/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/system/physics/physics3D.modifier/#luxe-systemphysicsphysics3dmodifier-module","title":"<code>luxe: system/physics/physics3D.modifier</code> module","text":"<ul> <li>Data </li> <li>Physics3D </li> <li>System </li> </ul>"},{"location":"api/v/2024.12.3/system/physics/physics3D.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/physics/physics3D.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var gravity : Float3 = [0, -9.8, 0]</code></li> </ul>"},{"location":"api/v/2024.12.3/system/physics/physics3D.modifier/#physics3d","title":"Physics3D","text":"<p><code>import \"luxe: system/physics/physics3D.modifier\" for Physics3D</code></p> <p>no docs found</p> <ul> <li>create_in(world: <code>World</code>)</li> <li>cast_ray_closest(world: <code>World</code>, origin: <code>Float3</code>, dir: <code>Float3</code>, distance: <code>Num</code>)</li> <li>cast_ray(world: <code>World</code>, origin: <code>Float3</code>, dir: <code>Float3</code>, distance: <code>Num</code>)</li> <li>set_debug_draw(world: <code>World</code>, state: <code>Bool</code>)</li> <li>unlisten(world: <code>World</code>, handle: <code>Handle</code>)</li> <li>listen(world: <code>World</code>, fn: <code>Fn</code>)</li> </ul> <p> Physics3D.create_in(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Physics3D.cast_ray_closest(world: <code>World</code>, origin: <code>Float3</code>, dir: <code>Float3</code>, distance: <code>Num</code>) \u00b6 returns <code>CastRayResult</code></p> <p>no docs found   </p> <p> Physics3D.cast_ray(world: <code>World</code>, origin: <code>Float3</code>, dir: <code>Float3</code>, distance: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Cast a ray into the world and return all hits, sorted by closest first   </p> <p> Physics3D.set_debug_draw(world: <code>World</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Physics3D.unlisten(world: <code>World</code>, handle: <code>Handle</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Physics3D.listen(world: <code>World</code>, fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/physics/physics3D.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/physics/physics3D.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> <li>init(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p> <p> System.init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/system/physics/sphere_collider3D.modifier/","title":"sphere collider3D.modifier","text":""},{"location":"api/v/2024.12.3/system/physics/sphere_collider3D.modifier/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/system/physics/sphere_collider3D.modifier/#luxe-systemphysicssphere_collider3dmodifier-module","title":"<code>luxe: system/physics/sphere_collider3D.modifier</code> module","text":"<ul> <li>Data </li> <li>SphereCollider3D </li> <li>System </li> </ul>"},{"location":"api/v/2024.12.3/system/physics/sphere_collider3D.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/physics/sphere_collider3D.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var body : Link = null</code></li> <li><code>var density : Num = 1000</code></li> <li><code>var radius : Num = 1</code></li> </ul>"},{"location":"api/v/2024.12.3/system/physics/sphere_collider3D.modifier/#spherecollider3d","title":"SphereCollider3D","text":"<p><code>import \"luxe: system/physics/sphere_collider3D.modifier\" for SphereCollider3D</code></p> <p>no docs found</p>"},{"location":"api/v/2024.12.3/system/physics/sphere_collider3D.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/physics/sphere_collider3D.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> <li>init(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p> <p> System.init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/block/","title":"Block","text":""},{"location":"api/v/2024.12.3/ui/block/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/ui/block/#luxe-uiblock-module","title":"<code>luxe: ui/block</code> module","text":"<ul> <li>BlockListener </li> <li>ModifiedPip </li> <li>UIBlock </li> <li>UIBlockAssetEvent </li> <li>UIBlockChange </li> <li>UIBlockChangeType </li> <li>UIBlockEventType </li> <li>UIBlockLinkEvent </li> <li>UIBlockState </li> </ul>"},{"location":"api/v/2024.12.3/ui/block/#blocklistener","title":"BlockListener","text":"<p><code>import \"luxe: ui/block\" for BlockListener</code></p> <p>no docs found</p> <ul> <li>block</li> <li>handle</li> <li>new(block: <code>Block</code>, handle: <code>Handle</code>)</li> </ul> <p> BlockListener.block \u00b6 returns <code>Block</code></p> <p>no docs found   </p> <p> BlockListener.handle \u00b6 returns <code>Handle</code></p> <p>no docs found   </p> <p> BlockListener.new(block: <code>Block</code>, handle: <code>Handle</code>) \u00b6 returns <code>BlockListener</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/block/#modifiedpip","title":"ModifiedPip","text":"<p><code>import \"luxe: ui/block\" for ModifiedPip</code></p> <p>no docs found</p> <ul> <li>control</li> <li>kind</li> <li>kind=(value : BlockFieldModified)</li> <li>color</li> <li>new(ui: <code>UI</code>, kind: <code>BlockFieldModified</code>)</li> </ul> <p> ModifiedPip.control \u00b6 returns <code>Control</code></p> <p>no docs found   </p> <p> ModifiedPip.kind \u00b6 returns <code>BlockFieldModified</code></p> <p>no docs found   </p> <p> ModifiedPip.kind=(value : BlockFieldModified) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifiedPip.color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifiedPip.new(ui: <code>UI</code>, kind: <code>BlockFieldModified</code>) \u00b6 returns <code>ModifiedPip</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/block/#uiblock","title":"UIBlock","text":"<p><code>import \"luxe: ui/block\" for UIBlock</code></p> <p>no docs found</p> <ul> <li>create(ui: <code>Entity</code>)</li> <li>set_block_instance(control: <code>Control</code>, block: <code>Block</code>, instance: <code>BlockInstance</code>)</li> <li>set_block_instances(control: <code>Control</code>, block: <code>Block</code>, instances: <code>List</code>)</li> <li>set_blocks_instances(control: <code>Control</code>, blocks: <code>List</code>, instances: <code>List</code>)</li> <li>set_sizes(control: <code>Control</code>, label_width: <code>Num</code>, label_size: <code>Num</code>, field_height: <code>Num</code>)</li> <li>refresh(control: <code>Control</code>)</li> <li>get_handle_assets(control: <code>Control</code>)</li> <li>set_handle_assets(control: <code>Control</code>, yes: <code>Bool</code>)</li> <li>set_show_defaults(control: <code>Control</code>, yes: <code>Bool</code>)</li> <li>get_block_fields(control: <code>Any</code>)</li> </ul> <p> UIBlock.create(ui: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlock.set_block_instance(control: <code>Control</code>, block: <code>Block</code>, instance: <code>BlockInstance</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlock.set_block_instances(control: <code>Control</code>, block: <code>Block</code>, instances: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlock.set_blocks_instances(control: <code>Control</code>, blocks: <code>List</code>, instances: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlock.set_sizes(control: <code>Control</code>, label_width: <code>Num</code>, label_size: <code>Num</code>, field_height: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlock.refresh(control: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlock.get_handle_assets(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> UIBlock.set_handle_assets(control: <code>Control</code>, yes: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UIBlock.set_show_defaults(control: <code>Control</code>, yes: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlock.get_block_fields(control: <code>Any</code>) \u00b6 returns <code>Map</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/block/#uiblockassetevent","title":"UIBlockAssetEvent","text":"<p><code>import \"luxe: ui/block\" for UIBlockAssetEvent</code></p> <p>no docs found</p> <ul> <li>tags</li> <li>original</li> <li>new(tags_in: <code>List</code>, original_in: <code>String</code>, fn: <code>Fn</code>)</li> <li>done(value: <code>String</code>)</li> </ul> <p> UIBlockAssetEvent.tags \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> UIBlockAssetEvent.original \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> UIBlockAssetEvent.new(tags_in: <code>List</code>, original_in: <code>String</code>, fn: <code>Fn</code>) \u00b6 returns <code>UIBlockAssetEvent</code></p> <p>no docs found   </p> <p> UIBlockAssetEvent.done(value: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/block/#uiblockchange","title":"UIBlockChange","text":"<p><code>import \"luxe: ui/block\" for UIBlockChange</code></p> <p>A change in the block ui can inside a nested block, each with it's own individual instance, list of nested fields, and list of  nested array index values each step down. This tracks that for changes.</p> <ul> <li><code>var change_id : Any = null</code></li> <li>new(kind: <code>UIBlockChangeType</code>, root: <code>Block</code>, root_instance: <code>BlockInstance</code>, blocks: <code>List</code>, instances: <code>List</code>, fields: <code>List</code>, indices: <code>List</code>, edit_value: <code>Any</code>)</li> <li>refresh()</li> <li>handle()</li> <li>set_refresh(fn: <code>Fn</code>)</li> <li>set_handler(fn: <code>Fn</code>)</li> <li>kind</li> <li>block</li> <li>instance</li> <li>blocks</li> <li>instances</li> <li>field</li> <li>array_indices</li> <li>field_index(idx: <code>Num</code>)</li> <li>default</li> <li>get_field_value()</li> <li>get_leaf_value()</li> <li>leaf_block</li> <li>leaf_instance</li> <li>leaf_field_index</li> <li>leaf_array_index</li> <li>get_change_value()</li> <li>field_is_array()</li> <li>field_is_object()</li> <li>value</li> <li>edit_value</li> </ul> <p> UIBlockChange.new(kind: <code>UIBlockChangeType</code>, root: <code>Block</code>, root_instance: <code>BlockInstance</code>, blocks: <code>List</code>, instances: <code>List</code>, fields: <code>List</code>, indices: <code>List</code>, edit_value: <code>Any</code>) \u00b6 returns <code>UIBlockChange</code></p> <p>no docs found   </p> <p> UIBlockChange.refresh() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockChange.handle() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockChange.set_refresh(fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockChange.set_handler(fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockChange.kind \u00b6 returns <code>UIBlockChangeType</code></p> <p>The type of change event   </p> <p> UIBlockChange.block \u00b6 returns <code>Block</code></p> <p>The root block in which the change occurred   </p> <p> UIBlockChange.instance \u00b6 returns <code>Num</code></p> <p>The instance of the root block   </p> <p> UIBlockChange.blocks \u00b6 returns <code>List</code></p> <p>The list of blocks down the chain e.g some.nested.field   </p> <p> UIBlockChange.instances \u00b6 returns <code>List</code></p> <p>The list of instances for each block down the chain e.g some.nested.field   </p> <p> UIBlockChange.field \u00b6 returns <code>List</code></p> <p>The list of nested fields for each block, e.g some.nested.field -&gt; [\"some\", \"nested\", \"field\"]   </p> <p> UIBlockChange.array_indices \u00b6 returns <code>Num</code></p> <p>The array index for each nested block. e.g some.nested[2].block[3] is [0, 2, 3]   </p> <p> UIBlockChange.field_index(idx: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>The field index for the field in the fields list.    e.g [\"some\", \"nested\", \"field\"] -&gt; field_index[1] returns the field index of nested in the second block down   </p> <p> UIBlockChange.default \u00b6 returns <code>Any</code></p> <p>The default value in the leaf block for this field   </p> <p> UIBlockChange.get_field_value() \u00b6 returns <code>Any</code></p> <p>The current value in the leaf block for this field (e.g for an array, returns the contents of the array)   </p> <p> UIBlockChange.get_leaf_value() \u00b6 returns <code>Any</code></p> <p>The current value in the leaf for this block/field/array?   </p> <p> UIBlockChange.leaf_block \u00b6 returns <code>Block</code></p> <p>no docs found   </p> <p> UIBlockChange.leaf_instance \u00b6 returns <code>BlockInstance</code></p> <p>no docs found   </p> <p> UIBlockChange.leaf_field_index \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> UIBlockChange.leaf_array_index \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> UIBlockChange.get_change_value() \u00b6 returns <code>Any</code></p> <p>no docs found   </p> <p> UIBlockChange.field_is_array() \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> UIBlockChange.field_is_object() \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> UIBlockChange.value \u00b6 returns <code>Any</code></p> <p>The intended change value based on type   </p> <p> UIBlockChange.edit_value \u00b6 returns <code>Any</code></p> <p>The value from the ui at the time of the change   </p>"},{"location":"api/v/2024.12.3/ui/block/#uiblockchangetype","title":"UIBlockChangeType","text":"<p><code>import \"luxe: ui/block\" for UIBlockChangeType</code></p> <p>no docs found</p> <ul> <li>NORMAL</li> <li>RESET</li> <li>ARRAY_ADD</li> <li>ARRAY_REMOVE</li> <li>ARRAY_CLEAR</li> <li>ARRAY_RESET</li> <li>ARRAY_ELEMENT_RESET</li> <li>ARRAY_REORDER</li> <li>BLOCK</li> </ul> <p> UIBlockChangeType.NORMAL \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockChangeType.RESET \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockChangeType.ARRAY_ADD \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockChangeType.ARRAY_REMOVE \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockChangeType.ARRAY_CLEAR \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockChangeType.ARRAY_RESET \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockChangeType.ARRAY_ELEMENT_RESET \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockChangeType.ARRAY_REORDER \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockChangeType.BLOCK \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/block/#uiblockeventtype","title":"UIBlockEventType","text":"<p><code>import \"luxe: ui/block\" for UIBlockEventType</code></p> <p>no docs found</p> <ul> <li>asset</li> <li>link</li> </ul> <p> UIBlockEventType.asset \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockEventType.link \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/block/#uiblocklinkevent","title":"UIBlockLinkEvent","text":"<p><code>import \"luxe: ui/block\" for UIBlockLinkEvent</code></p> <p>no docs found</p> <ul> <li>original</li> <li>tag</li> <li>from_drop</li> <li>drop_payload</li> <li>new(original_in: <code>List</code>, tag: <code>ID32</code>, fn: <code>Fn</code>)</li> <li>new(original_in: <code>List</code>, tag: <code>ID32</code>, drop_payload: <code>Handle</code>, fn: <code>Fn</code>)</li> <li>done(value: <code>List</code>)</li> </ul> <p> UIBlockLinkEvent.original \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> UIBlockLinkEvent.tag \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> UIBlockLinkEvent.from_drop \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> UIBlockLinkEvent.drop_payload \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> UIBlockLinkEvent.new(original_in: <code>List</code>, tag: <code>ID32</code>, fn: <code>Fn</code>) \u00b6 returns <code>UIBlockLinkEvent</code></p> <p>no docs found   </p> <p> UIBlockLinkEvent.new(original_in: <code>List</code>, tag: <code>ID32</code>, drop_payload: <code>Handle</code>, fn: <code>Fn</code>) \u00b6 returns <code>UIBlockLinkEvent</code></p> <p>no docs found   </p> <p> UIBlockLinkEvent.done(value: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/block/#uiblockstate","title":"UIBlockState","text":"<p><code>import \"luxe: ui/block\" for UIBlockState</code></p> <p>no docs found</p> <ul> <li>new(ui: <code>Entity</code>, control: <code>Control</code>)</li> <li>get_block_fields()</li> <li>set_show_defaults(show_defaults: <code>Any</code>)</li> <li>clear_listeners()</li> <li>handle_assets</li> <li>handle_assets=(v : Bool)</li> <li>field_h</li> <li>label_w</li> <li>set_sizes(label_width: <code>Num</code>, label_size: <code>Num</code>, field_height: <code>Num</code>)</li> <li>set_instance(block: <code>Block</code>, instance: <code>BlockInstance</code>)</li> <li>set_instances(block: <code>Block</code>, instances: <code>List</code>)</li> <li>set_blocks_instances(blocks: <code>List</code>, instances: <code>List</code>)</li> <li>do_refresh()</li> <li>refresh()</li> <li>make_vec(view: <code>ValueView</code>)</li> <li>make_color(view: <code>ValueView</code>)</li> <li>make_num(view: <code>ValueView</code>)</li> <li>make_text(view: <code>ValueView</code>)</li> <li>get_asset_picks(types: <code>Any</code>)</li> <li>make_asset(view: <code>ValueView</code>)</li> <li>make_link(view: <code>ValueView</code>)</li> <li>make_path(view: <code>ValueView</code>, tag: <code>Num</code>)</li> <li>make_empty_object(name: <code>String</code>)</li> <li>make_empty_object(name: <code>String</code>, display: <code>String</code>)</li> <li>make_multiple_message()</li> <li>make_message(display: <code>String</code>)</li> <li>make_bool(default: <code>Bool</code>)</li> <li>make_options(options: <code>List</code>, default: <code>String</code>)</li> <li>make_object_field(name: <code>String</code>, view: <code>ValueView</code>)</li> <li>make_options_field(view: <code>ValueView</code>)</li> <li>make_field(name: <code>String</code>, type: <code>BlockFieldType</code>, view: <code>ValueView</code>)</li> <li>make_object(name: <code>String</code>)</li> <li>make_object(name: <code>String</code>, title_color: <code>Color</code>)</li> <li>make_object(name: <code>String</code>, details: <code>String</code>, title_color: <code>Color</code>)</li> <li>make_label(name: <code>String</code>, width: <code>Num</code>)</li> <li>p(depth: <code>Any</code>, value: <code>Any</code>)</li> <li>dump_info(control: <code>Control</code>, d: <code>Num</code>)</li> <li>make_mod_pip(kind: <code>BlockFieldModified</code>)</li> <li>get_changes(kind: <code>UIBlockChange</code>, value: <code>ValueView</code>, edit_value: <code>Any</code>)</li> <li>get_changes(kind: <code>UIBlockChange</code>, value: <code>ValueView</code>, edit_value: <code>Any</code>, edit_value_fn: <code>Fn</code>)</li> <li>get_changes(kind: <code>UIBlockChange</code>, value: <code>ValueView</code>, change_id: <code>String</code>, edit_value: <code>Any</code>, edit_value_fn: <code>Fn</code>)</li> <li>make_block(instance_view: <code>InstanceView</code>, into: <code>Control</code>)</li> <li>make_block(instance_view: <code>InstanceView</code>, into: <code>Control</code>, indent: <code>Num</code>)</li> <li>hide_tip(from: <code>Control</code>)</li> <li>show_tip(tooltip: <code>String</code>, control: <code>Control</code>)</li> <li>make_group(name: <code>Any</code>)</li> </ul> <p> UIBlockState.new(ui: <code>Entity</code>, control: <code>Control</code>) \u00b6 returns <code>UIBlockState</code></p> <p>no docs found   </p> <p> UIBlockState.get_block_fields() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.set_show_defaults(show_defaults: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.clear_listeners() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.handle_assets \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> UIBlockState.handle_assets=(v : Bool) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.field_h \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.label_w \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.set_sizes(label_width: <code>Num</code>, label_size: <code>Num</code>, field_height: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.set_instance(block: <code>Block</code>, instance: <code>BlockInstance</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.set_instances(block: <code>Block</code>, instances: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.set_blocks_instances(blocks: <code>List</code>, instances: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.do_refresh() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.refresh() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.make_vec(view: <code>ValueView</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.make_color(view: <code>ValueView</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.make_num(view: <code>ValueView</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.make_text(view: <code>ValueView</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.get_asset_picks(types: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.make_asset(view: <code>ValueView</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.make_link(view: <code>ValueView</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.make_path(view: <code>ValueView</code>, tag: <code>Num</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.make_empty_object(name: <code>String</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.make_empty_object(name: <code>String</code>, display: <code>String</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.make_multiple_message() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.make_message(display: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.make_bool(default: <code>Bool</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.make_options(options: <code>List</code>, default: <code>String</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.make_object_field(name: <code>String</code>, view: <code>ValueView</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.make_options_field(view: <code>ValueView</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.make_field(name: <code>String</code>, type: <code>BlockFieldType</code>, view: <code>ValueView</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.make_object(name: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.make_object(name: <code>String</code>, title_color: <code>Color</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.make_object(name: <code>String</code>, details: <code>String</code>, title_color: <code>Color</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.make_label(name: <code>String</code>, width: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.p(depth: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.dump_info(control: <code>Control</code>, d: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.make_mod_pip(kind: <code>BlockFieldModified</code>) \u00b6 returns <code>ModifiedPip</code></p> <p>no docs found   </p> <p> UIBlockState.get_changes(kind: <code>UIBlockChange</code>, value: <code>ValueView</code>, edit_value: <code>Any</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> UIBlockState.get_changes(kind: <code>UIBlockChange</code>, value: <code>ValueView</code>, edit_value: <code>Any</code>, edit_value_fn: <code>Fn</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> UIBlockState.get_changes(kind: <code>UIBlockChange</code>, value: <code>ValueView</code>, change_id: <code>String</code>, edit_value: <code>Any</code>, edit_value_fn: <code>Fn</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> UIBlockState.make_block(instance_view: <code>InstanceView</code>, into: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.make_block(instance_view: <code>InstanceView</code>, into: <code>Control</code>, indent: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.hide_tip(from: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.show_tip(tooltip: <code>String</code>, control: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.make_group(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/button/","title":"Button","text":""},{"location":"api/v/2024.12.3/ui/button/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/ui/button/#luxe-uibutton-module","title":"<code>luxe: ui/button</code> module","text":"<ul> <li>UIButton </li> </ul>"},{"location":"api/v/2024.12.3/ui/button/#uibutton","title":"UIButton","text":"<p><code>import \"luxe: ui/button\" for UIButton</code></p> <p><code>UIButton</code> is a <code>Control</code> that represents a clickable button with optional text content.</p> <pre><code>var btn = UIButton.create(ui)\nUIButton.set_text(btn, \"click me!\")\nControl.set_events(btn) {|event|\n  if(event.type == UIEvent.release) {\n    Log.print(\"clicked button\")\n  }\n}\n</code></pre> <ul> <li>create(ui_entity: <code>Entity</code>)</li> <li>set_text(control: <code>UIButton</code>, text: <code>String</code>)</li> <li>set_outline(control: <code>UIButton</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>)</li> <li>set_shadow(control: <code>UIButton</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>)</li> <li>get_text(control: <code>UIButton</code>)</li> <li>set_font(control: <code>UIButton</code>, font: <code>String</code>)</li> <li>get_font(control: <code>UIButton</code>)</li> <li>set_color(control: <code>UIButton</code>, color: <code>Color</code>)</li> <li>get_color(control: <code>UIButton</code>)</li> <li>set_text_size(control: <code>UIButton</code>, size: <code>Num</code>)</li> <li>get_text_size(control: <code>UIButton</code>)</li> <li>set_align(control: <code>UIButton</code>, align: <code>TextAlign</code>)</li> <li>get_align(control: <code>UIButton</code>)</li> <li>set_align_vertical(control: <code>UIButton</code>, align: <code>TextAlign</code>)</li> <li>get_align_vertical(control: <code>UIButton</code>)</li> <li>get_render_text(control: <code>UIButton</code>)</li> </ul> <p> UIButton.create(ui_entity: <code>Entity</code>) \u00b6 returns <code>UIButton</code></p> <p>Create a new button control.   </p> <p> UIButton.set_text(control: <code>UIButton</code>, text: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Set the text displayed on a button.   </p> <p> UIButton.set_outline(control: <code>UIButton</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>) \u00b6 returns <code>None</code></p> <p>Set the text outline parameters.   </p> <p> UIButton.set_shadow(control: <code>UIButton</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>) \u00b6 returns <code>None</code></p> <p>Set the text shadow parameters.   </p> <p> UIButton.get_text(control: <code>UIButton</code>) \u00b6 returns <code>String</code></p> <p>Get the text displayed on a button.   </p> <p> UIButton.set_font(control: <code>UIButton</code>, font: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Set the font of the text on a button.   </p> <p> UIButton.get_font(control: <code>UIButton</code>) \u00b6 returns <code>Id32</code></p> <p>Get the font asset id of the text on the button. The asset id is returned as the string hash, to get the string use <code>Strings.get</code>.   </p> <p> UIButton.set_color(control: <code>UIButton</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>Set the color of a button.   </p> <p> UIButton.get_color(control: <code>UIButton</code>) \u00b6 returns <code>Color</code></p> <p>Get the color of a button.   </p> <p> UIButton.set_text_size(control: <code>UIButton</code>, size: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the size of the text on a button.   </p> <p> UIButton.get_text_size(control: <code>UIButton</code>) \u00b6 returns <code>Num</code></p> <p>Get the size of the text on a button.   </p> <p> UIButton.set_align(control: <code>UIButton</code>, align: <code>TextAlign</code>) \u00b6 returns <code>None</code></p> <p>Set the horizontal alignment of the text on a button.   </p> <p> UIButton.get_align(control: <code>UIButton</code>) \u00b6 returns <code>TextAlign</code></p> <p>Get the horizontal alignment of the text on a button.   </p> <p> UIButton.set_align_vertical(control: <code>UIButton</code>, align: <code>TextAlign</code>) \u00b6 returns <code>None</code></p> <p>Set the vertical alignment of the text on a button.   </p> <p> UIButton.get_align_vertical(control: <code>UIButton</code>) \u00b6 returns <code>TextAlign</code></p> <p>Get the vertical alignment of the text on a button.   </p> <p> UIButton.get_render_text(control: <code>UIButton</code>) \u00b6 returns <code>RenderText</code></p> <p>Get the underlying lowlevel text render object. Usable with the <code>Render.text_*</code> API.   </p>"},{"location":"api/v/2024.12.3/ui/check/","title":"Check","text":""},{"location":"api/v/2024.12.3/ui/check/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/ui/check/#luxe-uicheck-module","title":"<code>luxe: ui/check</code> module","text":"<ul> <li>UICheck </li> </ul>"},{"location":"api/v/2024.12.3/ui/check/#uicheck","title":"UICheck","text":"<p><code>import \"luxe: ui/check\" for UICheck</code></p> <p><code>UICheck</code> is a <code>Control</code> that represents a boolean toggle.</p> <pre><code>var check = UICheck.create(ui)\nUICheck.set_state(check, true)\nControl.set_events(check) {|event|\n  if(event.type == UIEvent.change) {\n    Log.print(\"Check is toggled %(event.change ? \"on\" : \"off\")\")\n  }\n}\n</code></pre> <ul> <li>create(ui_entity: <code>Entity</code>)</li> <li>set_state(control: <code>UICheck</code>, state: <code>Bool</code>)</li> <li>get_state(control: <code>UICheck</code>)</li> </ul> <p> UICheck.create(ui_entity: <code>Entity</code>) \u00b6 returns <code>UICheck</code></p> <p>Create a new check control.   </p> <p> UICheck.set_state(control: <code>UICheck</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set the current state of a check.   </p> <p> UICheck.get_state(control: <code>UICheck</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether a check is toggled on or off.   </p>"},{"location":"api/v/2024.12.3/ui/color_picker/","title":"Color picker","text":""},{"location":"api/v/2024.12.3/ui/color_picker/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/ui/color_picker/#luxe-uicolor_picker-module","title":"<code>luxe: ui/color_picker</code> module","text":"<ul> <li>ColorPicker </li> <li>ColorPickerData </li> </ul>"},{"location":"api/v/2024.12.3/ui/color_picker/#colorpicker","title":"ColorPicker","text":"<p><code>import \"luxe: ui/color_picker\" for ColorPicker</code></p> <p>no docs found</p> <ul> <li>create(ui: <code>Entity</code>)</li> <li>set_color(control: <code>Control</code>, color: <code>Color</code>)</li> <li>get_color(control: <code>Control</code>)</li> <li>set_allow_hdr(control: <code>Control</code>, allow: <code>Bool</code>)</li> </ul> <p> ColorPicker.create(ui: <code>Entity</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p> <p> ColorPicker.set_color(control: <code>Control</code>, color: <code>Color</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPicker.get_color(control: <code>Control</code>) \u00b6 returns <code>Color</code></p> <p>no docs found   </p> <p> ColorPicker.set_allow_hdr(control: <code>Control</code>, allow: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/color_picker/#colorpickerdata","title":"ColorPickerData","text":"<p><code>import \"luxe: ui/color_picker\" for ColorPickerData</code></p> <p>no docs found</p> <ul> <li>triangle_size</li> <li>outer_ring_size</li> <li>inner_ring_size</li> <li>r</li> <li>g</li> <li>b</li> <li>h</li> <li>s</li> <li>v</li> <li>a</li> <li>color_ldr</li> <li>color_hdr</li> <li>srgb</li> <li>srgb=(value : Bool)</li> <li>hdr_multiplier</li> <li>hdr_multiplier=(value : Num)</li> <li>allow_hdr</li> <li>allow_hdr=(v : Bool)</li> <li>show_hdr</li> <li>show_hdr=(v : Bool)</li> <li>show_components</li> <li>show_components(v: <code>String</code>)</li> <li>debug=(v : Any)</li> <li>new(ui: <code>Control</code>, root: <code>Control</code>)</li> <li>set_allow_hdr(allow: <code>Bool</code>)</li> <li>set_color(color: <code>Color</code>)</li> <li>get_rgba()</li> <li>get_rgba(srgb: <code>Bool</code>, hdr: <code>Bool</code>)</li> <li>get_hsva_component()</li> <li>get_hsva(srgb: <code>Bool</code>)</li> <li>set_rgba(col: <code>Color</code>)</li> <li>set_rgba(col: <code>Color</code>, srgb: <code>Bool</code>)</li> <li>set_rgba(col: <code>Color</code>, srgb: <code>Bool</code>, update_spaces: <code>Bool</code>)</li> <li>set_hsva(col: <code>Any</code>)</li> <li>set_hsva(col: <code>Color</code>, srgb: <code>Bool</code>)</li> <li>set_hsva(col: <code>Color</code>, srgb: <code>Bool</code>, update_spaces: <code>Bool</code>)</li> <li>set_rgba_component(index: <code>Num</code>, value: <code>Num</code>)</li> <li>set_rgba_component(index: <code>Num</code>, value: <code>Num</code>, srgb: <code>Bool</code>)</li> <li>get_rgba_component(index: <code>Num</code>)</li> <li>get_rgba_component(index: <code>Num</code>, srgb: <code>Bool</code>)</li> <li>get_rgba_component(index: <code>Num</code>, srgb: <code>Bool</code>, hdr: <code>Bool</code>)</li> <li>set_hsva_component(index: <code>Num</code>, value: <code>Num</code>)</li> <li>set_hsva_component(index: <code>Num</code>, value: <code>Num</code>, srgb: <code>Bool</code>)</li> <li>get_hsva_component(index: <code>Num</code>)</li> <li>get_hsva_component(index: <code>Num</code>, srgb: <code>Bool</code>)</li> <li>create_colorpicker(ui: <code>Entity</code>, color_view: <code>Control</code>)</li> <li>hdr_settings(ui: <code>UI</code>, data_control: <code>Control</code>)</li> <li>color_display(ui: <code>UI</code>, data_control: <code>Control</code>)</li> <li>colorspace_choice(ui: <code>Any</code>, data_control: <code>Any</code>)</li> <li>hex_input(ui: <code>UI</code>, data_control: <code>Control</code>)</li> <li>rgba_values(ui: <code>UI</code>, color_view: <code>Control</code>)</li> <li>hsva_values(ui: <code>UI</code>, color_view: <code>Control</code>)</li> <li>color_component(ui: <code>Entity</code>, name: <code>String</code>, index: <code>Num</code>, color_view: <code>Control</code>, space: <code>String</code>)</li> <li>create_hsv_wheel(ui: <code>Entity</code>, data_root: <code>Control</code>)</li> </ul> <p> ColorPickerData.triangle_size \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ColorPickerData.outer_ring_size \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ColorPickerData.inner_ring_size \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ColorPickerData.r \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ColorPickerData.g \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ColorPickerData.b \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ColorPickerData.h \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ColorPickerData.s \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ColorPickerData.v \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ColorPickerData.a \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ColorPickerData.color_ldr \u00b6 returns <code>Color</code></p> <p>no docs found   </p> <p> ColorPickerData.color_hdr \u00b6 returns <code>Color</code></p> <p>no docs found   </p> <p> ColorPickerData.srgb \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> ColorPickerData.srgb=(value : Bool) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.hdr_multiplier \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ColorPickerData.hdr_multiplier=(value : Num) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.allow_hdr \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> ColorPickerData.allow_hdr=(v : Bool) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.show_hdr \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> ColorPickerData.show_hdr=(v : Bool) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.show_components \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> ColorPickerData.show_components(v: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.debug=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.new(ui: <code>Control</code>, root: <code>Control</code>) \u00b6 returns <code>ColorPickerData</code></p> <p>no docs found   </p> <p> ColorPickerData.set_allow_hdr(allow: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.set_color(color: <code>Color</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.get_rgba() \u00b6 returns <code>Color</code></p> <p>no docs found   </p> <p> ColorPickerData.get_rgba(srgb: <code>Bool</code>, hdr: <code>Bool</code>) \u00b6 returns <code>Color</code></p> <p>no docs found   </p> <p> ColorPickerData.get_hsva_component() \u00b6 returns <code>Color</code></p> <p>no docs found   </p> <p> ColorPickerData.get_hsva(srgb: <code>Bool</code>) \u00b6 returns <code>Color</code></p> <p>no docs found   </p> <p> ColorPickerData.set_rgba(col: <code>Color</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.set_rgba(col: <code>Color</code>, srgb: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.set_rgba(col: <code>Color</code>, srgb: <code>Bool</code>, update_spaces: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.set_hsva(col: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.set_hsva(col: <code>Color</code>, srgb: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.set_hsva(col: <code>Color</code>, srgb: <code>Bool</code>, update_spaces: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.set_rgba_component(index: <code>Num</code>, value: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.set_rgba_component(index: <code>Num</code>, value: <code>Num</code>, srgb: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.get_rgba_component(index: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.get_rgba_component(index: <code>Num</code>, srgb: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.get_rgba_component(index: <code>Num</code>, srgb: <code>Bool</code>, hdr: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.set_hsva_component(index: <code>Num</code>, value: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.set_hsva_component(index: <code>Num</code>, value: <code>Num</code>, srgb: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.get_hsva_component(index: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.get_hsva_component(index: <code>Num</code>, srgb: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.create_colorpicker(ui: <code>Entity</code>, color_view: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.hdr_settings(ui: <code>UI</code>, data_control: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.color_display(ui: <code>UI</code>, data_control: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.colorspace_choice(ui: <code>Any</code>, data_control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.hex_input(ui: <code>UI</code>, data_control: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.rgba_values(ui: <code>UI</code>, color_view: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.hsva_values(ui: <code>UI</code>, color_view: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.color_component(ui: <code>Entity</code>, name: <code>String</code>, index: <code>Num</code>, color_view: <code>Control</code>, space: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.create_hsv_wheel(ui: <code>Entity</code>, data_root: <code>Control</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/control/","title":"Control","text":""},{"location":"api/v/2024.12.3/ui/control/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/ui/control/#luxe-uicontrol-module","title":"<code>luxe: ui/control</code> module","text":"<ul> <li>Control </li> </ul>"},{"location":"api/v/2024.12.3/ui/control/#control","title":"Control","text":"<p><code>import \"luxe: ui/control\" for Control</code></p> <p>Class for managing controls on UI modifiers. Note that all UI elements are controls, including UIImage, UILabel, UIButton, etc...</p> <pre><code>  _ui = Entity.create(app.ui)\n  UI.create(_ui, 0, 0, app.width, app.height, 0, app.ui_camera)\n\n  var control = Control.create(_ui)\n</code></pre> <ul> <li>create(ui_entity: <code>Entity</code>)</li> <li>destroy(control: <code>Control</code>)</li> <li>destroy_children(control: <code>Control</code>)</li> <li>valid(control: <code>Control</code>)</li> <li>get_ui(control: <code>Control</code>)</li> <li>get(id: <code>String</code>)</li> <li>exists(id: <code>String</code>)</li> <li>clear(control: <code>Control</code>, uiclear_action: <code>UIClear</code>)</li> <li>press(control: <code>Control</code>, state: <code>Bool</code>)</li> <li>enter(control: <code>Control</code>, state: <code>Bool</code>)</li> <li>can_see(control: <code>Control</code>)</li> <li>can_see_area(control: <code>Control</code>, area: <code>Rect</code>)</li> <li>can_see_point(control: <code>Control</code>, point: <code>Vec</code>)</li> <li>set_type(control: <code>Control</code>, type: <code>String</code>)</li> <li>get_type(control: <code>Control</code>)</li> <li>set_id(control: <code>Control</code>, id: <code>String</code>)</li> <li>get_id(control: <code>Control</code>)</li> <li>get_bounds_abs(control: <code>Control</code>, into: <code>List</code>)</li> <li>get_bounds(control: <code>Control</code>, into: <code>List</code>)</li> <li>set_allow_bounds_event(control: <code>Control</code>, state: <code>Bool</code>)</li> <li>get_allow_bounds_event(control: <code>Control</code>)</li> <li>set_bounds_abs(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>)</li> <li>set_bounds(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>)</li> <li>set_pos_abs(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>set_pos(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>set_system_cursor(control: <code>Control</code>, cursor: <code>SystemCursor</code>)</li> <li>set_size(control: <code>Control</code>, w: <code>Num</code>, h: <code>Num</code>)</li> <li>get_pos_x(control: <code>Control</code>)</li> <li>get_pos_x_abs(control: <code>Control</code>)</li> <li>get_pos_y(control: <code>Control</code>)</li> <li>get_pos_y_abs(control: <code>Control</code>)</li> <li>get_width(control: <code>Control</code>)</li> <li>get_height(control: <code>Control</code>)</li> <li>contains(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>get_entity(control: <code>Control</code>)</li> <li>get_parent(control: <code>Control</code>)</li> <li>get_allow_input(control: <code>Control</code>)</li> <li>set_allow_input(control: <code>Control</code>, allow: <code>Bool</code>)</li> <li>set_allow_drag(control: <code>Control</code>, allow: <code>Bool</code>, tag: <code>String</code>)</li> <li>set_droppable_payload(control: <code>Control</code>, value: <code>Handle</code>)</li> <li>get_droppable_payload(control: <code>Control</code>)</li> <li>set_droppable_tags(control: <code>Control</code>, tags: <code>List</code>)</li> <li>get_droppable_tags(control: <code>Control</code>)</li> <li>get_allow_keys(control: <code>Control</code>)</li> <li>set_allow_keys(control: <code>Control</code>, allow: <code>Bool</code>)</li> <li>get_allow_tab(control: <code>Control</code>)</li> <li>set_allow_tab(control: <code>Control</code>, allow: <code>Bool</code>)</li> <li>get_visible(control: <code>Control</code>)</li> <li>set_visible(control: <code>Control</code>, visible: <code>Bool</code>)</li> <li>get_opacity(control: <code>Control</code>)</li> <li>set_opacity(control: <code>Control</code>, opacity: <code>Num</code>)</li> <li>get_disabled(control: <code>Control</code>)</li> <li>set_disabled(control: <code>Control</code>, disabled: <code>Bool</code>)</li> <li>get_enabled(control: <code>Control</code>)</li> <li>set_enabled(control: <code>Control</code>, enabled: <code>Bool</code>)</li> <li>get_clip(control: <code>Control</code>)</li> <li>set_clip(control: <code>Control</code>, clip: <code>Bool</code>)</li> <li>get_nodes(control: <code>Control</code>)</li> <li>get_depth(control: <code>Control</code>)</li> <li>get_depth_offset(control: <code>Control</code>)</li> <li>set_depth_offset(control: <code>Control</code>, depth_offset: <code>Num</code>)</li> <li>get_input_inside(control: <code>Control</code>)</li> <li>get_input_pressed(control: <code>Control</code>)</li> <li>child_at_point(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>child_count(control: <code>Control</code>)</li> <li>child_index(control: <code>Control</code>, child: <code>Control</code>)</li> <li>child_get(control: <code>Control</code>, index: <code>Num</code>)</li> <li>child_add(control: <code>Control</code>, child: <code>Control</code>, internal: <code>Bool</code>)</li> <li>child_add(control: <code>Control</code>, child: <code>Control</code>)</li> <li>child_remove(control: <code>Control</code>, child: <code>Control</code>)</li> <li>children_bounds(control: <code>Control</code>, into: <code>List</code>)</li> <li>set_behave(control: <code>Control</code>, behave: <code>UIBehave</code>)</li> <li>get_behave(control: <code>Control</code>)</li> <li>set_contain(control: <code>Control</code>, contain: <code>UIContain</code>)</li> <li>get_contain(control: <code>Control</code>)</li> <li>set_margin(control: <code>Control</code>, left: <code>Num</code>, top: <code>Num</code>, right: <code>Num</code>, bottom: <code>Num</code>)</li> <li>set_limits(control: <code>Control</code>, min_x: <code>Num</code>, min_y: <code>Num</code>, max_x: <code>Num</code>, max_y: <code>Num</code>)</li> <li>get_margin(control: <code>Control</code>)</li> <li>set_render(control: <code>Control</code>, fn: <code>Fn</code>)</li> <li>set_events(control: <code>Control</code>, fn: <code>Fn</code>)</li> <li>unset_events(control: <code>Control</code>, id: <code>String</code>)</li> <li>set_process(control: <code>Control</code>, fn: <code>Fn</code>)</li> <li>get_state_data(control: <code>Control</code>)</li> <li>set_state_data(control: <code>Control</code>, data: <code>Any</code>)</li> </ul> <p> Control.create(ui_entity: <code>Entity</code>) \u00b6 returns <code>Control</code></p> <p>Create a \"blank\" control for layout or custom input/drawing. Returns the new Control.   </p> <p> Control.destroy(control: <code>Control</code>) \u00b6 returns <code>None</code></p> <p>Destroy an existing control.</p> <pre><code>  var control = Control.create(_ui)\n  //do stuff and then later...\n  Control.destroy(control)\n</code></pre> <p> Control.destroy_children(control: <code>Control</code>) \u00b6 returns <code>None</code></p> <p>Destroy the children of a control.   </p> <p> Control.valid(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>Check if a control exists and has not been destroyed.</p> <pre><code>  var control = Control.create(_ui)\n  Log.print(Control.valid(control)) //true\n  Control.destroy(control)\n  Log.print(Control.valid(control)) //false\n</code></pre> <p> Control.get_ui(control: <code>Control</code>) \u00b6 returns <code>Entity</code></p> <p>Get UI entity a control is part of.</p> <pre><code>  var control = Control.create(_ui)\n  var control_ui = Control.get_ui(control)\n  Log.print(control_ui == _ui) //true\n</code></pre> <p> Control.get(id: <code>String</code>) \u00b6 returns <code>Control</code></p> <p>Get a control by its id.</p> <pre><code>  var control = Control.create(_ui)\n  Control.set_id(control, \"test_id\")\n  var control_by_id = Control.get(\"test_id\")\n  Log.print(control == control_by_id) //true\n</code></pre> <p> Control.exists(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Check if a control with a specific id exists.   </p> <p> Control.clear(control: <code>Control</code>, uiclear_action: <code>UIClear</code>) \u00b6 returns <code>None</code></p> <p>Clear the children of a control in a specific manner.   </p> <p> Control.press(control: <code>Control</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Send a press or release event to the control (in the center of the control)   </p> <p> Control.enter(control: <code>Control</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Send a enter or exit event to the control   </p> <p> Control.can_see(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if this control can be seen, or false if clipped.   </p> <p> Control.can_see_area(control: <code>Control</code>, area: <code>Rect</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if the area at this control can be seen or false if clipped.   </p> <p> Control.can_see_point(control: <code>Control</code>, point: <code>Vec</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if the point at this control can be seen or false if clipped.   </p> <p> Control.set_type(control: <code>Control</code>, type: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Control.get_type(control: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Control.set_id(control: <code>Control</code>, id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Set the id of a control. Good for debugging and retrieving controls by their id. Must be unique, so adding <code>ID.unique()</code> to the id can be useful.</p> <pre><code>  var control = Control.create(_ui)\n  Control.set_id(control, \"good_recognizable_control_name_%(ID.unique())\")\n</code></pre> <p> Control.get_id(control: <code>Control</code>) \u00b6 returns <code>String</code></p> <p>Retrieve the id of a control.   </p> <p> Control.get_bounds_abs(control: <code>Control</code>, into: <code>List</code>) \u00b6 returns <code>None</code></p> <p>Retrieve the bounds(position and size) of a control (relative to the UI modifier) into a list <code>[x, y, width, height]</code>. The passed list must have at least 4 elements and the function will write into the first 4. Passing a list into the function instead of returning a value is to avoid allocating memory where not needed.</p> <pre><code>  var parent = Control.create(_ui)\n  Control.set_pos(parent, 50, 50)\n  var child = Control.create(_ui)\n  Control.child_add(parent, child)\n  Control.set_pos(child, 100, 100)\n  Control.set_size(child, 20, 20)\n  var bounds = [0,0,0,0]\n  Control.get_bounds_abs(child, bounds)\n  Log.print(bounds) // [150, 150, 20, 20]\n</code></pre> <p> Control.get_bounds(control: <code>Control</code>, into: <code>List</code>) \u00b6 returns <code>None</code></p> <p>Retrieve the bounds(position and size) of a control (relative to their parent control or ui modifier if there is none) into a list <code>[x, y, width, height]</code>. The passed list must have at least 4 elements and the function will write into the first 4. Passing a list into the function instead of returning a value is to avoid allocating memory where not needed.</p> <pre><code>  var parent = Control.create(_ui)\n  Control.set_pos(parent, 50, 50)\n  var child = Control.create(_ui)\n  Control.child_add(parent, child)\n  Control.set_pos(child, 100, 100)\n  Control.set_size(child, 20, 20)\n  var bounds = [0,0,0,0]\n  Control.get_bounds(child, bounds)\n  Log.print(bounds) // [100, 100, 20, 20]\n</code></pre> <p> Control.set_allow_bounds_event(control: <code>Control</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Enables bounds events for the control. Since there are many controls that may be resized during layout events, only ones that ask for the event  will receive it to save time.   </p> <p> Control.get_allow_bounds_event(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if this control sends bounds events.   </p> <p> Control.set_bounds_abs(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the control bounds(position and size) relative to the UI modifier.   </p> <p> Control.set_bounds(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the control bounds(position and size) relative to the parent control.   </p> <p> Control.set_pos_abs(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the control position relative to the UI modifier.   </p> <p> Control.set_pos(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the control position relative to the parent control, or UI modifier if no parent exists.   </p> <p> Control.set_system_cursor(control: <code>Control</code>, cursor: <code>SystemCursor</code>) \u00b6 returns <code>None</code></p> <p>If the control has input enabled, when entered it will set the system cursor to the given type.   </p> <p> Control.set_size(control: <code>Control</code>, w: <code>Num</code>, h: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the control size.   </p> <p> Control.get_pos_x(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>Get the control position x component relative to its parent control.   </p> <p> Control.get_pos_x_abs(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>Get the control position x component.   </p> <p> Control.get_pos_y(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>Get the control position y component relative to its parent control.   </p> <p> Control.get_pos_y_abs(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>Get the control position y component.   </p> <p> Control.get_width(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>Get the control width.   </p> <p> Control.get_height(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>Get the control height.   </p> <p> Control.contains(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>Bool</code></p> <p>Check whether the a point is within the control bounds   </p> <p> Control.get_entity(control: <code>Control</code>) \u00b6 returns <code>Entity</code></p> <p>Get the entity that has the UI modifier the control in.   </p> <p> Control.get_parent(control: <code>Control</code>) \u00b6 returns <code>Control</code></p> <p>Get the entity this entity is a child of or <code>null</code> if there isnt any.   </p> <p> Control.get_allow_input(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether the control recieves input events in its <code>set_process</code> function.   </p> <p> Control.set_allow_input(control: <code>Control</code>, allow: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set whether the control recieves input events in its <code>set_process</code> function.   </p> <p> Control.set_allow_drag(control: <code>Control</code>, allow: <code>Bool</code>, tag: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Set whether the control recieves drag events   </p> <p> Control.set_droppable_payload(control: <code>Control</code>, value: <code>Handle</code>) \u00b6 returns <code>None</code></p> <p>Set a value that will be passed through the drag event to the drop event on the other side.            This value is a handle/number, so you can pass api handles, a number, a hashed string, or a block instance   </p> <p> Control.get_droppable_payload(control: <code>Control</code>) \u00b6 returns <code>Handle</code></p> <p>Get the drop payload for this control   </p> <p> Control.set_droppable_tags(control: <code>Control</code>, tags: <code>List</code>) \u00b6 returns <code>None</code></p> <p>Set the droppable tags that are allowed for this control, as an array of strings   </p> <p> Control.get_droppable_tags(control: <code>Control</code>) \u00b6 returns <code>List</code></p> <p>Get the droppable tags that are allowed for this control, as an array of strings   </p> <p> Control.get_allow_keys(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether the control recieves key events in its <code>set_process</code> function.   </p> <p> Control.set_allow_keys(control: <code>Control</code>, allow: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set whether the control recieves key events in its <code>set_process</code> function.   </p> <p> Control.get_allow_tab(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether the control can be \"tabbed\" to.   </p> <p> Control.set_allow_tab(control: <code>Control</code>, allow: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set whether the control can be \"tabbed\" to.   </p> <p> Control.get_visible(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether a control is visible.   </p> <p> Control.set_visible(control: <code>Control</code>, visible: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set whether a control (or its children) is visible. Note that when a control is not visible, it also doesnt contribute to the layout.   </p> <p> Control.get_opacity(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>Get a control opacity value.   </p> <p> Control.set_opacity(control: <code>Control</code>, opacity: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set a control opacity value. Affects children opacity as well.   </p> <p> Control.get_disabled(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether a control is disabled. This refers to the \"inputable\" state of inputs like buttons or text fields.   </p> <p> Control.set_disabled(control: <code>Control</code>, disabled: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set whether a control is disabled. This refers to the \"inputable\" state of inputs like buttons or text fields.   </p> <p> Control.get_enabled(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether a control is enabled. This refers to the \"inputable\" state of inputs like buttons or text fields.   </p> <p> Control.set_enabled(control: <code>Control</code>, enabled: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set whether a control is enabled. This refers to the \"inputable\" state of inputs like buttons or text fields.   </p> <p> Control.get_clip(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether a control should clip its contents.   </p> <p> Control.set_clip(control: <code>Control</code>, clip: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set whether a control should clip its contents.   </p> <p> Control.get_nodes(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>Get how many child controls this control has recursively. So 1 if it doesnt have any children, 2 if it has 1 child, 3 if it has 2 children or if it has 1 child which itself has a child, etc... Only valid after <code>UI.commit</code>.   </p> <p> Control.get_depth(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>Get the depth generated for a control, not including the depth offset.   </p> <p> Control.get_depth_offset(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>Get the depth offset of a control.   </p> <p> Control.set_depth_offset(control: <code>Control</code>, depth_offset: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the depth offset for a control, allowing you to move it in front or behind other controls if the generated depth doesnt work for you   </p> <p> Control.get_input_inside(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>Check whether the input (usually mouse cursor) is currently in a control. (In sync with <code>UIEvent.enter</code> and <code>UIEvent.exit</code>)   </p> <p> Control.get_input_pressed(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>Check whether the input (usually mouse cursor) is currently in a control and any of its buttons are pressed.   </p> <p> Control.child_at_point(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>Control</code></p> <p>Get the top child control at a specific (absolute) point.   </p> <p> Control.child_count(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>Get the amount of children a control has.   </p> <p> Control.child_index(control: <code>Control</code>, child: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>Get the index of a child control.   </p> <p> Control.child_get(control: <code>Control</code>, index: <code>Num</code>) \u00b6 returns <code>Child</code></p> <p>Get a child control by its index.   </p> <p> Control.child_add(control: <code>Control</code>, child: <code>Control</code>, internal: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Make a control the child control of another control. If you mark the child as internal, it wont be queried by other methods affecting children.   </p> <p> Control.child_add(control: <code>Control</code>, child: <code>Control</code>) \u00b6 returns <code>None</code></p> <p>Make a control the child control of another control. This means the childs position will be relative to its parent, layout depends a lot on those relationships and its used by functions like destroy_children.</p> <pre><code>  //create parent\n  var parent = Control.create(_ui)\n  Control.set_bounds(parent, 200, 200, 100, 100)\n  //create child\n  var child = Control.create(_ui)\n  Control.set_bounds(child, 25, 25, 50, 50)\n\n  //parent child to parent\n  Control.child_add(parent, child)\n\n  var bounds = [0,0,0,0]\n  Control.get_bounds_abs(child, bounds)\n  Log.print(bounds) //[225, 225, 50, 50]\n\n  Control.clear(parent, UIClear.destroy)\n  Log.print(Control.child_count(parent)) //0\n  Log.print(Control.valid(child)) //false\n\n  UI.commit(_ui)\n</code></pre> <p> Control.child_remove(control: <code>Control</code>, child: <code>Control</code>) \u00b6 returns <code>None</code></p> <p>Remove a child from a control, unparenting it.   </p> <p> Control.children_bounds(control: <code>Control</code>, into: <code>List</code>) \u00b6 returns <code>None</code></p> <p>Get the combined bounds of all children of a control into a list <code>[x, y, width, height]</code>. The passed list must have at least 4 elements and the function will write into the first 4. Passing a list into the function instead of returning a value is to avoid allocating memory where not needed.   </p> <p> Control.set_behave(control: <code>Control</code>, behave: <code>UIBehave</code>) \u00b6 returns <code>None</code></p> <p>Set how the control behaves in the layout as a child of its container. You can combine characteristics with a bit or operator (<code>|</code>).   </p> <p> Control.get_behave(control: <code>Control</code>) \u00b6 returns <code>UIBehave</code></p> <p>Returns the behave bitflags for the control   </p> <p> Control.set_contain(control: <code>Control</code>, contain: <code>UIContain</code>) \u00b6 returns <code>None</code></p> <p>Set how the control behaves in the layout as a container of its children. You can combine characteristics with a bit or operator (<code>|</code>).   </p> <p> Control.get_contain(control: <code>Control</code>) \u00b6 returns <code>UIContain</code></p> <p>Returns the contain bitflags for the control   </p> <p> Control.set_margin(control: <code>Control</code>, left: <code>Num</code>, top: <code>Num</code>, right: <code>Num</code>, bottom: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the margins of a control. Only the margins set in <code>set_behave</code> are actually observed.   </p> <p> Control.set_limits(control: <code>Control</code>, min_x: <code>Num</code>, min_y: <code>Num</code>, max_x: <code>Num</code>, max_y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the min and max size of a control when using layout.   </p> <p> Control.get_margin(control: <code>Control</code>) \u00b6 returns <code>List</code></p> <p>Get the margins of a control.   </p> <p> Control.set_render(control: <code>Control</code>, fn: <code>Fn</code>) \u00b6 returns <code>None</code></p> <p>Set a custom render function with the arguments <code>|control, state, x, y, w, h|</code>.  Useful for making your own controls.   </p> <p> Control.set_events(control: <code>Control</code>, fn: <code>Fn</code>) \u00b6 returns <code>String</code></p> <p>Add a function to handle events on a control. Returns an <code>id</code> for the newly added event that can be used to remove it.</p> <pre><code>  var btn = UIButton.create(ui)\n  UIButton.set_text(btn, \"click me!\")\n  Control.set_events(btn) {|event|\n    if(event.type == UIEvent.release) {\n      Log.print(\"clicked button\")\n    }\n  }\n</code></pre> <p> Control.unset_events(control: <code>Control</code>, id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Remove an event handling function from a control. Takes in the id that was returned upon registering the function.   </p> <p> Control.set_process(control: <code>Control</code>, fn: <code>Fn</code>) \u00b6 returns <code>None</code></p> <p>Set a custom process function with the arguments <code>|control, state, event, x, y, w, h|</code>.  Useful for making your own controls.   </p> <p> Control.get_state_data(control: <code>Control</code>) \u00b6 returns <code>Any</code></p> <p>Get the state data associated with this control.   </p> <p> Control.set_state_data(control: <code>Control</code>, data: <code>Any</code>) \u00b6 returns <code>None</code></p> <p>Set state data associated with this control. Can be any wren object.   </p>"},{"location":"api/v/2024.12.3/ui/image/","title":"Image","text":""},{"location":"api/v/2024.12.3/ui/image/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/ui/image/#luxe-uiimage-module","title":"<code>luxe: ui/image</code> module","text":"<ul> <li>UIImage </li> </ul>"},{"location":"api/v/2024.12.3/ui/image/#uiimage","title":"UIImage","text":"<p><code>import \"luxe: ui/image\" for UIImage</code></p> <p><code>UIImage</code> is a type of <code>Control</code> made to display images.</p> <pre><code>  var image = UIImage.create(ui)\n  UIImage.set_image(image, Assets.image(\"path/to/image\"))\n  //setup positioning etc with `Control.___`\n</code></pre> <ul> <li>create(ui_entity: <code>Entity</code>)</li> <li>set_image(control: <code>UIImage</code>, image: <code>Image</code>)</li> <li>set_image(control: <code>UIImage</code>, image: <code>Image</code>, flags: <code>UIImageFlags</code>)</li> <li>get_image(control: <code>UIImage</code>)</li> <li>set_material(control: <code>UIImage</code>, material: <code>Material</code>)</li> <li>set_uv(control: <code>UIImage</code>, left: <code>Num</code>, top: <code>Num</code>, right: <code>Num</code>, bottom: <code>Num</code>)</li> <li>set_color(control: <code>UIImage</code>, color: <code>Color</code>)</li> <li>get_color(control: <code>UIImage</code>)</li> <li>set_angle(control: <code>UIImage</code>, degrees: <code>Num</code>)</li> </ul> <p> UIImage.create(ui_entity: <code>Entity</code>) \u00b6 returns <code>UIImage</code></p> <p>Create a new UIImage control.   </p> <p> UIImage.set_image(control: <code>UIImage</code>, image: <code>Image</code>) \u00b6 returns <code>None</code></p> <p>Set image of <code>UIImage</code> control (uses <code>UIImageFlags.none</code> with linear interpolation). Setting an image will reset any set custom material and use an internal material created from the <code>luxe: material_basis/ui_solid</code> basis instead.   </p> <p> UIImage.set_image(control: <code>UIImage</code>, image: <code>Image</code>, flags: <code>UIImageFlags</code>) \u00b6 returns <code>None</code></p> <p>Set displayed image of <code>UIImage</code> control. The flags determine what sampler is used to read the image. Setting an image will reset any set custom material and use an internal material created from the <code>luxe: material_basis/ui_solid</code> basis instead. <pre><code>  var image = UIImage.create(ui)\n  UIImage.set_image(image, Assets.image(\"path/to/image\"), UIImageFlags.pixelated)\n</code></pre></p> <p> UIImage.get_image(control: <code>UIImage</code>) \u00b6 returns <code>Image</code></p> <p>Get currently displayed image of <code>UIImage</code>.   </p> <p> UIImage.set_material(control: <code>UIImage</code>, material: <code>Material</code>) \u00b6 returns <code>None</code></p> <p>Set the material used to render the <code>UIImage</code>. Setting a custom material will reset the controls image, so you need to author that via the inputs on your material.   </p> <p> UIImage.set_uv(control: <code>UIImage</code>, left: <code>Num</code>, top: <code>Num</code>, right: <code>Num</code>, bottom: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the uv bounds, default is (0, 0, 1, 1). Drawing only top left of the image would be (0.5, 0.5, 1, 1).   </p> <p> UIImage.set_color(control: <code>UIImage</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>Set the tint color of the <code>UIImage</code>. Communicated to the shader via vertex colors.   </p> <p> UIImage.get_color(control: <code>UIImage</code>) \u00b6 returns <code>Color</code></p> <p>Get the current tint color of the <code>UIImage</code>.   </p> <p> UIImage.set_angle(control: <code>UIImage</code>, degrees: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Get the angle of the <code>UIImage</code> control. Note that this will not affect child controls.   </p>"},{"location":"api/v/2024.12.3/ui/label/","title":"Label","text":""},{"location":"api/v/2024.12.3/ui/label/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/ui/label/#luxe-uilabel-module","title":"<code>luxe: ui/label</code> module","text":"<ul> <li>UIAutoSize </li> <li>UILabel </li> <li>UIOverflowScroll </li> </ul>"},{"location":"api/v/2024.12.3/ui/label/#uiautosize","title":"UIAutoSize","text":"<p><code>import \"luxe: ui/label\" for UIAutoSize</code></p> <p>no docs found</p> <ul> <li>none</li> <li>width</li> <li>height</li> <li>both</li> </ul> <p> UIAutoSize.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIAutoSize.width \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIAutoSize.height \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIAutoSize.both \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/label/#uilabel","title":"UILabel","text":"<p><code>import \"luxe: ui/label\" for UILabel</code></p> <p>no docs found</p> <ul> <li>create(ui_entity: <code>Any</code>)</li> <li>set_text(label: <code>Any</code>, text: <code>Any</code>)</li> <li>get_text(label: <code>Any</code>)</li> <li>get_render_text(label: <code>Any</code>)</li> <li>get_text_extents(label: <code>Any</code>, offset: <code>Any</code>, count: <code>Any</code>)</li> <li>get_text_extents(label: <code>Any</code>)</li> <li>set_font(label: <code>Any</code>, font: <code>Any</code>)</li> <li>get_font(label: <code>Any</code>)</li> <li>set_color(label: <code>Any</code>, color: <code>Any</code>)</li> <li>get_color(label: <code>Any</code>)</li> <li>set_color_hover(label: <code>Any</code>, color: <code>Any</code>)</li> <li>get_color_hover(label: <code>Any</code>)</li> <li>set_text_size(label: <code>Any</code>, size: <code>Any</code>)</li> <li>get_text_size(label: <code>Any</code>)</li> <li>set_align(label: <code>Any</code>, align: <code>Any</code>)</li> <li>get_align(label: <code>Any</code>)</li> <li>set_align_vertical(label: <code>Any</code>, align: <code>Any</code>)</li> <li>get_align_vertical(label: <code>Any</code>)</li> <li>set_text_style(label: <code>Any</code>, style: <code>TextStyle</code>)</li> <li>get_text_style(label: <code>Any</code>)</li> <li>set_max_visible(label: <code>Any</code>, visible_count: <code>Num</code>)</li> <li>get_max_visible(label: <code>Any</code>)</li> <li>set_auto_size(label: <code>Any</code>, state: <code>UIAutoSize</code>)</li> <li>set_overflow_scroll(label: <code>Any</code>, type: <code>UIOverflowScroll</code>, speed: <code>Num</code>, wait: <code>Num</code>, pause: <code>Num</code>)</li> <li>set_overflow_scroll(label: <code>Any</code>, speed: <code>Num</code>, wait: <code>Num</code>, pause: <code>Num</code>)</li> <li>set_loc(label: <code>Any</code>, space: <code>String</code>, key: <code>String</code>)</li> <li>set_loc(label: <code>Any</code>, key: <code>String</code>)</li> <li>set_loc_with_args(label: <code>Any</code>, space: <code>String</code>, key: <code>String</code>, args: <code>List</code>)</li> <li>set_loc_with_args(label: <code>Any</code>, key: <code>String</code>, args: <code>List</code>)</li> <li>set_outline(control: <code>UILabel</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>)</li> <li>set_shadow(control: <code>UILabel</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>)</li> </ul> <p> UILabel.create(ui_entity: <code>Any</code>) \u00b6 returns <code>UILabel</code></p> <p>no docs found   </p> <p> UILabel.set_text(label: <code>Any</code>, text: <code>Any</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UILabel.get_text(label: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> UILabel.get_render_text(label: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.get_text_extents(label: <code>Any</code>, offset: <code>Any</code>, count: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.get_text_extents(label: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.set_font(label: <code>Any</code>, font: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.get_font(label: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.set_color(label: <code>Any</code>, color: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.get_color(label: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.set_color_hover(label: <code>Any</code>, color: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.get_color_hover(label: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.set_text_size(label: <code>Any</code>, size: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.get_text_size(label: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.set_align(label: <code>Any</code>, align: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.get_align(label: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.set_align_vertical(label: <code>Any</code>, align: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.get_align_vertical(label: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.set_text_style(label: <code>Any</code>, style: <code>TextStyle</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UILabel.get_text_style(label: <code>Any</code>) \u00b6 returns <code>TextStyle</code></p> <p>no docs found   </p> <p> UILabel.set_max_visible(label: <code>Any</code>, visible_count: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UILabel.get_max_visible(label: <code>Any</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> UILabel.set_auto_size(label: <code>Any</code>, state: <code>UIAutoSize</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UILabel.set_overflow_scroll(label: <code>Any</code>, type: <code>UIOverflowScroll</code>, speed: <code>Num</code>, wait: <code>Num</code>, pause: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UILabel.set_overflow_scroll(label: <code>Any</code>, speed: <code>Num</code>, wait: <code>Num</code>, pause: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UILabel.set_loc(label: <code>Any</code>, space: <code>String</code>, key: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UILabel.set_loc(label: <code>Any</code>, key: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.set_loc_with_args(label: <code>Any</code>, space: <code>String</code>, key: <code>String</code>, args: <code>List</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UILabel.set_loc_with_args(label: <code>Any</code>, key: <code>String</code>, args: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.set_outline(control: <code>UILabel</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>) \u00b6 returns <code>None</code></p> <p>Set the text outline parameters.   </p> <p> UILabel.set_shadow(control: <code>UILabel</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>) \u00b6 returns <code>None</code></p> <p>Set the text shadow parameters.   </p>"},{"location":"api/v/2024.12.3/ui/label/#uioverflowscroll","title":"UIOverflowScroll","text":"<p><code>import \"luxe: ui/label\" for UIOverflowScroll</code></p> <p>no docs found</p> <ul> <li>none</li> <li>always</li> <li>width_overflow</li> </ul> <p> UIOverflowScroll.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIOverflowScroll.always \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIOverflowScroll.width_overflow \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/list/","title":"List","text":""},{"location":"api/v/2024.12.3/ui/list/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/ui/list/#luxe-uilist-module","title":"<code>luxe: ui/list</code> module","text":"<ul> <li>UIList </li> </ul>"},{"location":"api/v/2024.12.3/ui/list/#uilist","title":"UIList","text":"<p><code>import \"luxe: ui/list\" for UIList</code></p> <p>no docs found</p> <ul> <li>create(ui_entity: <code>Any</code>)</li> <li>add(list: <code>Any</code>, control: <code>Any</code>)</li> <li>remove(list: <code>Any</code>, control: <code>Any</code>)</li> <li>clear(list: <code>Any</code>, uiclear_action: <code>Any</code>)</li> <li>refresh(list: <code>Any</code>)</li> <li>set_flex_width(list: <code>Any</code>, state: <code>Any</code>)</li> <li>set_percent(list: <code>Any</code>, vertical: <code>Any</code>, horizontal: <code>Any</code>)</li> <li>set_percent_v(list: <code>Any</code>, vertical: <code>Any</code>)</li> <li>set_percent_h(list: <code>Any</code>, horizontal: <code>Any</code>)</li> <li>get_percent_v(list: <code>Any</code>)</li> <li>get_percent_h(list: <code>Any</code>)</li> <li>set_scroll(list: <code>Any</code>, vertical: <code>Any</code>, horizontal: <code>Any</code>)</li> <li>set_scroll_v(list: <code>Any</code>, vertical: <code>Any</code>)</li> <li>set_scroll_h(list: <code>Any</code>, horizontal: <code>Any</code>)</li> <li>get_scroll_v(list: <code>Any</code>)</li> <li>get_scroll_h(list: <code>Any</code>)</li> <li>can_scroll_v(list: <code>Any</code>)</li> <li>can_scroll_h(list: <code>Any</code>)</li> <li>count(list: <code>Any</code>)</li> <li>get(list: <code>Any</code>, index: <code>Any</code>)</li> <li>index(list: <code>Any</code>, control: <code>Any</code>)</li> </ul> <p> UIList.create(ui_entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.add(list: <code>Any</code>, control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.remove(list: <code>Any</code>, control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.clear(list: <code>Any</code>, uiclear_action: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.refresh(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.set_flex_width(list: <code>Any</code>, state: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.set_percent(list: <code>Any</code>, vertical: <code>Any</code>, horizontal: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.set_percent_v(list: <code>Any</code>, vertical: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.set_percent_h(list: <code>Any</code>, horizontal: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.get_percent_v(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.get_percent_h(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.set_scroll(list: <code>Any</code>, vertical: <code>Any</code>, horizontal: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.set_scroll_v(list: <code>Any</code>, vertical: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.set_scroll_h(list: <code>Any</code>, horizontal: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.get_scroll_v(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.get_scroll_h(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.can_scroll_v(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.can_scroll_h(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.count(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.get(list: <code>Any</code>, index: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.index(list: <code>Any</code>, control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/list_filtered/","title":"List filtered","text":""},{"location":"api/v/2024.12.3/ui/list_filtered/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/ui/list_filtered/#luxe-uilist_filtered-module","title":"<code>luxe: ui/list_filtered</code> module","text":"<ul> <li>State </li> <li>UIListFiltered </li> <li>UIListFilteredItem </li> </ul>"},{"location":"api/v/2024.12.3/ui/list_filtered/#state","title":"State","text":"<p><code>import \"luxe: ui/list_filtered\" for State</code></p> <p>no docs found</p> <ul> <li>list</li> <li>set_filter_sizes(height: <code>Num</code>, text_size: <code>Num</code>)</li> <li>set_filter_string(text: <code>String</code>)</li> <li>add(control: <code>Any</code>, keywords: <code>Any</code>)</li> <li>remove(control: <code>Any</code>)</li> <li>clear(uiclear_action: <code>Any</code>)</li> <li>refresh()</li> <li>focus()</li> <li>placeholder=(v : Any)</li> <li>placeholder</li> <li>events</li> <li>new(ui: <code>Any</code>, control: <code>Any</code>)</li> <li>has_filter</li> <li>get_filter()</li> <li>force_filter(text: <code>Any</code>, focus: <code>Any</code>)</li> <li>cancel_filter()</li> <li>filter(filter: <code>String</code>)</li> <li>filter_and_sort(items: <code>List</code>, filter: <code>String</code>)</li> </ul> <p> State.list \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.set_filter_sizes(height: <code>Num</code>, text_size: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.set_filter_string(text: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.add(control: <code>Any</code>, keywords: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.remove(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.clear(uiclear_action: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.refresh() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.focus() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.placeholder=(v : Any) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> State.placeholder \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> State.events \u00b6 returns <code>Events</code></p> <p>no docs found   </p> <p> State.new(ui: <code>Any</code>, control: <code>Any</code>) \u00b6 returns <code>State</code></p> <p>no docs found   </p> <p> State.has_filter \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.get_filter() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.force_filter(text: <code>Any</code>, focus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.cancel_filter() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.filter(filter: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.filter_and_sort(items: <code>List</code>, filter: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/list_filtered/#uilistfiltered","title":"UIListFiltered","text":"<p><code>import \"luxe: ui/list_filtered\" for UIListFiltered</code></p> <p>no docs found</p> <ul> <li>MATCH</li> <li>create(ui: <code>Any</code>)</li> <li>set_bounds(list: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>)</li> <li>set_size(list: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>)</li> <li>set_filter_sizes(list: <code>Any</code>, height: <code>Num</code>, text_size: <code>Num</code>)</li> <li>on_filter(list: <code>Control</code>, fn: <code>Fn</code>)</li> <li>get_placeholder(list: <code>Any</code>, text: <code>Any</code>)</li> <li>set_placeholder(list: <code>Any</code>, text: <code>Any</code>)</li> <li>set_filter(list: <code>Any</code>, fn: <code>Any</code>)</li> <li>get_filter(list: <code>Any</code>)</li> <li>set_filter_string(list: <code>Any</code>, text: <code>String</code>)</li> <li>get_list_view(list: <code>Any</code>)</li> <li>add(list: <code>Any</code>, control: <code>Any</code>, keywords: <code>Any</code>)</li> <li>remove(list: <code>Any</code>, control: <code>Any</code>)</li> <li>clear(list: <code>Any</code>, uiclear_action: <code>Any</code>)</li> <li>refresh(list: <code>Any</code>)</li> <li>focus(list: <code>Any</code>)</li> </ul> <p> UIListFiltered.MATCH \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.create(ui: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.set_bounds(list: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.set_size(list: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.set_filter_sizes(list: <code>Any</code>, height: <code>Num</code>, text_size: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.on_filter(list: <code>Control</code>, fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.get_placeholder(list: <code>Any</code>, text: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.set_placeholder(list: <code>Any</code>, text: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.set_filter(list: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.get_filter(list: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> UIListFiltered.set_filter_string(list: <code>Any</code>, text: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.get_list_view(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.add(list: <code>Any</code>, control: <code>Any</code>, keywords: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.remove(list: <code>Any</code>, control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.clear(list: <code>Any</code>, uiclear_action: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.refresh(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.focus(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/list_filtered/#uilistfiltereditem","title":"UIListFilteredItem","text":"<p><code>import \"luxe: ui/list_filtered\" for UIListFilteredItem</code></p> <p>no docs found</p> <ul> <li>control</li> <li>keywords</li> <li>result</li> <li>result=(v : FuzzyResult)</li> <li>new(control: <code>Control</code>, keywords: <code>List</code>)</li> </ul> <p> UIListFilteredItem.control \u00b6 returns <code>Control</code></p> <p>no docs found   </p> <p> UIListFilteredItem.keywords \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> UIListFilteredItem.result \u00b6 returns <code>FuzzyResult</code></p> <p>no docs found   </p> <p> UIListFilteredItem.result=(v : FuzzyResult) \u00b6 returns <code>FuzzyResult</code></p> <p>no docs found   </p> <p> UIListFilteredItem.new(control: <code>Control</code>, keywords: <code>List</code>) \u00b6 returns <code>UIListFilteredItem</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/panel/","title":"Panel","text":""},{"location":"api/v/2024.12.3/ui/panel/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/ui/panel/#luxe-uipanel-module","title":"<code>luxe: ui/panel</code> module","text":"<ul> <li>UIPanel </li> </ul>"},{"location":"api/v/2024.12.3/ui/panel/#uipanel","title":"UIPanel","text":"<p><code>import \"luxe: ui/panel\" for UIPanel</code></p> <p>no docs found</p> <ul> <li>create(ui: <code>Entity</code>)</li> <li>set_color(panel: <code>Control</code>, color: <code>Color</code>)</li> <li>get_color(panel: <code>Control</code>)</li> <li>set_border(panel: <code>Control</code>, size: <code>Num</code>, color: <code>Color</code>)</li> <li>set_radius(panel: <code>Control</code>, radius: <code>Float4</code>, smoothness: <code>Float4</code>)</li> </ul> <p> UIPanel.create(ui: <code>Entity</code>) \u00b6 returns <code>UIPanel</code></p> <p>no docs found   </p> <p> UIPanel.set_color(panel: <code>Control</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UIPanel.get_color(panel: <code>Control</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UIPanel.set_border(panel: <code>Control</code>, size: <code>Num</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UIPanel.set_radius(panel: <code>Control</code>, radius: <code>Float4</code>, smoothness: <code>Float4</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/progress/","title":"Progress","text":""},{"location":"api/v/2024.12.3/ui/progress/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/ui/progress/#luxe-uiprogress-module","title":"<code>luxe: ui/progress</code> module","text":"<ul> <li>UIProgress </li> </ul>"},{"location":"api/v/2024.12.3/ui/progress/#uiprogress","title":"UIProgress","text":"<p><code>import \"luxe: ui/progress\" for UIProgress</code></p> <p>no docs found</p> <ul> <li>create(ui_entity: <code>Any</code>)</li> <li>set_progress(control: <code>Any</code>, value: <code>Any</code>)</li> <li>get_progress(control: <code>Any</code>)</li> </ul> <p> UIProgress.create(ui_entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIProgress.set_progress(control: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIProgress.get_progress(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/scroll/","title":"Scroll","text":""},{"location":"api/v/2024.12.3/ui/scroll/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/ui/scroll/#luxe-uiscroll-module","title":"<code>luxe: ui/scroll</code> module","text":"<ul> <li>UIScroll </li> </ul>"},{"location":"api/v/2024.12.3/ui/scroll/#uiscroll","title":"UIScroll","text":"<p><code>import \"luxe: ui/scroll\" for UIScroll</code></p> <p>no docs found</p> <ul> <li>create(ui_entity: <code>Any</code>)</li> <li>add(scroll: <code>Any</code>, control: <code>Any</code>)</li> <li>remove(scroll: <code>Any</code>, control: <code>Any</code>)</li> <li>count(scroll: <code>Any</code>)</li> <li>clear(scroll: <code>Any</code>, uiclear_action: <code>Any</code>)</li> <li>get(scroll: <code>Any</code>, index: <code>Any</code>)</li> <li>index(scroll: <code>Any</code>, control: <code>Any</code>)</li> <li>refresh(scroll: <code>Any</code>)</li> <li>set_percent(scroll: <code>Any</code>, vertical: <code>Any</code>, horizontal: <code>Any</code>)</li> <li>set_scroll(scroll: <code>Any</code>, vertical: <code>Any</code>, horizontal: <code>Any</code>)</li> <li>set_percent_v(scroll: <code>Any</code>, vertical: <code>Any</code>)</li> <li>set_percent_h(scroll: <code>Any</code>, horizontal: <code>Any</code>)</li> <li>set_scroll_v(scroll: <code>Any</code>, vertical: <code>Any</code>)</li> <li>set_scroll_h(scroll: <code>Any</code>, horizontal: <code>Any</code>)</li> <li>get_percent_v(scroll: <code>Any</code>)</li> <li>get_percent_h(scroll: <code>Any</code>)</li> <li>get_scroll_v(scroll: <code>Any</code>)</li> <li>get_scroll_h(scroll: <code>Any</code>)</li> <li>can_scroll_v(scroll: <code>Any</code>)</li> <li>can_scroll_h(scroll: <code>Any</code>)</li> </ul> <p> UIScroll.create(ui_entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.add(scroll: <code>Any</code>, control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.remove(scroll: <code>Any</code>, control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.count(scroll: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.clear(scroll: <code>Any</code>, uiclear_action: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.get(scroll: <code>Any</code>, index: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.index(scroll: <code>Any</code>, control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.refresh(scroll: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.set_percent(scroll: <code>Any</code>, vertical: <code>Any</code>, horizontal: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.set_scroll(scroll: <code>Any</code>, vertical: <code>Any</code>, horizontal: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.set_percent_v(scroll: <code>Any</code>, vertical: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.set_percent_h(scroll: <code>Any</code>, horizontal: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.set_scroll_v(scroll: <code>Any</code>, vertical: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.set_scroll_h(scroll: <code>Any</code>, horizontal: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.get_percent_v(scroll: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.get_percent_h(scroll: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.get_scroll_v(scroll: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.get_scroll_h(scroll: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.can_scroll_v(scroll: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.can_scroll_h(scroll: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/slider/","title":"Slider","text":""},{"location":"api/v/2024.12.3/ui/slider/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/ui/slider/#luxe-uislider-module","title":"<code>luxe: ui/slider</code> module","text":"<ul> <li>UISlider </li> </ul>"},{"location":"api/v/2024.12.3/ui/slider/#uislider","title":"UISlider","text":"<p><code>import \"luxe: ui/slider\" for UISlider</code></p> <p>no docs found</p> <ul> <li>create(ui_entity: <code>Any</code>)</li> <li>set_value(control: <code>Any</code>, value: <code>Any</code>, event_kind: <code>Any</code>)</li> <li>set_value(control: <code>Any</code>, value: <code>Any</code>)</li> <li>get_value(control: <code>Any</code>)</li> <li>set_step(control: <code>Any</code>, value: <code>Any</code>)</li> <li>get_step(control: <code>Any</code>)</li> <li>set_min(control: <code>Any</code>, value: <code>Any</code>)</li> <li>get_min(control: <code>Any</code>)</li> <li>set_max(control: <code>Any</code>, value: <code>Any</code>)</li> <li>get_max(control: <code>Any</code>)</li> <li>set_inverted(control: <code>Any</code>, value: <code>Any</code>)</li> <li>get_inverted(control: <code>Any</code>)</li> </ul> <p> UISlider.create(ui_entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UISlider.set_value(control: <code>Any</code>, value: <code>Any</code>, event_kind: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UISlider.set_value(control: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UISlider.get_value(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UISlider.set_step(control: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UISlider.get_step(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UISlider.set_min(control: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UISlider.get_min(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UISlider.set_max(control: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UISlider.get_max(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UISlider.set_inverted(control: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UISlider.get_inverted(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/tabs/","title":"Tabs","text":""},{"location":"api/v/2024.12.3/ui/tabs/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/ui/tabs/#luxe-uitabs-module","title":"<code>luxe: ui/tabs</code> module","text":"<ul> <li>UITabs </li> </ul>"},{"location":"api/v/2024.12.3/ui/tabs/#uitabs","title":"UITabs","text":"<p><code>import \"luxe: ui/tabs\" for UITabs</code></p> <p>no docs found</p> <ul> <li>create(ui: <code>Any</code>)</li> <li>set_active(control: <code>Control</code>, index: <code>Num</code>)</li> <li>get_active(control: <code>Control</code>)</li> <li>get_count(control: <code>Control</code>)</li> <li>set_colors(control: <code>Control</code>, active: <code>Color</code>, inactive: <code>Color</code>)</li> <li>get_tab_header(control: <code>Control</code>, index: <code>Num</code>)</li> <li>get_tab(control: <code>Control</code>, index: <code>Num</code>)</li> <li>add_tab(control: <code>Control</code>, title: <code>String</code>, title_color: <code>Color</code>)</li> </ul> <p> UITabs.create(ui: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UITabs.set_active(control: <code>Control</code>, index: <code>Num</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> UITabs.get_active(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> UITabs.get_count(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> UITabs.set_colors(control: <code>Control</code>, active: <code>Color</code>, inactive: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UITabs.get_tab_header(control: <code>Control</code>, index: <code>Num</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p> <p> UITabs.get_tab(control: <code>Control</code>, index: <code>Num</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p> <p> UITabs.add_tab(control: <code>Control</code>, title: <code>String</code>, title_color: <code>Color</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/text/","title":"Text","text":""},{"location":"api/v/2024.12.3/ui/text/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/ui/text/#luxe-uitext-module","title":"<code>luxe: ui/text</code> module","text":"<ul> <li>UIText </li> </ul>"},{"location":"api/v/2024.12.3/ui/text/#uitext","title":"UIText","text":"<p><code>import \"luxe: ui/text\" for UIText</code></p> <p>no docs found</p> <ul> <li>create(ui_entity: <code>Any</code>)</li> <li>set_text(control: <code>Any</code>, text: <code>Any</code>)</li> <li>get_text(control: <code>Any</code>)</li> <li>set_font(control: <code>Any</code>, font: <code>Any</code>)</li> <li>get_font(control: <code>Any</code>)</li> <li>set_colors(control: <code>Any</code>, bg: <code>Color</code>, border: <code>Color</code>, border_hover: <code>Color</code>, border_focused: <code>Color</code>)</li> <li>set_radius(control: <code>Control</code>, radius: <code>Float4</code>, smoothness: <code>Float4</code>)</li> <li>set_color(control: <code>Any</code>, color: <code>Any</code>)</li> <li>get_color(control: <code>Any</code>)</li> <li>set_text_size(control: <code>Any</code>, size: <code>Any</code>)</li> <li>get_text_size(control: <code>Any</code>)</li> <li>set_align(control: <code>Any</code>, align: <code>Any</code>)</li> <li>get_align(control: <code>Any</code>)</li> <li>set_align_vertical(control: <code>Any</code>, align: <code>Any</code>)</li> <li>get_align_vertical(control: <code>Any</code>)</li> <li>select_all(control: <code>Any</code>)</li> <li>invalidate(control: <code>Control</code>, change_before: <code>String</code>)</li> <li>set_outline(control: <code>UIText</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>)</li> <li>set_shadow(control: <code>UIText</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>)</li> </ul> <p> UIText.create(ui_entity: <code>Any</code>) \u00b6 returns <code>UIText</code></p> <p>no docs found   </p> <p> UIText.set_text(control: <code>Any</code>, text: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.get_text(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.set_font(control: <code>Any</code>, font: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.get_font(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.set_colors(control: <code>Any</code>, bg: <code>Color</code>, border: <code>Color</code>, border_hover: <code>Color</code>, border_focused: <code>Color</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.set_radius(control: <code>Control</code>, radius: <code>Float4</code>, smoothness: <code>Float4</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UIText.set_color(control: <code>Any</code>, color: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.get_color(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.set_text_size(control: <code>Any</code>, size: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.get_text_size(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.set_align(control: <code>Any</code>, align: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.get_align(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.set_align_vertical(control: <code>Any</code>, align: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.get_align_vertical(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.select_all(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.invalidate(control: <code>Control</code>, change_before: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.set_outline(control: <code>UIText</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>) \u00b6 returns <code>None</code></p> <p>Set the text outline parameters.   </p> <p> UIText.set_shadow(control: <code>UIText</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>) \u00b6 returns <code>None</code></p> <p>Set the text shadow parameters.   </p>"},{"location":"api/v/2024.12.3/ui/window/","title":"Window","text":""},{"location":"api/v/2024.12.3/ui/window/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/ui/window/#luxe-uiwindow-module","title":"<code>luxe: ui/window</code> module","text":"<ul> <li>UIWindow </li> <li>UIWindowChange </li> </ul>"},{"location":"api/v/2024.12.3/ui/window/#uiwindow","title":"UIWindow","text":"<p><code>import \"luxe: ui/window\" for UIWindow</code></p> <p><code>UIWindow</code> is a <code>Control</code> with a title bar, close button, and can be moved around  and resized like a windowed application on a desktop operating system. As you'd expect, you can attach other <code>Controls</code> to it that stay attached as you move it around.</p> <pre><code>  var window = UIWindow.create(ui)\n  UIWindow.set_text(window, \"I'm a window!\")\n  UIWindow.set_title_size(window, 24)\n  UIWindow.set_text_size(window, 14)\n  UIWindow.set_resizable(window, true)\n  Control.set_bounds(window, 64, 64, 680, 360)\n</code></pre> <ul> <li>create(ui_entity: <code>Entity</code>)</li> <li>close(control: <code>UIWindow</code>)</li> <li>set_collapsed(control: <code>UIWindow</code>, state: <code>Bool</code>)</li> <li>get_collapsed(control: <code>UIWindow</code>)</li> <li>set_text(control: <code>UIWindow</code>, text: <code>String</code>)</li> <li>set_text_size(control: <code>UIWindow</code>, size: <code>Num</code>)</li> <li>set_text_color(control: <code>UIWindow</code>, color: <code>Color</code>)</li> <li>set_text_font(control: <code>UIWindow</code>, font: <code>Font</code>)</li> <li>set_title_size(control: <code>UIWindow</code>, size: <code>Num</code>)</li> <li>set_resizable(control: <code>UIWindow</code>, state: <code>Bool</code>)</li> <li>set_bring_to_front(control: <code>UIWindow</code>, state: <code>Bool</code>)</li> <li>set_closable(control: <code>UIWindow</code>, state: <code>Bool</code>)</li> <li>set_collapsible(control: <code>UIWindow</code>, state: <code>Bool</code>)</li> <li>set_draggable(control: <code>UIWindow</code>, state: <code>Bool</code>)</li> <li>get_resizable(control: <code>UIWindow</code>)</li> <li>get_bring_to_front(control: <code>UIWindow</code>)</li> <li>get_closable(control: <code>UIWindow</code>)</li> <li>get_collapsible(control: <code>UIWindow</code>)</li> <li>get_draggable(control: <code>UIWindow</code>)</li> <li>set_outline(control: <code>UIWindow</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>)</li> <li>set_shadow(control: <code>UIWindow</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>)</li> </ul> <p> UIWindow.create(ui_entity: <code>Entity</code>) \u00b6 returns <code>UIWindow</code></p> <p>Create a new <code>UIWindow</code> control for the given UI.   </p> <p> UIWindow.close(control: <code>UIWindow</code>) \u00b6 returns <code>None</code></p> <p>Make the given window disappear.   </p> <p> UIWindow.set_collapsed(control: <code>UIWindow</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set whether the given window's body is drawn (false, uncollapsed) or only the titlebar (true, collapsed).   </p> <p> UIWindow.get_collapsed(control: <code>UIWindow</code>) \u00b6 returns <code>Bool</code></p> <p>Get if the given window is collapsed.   </p> <p> UIWindow.set_text(control: <code>UIWindow</code>, text: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Set the titlebar text of the given window.   </p> <p> UIWindow.set_text_size(control: <code>UIWindow</code>, size: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the size of the titlebar text of the given window.   </p> <p> UIWindow.set_text_color(control: <code>UIWindow</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>Set the color of the titlebar text of the given window.   </p> <p> UIWindow.set_text_font(control: <code>UIWindow</code>, font: <code>Font</code>) \u00b6 returns <code>None</code></p> <p>Set the font of the titlebar text of the given window.   </p> <p> UIWindow.set_title_size(control: <code>UIWindow</code>, size: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the height of the titlebar of the given window.   </p> <p> UIWindow.set_resizable(control: <code>UIWindow</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set if a window can be resized by dragging its bottom right corner.   </p> <p> UIWindow.set_bring_to_front(control: <code>UIWindow</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set if a window will bring itself to the front of the UI when interacted with.   </p> <p> UIWindow.set_closable(control: <code>UIWindow</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set if a window has a Close button the user can press.   </p> <p> UIWindow.set_collapsible(control: <code>UIWindow</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set if a window has a Collapse button the user can press.   </p> <p> UIWindow.set_draggable(control: <code>UIWindow</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set if a window can be dragged around with the mouse.   </p> <p> UIWindow.get_resizable(control: <code>UIWindow</code>) \u00b6 returns <code>Bool</code></p> <p>Get if a window can be resized by the user.   </p> <p> UIWindow.get_bring_to_front(control: <code>UIWindow</code>) \u00b6 returns <code>unknown</code></p> <p>Get if a window will bring itself to the front of the UI when interacted with.   </p> <p> UIWindow.get_closable(control: <code>UIWindow</code>) \u00b6 returns <code>unknown</code></p> <p>Get if a window has its Close button visible.   </p> <p> UIWindow.get_collapsible(control: <code>UIWindow</code>) \u00b6 returns <code>unknown</code></p> <p>Get if a window has its Collapse button visible.   </p> <p> UIWindow.get_draggable(control: <code>UIWindow</code>) \u00b6 returns <code>unknown</code></p> <p>Get if a window can be dragged around with the mouse.   </p> <p> UIWindow.set_outline(control: <code>UIWindow</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>) \u00b6 returns <code>None</code></p> <p>Set the text outline parameters.   </p> <p> UIWindow.set_shadow(control: <code>UIWindow</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>) \u00b6 returns <code>None</code></p> <p>Set the text shadow parameters.   </p>"},{"location":"api/v/2024.12.3/ui/window/#uiwindowchange","title":"UIWindowChange","text":"<p><code>import \"luxe: ui/window\" for UIWindowChange</code></p> <p>no docs found</p> <ul> <li>close</li> <li>open</li> <li>collapse</li> <li>uncollapse</li> <li>move</li> <li>name(value: <code>Any</code>)</li> </ul> <p> UIWindowChange.close \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWindowChange.open \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWindowChange.collapse \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWindowChange.uncollapse \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWindowChange.move \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWindowChange.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/world/","title":"World","text":""},{"location":"api/v/2024.12.3/ui/world/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/ui/world/#luxe-uiworld-module","title":"<code>luxe: ui/world</code> module","text":"<ul> <li>BucketKind </li> <li>TreeNodeIter </li> <li>UIWorld </li> <li>UIWorldEvent </li> <li>UIWorldIcon </li> </ul>"},{"location":"api/v/2024.12.3/ui/world/#bucketkind","title":"BucketKind","text":"<p><code>import \"luxe: ui/world\" for BucketKind</code></p> <p>no docs found</p> <ul> <li>folders</li> <li>contexts</li> <li>entities</li> <li>name(value: <code>Any</code>)</li> </ul> <p> BucketKind.folders \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BucketKind.contexts \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BucketKind.entities \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BucketKind.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/world/#treenodeiter","title":"TreeNodeIter","text":"<p><code>import \"luxe: ui/world\" for TreeNodeIter</code></p> <p>no docs found</p> <ul> <li>node</li> <li>new(node: <code>TreeNode</code>, depth: <code>Num</code>)</li> <li>iteratorValue(index: <code>Num</code>)</li> <li>next_bucket(from_start: <code>Bool</code>)</li> <li>iterate(index: <code>Num</code>)</li> </ul> <p> TreeNodeIter.node \u00b6 returns <code>TreeNode</code></p> <p>no docs found   </p> <p> TreeNodeIter.new(node: <code>TreeNode</code>, depth: <code>Num</code>) \u00b6 returns <code>TreeNodeIter</code></p> <p>no docs found   </p> <p> TreeNodeIter.iteratorValue(index: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TreeNodeIter.next_bucket(from_start: <code>Bool</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> TreeNodeIter.iterate(index: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/world/#uiworld","title":"UIWorld","text":"<p><code>import \"luxe: ui/world\" for UIWorld</code></p> <p>no docs found</p> <ul> <li>create(ui: <code>UI</code>)</li> <li>set_world(control: <code>Control</code>, world: <code>World</code>)</li> <li>set_handle_default_icons(control: <code>Control</code>, enable: <code>Bool</code>)</li> <li>refresh(control: <code>Control</code>)</li> <li>get_view(control: <code>Control</code>)</li> <li>scroll_to(control: <code>Control</code>, entity: <code>Entity</code>)</li> <li>set_selection(control: <code>Control</code>, selection: <code>Selection</code>)</li> <li>get_selection(control: <code>Control</code>)</li> <li>enter_select_mode(control: <code>Control</code>, enter_state: <code>Bool</code>, display: <code>String</code>)</li> <li>show_rename(control: <code>Control</code>)</li> </ul> <p> UIWorld.create(ui: <code>UI</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p> <p> UIWorld.set_world(control: <code>Control</code>, world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorld.set_handle_default_icons(control: <code>Control</code>, enable: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorld.refresh(control: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorld.get_view(control: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorld.scroll_to(control: <code>Control</code>, entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorld.set_selection(control: <code>Control</code>, selection: <code>Selection</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UIWorld.get_selection(control: <code>Control</code>) \u00b6 returns <code>Selection</code></p> <p>no docs found   </p> <p> UIWorld.enter_select_mode(control: <code>Control</code>, enter_state: <code>Bool</code>, display: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UIWorld.show_rename(control: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/world/#uiworldevent","title":"UIWorldEvent","text":"<p><code>import \"luxe: ui/world\" for UIWorldEvent</code></p> <p>no docs found</p> <ul> <li>filter</li> <li>save</li> <li>save_all</li> <li>delete</li> <li>duplicate</li> <li>rename</li> <li>active_context</li> <li>focus</li> <li>close</li> <li>kind</li> <li>items</li> <li>data</li> <li>new(kind: <code>UIWorldEvent</code>, items: <code>List</code>, data: <code>Any</code>)</li> </ul> <p> UIWorldEvent.filter \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldEvent.save \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldEvent.save_all \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldEvent.delete \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldEvent.duplicate \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldEvent.rename \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldEvent.active_context \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldEvent.focus \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldEvent.close \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldEvent.kind \u00b6 returns <code>Any</code></p> <p>no docs found   </p> <p> UIWorldEvent.items \u00b6 returns <code>Any</code></p> <p>no docs found   </p> <p> UIWorldEvent.data \u00b6 returns <code>Any</code></p> <p>no docs found   </p> <p> UIWorldEvent.new(kind: <code>UIWorldEvent</code>, items: <code>List</code>, data: <code>Any</code>) \u00b6 returns <code>UIWorldEvent</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/world/#uiworldicon","title":"UIWorldIcon","text":"<p><code>import \"luxe: ui/world\" for UIWorldIcon</code></p> <p>no docs found</p> <ul> <li>icon</li> <li>enabled</li> <li>enabled(handle: <code>Num</code>)</li> <li>tooltip</li> <li>tooltip=(v : String)</li> <li>selection_based</li> <li>selection_based=(v : String)</li> <li>allow_indirect</li> <li>allow_indirect=(v : String)</li> <li>svg</li> <li>svg=(v : Any)</li> <li>new(world_view: <code>UIWorld</code>)</li> <li>enable()</li> <li>enable(handle: <code>Num</code>)</li> <li>disable()</li> <li>disable(handle: <code>Num</code>)</li> <li>can_do_direct_only_action(list: <code>List</code>)</li> <li>on_selection(fn: <code>Fn</code>)</li> <li>on_release(fn: <code>Fn</code>)</li> <li>on_enter(fn: <code>Fn</code>)</li> <li>on_exit(fn: <code>Fn</code>)</li> </ul> <p> UIWorldIcon.icon \u00b6 returns <code>Control</code></p> <p>no docs found   </p> <p> UIWorldIcon.enabled \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> UIWorldIcon.enabled(handle: <code>Num</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> UIWorldIcon.tooltip \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> UIWorldIcon.tooltip=(v : String) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldIcon.selection_based \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> UIWorldIcon.selection_based=(v : String) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldIcon.allow_indirect \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> UIWorldIcon.allow_indirect=(v : String) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldIcon.svg \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> UIWorldIcon.svg=(v : Any) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> UIWorldIcon.new(world_view: <code>UIWorld</code>) \u00b6 returns <code>UIWorldIcon</code></p> <p>no docs found   </p> <p> UIWorldIcon.enable() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldIcon.enable(handle: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldIcon.disable() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldIcon.disable(handle: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldIcon.can_do_direct_only_action(list: <code>List</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> UIWorldIcon.on_selection(fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldIcon.on_release(fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldIcon.on_enter(fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldIcon.on_exit(fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/field/choice/","title":"Choice","text":""},{"location":"api/v/2024.12.3/ui/field/choice/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/ui/field/choice/#luxe-uifieldchoice-module","title":"<code>luxe: ui/field/choice</code> module","text":"<ul> <li>State </li> <li>UIChoice </li> </ul>"},{"location":"api/v/2024.12.3/ui/field/choice/#state","title":"State","text":"<p><code>import \"luxe: ui/field/choice\" for State</code></p> <p>no docs found</p> <ul> <li>list</li> <li>new(ui: <code>Any</code>, control: <code>Any</code>)</li> <li>resize()</li> <li>add(control: <code>Any</code>, keywords: <code>Any</code>)</li> <li>remove(control: <code>Any</code>)</li> <li>clear(uiclear_action: <code>Any</code>)</li> <li>count()</li> <li>get(index: <code>Num</code>)</li> <li>refresh()</li> <li>focus()</li> <li>placeholder=(v : Any)</li> <li>placeholder</li> <li>fn=(v : Any)</li> <li>fn</li> <li>has_filter</li> <li>force_filter(text: <code>Any</code>, focus: <code>Any</code>)</li> <li>cancel_filter()</li> <li>filter(filter: <code>Any</code>)</li> </ul> <p> State.list \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.new(ui: <code>Any</code>, control: <code>Any</code>) \u00b6 returns <code>State</code></p> <p>no docs found   </p> <p> State.resize() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.add(control: <code>Any</code>, keywords: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.remove(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.clear(uiclear_action: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.count() \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> State.get(index: <code>Num</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p> <p> State.refresh() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.focus() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.placeholder=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.placeholder \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.fn=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.fn \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.has_filter \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.force_filter(text: <code>Any</code>, focus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.cancel_filter() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.filter(filter: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/field/choice/#uichoice","title":"UIChoice","text":"<p><code>import \"luxe: ui/field/choice\" for UIChoice</code></p> <p>no docs found</p> <ul> <li>create(ui: <code>UI</code>)</li> <li>get_placeholder(choice: <code>Control</code>)</li> <li>set_placeholder(choice: <code>Control</code>, text: <code>String</code>)</li> <li>set_filter(choice: <code>Control</code>, fn: <code>Fn</code>)</li> <li>add(choice: <code>Control</code>, control: <code>Control</code>, keywords: <code>List</code>)</li> <li>remove(choice: <code>Control</code>, control: <code>Control</code>)</li> <li>clear(choice: <code>Control</code>, uiclear_action: <code>UIClear</code>)</li> <li>refresh(choice: <code>Control</code>)</li> <li>focus(choice: <code>Control</code>)</li> <li>count(choice: <code>Control</code>)</li> <li>get_choice(choice: <code>Control</code>, index: <code>Num</code>)</li> </ul> <p> UIChoice.create(ui: <code>UI</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p> <p> UIChoice.get_placeholder(choice: <code>Control</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> UIChoice.set_placeholder(choice: <code>Control</code>, text: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIChoice.set_filter(choice: <code>Control</code>, fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIChoice.add(choice: <code>Control</code>, control: <code>Control</code>, keywords: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIChoice.remove(choice: <code>Control</code>, control: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIChoice.clear(choice: <code>Control</code>, uiclear_action: <code>UIClear</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIChoice.refresh(choice: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIChoice.focus(choice: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIChoice.count(choice: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> UIChoice.get_choice(choice: <code>Control</code>, index: <code>Num</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/field/color/","title":"Color","text":""},{"location":"api/v/2024.12.3/ui/field/color/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/ui/field/color/#luxe-uifieldcolor-module","title":"<code>luxe: ui/field/color</code> module","text":"<ul> <li>UIColor </li> <li>UIColorData </li> </ul>"},{"location":"api/v/2024.12.3/ui/field/color/#uicolor","title":"UIColor","text":"<p><code>import \"luxe: ui/field/color\" for UIColor</code></p> <p>no docs found</p> <ul> <li>create(ui: <code>Entity</code>)</li> <li>set_color(control: <code>Control</code>, color: <code>Color</code>)</li> <li>set_colors(control: <code>Control</code>, colors: <code>Color</code>)</li> <li>get_color(control: <code>Control</code>)</li> <li>get_text_field(vec: <code>Control</code>, index: <code>Num</code>)</li> </ul> <p> UIColor.create(ui: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIColor.set_color(control: <code>Control</code>, color: <code>Color</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIColor.set_colors(control: <code>Control</code>, colors: <code>Color</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIColor.get_color(control: <code>Control</code>) \u00b6 returns <code>Color</code></p> <p>no docs found   </p> <p> UIColor.get_text_field(vec: <code>Control</code>, index: <code>Num</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/field/color/#uicolordata","title":"UIColorData","text":"<p><code>import \"luxe: ui/field/color\" for UIColorData</code></p> <p>no docs found</p> <ul> <li>new(ui: <code>Entity</code>, control: <code>Control</code>)</li> <li>create(root: <code>Control</code>)</li> <li>reset_mixed()</li> <li>set_color(color: <code>Color</code>)</li> <li>set_colors(colors: <code>List</code>)</li> <li>colors_similar(colors: <code>List</code>)</li> <li>destroy()</li> <li>get_color()</li> <li>get_text_field(index: <code>Num</code>)</li> </ul> <p> UIColorData.new(ui: <code>Entity</code>, control: <code>Control</code>) \u00b6 returns <code>UIColorData</code></p> <p>no docs found   </p> <p> UIColorData.create(root: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIColorData.reset_mixed() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIColorData.set_color(color: <code>Color</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIColorData.set_colors(colors: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIColorData.colors_similar(colors: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIColorData.destroy() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIColorData.get_color() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIColorData.get_text_field(index: <code>Num</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/field/framemarks/","title":"Framemarks","text":""},{"location":"api/v/2024.12.3/ui/field/framemarks/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/ui/field/framemarks/#luxe-uifieldframemarks-module","title":"<code>luxe: ui/field/framemarks</code> module","text":"<ul> <li>UIFrameMarks </li> <li>UIFrameMarksState </li> </ul>"},{"location":"api/v/2024.12.3/ui/field/framemarks/#uiframemarks","title":"UIFrameMarks","text":"<p><code>import \"luxe: ui/field/framemarks\" for UIFrameMarks</code></p> <p>no docs found</p> <ul> <li>create(ui: <code>Entity</code>)</li> </ul> <p> UIFrameMarks.create(ui: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/field/framemarks/#uiframemarksstate","title":"UIFrameMarksState","text":"<p><code>import \"luxe: ui/field/framemarks\" for UIFrameMarksState</code></p> <p>no docs found</p> <ul> <li><code>var style : null = PathStyle.new</code></li> <li>new(ui: <code>Entity</code>, ctrl: <code>Control</code>)</li> </ul> <p> UIFrameMarksState.new(ui: <code>Entity</code>, ctrl: <code>Control</code>) \u00b6 returns <code>UIFrameMarksState</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/field/number/","title":"Number","text":""},{"location":"api/v/2024.12.3/ui/field/number/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/ui/field/number/#luxe-uifieldnumber-module","title":"<code>luxe: ui/field/number</code> module","text":"<ul> <li>UINumber </li> <li>UINumberState </li> </ul>"},{"location":"api/v/2024.12.3/ui/field/number/#uinumber","title":"UINumber","text":"<p><code>import \"luxe: ui/field/number\" for UINumber</code></p> <p>no docs found</p> <ul> <li>create(ui: <code>Any</code>)</li> <li>get_text_field(num: <code>Control</code>)</li> <li>get_value(num: <code>Control</code>)</li> <li>get_valid(num: <code>Control</code>)</li> <li>set_value(num: <code>Control</code>, value: <code>Num</code>)</li> <li>set_precision(num: <code>Control</code>, value: <code>Num</code>)</li> <li>get_precision(num: <code>Control</code>, value: <code>Num</code>)</li> <li>set_validation(num: <code>Control</code>, fn: <code>Fn</code>)</li> </ul> <p> UINumber.create(ui: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumber.get_text_field(num: <code>Control</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p> <p> UINumber.get_value(num: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> UINumber.get_valid(num: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> UINumber.set_value(num: <code>Control</code>, value: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumber.set_precision(num: <code>Control</code>, value: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumber.get_precision(num: <code>Control</code>, value: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumber.set_validation(num: <code>Control</code>, fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/field/number/#uinumberstate","title":"UINumberState","text":"<p><code>import \"luxe: ui/field/number\" for UINumberState</code></p> <p>no docs found</p> <ul> <li>validation</li> <li>validation=(v : Any)</li> <li>text_control</li> <li>text_value</li> <li>precision</li> <li>precision=(v : Any)</li> <li>value</li> <li>valid</li> <li>new(ui: <code>Any</code>, ctrl: <code>Any</code>)</li> <li>set_value(value: <code>Any</code>)</li> <li>resize(x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>)</li> <li>refresh_radial()</li> <li>expand_radial(state: <code>Any</code>)</li> <li>fix(value: <code>Num</code>)</li> <li>on_radial_event(event: <code>Any</code>)</li> <li>cancel_radial_capture()</li> <li>render_radial(control: <code>Any</code>, state: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>)</li> <li>make_num(string: <code>String</code>)</li> <li>validate(num: <code>Num</code>)</li> <li>try_expression(string: <code>String</code>)</li> <li>on_text_event(event: <code>Any</code>)</li> </ul> <p> UINumberState.validation \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.validation=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.text_control \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.text_value \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.precision \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.precision=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.value \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.valid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.new(ui: <code>Any</code>, ctrl: <code>Any</code>) \u00b6 returns <code>UINumberState</code></p> <p>no docs found   </p> <p> UINumberState.set_value(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.resize(x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.refresh_radial() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.expand_radial(state: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.fix(value: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.on_radial_event(event: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.cancel_radial_capture() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.render_radial(control: <code>Any</code>, state: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.make_num(string: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.validate(num: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.try_expression(string: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.on_text_event(event: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/field/path/","title":"Path","text":""},{"location":"api/v/2024.12.3/ui/field/path/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/ui/field/path/#luxe-uifieldpath-module","title":"<code>luxe: ui/field/path</code> module","text":"<ul> <li>UIPath </li> <li>UIPathState </li> <li>UIPathType </li> </ul>"},{"location":"api/v/2024.12.3/ui/field/path/#uipath","title":"UIPath","text":"<p><code>import \"luxe: ui/field/path\" for UIPath</code></p> <p>no docs found</p> <ul> <li>create(ui: <code>Entity</code>)</li> <li>set_validation(path: <code>Control</code>, fn: <code>Fn</code>)</li> <li>set_defaults(path: <code>Control</code>, default_path: <code>String</code>, filters: <code>String</code>)</li> <li>set_defaults(path: <code>Control</code>, default_path: <code>String</code>)</li> <li>set_type(path: <code>Control</code>, type: <code>UIPathType</code>)</li> <li>get_text_field(path: <code>Control</code>)</li> <li>get_path(path: <code>Control</code>)</li> <li>set_path(path: <code>Control</code>, path_value: <code>String</code>)</li> </ul> <p> UIPath.create(ui: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIPath.set_validation(path: <code>Control</code>, fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>set a validation function to be called which will ensure the path is validated before use   </p> <p> UIPath.set_defaults(path: <code>Control</code>, default_path: <code>String</code>, filters: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>set the default file dialog path and file dialog filters   </p> <p> UIPath.set_defaults(path: <code>Control</code>, default_path: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>set the default file dialog path   </p> <p> UIPath.set_type(path: <code>Control</code>, type: <code>UIPathType</code>) \u00b6 returns <code>unknown</code></p> <p>set the path type, to open/save/folder   </p> <p> UIPath.get_text_field(path: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>return the text field   </p> <p> UIPath.get_path(path: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>return the path stored in the field   </p> <p> UIPath.set_path(path: <code>Control</code>, path_value: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>set the path stored in the field (will be validated)   </p>"},{"location":"api/v/2024.12.3/ui/field/path/#uipathstate","title":"UIPathState","text":"<p><code>import \"luxe: ui/field/path\" for UIPathState</code></p> <p>no docs found</p> <ul> <li>new(ui: <code>Entity</code>, control: <code>Control</code>)</li> <li>get_text_field()</li> <li>get_path()</li> <li>set_path(path: <code>String</code>)</li> <li>set_validation(fn: <code>Fn</code>)</li> <li>set_defaults(default_path: <code>String</code>, filters: <code>String</code>)</li> <li>set_type(type: <code>UIPathType</code>)</li> </ul> <p> UIPathState.new(ui: <code>Entity</code>, control: <code>Control</code>) \u00b6 returns <code>UIPathState</code></p> <p>no docs found   </p> <p> UIPathState.get_text_field() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIPathState.get_path() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIPathState.set_path(path: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIPathState.set_validation(fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIPathState.set_defaults(default_path: <code>String</code>, filters: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIPathState.set_type(type: <code>UIPathType</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/field/path/#uipathtype","title":"UIPathType","text":"<p><code>import \"luxe: ui/field/path\" for UIPathType</code></p> <p>no docs found</p> <ul> <li>open</li> <li>save</li> <li>folder</li> </ul> <p> UIPathType.open \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIPathType.save \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIPathType.folder \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/field/vector/","title":"Vector","text":""},{"location":"api/v/2024.12.3/ui/field/vector/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/ui/field/vector/#luxe-uifieldvector-module","title":"<code>luxe: ui/field/vector</code> module","text":"<ul> <li>UIVector </li> <li>UIVectorState </li> </ul>"},{"location":"api/v/2024.12.3/ui/field/vector/#uivector","title":"UIVector","text":"<p><code>import \"luxe: ui/field/vector\" for UIVector</code></p> <p>no docs found</p> <ul> <li>create(ui: <code>Any</code>)</li> <li>get_component_count(vec: <code>Control</code>)</li> <li>set_component_count(vec: <code>Control</code>, count: <code>Num</code>)</li> <li>get_value(vec: <code>Control</code>)</li> <li>set_value(vec: <code>Control</code>, value: <code>Vec</code>)</li> <li>get_text_field(vec: <code>Control</code>, index: <code>Num</code>)</li> </ul> <p> UIVector.create(ui: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIVector.get_component_count(vec: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIVector.set_component_count(vec: <code>Control</code>, count: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIVector.get_value(vec: <code>Control</code>) \u00b6 returns <code>Vec</code></p> <p>no docs found   </p> <p> UIVector.set_value(vec: <code>Control</code>, value: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIVector.get_text_field(vec: <code>Control</code>, index: <code>Num</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/ui/field/vector/#uivectorstate","title":"UIVectorState","text":"<p><code>import \"luxe: ui/field/vector\" for UIVectorState</code></p> <p>no docs found</p> <ul> <li>components</li> <li>components=(v : Any)</li> <li>value</li> <li>set_value(value: <code>Vec</code>)</li> <li>get_text_field(index: <code>Num</code>)</li> <li>make_field(index: <code>Num</code>)</li> <li>new(ui: <code>Any</code>, ctrl: <code>Any</code>)</li> <li>on_event(field: <code>Any</code>, event: <code>Any</code>)</li> </ul> <p> UIVectorState.components \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIVectorState.components=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIVectorState.value \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIVectorState.set_value(value: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIVectorState.get_text_field(index: <code>Num</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p> <p> UIVectorState.make_field(index: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIVectorState.new(ui: <code>Any</code>, ctrl: <code>Any</code>) \u00b6 returns <code>UIVectorState</code></p> <p>no docs found   </p> <p> UIVectorState.on_event(field: <code>Any</code>, event: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/world/modifier/","title":"Modifier","text":""},{"location":"api/v/2024.12.3/world/modifier/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/world/modifier/#luxe-worldmodifier-module","title":"<code>luxe: world/modifier</code> module","text":"<ul> <li>Modifier </li> <li>ModifierChange </li> </ul>"},{"location":"api/v/2024.12.3/world/modifier/#modifier","title":"Modifier","text":"<p><code>import \"luxe: world/modifier\" for Modifier</code></p> <p>no docs found</p> <ul> <li>create(modifier_id: <code>String</code>, entity: <code>Entity</code>)</li> <li>destroy(modifier_id: <code>String</code>, entity: <code>Entity</code>)</li> <li>has(modifier_id: <code>String</code>, entity: <code>Entity</code>, ignore_removed_flag: <code>Bool</code>)</li> <li>has(modifier_id: <code>String</code>, entity: <code>Entity</code>)</li> <li>get_missing_expected(modifier_meta: <code>ModifierMeta</code>, entity: <code>Entity</code>)</li> <li>has_expected(modifier_meta: <code>ModifierMeta</code>, entity: <code>Entity</code>)</li> <li>set_transient(entity: <code>Entity</code>, modifier_id: <code>String</code>, state: <code>Bool</code>)</li> <li>set_transient(entity: <code>Entity</code>, modifier_id: <code>String</code>, state: <code>Bool</code>, commit: <code>Bool</code>)</li> <li>get_transient(entity: <code>Entity</code>, modifier_id: <code>String</code>)</li> <li>get(entity: <code>String</code>, modifier_id: <code>String</code>)</li> <li>get_attached_to(world: <code>World</code>, modifier_id: <code>String</code>)</li> <li>get_meta(modifier_id: <code>String</code>)</li> <li>connect(world: <code>World</code>, modifier_id: <code>String</code>, wire: <code>Num</code>, fn: <code>Fn</code>)</li> <li>send(modifier_id: <code>String</code>, wire: <code>Num</code>, entity: <code>Entity</code>, data: <code>Any</code>)</li> <li>get_attached(entity: <code>Entity</code>)</li> <li>get_modifier_id(world: <code>World</code>, block: <code>Block</code>)</li> </ul> <p> Modifier.create(modifier_id: <code>String</code>, entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Modifier.destroy(modifier_id: <code>String</code>, entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Modifier.has(modifier_id: <code>String</code>, entity: <code>Entity</code>, ignore_removed_flag: <code>Bool</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Modifier.has(modifier_id: <code>String</code>, entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Modifier.get_missing_expected(modifier_meta: <code>ModifierMeta</code>, entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifier.has_expected(modifier_meta: <code>ModifierMeta</code>, entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifier.set_transient(entity: <code>Entity</code>, modifier_id: <code>String</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Modifier.set_transient(entity: <code>Entity</code>, modifier_id: <code>String</code>, state: <code>Bool</code>, commit: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Modifier.get_transient(entity: <code>Entity</code>, modifier_id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Modifier.get(entity: <code>String</code>, modifier_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifier.get_attached_to(world: <code>World</code>, modifier_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifier.get_meta(modifier_id: <code>String</code>) \u00b6 returns <code>ModifierMeta</code></p> <p>no docs found   </p> <p> Modifier.connect(world: <code>World</code>, modifier_id: <code>String</code>, wire: <code>Num</code>, fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifier.send(modifier_id: <code>String</code>, wire: <code>Num</code>, entity: <code>Entity</code>, data: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifier.get_attached(entity: <code>Entity</code>) \u00b6 returns <code>Set</code></p> <p>Returns a set of attached modifier IDs for the given entity   </p> <p> Modifier.get_modifier_id(world: <code>World</code>, block: <code>Block</code>) \u00b6 returns <code>String</code></p> <p>Returns a modifier id (or null if not found) for the given data block   </p>"},{"location":"api/v/2024.12.3/world/modifier/#modifierchange","title":"ModifierChange","text":"<p><code>import \"luxe: world/modifier\" for ModifierChange</code></p> <p>no docs found</p> <ul> <li><code>var world : World = 0</code></li> <li><code>var block : Block = 0</code></li> <li><code>var instance : BlockInstance = 0</code></li> <li><code>var field_path : String = null</code></li> <li><code>var field_id : String = null</code></li> <li>new()</li> <li>update(in_world: <code>World</code>, in_block: <code>Block</code>, in_instance: <code>BlockInstance</code>, in_field_path: <code>String</code>)</li> <li>array_count(field: <code>String</code>)</li> <li>value</li> <li>value_for(field: <code>String</code>)</li> <li>value_for(field: <code>String</code>, array_index: <code>Num</code>)</li> </ul> <p> ModifierChange.new() \u00b6 returns <code>ModifierChange</code></p> <p>no docs found   </p> <p> ModifierChange.update(in_world: <code>World</code>, in_block: <code>Block</code>, in_instance: <code>BlockInstance</code>, in_field_path: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierChange.array_count(field: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierChange.value \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierChange.value_for(field: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierChange.value_for(field: <code>String</code>, array_index: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/world/prototype/","title":"Prototype","text":""},{"location":"api/v/2024.12.3/world/prototype/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/world/prototype/#luxe-worldprototype-module","title":"<code>luxe: world/prototype</code> module","text":"<ul> <li>Prototype </li> </ul>"},{"location":"api/v/2024.12.3/world/prototype/#prototype","title":"Prototype","text":"<p><code>import \"luxe: world/prototype\" for Prototype</code></p> <p>no docs found</p> <ul> <li>create(world: <code>World</code>, prototype: <code>Prototype</code>)</li> <li>create(world: <code>World</code>, prototype: <code>Prototype</code>, context_into: <code>Entity</code>, name: <code>String</code>, context_instance_uuid: <code>String</code>, subfolder: <code>String</code>)</li> <li>has(entity: <code>Entity</code>)</li> </ul> <p> Prototype.create(world: <code>World</code>, prototype: <code>Prototype</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Prototype.create(world: <code>World</code>, prototype: <code>Prototype</code>, context_into: <code>Entity</code>, name: <code>String</code>, context_instance_uuid: <code>String</code>, subfolder: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Prototype.has(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/world/scene/","title":"Scene","text":""},{"location":"api/v/2024.12.3/world/scene/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/world/scene/#luxe-worldscene-module","title":"<code>luxe: world/scene</code> module","text":"<ul> <li>Scene </li> <li>SceneReady </li> <li>Stage </li> </ul>"},{"location":"api/v/2024.12.3/world/scene/#scene","title":"Scene","text":"<p><code>import \"luxe: world/scene\" for Scene</code></p> <p>no docs found</p> <ul> <li>create(world: <code>World</code>, scene: <code>Scene</code>)</li> <li>create(world: <code>World</code>, scene: <code>Scene</code>, on_ready: <code>Fn</code>)</li> <li>has(entity: <code>Entity</code>)</li> </ul> <p> Scene.create(world: <code>World</code>, scene: <code>Scene</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scene.create(world: <code>World</code>, scene: <code>Scene</code>, on_ready: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scene.has(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/world/scene/#sceneready","title":"SceneReady","text":"<p><code>import \"luxe: world/scene\" for SceneReady</code></p> <p>no docs found</p> <ul> <li><code>var world : World = 0</code></li> <li><code>var scene : Entity = Entity.none</code></li> <li>new(world: <code>World</code>, scene: <code>Entity</code>)</li> <li>editor_new(world: <code>World</code>, scene: <code>Entity</code>)</li> <li>ready(world: <code>World</code>, scene: <code>Entity</code>)</li> <li>ready()</li> <li>editor_ready(world: <code>World</code>, scene: <code>Entity</code>)</li> <li>editor_ready()</li> <li>tick(delta: <code>Num</code>)</li> <li>editor_tick(delta: <code>Num</code>)</li> <li>destroy(world: <code>World</code>, scene: <code>Entity</code>)</li> <li>destroy()</li> <li>editor_destroy(world: <code>World</code>, scene: <code>Entity</code>)</li> <li>editor_destroy()</li> </ul> <p> SceneReady.new(world: <code>World</code>, scene: <code>Entity</code>) \u00b6 returns <code>SceneReady</code></p> <p>no docs found   </p> <p> SceneReady.editor_new(world: <code>World</code>, scene: <code>Entity</code>) \u00b6 returns <code>SceneReady</code></p> <p>no docs found   </p> <p> SceneReady.ready(world: <code>World</code>, scene: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SceneReady.ready() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SceneReady.editor_ready(world: <code>World</code>, scene: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SceneReady.editor_ready() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SceneReady.tick(delta: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SceneReady.editor_tick(delta: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SceneReady.destroy(world: <code>World</code>, scene: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SceneReady.destroy() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SceneReady.editor_destroy(world: <code>World</code>, scene: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SceneReady.editor_destroy() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/world/scene/#stage","title":"Stage","text":"<p><code>import \"luxe: world/scene\" for Stage</code></p> <p>no docs found</p> <ul> <li>create(world: <code>World</code>, stage: <code>Stage</code>)</li> </ul> <p> Stage.create(world: <code>World</code>, stage: <code>Stage</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/world/world/","title":"World","text":""},{"location":"api/v/2024.12.3/world/world/#luxe-api-2024123","title":"<code>luxe</code> API (<code>2024.12.3</code>)","text":""},{"location":"api/v/2024.12.3/world/world/#luxe-worldworld-module","title":"<code>luxe: world/world</code> module","text":"<ul> <li>OldEvent </li> <li>Wire </li> <li>World </li> </ul>"},{"location":"api/v/2024.12.3/world/world/#oldevent","title":"OldEvent","text":"<p><code>import \"luxe: world/world\" for OldEvent</code></p> <p>no docs found</p> <ul> <li>destroy</li> <li>tick</li> </ul> <p> OldEvent.destroy \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> OldEvent.tick \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/world/world/#wire","title":"Wire","text":"<p><code>import \"luxe: world/world\" for Wire</code></p> <p>no docs found</p> <ul> <li><code>var id : Num = null</code></li> <li><code>var uuid : String = null</code></li> <li><code>var type : String = null</code></li> <li><code>var target : String = null</code></li> <li>create()</li> <li>send(entity: <code>Entity</code>)</li> <li>send(entity: <code>Entity</code>, data: <code>Any</code>)</li> <li>prepare()</li> <li>connect(world: <code>World</code>, uuid: <code>String</code>, fn: <code>Fn</code>)</li> <li>send(world: <code>World</code>, uuid: <code>String</code>, entity: <code>Entity</code>)</li> <li>send(world: <code>World</code>, uuid: <code>String</code>, entity: <code>Entity</code>, args: <code>Any</code>)</li> </ul> <p> Wire.create() \u00b6 returns <code>Wire</code></p> <p>no docs found   </p> <p> Wire.send(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Wire.send(entity: <code>Entity</code>, data: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Wire.prepare() \u00b6 returns <code>Any</code></p> <p>no docs found   </p> <p> Wire.connect(world: <code>World</code>, uuid: <code>String</code>, fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Wire.send(world: <code>World</code>, uuid: <code>String</code>, entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Wire.send(world: <code>World</code>, uuid: <code>String</code>, entity: <code>Entity</code>, args: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2024.12.3/world/world/#world","title":"World","text":"<p><code>import \"luxe: world/world\" for World</code></p> <p>no docs found</p> <ul> <li>get_system(world: <code>World</code>, modifier_id: <code>String</code>)</li> <li>get_scene(world: <code>World</code>, scene_id: <code>String</code>)</li> <li>get_scene_for(world: <code>World</code>, scene: <code>Entity</code>)</li> <li>exists(id: <code>String</code>)</li> <li>valid(world: <code>World</code>)</li> <li>get(id: <code>String</code>)</li> <li>get_id(world: <code>World</code>)</li> <li>set_id(world: <code>World</code>, id: <code>String</code>)</li> <li>get_default()</li> <li>set_default(world: <code>World</code>)</li> <li>list(world: <code>World</code>)</li> <li>list_ids(world: <code>World</code>)</li> <li>clear(world: <code>World</code>)</li> <li>duplicate(world: <code>World</code>)</li> <li>tag_add(world: <code>Any</code>, tag: <code>Any</code>)</li> <li>tag_remove(world: <code>Any</code>, tag: <code>Any</code>)</li> <li>tag_has(world: <code>Any</code>, tag: <code>Any</code>)</li> <li>get_scene_roots(world: <code>World</code>)</li> <li>get_delta(world: <code>Any</code>)</li> <li>tick(world: <code>World</code>, when: <code>FrameWhen</code>, section: <code>FrameSection</code>, priority: <code>Num</code>)</li> <li>tick(world: <code>World</code>)</li> <li>tick(world: <code>World</code>, delta: <code>Num</code>)</li> <li>schedule(world: <code>Any</code>, time: <code>Any</code>, count: <code>Any</code>, fn: <code>Any</code>)</li> <li>schedule(world: <code>Any</code>, time: <code>Any</code>, fn: <code>Any</code>)</li> <li>unschedule(world: <code>Any</code>, handle: <code>Any</code>)</li> <li>render_with_set(world: <code>Any</code>, camera: <code>Any</code>, set: <code>Any</code>, target_path: <code>Any</code>)</li> <li>render_with_set(world: <code>Any</code>, camera: <code>Any</code>, set: <code>Any</code>, target_path: <code>Any</code>, settings: <code>Any</code>)</li> <li>render_with_set(world: <code>Any</code>, camera: <code>Any</code>, set: <code>Any</code>, target_path: <code>Any</code>, target_resource: <code>Any</code>, target_region: <code>Any</code>, settings: <code>Any</code>)</li> <li>render(world: <code>Any</code>, camera: <code>Any</code>, target_path: <code>Any</code>)</li> <li>render(world: <code>Any</code>, camera: <code>Any</code>, target_path: <code>Any</code>, settings: <code>Any</code>)</li> <li>render(world: <code>Any</code>, camera: <code>Any</code>, target_path: <code>Any</code>, target_resource: <code>Any</code>, target_region: <code>Any</code>, settings: <code>Any</code>)</li> <li>render(world: <code>Any</code>, desc: <code>Any</code>)</li> <li>render_fn(world: <code>Any</code>, camera: <code>Any</code>, target_resource: <code>Any</code>, target_region: <code>Any</code>, settings: <code>Any</code>, fn: <code>Any</code>)</li> <li>get_phases(world: <code>World</code>)</li> <li>get_phase_modifiers(world: <code>World</code>, phase: <code>Num</code>, stage: <code>Num</code>)</li> <li>get_modifier_block(world: <code>World</code>, modifier_id: <code>String</code>)</li> <li>get_sorted_modifiers(world: <code>World</code>)</li> <li>get_rate(world: <code>Any</code>)</li> <li>set_rate(world: <code>Any</code>, rate: <code>Any</code>)</li> <li>set_time(world: <code>Any</code>, time: <code>Any</code>)</li> <li>time(world: <code>Any</code>)</li> <li>render_set(world: <code>Any</code>)</li> <li>render_set_add(world: <code>Any</code>, geometry: <code>Any</code>)</li> <li>render_set_add(world: <code>Any</code>, geometry: <code>Any</code>, entity: <code>Any</code>)</li> <li>render_set_remove(world: <code>Any</code>, geometry: <code>Any</code>)</li> <li>render_set_remove(world: <code>Any</code>, geometry: <code>Any</code>, entity: <code>Any</code>)</li> <li>render_get_entity(world: <code>Any</code>, geometry: <code>Any</code>)</li> <li>render_get_entity_set(entity: <code>Any</code>)</li> <li>disable(world: <code>Any</code>, state: <code>Any</code>, entities: <code>Any</code>)</li> <li>disable(world: <code>Any</code>, state: <code>Any</code>)</li> <li>emit(world: <code>Any</code>, tags: <code>Any</code>)</li> <li>emit(world: <code>Any</code>, tags: <code>Any</code>, data: <code>Any</code>)</li> <li>listen(world: <code>Any</code>, tags: <code>Any</code>, fn: <code>Any</code>)</li> <li>unlisten(world: <code>Any</code>, tags: <code>Any</code>, fn: <code>Any</code>)</li> <li>create()</li> <li>create(id: <code>Any</code>)</li> <li>destroy(world: <code>Any</code>)</li> <li>on_register_system(world: <code>World</code>, fn: <code>Fn</code>)</li> <li>off_register_system(world: <code>World</code>, listener: <code>Handle</code>)</li> <li>tick_now(world: <code>Any</code>, delta: <code>Any</code>)</li> <li>live_worlds</li> </ul> <p> World.get_system(world: <code>World</code>, modifier_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.get_scene(world: <code>World</code>, scene_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.get_scene_for(world: <code>World</code>, scene: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.exists(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> World.valid(world: <code>World</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> World.get(id: <code>String</code>) \u00b6 returns <code>World</code></p> <p>no docs found   </p> <p> World.get_id(world: <code>World</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> World.set_id(world: <code>World</code>, id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.get_default() \u00b6 returns <code>World</code></p> <p>no docs found   </p> <p> World.set_default(world: <code>World</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> World.list(world: <code>World</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> World.list_ids(world: <code>World</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> World.clear(world: <code>World</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> World.duplicate(world: <code>World</code>) \u00b6 returns <code>World</code></p> <p>no docs found   </p> <p> World.tag_add(world: <code>Any</code>, tag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.tag_remove(world: <code>Any</code>, tag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.tag_has(world: <code>Any</code>, tag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.get_scene_roots(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>Returns a Set of scene root entities in the given world   </p> <p> World.get_delta(world: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.tick(world: <code>World</code>, when: <code>FrameWhen</code>, section: <code>FrameSection</code>, priority: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.tick(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.tick(world: <code>World</code>, delta: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.schedule(world: <code>Any</code>, time: <code>Any</code>, count: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.schedule(world: <code>Any</code>, time: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.unschedule(world: <code>Any</code>, handle: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render_with_set(world: <code>Any</code>, camera: <code>Any</code>, set: <code>Any</code>, target_path: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render_with_set(world: <code>Any</code>, camera: <code>Any</code>, set: <code>Any</code>, target_path: <code>Any</code>, settings: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render_with_set(world: <code>Any</code>, camera: <code>Any</code>, set: <code>Any</code>, target_path: <code>Any</code>, target_resource: <code>Any</code>, target_region: <code>Any</code>, settings: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render(world: <code>Any</code>, camera: <code>Any</code>, target_path: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render(world: <code>Any</code>, camera: <code>Any</code>, target_path: <code>Any</code>, settings: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render(world: <code>Any</code>, camera: <code>Any</code>, target_path: <code>Any</code>, target_resource: <code>Any</code>, target_region: <code>Any</code>, settings: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render(world: <code>Any</code>, desc: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render_fn(world: <code>Any</code>, camera: <code>Any</code>, target_resource: <code>Any</code>, target_region: <code>Any</code>, settings: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.get_phases(world: <code>World</code>) \u00b6 returns <code>Set</code></p> <p>Return the set of phases in the world, in order   </p> <p> World.get_phase_modifiers(world: <code>World</code>, phase: <code>Num</code>, stage: <code>Num</code>) \u00b6 returns <code>Set</code></p> <p>Return a set of modifier ids in the phase/stage   </p> <p> World.get_modifier_block(world: <code>World</code>, modifier_id: <code>String</code>) \u00b6 returns <code>Block</code></p> <p>Get the block for the given modifier <code>modifier_id</code> in <code>world</code> </p> <p> World.get_sorted_modifiers(world: <code>World</code>) \u00b6 returns <code>Set</code></p> <p>Get the list of modifiers in <code>world</code> (sorted by their order)   </p> <p> World.get_rate(world: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.set_rate(world: <code>Any</code>, rate: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.set_time(world: <code>Any</code>, time: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.time(world: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render_set(world: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render_set_add(world: <code>Any</code>, geometry: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render_set_add(world: <code>Any</code>, geometry: <code>Any</code>, entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render_set_remove(world: <code>Any</code>, geometry: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render_set_remove(world: <code>Any</code>, geometry: <code>Any</code>, entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render_get_entity(world: <code>Any</code>, geometry: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render_get_entity_set(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.disable(world: <code>Any</code>, state: <code>Any</code>, entities: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.disable(world: <code>Any</code>, state: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.emit(world: <code>Any</code>, tags: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.emit(world: <code>Any</code>, tags: <code>Any</code>, data: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.listen(world: <code>Any</code>, tags: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.unlisten(world: <code>Any</code>, tags: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.create() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.create(id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.destroy(world: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.on_register_system(world: <code>World</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>Add a function to be called when a new modifier system is added to a world.   </p> <p> World.off_register_system(world: <code>World</code>, listener: <code>Handle</code>) \u00b6 returns <code>None</code></p> <p>Unsubscribe a listener from the creation of new modifier systems.   </p> <p> World.tick_now(world: <code>Any</code>, delta: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.live_worlds \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/","title":"Index","text":""},{"location":"api/v/2025.1.1/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":"<ul> <li>luxe: assert </li> <li>luxe: asset </li> <li>luxe: asset/type </li> <li>luxe: assets </li> <li>luxe: astar </li> <li>luxe: audio </li> <li>luxe: bytes </li> <li>luxe: cable </li> <li>luxe: color </li> <li>luxe: containers </li> <li>luxe: debug/alloc.block </li> <li>luxe: docgen </li> <li>luxe: draw </li> <li>luxe: editor </li> <li>luxe: events </li> <li>luxe: fuzzy </li> <li>luxe: game </li> <li>luxe: id </li> <li>luxe: input </li> <li>luxe: io </li> <li>luxe: lx </li> <li>luxe: mat4 </li> <li>luxe: math </li> <li>luxe: noise </li> <li>luxe: plot </li> <li>luxe: pose/blend.pose_node </li> <li>luxe: pose/ccdik.pose_node </li> <li>luxe: pose/clip.pose_node </li> <li>luxe: pose/look_at_ik.pose_node </li> <li>luxe: pose/two_bone_ik.pose_node </li> <li>luxe: pqueue </li> <li>luxe: regex </li> <li>luxe: render </li> <li>luxe: render/font </li> <li>luxe: sat2D </li> <li>luxe: save </li> <li>luxe: selection </li> <li>luxe: semver </li> <li>luxe: settings </li> <li>luxe: shape2D </li> <li>luxe: string </li> <li>luxe: string/po </li> <li>luxe: system/anim.modifier </li> <li>luxe: system/camera.modifier </li> <li>luxe: system/mesh.modifier </li> <li>luxe: system/nav.modifier </li> <li>luxe: system/physics/body3D.modifier </li> <li>luxe: system/physics/box_collider3D.modifier </li> <li>luxe: system/physics/capsule_collider3D.modifier </li> <li>luxe: system/physics/cast_ray.block </li> <li>luxe: system/physics/character3D.modifier </li> <li>luxe: system/physics/contact.block </li> <li>luxe: system/physics/mesh_collider3D.modifier </li> <li>luxe: system/physics/physics3D.modifier </li> <li>luxe: system/physics/sphere_collider3D.modifier </li> <li>luxe: system/skeleton.modifier </li> <li>luxe: system/skin.modifier </li> <li>luxe: system/sound.modifier </li> <li>luxe: system/sprite.modifier </li> <li>luxe: system/tags.modifier </li> <li>luxe: system/text.modifier </li> <li>luxe: system/tiles.modifier </li> <li>luxe: system/transform.change.block </li> <li>luxe: system/transform.modifier </li> <li>luxe: system/values.modifier </li> <li>luxe: system/vfx.modifier </li> <li>luxe: system/wires.modifier </li> <li>luxe: terminal </li> <li>luxe: test </li> <li>luxe: toggle </li> <li>luxe: topograph </li> <li>luxe: triangulate </li> <li>luxe: ui </li> <li>luxe: ui/block </li> <li>luxe: ui/button </li> <li>luxe: ui/check </li> <li>luxe: ui/color_picker </li> <li>luxe: ui/control </li> <li>luxe: ui/field/choice </li> <li>luxe: ui/field/color </li> <li>luxe: ui/field/framemarks </li> <li>luxe: ui/field/number </li> <li>luxe: ui/field/path </li> <li>luxe: ui/field/vector </li> <li>luxe: ui/image </li> <li>luxe: ui/label </li> <li>luxe: ui/list </li> <li>luxe: ui/list_filtered </li> <li>luxe: ui/panel </li> <li>luxe: ui/progress </li> <li>luxe: ui/scroll </li> <li>luxe: ui/slider </li> <li>luxe: ui/tabs </li> <li>luxe: ui/text </li> <li>luxe: ui/window </li> <li>luxe: ui/world </li> <li>luxe: version </li> <li>luxe: world </li> <li>luxe: world/modifier </li> <li>luxe: world/prototype </li> <li>luxe: world/scene </li> <li>luxe: world/world </li> </ul>"},{"location":"api/v/2025.1.1/assert/","title":"Assert","text":""},{"location":"api/v/2025.1.1/assert/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/assert/#luxe-assert-module","title":"<code>luxe: assert</code> module","text":"<ul> <li>Assert </li> </ul>"},{"location":"api/v/2025.1.1/assert/#assert","title":"Assert","text":"<p><code>import \"luxe: assert\" for Assert</code></p> <p>Simple assertions.</p> <p>An assertion is a statement in code that is a strict rule. They prevent code from behaving in unexpected ways, by asserting that the code is acting in the way you intended. This can catch a lot of bugs, because it can enforce correct usage of code.</p> <p>For example, if your function does not allow null for an argument, that is something you can assert. Then the user of your code knows that they've used your API incorrectly and can correct the issue.</p> <p>An assertion calls <code>Fiber.abort()</code>, ending execution (unless handled higher up).</p> <ul> <li>is_true(condition: <code>Bool</code>)</li> <li>is_true(condition: <code>Bool</code>, message: <code>String</code>)</li> <li>is_false(condition: <code>Bool</code>)</li> <li>is_false(condition: <code>Bool</code>, message: <code>String</code>)</li> <li>not_null(value: <code>Any</code>)</li> <li>not_null(value: <code>Any</code>, message: <code>String</code>)</li> <li>is_null(value: <code>Any</code>)</li> <li>is_null(value: <code>Any</code>, message: <code>String</code>)</li> <li>equal(one: <code>Any</code>, other: <code>Any</code>)</li> <li>equal(one: <code>Any</code>, other: <code>Any</code>, message: <code>String</code>)</li> </ul> <p> Assert.is_true(condition: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Assert that a particular condition is true.</p> <pre><code>//In this code, we expect that the player\n//should never be here if they are not flying.\nAssert.is_true(player.flying)\n</code></pre> <p> Assert.is_true(condition: <code>Bool</code>, message: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Assert that a particular condition is true, and display a message on abort.</p> <pre><code>//In this code, we expect that the player\n//should never be here if they are not flying.\nAssert.is_true(player.flying, \"Expected player to be in a flying state\")\n</code></pre> <p> Assert.is_false(condition: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Assert that a particular condition is false.</p> <pre><code>Assert.is_false(player.flying)\n</code></pre> <p> Assert.is_false(condition: <code>Bool</code>, message: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Assert that a particular condition is false, and display a message on abort.</p> <pre><code>Assert.is_false(player.flying, \"Expected player NOT to be in a flying state\")\n</code></pre> <p> Assert.not_null(value: <code>Any</code>) \u00b6 returns <code>None</code></p> <p>Assert that a particular statement is not null.</p> <pre><code>//We require a valid player in this code\nAssert.not_null(player)\n</code></pre> <p> Assert.not_null(value: <code>Any</code>, message: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Assert that a particular statement is not null.</p> <pre><code>Assert.not_null(player, \"A valid player is required\")\n</code></pre> <p> Assert.is_null(value: <code>Any</code>) \u00b6 returns <code>None</code></p> <p>Assert that a particular statement is null.</p> <pre><code>//We assume the player is not holding something.\nAssert.is_null(player.item_in_hand)\n</code></pre> <p> Assert.is_null(value: <code>Any</code>, message: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Assert that a particular statement is null, and display a message on abort.</p> <pre><code>Assert.is_null(player.item_in_hand, \"Player must not have an item in hand when calling this\")\n</code></pre> <p> Assert.equal(one: <code>Any</code>, other: <code>Any</code>) \u00b6 returns <code>None</code></p> <p>Assert that a two values are the same. (mind that this uses a regular ==, which counts references with the same values as different and can be overridden)</p> <pre><code>Assert.equal(account.name, player.name)\n</code></pre> <p> Assert.equal(one: <code>Any</code>, other: <code>Any</code>, message: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Assert that a two values are the same, and display a message on abort. (mind that this uses a regular ==, which counts references with the same values as different and can be overridden)</p> <pre><code>Assert.equal(account.name, player.name, \"account and player should always have the same name\")\n</code></pre>"},{"location":"api/v/2025.1.1/asset/","title":"Asset","text":""},{"location":"api/v/2025.1.1/asset/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/asset/#luxe-asset-module","title":"<code>luxe: asset</code> module","text":""},{"location":"api/v/2025.1.1/assets/","title":"Assets","text":""},{"location":"api/v/2025.1.1/assets/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/assets/#luxe-assets-module","title":"<code>luxe: assets</code> module","text":"<ul> <li>Assets </li> <li>Strings </li> </ul>"},{"location":"api/v/2025.1.1/assets/#assets","title":"Assets","text":"<p><code>import \"luxe: assets\" for Assets</code></p> <p>The <code>Assets</code> services is how you access loaded assets, and query if an asset is loaded. The primary use for this at the moment is the accessors like <code>Assets.image</code>, and finding out  if an asset is loaded via <code>Assets.has_image</code>. </p> <p>Note that the asset system is a work in progress and is not final.  There are several accessors missing, for example, fonts are often referenced  as a string, not via <code>Assets.font(\"fonts/name\")</code>. Later, all assets will be unified into this form as intended.</p> <p>Also, they're supposed to be able to reload dynamically, many can't currently. And remember the input to the asset system is compiled assets, not the assets themselves. </p> <p>Finally, there are functions in the API that shouldn't be used directly (they aren't listed here.)</p> <ul> <li>db_init()</li> <li>db_commit(db: <code>AssetDB</code>)</li> <li>db_default()</li> <li>db_default_set(db: <code>AssetDB</code>)</li> <li>db_commit_post(db: <code>AssetDB</code>)</li> <li>db_commit_refs(db: <code>AssetDB</code>)</li> <li>db_add_root_path(db: <code>AssetDB</code>, path: <code>String</code>, subfolder: <code>String</code>, prefix: <code>String</code>)</li> <li>db_add_item(db: <code>AssetDB</code>, root: <code>String</code>, path: <code>String</code>, is_directory: <code>Bool</code>)</li> <li>db_make_item(db: <code>AssetDB</code>, root: <code>String</code>, path: <code>String</code>, is_directory: <code>Bool</code>)</li> <li>db_make_item(db: <code>AssetDB</code>, root: <code>String</code>, path: <code>String</code>)</li> <li>db_remove_item(db: <code>AssetDB</code>, asset_id: <code>String</code>)</li> <li>db_add_item(db: <code>AssetDB</code>, root: <code>String</code>, path: <code>String</code>)</li> <li>db_add_ignore(db: <code>AssetDB</code>, globs: <code>List</code>)</li> <li>db_asset_from_path(db: <code>AssetDB</code>, path: <code>String</code>)</li> <li>db_asset_from_id(db: <code>AssetDB</code>, asset_id: <code>String</code>)</li> <li>db_asset_from_uuid(db: <code>AssetDB</code>, meta_uuid: <code>String</code>)</li> <li>db_asset_get_root(db: <code>AssetDB</code>, asset_id: <code>String</code>)</li> <li>db_compile(db: <code>AssetDB</code>)</li> <li>db_parse(bytes: <code>String</code>)</li> <li>db_has(db: <code>AssetDB</code>, asset_id: <code>String</code>)</li> <li>db_add_reference(db: <code>AssetDB</code>, from_asset_id: <code>String</code>, to_asset_id: <code>String</code>)</li> <li>db_reset_references(db: <code>AssetDB</code>, asset_id: <code>String</code>)</li> <li>db_get_references(db: <code>AssetDB</code>, asset_id: <code>String</code>)</li> <li>db_get_referenced_by(db: <code>AssetDB</code>, asset_id: <code>String</code>)</li> <li>list(db: <code>AssetDB</code>)</li> <li>list(db: <code>AssetDB</code>, ext: <code>String</code>, subtype: <code>String</code>)</li> <li>list(db: <code>AssetDB</code>, ext: <code>String</code>, subtype: <code>String</code>, root: <code>String</code>)</li> <li>list(db: <code>AssetDB</code>, ext: <code>String</code>)</li> <li>list_folders(db: <code>AssetDB</code>, root: <code>String</code>, use_path: <code>Bool</code>)</li> <li>db_list_tags(db: <code>AssetDB</code>)</li> <li>db_get_tags(db: <code>AssetDB</code>, asset_id: <code>String</code>)</li> <li>db_get_tagged(db: <code>AssetDB</code>, tag: <code>String</code>)</li> <li>db_get_tagged_from_list(db: <code>AssetDB</code>, tags: <code>List</code>)</li> <li>db_add_tags(db: <code>AssetDB</code>, asset_id: <code>String</code>, tags: <code>List</code>)</li> <li>db_remove_tags(db: <code>AssetDB</code>, asset_id: <code>String</code>, tags: <code>List</code>)</li> <li>modified(db: <code>AssetDB</code>, query_id: <code>String</code>)</li> <li>modified(db: <code>AssetDB</code>, query_id: <code>String</code>, ext: <code>String</code>, subtype: <code>String</code>)</li> <li>modified(db: <code>AssetDB</code>, query_id: <code>String</code>, ext: <code>String</code>, subtype: <code>String</code>, root: <code>String</code>)</li> <li>modified(db: <code>AssetDB</code>, query_id: <code>String</code>, ext: <code>String</code>)</li> <li>unmodified(db: <code>AssetDB</code>, query_id: <code>String</code>, asset_id: <code>String</code>)</li> <li>modify(db: <code>AssetDB</code>, query_id: <code>String</code>, asset_id: <code>String</code>)</li> <li>is_modified(db: <code>AssetDB</code>, query_id: <code>String</code>, asset_id: <code>String</code>)</li> <li>get_data(type_id: <code>String</code>, id: <code>String</code>)</li> <li>get_block(type_id: <code>String</code>)</li> <li>get_handle(type_id: <code>String</code>, id: <code>String</code>)</li> <li>set_handle(type_id: <code>String</code>, id: <code>String</code>, handle: <code>Num</code>)</li> <li>get_dev_version_path(db: <code>AssetDB</code>, asset_id: <code>String</code>)</li> <li>get_dev_version_data(db: <code>AssetDB</code>, asset_id: <code>String</code>)</li> <li>save_dev_version_data(db: <code>AssetDB</code>, asset_id: <code>String</code>, version_data: <code>Map</code>)</li> <li>image(id: <code>String</code>)</li> <li>bytes(id: <code>String</code>)</li> <li>material(id: <code>String</code>)</li> <li>atlas(id: <code>String</code>)</li> <li>lx(id: <code>String</code>)</li> <li>has_shader_library(id: <code>String</code>)</li> <li>has_image(id: <code>String</code>)</li> <li>has_material_basis(id: <code>String</code>)</li> <li>has_material(id: <code>String</code>)</li> <li>has_bytes(id: <code>String</code>)</li> <li>has_settings(id: <code>String</code>)</li> <li>has_atlas(id: <code>String</code>)</li> <li>has_physics(id: <code>String</code>)</li> <li>has_prototype(id: <code>String</code>)</li> <li>has_scene(id: <code>String</code>)</li> <li>has_input(id: <code>String</code>)</li> <li>has_anim(id: <code>String</code>)</li> <li>has_mesh(id: <code>String</code>)</li> <li>has_tiles(id: <code>String</code>)</li> <li>has_ui(id: <code>String</code>)</li> <li>unload_input(id: <code>String</code>)</li> <li>load_input(id: <code>String</code>)</li> </ul> <p> Assets.db_init() \u00b6 returns <code>AssetDB</code></p> <p>no docs found   </p> <p> Assets.db_commit(db: <code>AssetDB</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Assets.db_default() \u00b6 returns <code>AssetDB</code></p> <p>no docs found   </p> <p> Assets.db_default_set(db: <code>AssetDB</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.db_commit_post(db: <code>AssetDB</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Assets.db_commit_refs(db: <code>AssetDB</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Assets.db_add_root_path(db: <code>AssetDB</code>, path: <code>String</code>, subfolder: <code>String</code>, prefix: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.db_add_item(db: <code>AssetDB</code>, root: <code>String</code>, path: <code>String</code>, is_directory: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.db_make_item(db: <code>AssetDB</code>, root: <code>String</code>, path: <code>String</code>, is_directory: <code>Bool</code>) \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> Assets.db_make_item(db: <code>AssetDB</code>, root: <code>String</code>, path: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.db_remove_item(db: <code>AssetDB</code>, asset_id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Assets.db_add_item(db: <code>AssetDB</code>, root: <code>String</code>, path: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.db_add_ignore(db: <code>AssetDB</code>, globs: <code>List</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.db_asset_from_path(db: <code>AssetDB</code>, path: <code>String</code>) \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> Assets.db_asset_from_id(db: <code>AssetDB</code>, asset_id: <code>String</code>) \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> Assets.db_asset_from_uuid(db: <code>AssetDB</code>, meta_uuid: <code>String</code>) \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> Assets.db_asset_get_root(db: <code>AssetDB</code>, asset_id: <code>String</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Assets.db_compile(db: <code>AssetDB</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Assets.db_parse(bytes: <code>String</code>) \u00b6 returns <code>AssetDB</code></p> <p>no docs found   </p> <p> Assets.db_has(db: <code>AssetDB</code>, asset_id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Assets.db_add_reference(db: <code>AssetDB</code>, from_asset_id: <code>String</code>, to_asset_id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.db_reset_references(db: <code>AssetDB</code>, asset_id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.db_get_references(db: <code>AssetDB</code>, asset_id: <code>String</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.db_get_referenced_by(db: <code>AssetDB</code>, asset_id: <code>String</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.list(db: <code>AssetDB</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.list(db: <code>AssetDB</code>, ext: <code>String</code>, subtype: <code>String</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.list(db: <code>AssetDB</code>, ext: <code>String</code>, subtype: <code>String</code>, root: <code>String</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.list(db: <code>AssetDB</code>, ext: <code>String</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.list_folders(db: <code>AssetDB</code>, root: <code>String</code>, use_path: <code>Bool</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.db_list_tags(db: <code>AssetDB</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.db_get_tags(db: <code>AssetDB</code>, asset_id: <code>String</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.db_get_tagged(db: <code>AssetDB</code>, tag: <code>String</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.db_get_tagged_from_list(db: <code>AssetDB</code>, tags: <code>List</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.db_add_tags(db: <code>AssetDB</code>, asset_id: <code>String</code>, tags: <code>List</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.db_remove_tags(db: <code>AssetDB</code>, asset_id: <code>String</code>, tags: <code>List</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.modified(db: <code>AssetDB</code>, query_id: <code>String</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.modified(db: <code>AssetDB</code>, query_id: <code>String</code>, ext: <code>String</code>, subtype: <code>String</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.modified(db: <code>AssetDB</code>, query_id: <code>String</code>, ext: <code>String</code>, subtype: <code>String</code>, root: <code>String</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.modified(db: <code>AssetDB</code>, query_id: <code>String</code>, ext: <code>String</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.unmodified(db: <code>AssetDB</code>, query_id: <code>String</code>, asset_id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.modify(db: <code>AssetDB</code>, query_id: <code>String</code>, asset_id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.is_modified(db: <code>AssetDB</code>, query_id: <code>String</code>, asset_id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Assets.get_data(type_id: <code>String</code>, id: <code>String</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Assets.get_block(type_id: <code>String</code>) \u00b6 returns <code>Block</code></p> <p>no docs found   </p> <p> Assets.get_handle(type_id: <code>String</code>, id: <code>String</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Assets.set_handle(type_id: <code>String</code>, id: <code>String</code>, handle: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.get_dev_version_path(db: <code>AssetDB</code>, asset_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Assets.get_dev_version_data(db: <code>AssetDB</code>, asset_id: <code>String</code>) \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> Assets.save_dev_version_data(db: <code>AssetDB</code>, asset_id: <code>String</code>, version_data: <code>Map</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.image(id: <code>String</code>) \u00b6 returns <code>Image</code></p> <p>Return a loaded image by id.</p> <pre><code>var image = Assets.image(\"image/player\")\nLog.print(\"width: %(Image.get_width(image))\")\n</code></pre> <p> Assets.bytes(id: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Returns the data stored as bytes.  A Wren <code>String</code> is also a byte sequence, used via <code>string.bytes</code>.</p> <p>Note That unlike other assets, bytes are stored by name with extension. For example if you put a file called <code>data/hello.txt</code> in your project, you would access it via <code>var data = Assets.bytes(\"data/hello.txt\")</code>.</p> <p>This is because the extension might be meaningful to the user of the bytes, for example loading an image based on png vs jpg extension would be impossible if we don't know the extension of the data. Because bytes are \"opaque\", as in,  we don't care what they store, we just store them for you to access, we keep the extension.</p> <pre><code>var text = Assets.bytes(\"data/hello.txt\")\nLog.print(text) //prints the contents of the file (the contents at compile time).\n</code></pre> <p> Assets.material(id: <code>String</code>) \u00b6 returns <code>Material</code></p> <p>Returns a loaded material by id.</p> <pre><code>var material = Assets.material(\"material/player\")\nSprite.set_material(player, material)\n</code></pre> <p> Assets.atlas(id: <code>String</code>) \u00b6 returns <code>Atlas</code></p> <p>Returns a loaded atlas by id.</p> <pre><code>var atlas = Assets.atlas(\"atlas/example\")\n</code></pre> <p> Assets.lx(id: <code>String</code>) \u00b6 returns <code>Any</code></p> <p>Returns the LX parsed representation of a <code>bytes</code> asset. This is convenience for <code>Assets.bytes</code> followed by <code>LX.parse</code>. Returns null if the asset isn't found, or if parsing failed.</p> <p>See <code>Assets.bytes</code>, as bytes require an extension.</p> <pre><code>//assuming our data contains { speaker=\"sara\" message=\"follow me.\" }\nvar dialog = Assets.lx(\"dialog/hello.lx\")\nvar speaker = dialog[\"speaker\"]\nvar message = dialog[\"message\"]\nLog.print(\"%(speaker): %(message)\")\n</code></pre> <p> Assets.has_shader_library(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if a shader library with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_shader_library(\"assets/shaders\")\n</code></pre> <p> Assets.has_image(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if an image with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_image(\"image/player\")\n</code></pre> <p> Assets.has_material_basis(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if a material basis with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_material_basis(\"basis/example\")\n</code></pre> <p> Assets.has_material(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if a material with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_material(\"material/player\")\n</code></pre> <p> Assets.has_bytes(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if a bytes asset with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_bytes(\"data/hello.txt\")\n</code></pre> <p> Assets.has_settings(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if a settings asset with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_settings(\"settings/area1\")\n</code></pre> <p> Assets.has_atlas(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if an atlas asset with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_atlas(\"atlas/example\")\n</code></pre> <p> Assets.has_physics(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if a physics asset with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_physics(\"physics/ice\")\n</code></pre> <p> Assets.has_prototype(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if a prototype with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_prototype(\"proto/tree\")\n</code></pre> <p> Assets.has_scene(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if a scene with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_scene(\"scene/area1\")\n</code></pre> <p> Assets.has_input(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if an input asset with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_input(\"input/player\")\n</code></pre> <p> Assets.has_anim(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if an animation with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_anim(\"anim/jump\")\n</code></pre> <p> Assets.has_mesh(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if a mesh with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_mesh(\"mesh/cube\")\n</code></pre> <p> Assets.has_tiles(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if a tilemap with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_tiles(\"tiles/caves\")\n</code></pre> <p> Assets.has_ui(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if a ui asset with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_ui(\"ui/menu\")\n</code></pre> <p> Assets.unload_input(id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Unload the input asset, which undefines any nodes or events   </p> <p> Assets.load_input(id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Load an input asset, which defines any nodes or events within it   </p>"},{"location":"api/v/2025.1.1/assets/#strings","title":"Strings","text":"<p><code>import \"luxe: assets\" for Strings</code></p> <p>When dealing with data like assets, storing a string directly can take up a lot of space. Instead, what we can do is store the strings once, in a shared place, and then reference that string later.</p> <p>At runtime, strings can also be more expensive than is ideal (like needing to iterate the characters individually, or taking up more memory).</p> <p>In both cases, what we store instead of a string is a string id, which is just a number.</p> <p>Comparing two numbers, looking up numbers in an array or map and so on, it's much faster with a number than using the string itself. Operating on numbers is both faster and simpler, and has a fixed size in memory. This is commonly called \"string interning\".</p> <p>In luxe, the <code>Strings</code> class is how you interact with the strings available to your game. For example, <code>var name_id = Entity.get_name(entity)</code> will return a string id, not a string. To get the string, you can use <code>var name = Strings.get(name_id)</code>. Note that if the name is unknown to <code>Strings</code>, it will return null, so handle that appropriately.</p> <p>To add a string, use <code>Strings.add(\"string\")</code>.</p> <p>For debugging strings, if you look inside <code>.luxe/luxe.strings.lx</code>,  this lists all the strings your assets reference, and what their key is.</p> <pre><code>//Assuming this string hasn't been added before:\nLog.print( Strings.get(\"hello\") ) //prints null\nvar key = Strings.add(\"hello\") //key is 1335831723\nLog.print( Strings.get(\"hello\") ) //prints 'hello'\n</code></pre> <ul> <li>add(value: <code>String</code>)</li> <li>get(key: <code>Num</code>)</li> </ul> <p> Strings.add(value: <code>String</code>) \u00b6 returns <code>Num</code></p> <p>Adds a string to the <code>Strings</code> service and returns the key.</p> <pre><code>Log.print(Strings.add(\"hello\")) //prints 1335831723\n</code></pre> <p> Strings.get(key: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Return the value associated with the given key. This will return null if the string is not found.</p> <pre><code>var name_id = Entity.get_name(entity)\nvar name = Strings.get(name_id)\nif(name) {\n  Log.print(\"entity name is %(name)\")\n} else {\n  Log.print(\"entity name is not known (or it has no name)\")\n}\n</code></pre>"},{"location":"api/v/2025.1.1/astar/","title":"Astar","text":""},{"location":"api/v/2025.1.1/astar/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/astar/#luxe-astar-module","title":"<code>luxe: astar</code> module","text":"<ul> <li>AStar </li> </ul>"},{"location":"api/v/2025.1.1/astar/#astar","title":"AStar","text":"<p><code>import \"luxe: astar\" for AStar</code></p> <p>A generic implementation of A* pathfinding in luxe.</p> <p>For details about the pathfinding and things like costs, heuristics and  implementation details, please see https://www.redblobgames.com/pathfinding/a-star/introduction.html</p> <ul> <li>MAX</li> <li>MAX=(v : Num)</li> <li>path2D(start: <code>Vec</code>, end: <code>Vec</code>, cost_get_fn: <code>Fn</code>, neighbors_get_fn: <code>Fn</code>, heuristic_fn: <code>Fn</code>)</li> </ul> <p> AStar.MAX \u00b6 returns <code>Num</code></p> <p>A value that defaults to <code>250</code>, for the max number of iterations that will be considered valid. If the max is reached, no path is returned. To update it, use <code>Astar.MAX = 400</code>.   </p> <p> AStar.MAX=(v : Num) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AStar.path2D(start: <code>Vec</code>, end: <code>Vec</code>, cost_get_fn: <code>Fn</code>, neighbors_get_fn: <code>Fn</code>, heuristic_fn: <code>Fn</code>) \u00b6 returns <code>List</code></p> <p>Returns a path between <code>start</code> and <code>end</code> if one was found, or <code>null</code> otherwise. The path is a <code>List</code> of nodes received from <code>start</code>, <code>end</code> or <code>neighbors_get_fn</code> and are unmodified.</p> <p>Note: Check if <code>start</code>/<code>end</code> are walkable before calling this function.</p> <p>Cost-calculating Function: <pre><code>//no cost?\n_cost_get_fn = Fn.new {|from, to| 1 }\n//cost from a tilemap, simple (fake) example\n_cost_get_fn = Fn.new {|from, to| tiles.get_cost(to.x, to.y) }\n</code></pre></p> <p>Getting the neighbors of a node: <pre><code>_neighbors_get_fn = Fn.new {|node|\n  var list = []\n  //check above, below, left and right.\n  if(is_walkable(node.x, node.y+1)) list.add(Node.new(node.x, node.y+1))\n  if(is_walkable(node.x, node.y-1)) list.add(Node.new(node.x, node.y-1))\n  if(is_walkable(node.x+1, node.y)) list.add(Node.new(node.x+1, node.y))\n  if(is_walkable(node.x-1, node.y)) list.add(Node.new(node.x-1, node.y))\n  return list\n}\n</code></pre></p> <p>Getting the heuristic value of a point: <pre><code>_heuristic_fn = Fn.new {|end, point|\n  var manhattan = ((end.x - point.x).abs + (end.y - point.y).abs)\n  return manhattan * 1.001 //fudge factor, see the linked articles on pathfinding\n}\n</code></pre></p> <p>Getting a path: <pre><code>get_path(start, end) {\n  if(!is_walkable(start)) return null\n  if(!is_walkable(end)) return null\n  return AStar.path2D(start, end, _cost_get_fn, _neighbors_get_fn, _heuristic_fn)\n}\n</code></pre></p>"},{"location":"api/v/2025.1.1/audio/","title":"Audio","text":""},{"location":"api/v/2025.1.1/audio/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/audio/#luxe-audio-module","title":"<code>luxe: audio</code> module","text":"<ul> <li>Audio </li> <li>AudioAttenuation </li> <li>Bus </li> </ul>"},{"location":"api/v/2025.1.1/audio/#audio","title":"Audio","text":"<p><code>import \"luxe: audio\" for Audio</code></p> <p>The Audio module let's you play audio.</p> <p><code>Audio</code> is a service API, and isn't a modifier system. There is e.g the Sound modifier for placing sounds in the world.</p> <p>Most things in <code>Audio</code> work on an instance (handle) of a sound. You get one of those from <code>play</code> or <code>loop</code>, and then can modify or query it. It's always safe to call any function on an instance, even if it's finished playing.</p> <p>A quick look:</p> <pre><code>//play them\nvar sound = Audio.play(Asset.audio(\"assets/sound\"))\nvar music = Audio.loop(Asset.audio(\"assets/music\"))\n\n//later...\nAudio.volume(music, 0.5)\n\n//later still...\nAudio.stop(music)\n</code></pre> <p>That's it!</p> <ul> <li>set_listener(pos: <code>Float3</code>, forward: <code>Float3</code>, up: <code>Float3</code>, velocity: <code>Float3</code>)</li> <li>play(source: <code>AudioAsset</code>, volume: <code>Num</code>)</li> <li>play(source: <code>AudioAsset</code>, as3D: <code>Bool</code>, bus: <code>AudioBus</code>, volume: <code>Num</code>)</li> <li>play(source: <code>AudioAsset</code>)</li> <li>loop(source: <code>AudioAsset</code>, volume: <code>Num</code>)</li> <li>loop(source: <code>AudioAsset</code>, as3D: <code>Bool</code>, bus: <code>AudioBus</code>, volume: <code>Num</code>)</li> <li>loop(source: <code>AudioAsset</code>)</li> <li>stop(instance: <code>AudioInstance</code>)</li> <li>playing(instance: <code>AudioInstance</code>)</li> <li>pan(instance: <code>AudioInstance</code>, pan: <code>Num</code>)</li> <li>pan_of(instance: <code>AudioInstance</code>)</li> <li>volume(instance: <code>AudioInstance</code>, volume: <code>Num</code>)</li> <li>volume_of(instance: <code>AudioInstance</code>)</li> <li>pitch(instance: <code>AudioInstance</code>, pitch: <code>Num</code>)</li> <li>pitch_of(instance: <code>AudioInstance</code>)</li> <li>pause(instance: <code>AudioInstance</code>, paused: <code>Bool</code>)</li> <li>pause_of(instance: <code>AudioInstance</code>)</li> <li>set3D(instance: <code>AudioInstance</code>, pos: <code>Float3</code>, vel: <code>Float3</code>, dopper_factor: <code>Float</code>, attenuation: <code>AudioAttenuation</code>, range: <code>Float2</code>, rolloff: <code>Num</code>)</li> </ul> <p> Audio.set_listener(pos: <code>Float3</code>, forward: <code>Float3</code>, up: <code>Float3</code>, velocity: <code>Float3</code>) \u00b6 returns <code>unknown</code></p> <p>Set the world space listener position directly   </p> <p> Audio.play(source: <code>AudioAsset</code>, volume: <code>Num</code>) \u00b6 returns <code>AudioInstance</code></p> <p>Plays audio from the specified <code>source</code> at volume <code>volume</code>. Returns a handle to an audio instance that you can modify or stop.</p> <pre><code>Audio.define_source(\"sound\", \"assets/sound.wav\")\nAudio.play(\"sound\", 1)\n</code></pre> <p> Audio.play(source: <code>AudioAsset</code>, as3D: <code>Bool</code>, bus: <code>AudioBus</code>, volume: <code>Num</code>) \u00b6 returns <code>AudioInstance</code></p> <p>Plays audio from the specified <code>source</code> with <code>as3D</code> and <code>bus</code> at volume <code>volume</code>. The bus comes from <code>create_bus</code>, and 0 means global/default bus. If <code>as3D</code> is true, use set3D on the handle returned to configure position/velocity. Returns a handle to an audio instance that you can modify or stop.</p> <pre><code>Audio.define_source(\"sound\", \"assets/sound.wav\")\nAudio.play(\"sound\", true, 0, 1)\n</code></pre> <p> Audio.play(source: <code>AudioAsset</code>) \u00b6 returns <code>AudioInstance</code></p> <p>Plays audio from the specified <code>source</code> at volume <code>1.0</code>. Returns a handle to an audio instance that you can modify or stop.</p> <pre><code>Audio.define_source(\"sound\", \"assets/sound.wav\")\nAudio.play(\"sound\")\n</code></pre> <p> Audio.loop(source: <code>AudioAsset</code>, volume: <code>Num</code>) \u00b6 returns <code>AudioInstance</code></p> <p>Begins looping audio for <code>id</code> at volume <code>volume</code>. Returns a handle to an audio instance that you can modify or stop.</p> <pre><code>var music = Audio.loop(\"music\", 1.0)\n</code></pre> <p> Audio.loop(source: <code>AudioAsset</code>, as3D: <code>Bool</code>, bus: <code>AudioBus</code>, volume: <code>Num</code>) \u00b6 returns <code>AudioInstance</code></p> <p>Begins looping audio for <code>id</code> with <code>as3D</code> and <code>bus</code> at volume <code>volume</code>. The bus comes from <code>create_bus</code>, and 0 means global/default bus. If <code>as3D</code> is true, use set3D on the handle returned to configure position/velocity.   Returns a handle to an audio instance that you can modify or stop.</p> <pre><code>var music = Audio.loop(\"music\", false, 0, 1.0)\n</code></pre> <p> Audio.loop(source: <code>AudioAsset</code>) \u00b6 returns <code>AudioInstance</code></p> <p>Begins looping audio for <code>id</code> at volume <code>1.0</code>. Returns a handle to an audio instance that you can modify or stop.</p> <pre><code>var music = Audio.loop(\"music\")\n</code></pre> <p> Audio.stop(instance: <code>AudioInstance</code>) \u00b6 returns <code>None</code></p> <p>Stops an AudioInstance.</p> <pre><code>var music = Audio.loop(\"music\")\nAudio.stop(music)\n</code></pre> <p> Audio.playing(instance: <code>AudioInstance</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if an AudioInstance is playing.</p> <pre><code>var music = Audio.loop(\"music\")\nLog.print(Audio.playing(music)) //true\nAudio.stop(music)\nLog.print(Audio.playing(music)) //false\n</code></pre> <p> Audio.pan(instance: <code>AudioInstance</code>, pan: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Sets the current <code>pan</code> value for the given <code>instance</code>.</p> <p>Negative values for <code>pan</code> will move the audio to the left speakers,  while positive values will move the audio to the right speakers.</p> <p>A value of 0 will reset to the audio sample back to center.</p> <pre><code>var sound = Audio.play(\"sound\")\nAudio.pan(sound, -2.0)\n</code></pre> <p> Audio.pan_of(instance: <code>AudioInstance</code>) \u00b6 returns <code>Num</code></p> <p>Returns the current <code>pan</code> value for the given <code>instance</code>.</p> <pre><code>var sound = Audio.play(\"sound\")\nAudio.pan(sound, 2.0)\nLog.print(Audio.pan_of(sound)) // returns 2.0\n</code></pre> <p> Audio.volume(instance: <code>AudioInstance</code>, volume: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Sets the <code>volume</code> for a given <code>instance</code>.</p> <p>Intended volumes range from 0..1, with 1 meaning 100% volume, and 0 meaning silence. Volume values higher than 1 are valid (&gt; 100%).</p> <pre><code>var sound = Audio.play(\"sound\") // Volume is 1.0\nAudio.volume(sound, 0.5)        // Volume is now 0.5\n</code></pre> <p> Audio.volume_of(instance: <code>AudioInstance</code>) \u00b6 returns <code>Num</code></p> <p>Returns the current <code>volume</code> for the given <code>instance</code>.</p> <pre><code>var sound = Audio.play(\"sound\")\nLog.print(Audio.volume_of(sound)) // returns 1\n</code></pre> <p> Audio.pitch(instance: <code>AudioInstance</code>, pitch: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Adjusts the <code>pitch</code> of <code>instance</code>, making the sample sound higher or lower-pitched. Pitch values below 1 will lower the pitch of the sample, while pitch values above 1 raise it.</p> <p>A value of 1 will cause the sample to be played at its source pitch.</p> <p>Pitch changes will affect playback duration, causing lower-pitched samples  to have longer durations and higher-pitched samples to have shorter durations,  because the audio is not resampled (when using this function).</p> <p>A pitch of 0 (or smaller) will be ignored.</p> <pre><code>var sound = Audio.play(\"sound\")\nAudio.pitch(sound, 1)\n</code></pre> <p> Audio.pitch_of(instance: <code>AudioInstance</code>) \u00b6 returns <code>Num</code></p> <p>Returns the current <code>pitch</code> for <code>instance</code>.</p> <pre><code>var sound = Audio.play(\"sound\")\nAudio.pitch(sound, 3)\nLog.print(Audio.pitch_of(sound)) // returns 3\n</code></pre> <p> Audio.pause(instance: <code>AudioInstance</code>, paused: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Sets whether the audio <code>instance</code> is playing, pausing it when not. Once you set an <code>instance</code> to not play you can resume it later.</p> <pre><code>var sound = Audio.play(\"sound\")\nAudio.pause(sound, false) //pauses\n</code></pre> <p> Audio.pause_of(instance: <code>AudioInstance</code>) \u00b6 returns <code>Bool</code></p> <p>Returns whether an <code>instance</code> is paused.</p> <pre><code>var sound = Audio.play(\"sound\")\nLog.print(Audio.pause_of(sound)) //true\nAudio.pause(sound, false) //pause\nLog.print(Audio.pause_of(sound)) //false\n</code></pre> <p> Audio.set3D(instance: <code>AudioInstance</code>, pos: <code>Float3</code>, vel: <code>Float3</code>, dopper_factor: <code>Float</code>, attenuation: <code>AudioAttenuation</code>, range: <code>Float2</code>, rolloff: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Sets 3D parameters of the the audio <code>instance</code>. Note that you need to use play with the 3d flag to make the sound 3d otherwise this has no effect.</p> <pre><code>var sound = Audio.play(\"sound\")\nvar pos = [0,0,0]\nvar vel = [0,0,0]\nvar doppler = 1.0\nvar attn = AudioAttenuation.none\nvar range = [1, 100] // min / max distance for attenuation\nvar rolloff = 1.0\nAudio.set3D(sound, pos, vel, doppler, attn, range, rolloff)\n</code></pre>"},{"location":"api/v/2025.1.1/audio/#audioattenuation","title":"AudioAttenuation","text":"<p><code>import \"luxe: audio\" for AudioAttenuation</code></p> <p>Read more details with graphs here https://solhsa.com/soloud/concepts3d.html#attenuation</p> <ul> <li>none</li> <li>inverse_distance</li> <li>linear_distance</li> <li>exponential_distance</li> </ul> <p> AudioAttenuation.none \u00b6 returns <code>unknown</code></p> <p>No attenuation based on distance. The default   </p> <p> AudioAttenuation.inverse_distance \u00b6 returns <code>unknown</code></p> <p>The higher the rolloff factor, the more steeply the volume drops.  At low enough rolloff factor, the volume never drops near zero.  Values over 1 recommended (unless you have special needs).  Values less than equal to zero result in undefined behavior. Increasing the minimum distance pushes the start of the attenuation further.  It also causes the curve to change. Note that the minimum distance must be above 0. The maximum distance simply cuts the attenuation at the volume level it has reached at that point.   </p> <p> AudioAttenuation.linear_distance \u00b6 returns <code>unknown</code></p> <p>The rolloff factor for linear distance simply sets the maximum volume reduction.  Using values outside the 0..1 range causes undefined behavior. The minimum and maximum distance works as one might expect.  Minimum distance must be less or equal to maximum distance.   </p> <p> AudioAttenuation.exponential_distance \u00b6 returns <code>unknown</code></p> <p>The higher the rolloff factor, the more steeply the volume drops.  At low enough rolloff factor, the volume never drops near zero.  Values over 1 recommended (unless you have special needs).  Values less than equal to zero result in really weird behavior. Increasing the minimum distance pushes the start of the attenuation further.  It also causes the curve to change. Note that the minimum distance must be above 0. The maximum distance simply cuts the attenuation at the volume level it has reached at that point.   </p>"},{"location":"api/v/2025.1.1/audio/#bus","title":"Bus","text":"<p><code>import \"luxe: audio\" for Bus</code></p> <p>no docs found</p> <ul> <li>set_channels(bus: <code>AudioBus</code>, value: <code>Num</code>)</li> <li>set_volume(bus: <code>AudioBus</code>, value: <code>Num</code>)</li> <li>get_volume(bus: <code>AudioBus</code>)</li> </ul> <p> Bus.set_channels(bus: <code>AudioBus</code>, value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the number of channels for the bus   </p> <p> Bus.set_volume(bus: <code>AudioBus</code>, value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the volume for the bus   </p> <p> Bus.get_volume(bus: <code>AudioBus</code>) \u00b6 returns <code>Num</code></p> <p>Get the volume for the bus   </p>"},{"location":"api/v/2025.1.1/bytes/","title":"Bytes","text":""},{"location":"api/v/2025.1.1/bytes/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/bytes/#luxe-bytes-module","title":"<code>luxe: bytes</code> module","text":"<ul> <li>Byter </li> <li>Bytes </li> <li>BytesReader </li> <li>BytesWriter </li> <li>Floats </li> <li>Uint16 </li> <li>Uint32 </li> </ul>"},{"location":"api/v/2025.1.1/bytes/#byter","title":"Byter","text":"<p><code>import \"luxe: bytes\" for Byter</code></p> <p>no docs found</p> <ul> <li>pos</li> <li>inner</li> <li>new(size: <code>Any</code>)</li> <li>bytes()</li> <li>write_string(string: <code>Any</code>)</li> <li>write_string(string: <code>Any</code>, length: <code>Any</code>)</li> <li>write_string_aligned4(string: <code>Any</code>)</li> <li>write_string_aligned4(string: <code>Any</code>, length: <code>Any</code>)</li> <li>write_int8(value: <code>Any</code>)</li> <li>write_uint8(value: <code>Any</code>)</li> <li>write_int16(value: <code>Any</code>)</li> <li>write_int32(value: <code>Any</code>)</li> <li>write_int64(value: <code>Any</code>)</li> <li>write_uint16(value: <code>Any</code>)</li> <li>write_uint32(value: <code>Any</code>)</li> <li>write_uint64(value: <code>Any</code>)</li> <li>write_float32(value: <code>Any</code>)</li> <li>write_float64(value: <code>Any</code>)</li> <li>write_uuid(uuid: <code>Any</code>)</li> </ul> <p> Byter.pos \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.inner \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.new(size: <code>Any</code>) \u00b6 returns <code>Byter</code></p> <p>no docs found   </p> <p> Byter.bytes() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_string(string: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_string(string: <code>Any</code>, length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_string_aligned4(string: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_string_aligned4(string: <code>Any</code>, length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_int8(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_uint8(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_int16(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_int32(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_int64(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_uint16(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_uint32(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_uint64(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_float32(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_float64(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_uuid(uuid: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/bytes/#bytes","title":"Bytes","text":"<p><code>import \"luxe: bytes\" for Bytes</code></p> <p>no docs found</p> <ul> <li>new(elements: <code>Any</code>)</li> <li>length</li> <li>[index : Any]</li> <li>[index : Any]=(value : Any)</li> <li>from_string(string: <code>Any</code>)</li> <li>set_from(other: <code>Any</code>)</li> <li>copy(other: <code>Any</code>, at: <code>Any</code>, length: <code>Any</code>)</li> <li>copy(other: <code>Any</code>, to: <code>Any</code>, from: <code>Any</code>, length: <code>Any</code>)</li> <li>set_string(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set_string(at: <code>Any</code>, value: <code>Any</code>, length: <code>Any</code>)</li> <li>get_string(at: <code>Any</code>, length: <code>Any</code>)</li> <li>set_int8(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set_int16(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set_int32(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set_int64(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set_uint8(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set_uint16(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set_uint32(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set_uint64(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set_float32(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set_float64(at: <code>Any</code>, value: <code>Any</code>)</li> <li>get_int8(at: <code>Any</code>)</li> <li>get_int16(at: <code>Any</code>)</li> <li>get_int32(at: <code>Any</code>)</li> <li>get_int64(at: <code>Any</code>)</li> <li>get_uint8(at: <code>Any</code>)</li> <li>get_uint16(at: <code>Any</code>)</li> <li>get_uint32(at: <code>Any</code>)</li> <li>get_uint64(at: <code>Any</code>)</li> <li>get_float32(at: <code>Any</code>)</li> <li>get_float64(at: <code>Any</code>)</li> <li>get(at: <code>Any</code>)</li> <li>set(at: <code>Any</code>, value: <code>Any</code>)</li> <li>bytes()</li> <li>clear()</li> <li>padding(length: <code>Any</code>, align: <code>Any</code>)</li> <li>padding(length: <code>Any</code>)</li> <li>iterate(iter: <code>Any</code>)</li> <li>iteratorValue(iter: <code>Any</code>)</li> </ul> <p> Bytes.new(elements: <code>Any</code>) \u00b6 returns <code>Bytes</code></p> <p>no docs found   </p> <p> Bytes.length \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes [index : Any] \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes [index : Any]=(value : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.from_string(string: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_from(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.copy(other: <code>Any</code>, at: <code>Any</code>, length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.copy(other: <code>Any</code>, to: <code>Any</code>, from: <code>Any</code>, length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_string(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_string(at: <code>Any</code>, value: <code>Any</code>, length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.get_string(at: <code>Any</code>, length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_int8(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_int16(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_int32(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_int64(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_uint8(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_uint16(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_uint32(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_uint64(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_float32(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_float64(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.get_int8(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.get_int16(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.get_int32(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.get_int64(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.get_uint8(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.get_uint16(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.get_uint32(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.get_uint64(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.get_float32(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.get_float64(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.get(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.bytes() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.clear() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.padding(length: <code>Any</code>, align: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.padding(length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.iterate(iter: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.iteratorValue(iter: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/bytes/#bytesreader","title":"BytesReader","text":"<p><code>import \"luxe: bytes\" for BytesReader</code></p> <p>no docs found</p> <ul> <li>pos</li> <li>pos=(v : Any)</li> <li>bytes</li> <li>new(source_bytes: <code>Any</code>)</li> <li>from_string(string: <code>Any</code>)</li> <li>skip(count: <code>Any</code>)</li> <li>check_bounds(to_read: <code>Any</code>)</li> <li>get_string(length: <code>Any</code>)</li> <li>get_int8()</li> <li>get_int16()</li> <li>get_int32()</li> <li>get_int64()</li> <li>get_uint8()</li> <li>get_uint16()</li> <li>get_uint32()</li> <li>get_uint64()</li> <li>get_float32()</li> <li>get_float64()</li> </ul> <p> BytesReader.pos \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.pos=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.bytes \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.new(source_bytes: <code>Any</code>) \u00b6 returns <code>BytesReader</code></p> <p>no docs found   </p> <p> BytesReader.from_string(string: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.skip(count: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.check_bounds(to_read: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.get_string(length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.get_int8() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.get_int16() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.get_int32() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.get_int64() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.get_uint8() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.get_uint16() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.get_uint32() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.get_uint64() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.get_float32() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.get_float64() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/bytes/#byteswriter","title":"BytesWriter","text":"<p><code>import \"luxe: bytes\" for BytesWriter</code></p> <p>no docs found</p> <ul> <li>pos</li> <li>pos=(v : Num)</li> <li>count</li> <li>capacity</li> <li>bytes</li> <li>inner</li> <li>new(initial_length: <code>Num</code>)</li> <li>resize(new_capacity: <code>Num</code>)</li> <li>ensure(write_length: <code>Num</code>)</li> <li>write_string(string: <code>String</code>, length: <code>Num</code>)</li> <li>write_string(string: <code>String</code>)</li> <li>write_string_aligned4(string: <code>String</code>, length: <code>Num</code>)</li> <li>write_string_aligned4(string: <code>String</code>)</li> <li>write_string_and_length(string: <code>String</code>, length: <code>Num</code>)</li> <li>write_string_and_length(string: <code>String</code>)</li> <li>write_int8(value: <code>Num</code>)</li> <li>write_uint8(value: <code>Num</code>)</li> <li>write_int16(value: <code>Num</code>)</li> <li>write_int32(value: <code>Num</code>)</li> <li>write_int64(value: <code>Num</code>)</li> <li>write_uint16(value: <code>Num</code>)</li> <li>write_uint32(value: <code>Num</code>)</li> <li>write_uint64(value: <code>Num</code>)</li> <li>write_float32(value: <code>Num</code>)</li> <li>write_float64(value: <code>Num</code>)</li> <li>write_uuid(uuid: <code>String</code>)</li> </ul> <p> BytesWriter.pos \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> BytesWriter.pos=(v : Num) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesWriter.count \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> BytesWriter.capacity \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> BytesWriter.bytes \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> BytesWriter.inner \u00b6 returns <code>Bytes</code></p> <p>no docs found   </p> <p> BytesWriter.new(initial_length: <code>Num</code>) \u00b6 returns <code>BytesWriter</code></p> <p>no docs found   </p> <p> BytesWriter.resize(new_capacity: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.ensure(write_length: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_string(string: <code>String</code>, length: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_string(string: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_string_aligned4(string: <code>String</code>, length: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_string_aligned4(string: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_string_and_length(string: <code>String</code>, length: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_string_and_length(string: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_int8(value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_uint8(value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_int16(value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_int32(value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_int64(value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_uint16(value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_uint32(value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_uint64(value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_float32(value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_float64(value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_uuid(uuid: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/bytes/#floats","title":"Floats","text":"<p><code>import \"luxe: bytes\" for Floats</code></p> <p>no docs found</p> <ul> <li>new(elements: <code>Any</code>)</li> <li>length</li> <li>capacity</li> <li>size</li> <li>[index : Any]</li> <li>[index : Any]=(value : Any)</li> <li>resize(elements: <code>Any</code>)</li> <li>get(at: <code>Any</code>)</li> <li>set(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set(list: <code>Any</code>, at: <code>Any</code>, list_offset: <code>Any</code>, count: <code>Any</code>)</li> <li>set(list: <code>Any</code>)</li> <li>ortho(left: <code>Any</code>, top: <code>Any</code>, right: <code>Any</code>, bottom: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>)</li> <li>perspective(fov_vertical: <code>Any</code>, aspect: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>)</li> <li>transform(px: <code>Any</code>, py: <code>Any</code>, pz: <code>Any</code>, rx: <code>Any</code>, ry: <code>Any</code>, rz: <code>Any</code>, sx: <code>Any</code>, sy: <code>Any</code>, sz: <code>Any</code>)</li> <li>iterate(iter: <code>Any</code>)</li> <li>iteratorValue(iter: <code>Any</code>)</li> </ul> <p> Floats.new(elements: <code>Any</code>) \u00b6 returns <code>Floats</code></p> <p>Create a new Floats instance that can store the amount of elements specified.   </p> <p> Floats.length \u00b6 returns <code>unknown</code></p> <p>Get the size of the array in bytes. Since a float is 4 bytes, this should always be <code>value.size * 4</code>.   </p> <p> Floats.capacity \u00b6 returns <code>unknown</code></p> <p>Get the capacity of the underlying array. When resizing up to this amount of elements, the array does not need to be reallocated. You can ignore this most of the time.   </p> <p> Floats.size \u00b6 returns <code>unknown</code></p> <p>Get the amount of elements in the array.   </p> <p> Floats [index : Any] \u00b6 returns <code>unknown</code></p> <p>Get the float value at a specific index.   </p> <p> Floats [index : Any]=(value : Any) \u00b6 returns <code>unknown</code></p> <p>Set the float value at a specific index.   </p> <p> Floats.resize(elements: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Resize array to new size.   </p> <p> Floats.get(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Get the float value at a specific index.   </p> <p> Floats.set(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Set the float value at a specific index.   </p> <p> Floats.set(list: <code>Any</code>, at: <code>Any</code>, list_offset: <code>Any</code>, count: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Copy a part of a list into this array. This will grow the array if nessecary.   </p> <p> Floats.set(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Set the array to have the contents of a list. The array will be resized to have the same count as the list   </p> <p> Floats.ortho(left: <code>Any</code>, top: <code>Any</code>, right: <code>Any</code>, bottom: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Makes the array a 4x4 (16 elements) orthographic projection matrix for camera rendering.   </p> <p> Floats.perspective(fov_vertical: <code>Any</code>, aspect: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Makes the array a 4x4 (16 elements) perspective projection matrix for camera rendering.   </p> <p> Floats.transform(px: <code>Any</code>, py: <code>Any</code>, pz: <code>Any</code>, rx: <code>Any</code>, ry: <code>Any</code>, rz: <code>Any</code>, sx: <code>Any</code>, sy: <code>Any</code>, sz: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Makes the array a 4x4 (16 elements) model/transform matrix.   </p> <p> Floats.iterate(iter: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Floats.iteratorValue(iter: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/bytes/#uint16","title":"Uint16","text":"<p><code>import \"luxe: bytes\" for Uint16</code></p> <p>Tight uint16 array. Handeled internally as a C++ array, but will properly be deallocated by the wren garbage collector.</p> <ul> <li>new(elements: <code>Any</code>)</li> <li>length</li> <li>[index : Any]</li> <li>[index : Any]=(value : Any)</li> <li>get(at: <code>Any</code>)</li> <li>set(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set(list: <code>Any</code>, at: <code>Any</code>, list_offset: <code>Any</code>, count: <code>Any</code>)</li> <li>set(list: <code>Any</code>)</li> <li>iterate(iter: <code>Any</code>)</li> <li>iteratorValue(iter: <code>Any</code>)</li> </ul> <p> Uint16.new(elements: <code>Any</code>) \u00b6 returns <code>Uint16</code></p> <p>Create an array with the requested amount of elements   </p> <p> Uint16.length \u00b6 returns <code>unknown</code></p> <p>Get the size of the array in bytes. This is twice the amount of elements it can hold since each element takes up 2 bytes.   </p> <p> Uint16 [index : Any] \u00b6 returns <code>unknown</code></p> <p>Get the int value at a specific index.   </p> <p> Uint16 [index : Any]=(value : Any) \u00b6 returns <code>unknown</code></p> <p>Set the int value at a specific index.   </p> <p> Uint16.get(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Get the int value at a specific index.   </p> <p> Uint16.set(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Set the int value at a specific index.   </p> <p> Uint16.set(list: <code>Any</code>, at: <code>Any</code>, list_offset: <code>Any</code>, count: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Copy a part of a list into this array. This will fail if trying to write outside the array bounds.   </p> <p> Uint16.set(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Set the array to have the contents of a list. This will fail if trying to write outside the array bounds and will leave elements unchanged if list is shorter than array.   </p> <p> Uint16.iterate(iter: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Uint16.iteratorValue(iter: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/bytes/#uint32","title":"Uint32","text":"<p><code>import \"luxe: bytes\" for Uint32</code></p> <p>Tight uint32 array. Handeled internally as a C++ array, but will properly be deallocated by the wren garbage collector.</p> <ul> <li>new(elements: <code>Any</code>)</li> <li>length</li> <li>[index : Any]</li> <li>[index : Any]=(value : Any)</li> <li>get(at: <code>Any</code>)</li> <li>set(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set(list: <code>Any</code>, at: <code>Any</code>, list_offset: <code>Any</code>, count: <code>Any</code>)</li> <li>set(list: <code>Any</code>)</li> <li>iterate(iter: <code>Any</code>)</li> <li>iteratorValue(iter: <code>Any</code>)</li> </ul> <p> Uint32.new(elements: <code>Any</code>) \u00b6 returns <code>Uint32</code></p> <p>Create an array with the requested amount of elements   </p> <p> Uint32.length \u00b6 returns <code>unknown</code></p> <p>Get the size of the array in bytes. This is twice the amount of elements it can hold since each element takes up 2 bytes.   </p> <p> Uint32 [index : Any] \u00b6 returns <code>unknown</code></p> <p>Get the int value at a specific index.   </p> <p> Uint32 [index : Any]=(value : Any) \u00b6 returns <code>unknown</code></p> <p>Set the int value at a specific index.   </p> <p> Uint32.get(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Get the int value at a specific index.   </p> <p> Uint32.set(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Set the int value at a specific index.   </p> <p> Uint32.set(list: <code>Any</code>, at: <code>Any</code>, list_offset: <code>Any</code>, count: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Copy a part of a list into this array. This will fail if trying to write outside the array bounds.   </p> <p> Uint32.set(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Set the array to have the contents of a list. This will fail if trying to write outside the array bounds and will leave elements unchanged if list is shorter than array.   </p> <p> Uint32.iterate(iter: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Uint32.iteratorValue(iter: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/cable/","title":"Cable","text":""},{"location":"api/v/2025.1.1/cable/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/cable/#luxe-cable-module","title":"<code>luxe: cable</code> module","text":"<ul> <li>Cable </li> </ul>"},{"location":"api/v/2025.1.1/cable/#cable","title":"Cable","text":"<p><code>import \"luxe: cable\" for Cable</code></p> <p>no docs found</p> <ul> <li><code>var fixed_size : Bool = false</code></li> <li><code>var flex_amount : Num = 0.1</code></li> <li><code>var damping : Num = 0.96</code></li> <li><code>var iterations : Num = 4</code></li> <li><code>var segments : Num = 20</code></li> <li><code>var segment_length : Num = 12</code></li> <li><code>var gravity : List = [0, -200, 0]</code></li> <li><code>var start : Float3 = [0, 0, 0]</code></li> <li><code>var end : Float3 = [0, 0, 0]</code></li> <li><code>var nodes : List = []</code></li> <li>new()</li> <li>pre_warm(warm_iterations: <code>Num</code>)</li> <li>simulate()</li> <li>apply_constraints()</li> <li>tick()</li> </ul> <p> Cable.new() \u00b6 returns <code>Cable</code></p> <p>no docs found   </p> <p> Cable.pre_warm(warm_iterations: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Cable.simulate() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Cable.apply_constraints() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Cable.tick() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/color/","title":"Color","text":""},{"location":"api/v/2025.1.1/color/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/color/#luxe-color-module","title":"<code>luxe: color</code> module","text":"<ul> <li>Color </li> </ul>"},{"location":"api/v/2025.1.1/color/#color","title":"Color","text":"<p><code>import \"luxe: color\" for Color</code></p> <p>Access to color APIs. Note that this is not done at all.</p> <ul> <li>white</li> <li>black</li> <li>clear</li> <li>pink</li> <li>red</li> <li>green</li> <li>blue</li> <li>hex(value: <code>Num</code>)</li> <li>clone(other: <code>Color</code>, alpha: <code>Num</code>)</li> <li>hex_string(color: <code>Color</code>)</li> <li>hex_string(color: <code>Color</code>, alpha: <code>Bool</code>)</li> <li>hex(value: <code>Num</code>, alpha: <code>Num</code>)</li> <li>hex_set(color: <code>Color</code>, hex: <code>Num</code>)</li> <li>hex_color(color: <code>Color</code>)</li> <li>hex_color(color: <code>Color</code>, include_alpha: <code>Bool</code>)</li> <li>lerp(from: <code>Color</code>, to: <code>Color</code>, t: <code>Num</code>)</li> <li>lerp(from: <code>Color</code>, to: <code>Color</code>, t: <code>Num</code>, into: <code>Color</code>)</li> <li>rgb2hsv(rgb: <code>Color</code>)</li> <li>hsv2rgb(hsv: <code>Color</code>)</li> <li>color_from_hue(hue: <code>Num</code>)</li> <li>linear_srgb_to_oklab(r: <code>Num</code>, g: <code>Num</code>, b: <code>Num</code>)</li> <li>oklab_to_linear_srgb(L: <code>Num</code>, a: <code>Num</code>, b: <code>Num</code>)</li> <li>okhsl_to_srgb(h: <code>Num</code>, s: <code>Num</code>, l: <code>Num</code>)</li> <li>srgb_to_okhsl(r: <code>Num</code>, g: <code>Num</code>, b: <code>Num</code>)</li> <li>okhsv_to_srgb(h: <code>Num</code>, s: <code>Num</code>, v: <code>Num</code>)</li> <li>srgb_to_okhsv(r: <code>Num</code>, g: <code>Num</code>, b: <code>Num</code>)</li> <li>find_cusp(a: <code>Any</code>, b: <code>Any</code>)</li> <li>compute_max_saturation(a: <code>Num</code>, b: <code>Num</code>)</li> <li>find_gamut_intersection(a: <code>Any</code>, b: <code>Any</code>, L1: <code>Any</code>, C1: <code>Any</code>, L0: <code>Any</code>, cusp: <code>Any</code>)</li> </ul> <p> Color.white \u00b6 returns <code>Color</code></p> <p>A constant for [1,1,1,1]. Note: don't modify the return value.   </p> <p> Color.black \u00b6 returns <code>Color</code></p> <p>A constant for [0,0,0,1]. Note: don't modify the return value.   </p> <p> Color.clear \u00b6 returns <code>Color</code></p> <p>A constant for [0,0,0,0]. Note: don't modify the return value.   </p> <p> Color.pink \u00b6 returns <code>Color</code></p> <p>The luxe pink color used everywhere. Note: don't modify the return value.   </p> <p> Color.red \u00b6 returns <code>Color</code></p> <p>The luxe red color. Note: don't modify the return value.   </p> <p> Color.green \u00b6 returns <code>Color</code></p> <p>The luxe green color. Note: don't modify the return value.   </p> <p> Color.blue \u00b6 returns <code>Color</code></p> <p>The luxe blue color. Note: don't modify the return value.   </p> <p> Color.hex(value: <code>Num</code>) \u00b6 returns <code>Color</code></p> <p>Returns a new color from the specified hex color value.</p> <pre><code>var color = Color.hex(0xFF00AA)\n</code></pre> <p> Color.clone(other: <code>Color</code>, alpha: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Returns a new color from the specified color with a different alpha.</p> <pre><code>var other = Color.hex(0xFF00AA)\nvar color = Color.clone(other, 0.5)\n</code></pre> <p> Color.hex_string(color: <code>Color</code>) \u00b6 returns <code>String</code></p> <p>Returns a hex string from the specified color.</p> <pre><code>Color.hex_string(Color.white) //#FFFFFF\n</code></pre> <p> Color.hex_string(color: <code>Color</code>, alpha: <code>Bool</code>) \u00b6 returns <code>String</code></p> <p>Returns a hex string from the specified color. If <code>alpha</code> is true, includes the alpha component.</p> <pre><code>Color.hex_string(Color.white, true) //#FFFFFFFF\n</code></pre> <p> Color.hex(value: <code>Num</code>, alpha: <code>Num</code>) \u00b6 returns <code>Color</code></p> <p>Returns a new color from the specified hex color value, with the specified alpha value.</p> <pre><code>var color = Color.hex(0xFF00AA, 0.5)\n</code></pre> <p> Color.hex_set(color: <code>Color</code>, hex: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Set an existing color to the specified hex color value.</p> <pre><code>var color = Color.hex_set(0xFF00AA)\n</code></pre> <p> Color.hex_color(color: <code>Color</code>) \u00b6 returns <code>Num</code></p> <p>Get the hex color value of a color   </p> <p> Color.hex_color(color: <code>Color</code>, include_alpha: <code>Bool</code>) \u00b6 returns <code>Num</code></p> <p>Get the hex color value of a color, either 3 byte or 4 byte with alpha   </p> <p> Color.lerp(from: <code>Color</code>, to: <code>Color</code>, t: <code>Num</code>) \u00b6 returns <code>Color</code></p> <p>Linearly interpolate between two colors, using <code>t</code> as the distance between the two in 0...1 range. To blend two colors half and half, you'd use <code>lerp(from, to, 0.5)</code>. If <code>t</code> is <code>0</code>, <code>from</code> is returned and if <code>t</code> is <code>1</code>, <code>to</code> is returned.   </p> <p> Color.lerp(from: <code>Color</code>, to: <code>Color</code>, t: <code>Num</code>, into: <code>Color</code>) \u00b6 returns <code>unknown</code></p> <p>Linearly interpolate between two colors, storing the result in the existing color <code>into</code>.  <code>t</code> is the distance between the two in 0...1 range. To blend two colors half and half,  you'd use <code>lerp(from, to, 0.5)</code>. If <code>t</code> is <code>0</code>, <code>from</code> is returned and if <code>t</code> is <code>1</code>, <code>to</code> is returned.   </p> <p> Color.rgb2hsv(rgb: <code>Color</code>) \u00b6 returns <code>Color</code></p> <p>Convert from an RGB format color to an HSV format.   </p> <p> Color.hsv2rgb(hsv: <code>Color</code>) \u00b6 returns <code>Color</code></p> <p>Convert an HSV format color to an RGB format.   </p> <p> Color.color_from_hue(hue: <code>Num</code>) \u00b6 returns <code>Color</code></p> <p>Create a color from the given hue, in a 0...1 range.  Values outside 0...1 are wrapped into 0...1 range.   </p> <p> Color.linear_srgb_to_oklab(r: <code>Num</code>, g: <code>Num</code>, b: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Color.oklab_to_linear_srgb(L: <code>Num</code>, a: <code>Num</code>, b: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Color.okhsl_to_srgb(h: <code>Num</code>, s: <code>Num</code>, l: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Color.srgb_to_okhsl(r: <code>Num</code>, g: <code>Num</code>, b: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Color.okhsv_to_srgb(h: <code>Num</code>, s: <code>Num</code>, v: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Color.srgb_to_okhsv(r: <code>Num</code>, g: <code>Num</code>, b: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Color.find_cusp(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Color.compute_max_saturation(a: <code>Num</code>, b: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Color.find_gamut_intersection(a: <code>Any</code>, b: <code>Any</code>, L1: <code>Any</code>, C1: <code>Any</code>, L0: <code>Any</code>, cusp: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/containers/","title":"Containers","text":""},{"location":"api/v/2025.1.1/containers/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/containers/#luxe-containers-module","title":"<code>luxe: containers</code> module","text":"<ul> <li>Lists </li> <li>MapOrdered </li> </ul>"},{"location":"api/v/2025.1.1/containers/#lists","title":"Lists","text":"<p><code>import \"luxe: containers\" for Lists</code></p> <p>The <code>Lists</code> API works with the built in Wren <code>List</code> type, offering more tools to operate on them.</p> <ul> <li>first(list: <code>Sequence</code>)</li> <li>first(list: <code>Sequence</code>, callback: <code>Fn</code>)</li> <li>binary_search(list: <code>List</code>, value: <code>Any</code>)</li> <li>binary_search_first(list: <code>List</code>, value: <code>Any</code>, fn: <code>Fn</code>)</li> <li>equal(a: <code>List</code>, b: <code>List</code>)</li> <li>equalish(a: <code>List</code>, b: <code>List</code>)</li> <li>flatten(list: <code>List</code>)</li> <li>add_unique(list: <code>List</code>, value: <code>Any</code>)</li> <li>append(into: <code>List</code>, list: <code>List</code>)</li> <li>prepend(into: <code>List</code>, list: <code>List</code>)</li> <li>remove_where(list: <code>List</code>, value: <code>Any</code>, fn: <code>Fn</code>)</li> <li>contains(list: <code>Any</code>, item: <code>Any</code>)</li> <li>remove(list: <code>Any</code>, to_remove: <code>Any</code>)</li> <li>index_of(list: <code>Any</code>, item: <code>Any</code>)</li> <li>index_of_where(list: <code>List</code>, fn: <code>Fn</code>)</li> <li>index_of_where(list: <code>List</code>, value: <code>Any</code>, fn: <code>Fn</code>)</li> <li>bubble_sort(list: <code>List</code>, compare: <code>Fn</code>)</li> <li>quicksort(list: <code>List</code>, compare: <code>Fn</code>)</li> <li>quicksort(list: <code>List</code>, low: <code>Num</code>, high: <code>Num</code>, compare: <code>Fn</code>)</li> </ul> <p> Lists.first(list: <code>Sequence</code>) \u00b6 returns <code>Any</code></p> <p>Returns the first element of a Sequence, null if the sequence is empty.</p> <pre><code>  var list = [\"twig\", 2, null, \"tree\", \"petals\", \"faeries\", 9]\n  Lists.first(list) //\"twig\"\n</code></pre> <p> Lists.first(list: <code>Sequence</code>, callback: <code>Fn</code>) \u00b6 returns <code>Any</code></p> <p>Searches for the first element in a sequence that fulfills a requirement and returns it. If no element fulfills the requirement, null is returned.</p> <pre><code>  var list = [\"twig\", 2, null, \"tree\", \"petals\", \"faeries\", 9]\n  Lists.first(list){|elem| elem is String &amp;&amp; elem.count &gt; 4} //\"petals\"\n</code></pre> <p> Lists.binary_search(list: <code>List</code>, value: <code>Any</code>) \u00b6 returns <code>Num</code></p> <p>Searches for <code>value</code> in <code>list</code> using a binary search.  Binary searches can be more efficient for finding items when there are many. This requires the list to be sorted, and values in the list to be comparable with <code>&gt;</code>/<code>&lt;</code>.</p> <p>Returns the index in the list, or <code>-1</code> if not found.</p> <pre><code>var to_find = 9\nvar list = [1,3,7,9,23,54]\nvar index = Lists.binary_search(list, to_find) //index is 3\n</code></pre> <p> Lists.binary_search_first(list: <code>List</code>, value: <code>Any</code>, fn: <code>Fn</code>) \u00b6 returns <code>Num</code></p> <p>Similar to <code>binary_search</code> but handles comparison via a callback. The callback should return 0 for equal, -1 for lower and 1 for higher. The callback puts the input value in the first argument.</p> <p>Returns the index in the list, or <code>-1</code> if not found.</p> <pre><code>var list = [1,3,7,9,23,54]\nvar index = Lists.binary_search_first(list, 9) {|value, other|\n  if(value == to_find) return 0\n  if(value &lt; to_find)  return -1\n  return 1\n}\n</code></pre> <p> Lists.equal(a: <code>List</code>, b: <code>List</code>) \u00b6 returns <code>Bool</code></p> <p>Compares two flat lists, returning true if the contents are the same and in the same order. Does not recurse nested lists. Uses <code>a[i] != b[i]</code> to compare.</p> <pre><code>var listA = [1,9,7]\nvar listB = [1,7,9]\nvar equalA = Lists.equal(listA, [1,7,9]) //false\nvar equalB = Lists.equal(listB, [1,7,9]) //true\n</code></pre> <p> Lists.equalish(a: <code>List</code>, b: <code>List</code>) \u00b6 returns <code>Bool</code></p> <p>Similar to <code>equal</code> but values don't need to be in the same order.</p> <pre><code>var listA = [1,9,7]\nvar listB = [1,7,9]\nvar equalA = Lists.equal(listA, [1,7,9]) //true\nvar equalB = Lists.equal(listB, [1,7,9]) //true\n</code></pre> <p> Lists.flatten(list: <code>List</code>) \u00b6 returns <code>List</code></p> <p>Converts a nested list of lists to a single flat list of values.</p> <pre><code>var list = [1,[2,3,[4,[5]]]]\nvar flat = Lists.flatten(list) //[1,2,3,4,5]\n</code></pre> <p> Lists.add_unique(list: <code>List</code>, value: <code>Any</code>) \u00b6 returns <code>Bool</code></p> <p>Add an item to a list if the value doesn't already exist in the list. Uses <code>list.indexOf</code> to check. </p> <p>Returns true if the value was unique and added to the list.</p> <pre><code>var list = [1,2,3]\nLists.add_unique(list, 0) //true\nLists.add_unique(list, 1) //false, already found\n</code></pre> <p> Lists.append(into: <code>List</code>, list: <code>List</code>) \u00b6 returns <code>None</code></p> <p>Append <code>list</code> at the end of <code>into</code> without allocating a new list.  This function modifies <code>into</code>.</p> <p>Note that in Wren, <code>List</code> implements <code>+</code>, which is append too,  but that makes a new list with the two combined. <code>[1] + [2] = [1, 2]</code></p> <pre><code>var list = [1,2]\nLists.append(list, [3,4,5])\nLog.print(list) //[1,2,3,4,5]\n</code></pre> <p> Lists.prepend(into: <code>List</code>, list: <code>List</code>) \u00b6 returns <code>None</code></p> <p>Similar to <code>append</code>, but adds the items from <code>list</code> to the front of <code>into</code>. This function modifies <code>into</code>.</p> <pre><code>var list = [1,2]\nLists.prepend(list, [3,4,5])\nLog.print(list) //[3,4,5,1,2]\n</code></pre> <p> Lists.remove_where(list: <code>List</code>, value: <code>Any</code>, fn: <code>Fn</code>) \u00b6 returns <code>Any</code></p> <p>Similar to <code>list.remove</code> but uses a function for the find/equality check. Uses <code>Lists.index_of_where</code> to find the index, so the callback  msut return true if the values are equal or false if not.</p> <p>Returns the value if it was removed, or null if it wasn't found.</p> <pre><code>var list = [1,2,3]\nvar fn = Fn.new {|value, other| value == other }\nLists.remove_where(list, 3, fn)  //3\nLists.remove_where(list, 6, fn)  //null\nLog.print(list)               //[1,2]\n</code></pre> <p> Lists.contains(list: <code>Any</code>, item: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Deprecated. Use list.contains(item) Returns true if the list contains the item.   </p> <p> Lists.remove(list: <code>Any</code>, to_remove: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Deprecated. Use list.remove(item) Returns the item if removed, or null.   </p> <p> Lists.index_of(list: <code>Any</code>, item: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Deprecated. Use list.indexOf(item) Returns the index, or -1 if the item isn't found.   </p> <p> Lists.index_of_where(list: <code>List</code>, fn: <code>Fn</code>) \u00b6 returns <code>Num</code></p> <p>Returns the index of <code>value</code> in <code>list</code> or <code>-1</code> if not found, where comparison is handled by a callback function.</p> <pre><code>var list = [1,2,3]\nLists.index_of_where(list, 3) {|value, other| value == other } //2\n</code></pre> <p> Lists.index_of_where(list: <code>List</code>, value: <code>Any</code>, fn: <code>Fn</code>) \u00b6 returns <code>Num</code></p> <p>Returns the index of <code>item</code> in <code>list</code> or <code>-1</code> if not found, where comparison is handled by a callback function.</p> <pre><code>var list = [1,2,3]\nLists.index_of_where(list, 3) {|value, other| value == other } //2\n</code></pre> <p> Lists.bubble_sort(list: <code>List</code>, compare: <code>Fn</code>) \u00b6 returns <code>None</code></p> <p>In-place sorting of <code>list</code> using the <code>compare</code> function. Modifies <code>list</code>. Uses bubble sort. The compare function should return <code>0</code> for equal, <code>-1</code> for lower values and <code>1</code> for higher values.</p> <pre><code>var list = [5,2,67,23]\nLists.bubble_sort(list) {|a, b| b - a }\nLog.print(list) // [67, 23, 5, 2]\n\nLists.bubble_sort(list) {|a, b| a - b }\nLog.print(list) // [2, 5, 23, 67]\n</code></pre> <p> Lists.quicksort(list: <code>List</code>, compare: <code>Fn</code>) \u00b6 returns <code>List</code></p> <p>In-place sorting of <code>list</code> using the <code>compare</code> function. Modifies <code>list</code>. Uses quick sort. The compare function should return <code>0</code> for equal, <code>-1</code> for lower values and <code>1</code> for higher values.</p> <pre><code>var list = [5,2,67,23]\nLists.quicksort(list) {|a, b| b - a }\nLog.print(list) // [67, 23, 5, 2]\n\nLists.quicksort(list) {|a, b| a - b }\nLog.print(list) // [2, 5, 23, 67]\n</code></pre> <p> Lists.quicksort(list: <code>List</code>, low: <code>Num</code>, high: <code>Num</code>, compare: <code>Fn</code>) \u00b6 returns <code>List</code></p> <p>Same as <code>quicksort</code> but a low and high index can be specified to sort just a portion of a list. The default for <code>quicksort(list, compare)</code> is <code>low = 0</code>, <code>high = list.count-1</code>.</p> <pre><code>var list = [5,2,34,89,11,60,45]\nLists.quicksort(list, 2, 5) {|a, b| a - b }\nLog.print(list) // [5, 2, |11, 34, 60, 89|, 45]\n//note only the range between | was sorted\n</code></pre>"},{"location":"api/v/2025.1.1/containers/#mapordered","title":"MapOrdered","text":"<p><code>import \"luxe: containers\" for MapOrdered</code></p> <p>A <code>Map</code> wrapper that keeps the order of the keys the same in which they're added. Note: The Wren <code>Map</code> class doesn't guarantee order of keys.</p> <ul> <li>keys</li> <li>map</li> <li>new()</li> <li>get(key: <code>Any</code>)</li> <li>set(key: <code>Any</code>, value: <code>Any</code>)</li> <li>containsKey(key: <code>Any</code>)</li> <li>[key : Any]</li> <li>[key : Any]=(value : Any)</li> <li>iterate(iterator: <code>Any</code>)</li> <li>iteratorValue(iterator: <code>Any</code>)</li> </ul> <p> MapOrdered.keys \u00b6 returns <code>List</code></p> <p>Returns the list of <code>keys</code> in the Map. Don't modify this.</p> <pre><code>var map = MapOrdered.new()\nmap[\"one\"] = 1\nmap[\"two\"] = 2\nLog.print(map.keys) //[\"one\", \"two\"]\n</code></pre> <p> MapOrdered.map \u00b6 returns <code>Map</code></p> <p>Access to the underlying Wren <code>Map</code> data. Normally you don't modify this directly.</p> <pre><code>var map = MapOrdered.new()\nmap[\"one\"] = 1\nmap[\"two\"] = 2\nLog.print(map.map) //{two: 2, one: 1}\n</code></pre> <p> MapOrdered.new() \u00b6 returns <code>MapOrdered</code></p> <p>Create a new ordered map.</p> <pre><code>var map = MapOrdered.new()\n</code></pre> <p> MapOrdered.get(key: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Return the value associated with <code>key</code>, or <code>null</code> if not found. You can also use <code>map[key]</code> as an alternative.</p> <pre><code>var map = MapOrdered.new()\nmap[\"one\"] = 1\nLog.print(map.get(\"one\"))  //1\nLog.print(map.get(\"two\"))  //null\n</code></pre> <p> MapOrdered.set(key: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Set a <code>value</code> for a given <code>key</code>. You can also use <code>map[key] = value</code> as an alternative.</p> <pre><code>var map = MapOrdered.new()\nmap.set(\"one\", 1)\n</code></pre> <p> MapOrdered.containsKey(key: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Returns true if <code>key</code> is found in the map.</p> <pre><code>var map = MapOrdered.new()\nmap[\"one\"] = 1\nLog.print(map.containsKey(\"one\"))  //true\nLog.print(map.containsKey(\"two\"))  //false\n</code></pre> <p> MapOrdered [key : Any] \u00b6 returns <code>unknown</code></p> <p>Return the value associated with <code>key</code>, or <code>null</code> if not found.</p> <pre><code>var map = MapOrdered.new()\nmap[\"one\"] = 1\nLog.print(map[\"one\"])  //1\nLog.print(map[\"two\"])  //null\n</code></pre> <p> MapOrdered [key : Any]=(value : Any) \u00b6 returns <code>unknown</code></p> <p> MapOrdered.iterate(iterator: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Implementation details for the Wren iterator protocol.   </p> <p> MapOrdered.iteratorValue(iterator: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Implementation details for the Wren iterator protocol.   </p>"},{"location":"api/v/2025.1.1/docgen/","title":"Docgen","text":""},{"location":"api/v/2025.1.1/docgen/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/docgen/#luxe-docgen-module","title":"<code>luxe: docgen</code> module","text":"<ul> <li>DocGen </li> </ul>"},{"location":"api/v/2025.1.1/docgen/#docgen","title":"DocGen","text":"<p><code>import \"luxe: docgen\" for DocGen</code></p> <p>no docs found</p> <ul> <li>config</li> <li>new(in_config: <code>Map</code>)</li> <li>get_param_string(parameters: <code>Any</code>)</li> <li>get_param_string(parameters: <code>Any</code>, display: <code>Any</code>)</li> <li>generate_from_module(module_path: <code>String</code>)</li> <li>generate_from_module(config: <code>Map</code>, module_path: <code>String</code>)</li> <li>get_ast_for_path(module_prefix: <code>String</code>, path: <code>String</code>)</li> <li>generate()</li> <li>generate_from_project(config: <code>Any</code>)</li> <li>expr_to_string(expr: <code>Expr</code>)</li> <li>generate_from_ast_nodes(config: <code>Map</code>, nodes: <code>Map</code>)</li> <li>format_docs(meta_list: <code>Any</code>)</li> <li>get_alias(meta: <code>Any</code>, name: <code>Any</code>)</li> <li>signature_url(name: <code>Any</code>, args: <code>Any</code>, setter: <code>Any</code>)</li> <li>get_meta(source_meta: <code>Any</code>)</li> <li>convert_meta(in_meta: <code>Any</code>)</li> </ul> <p> DocGen.config \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> DocGen.new(in_config: <code>Map</code>) \u00b6 returns <code>DocGen</code></p> <p>no docs found   </p> <p> DocGen.get_param_string(parameters: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> DocGen.get_param_string(parameters: <code>Any</code>, display: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> DocGen.generate_from_module(module_path: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> DocGen.generate_from_module(config: <code>Map</code>, module_path: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>takes a raw path for a module and tries to generate documentation for it   </p> <p> DocGen.get_ast_for_path(module_prefix: <code>String</code>, path: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> DocGen.generate() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> DocGen.generate_from_project(config: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> DocGen.expr_to_string(expr: <code>Expr</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> DocGen.generate_from_ast_nodes(config: <code>Map</code>, nodes: <code>Map</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> DocGen.format_docs(meta_list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> DocGen.get_alias(meta: <code>Any</code>, name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> DocGen.signature_url(name: <code>Any</code>, args: <code>Any</code>, setter: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> DocGen.get_meta(source_meta: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> DocGen.convert_meta(in_meta: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/draw/","title":"Draw","text":""},{"location":"api/v/2025.1.1/draw/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/draw/#luxe-draw-module","title":"<code>luxe: draw</code> module","text":"<ul> <li>Draw </li> <li>LineCap </li> <li>LineJoin </li> <li>PathStyle </li> </ul>"},{"location":"api/v/2025.1.1/draw/#draw","title":"Draw","text":"<p><code>import \"luxe: draw\" for Draw</code></p> <p>Draw is a service API that offers drawing to a context (canvas) in an efficient way. Things like lines, circles, paths and so on are what it provides. The terms canvas and context will be used interchangeably. </p> <p>It is important to note that <code>Draw</code> is a commit based API. A brief tutorial  on using it can be found here: 2D drawing tutorial.</p> <p><code>Draw</code> can be used to draw game content with, but is also a great tool for debug visualization. Many problems are a lot clearer when their details are drawn in the world, which Draw is very useful for.</p> <p>The context can be drawn to once or updated frequently. For example you might draw a grid to the context, and then leave it there which is a very efficient way to draw many lines.</p> <ul> <li>create(set: <code>Any</code>)</li> <li>create(set: <code>RenderSet</code>, tri_basis: <code>String</code>, text_basis: <code>String</code>, line_basis: <code>String</code>)</li> <li>destroy(context: <code>Any</code>)</li> <li>valid(context: <code>Any</code>)</li> <li>clear(context: <code>Any</code>)</li> <li>commit(context: <code>Any</code>)</li> <li>rect(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, angle: <code>Any</code>, style: <code>Any</code>)</li> <li>rect_detailed(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, angle: <code>Any</code>, radius: <code>Any</code>, smoothness: <code>Any</code>, style: <code>Any</code>)</li> <li>quad_detailed(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, angle: <code>Any</code>, radius: <code>Any</code>, smoothness: <code>Any</code>, color: <code>Any</code>)</li> <li>quad(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, angle: <code>Any</code>, color: <code>Any</code>)</li> <li>ngon(context: <code>Any</code>, ox: <code>Any</code>, oy: <code>Any</code>, oz: <code>Any</code>, rx: <code>Any</code>, ry: <code>Any</code>, sides: <code>Any</code>, angle: <code>Any</code>, style: <code>Any</code>)</li> <li>ngon_solid(context: <code>Any</code>, ox: <code>Any</code>, oy: <code>Any</code>, oz: <code>Any</code>, rx: <code>Any</code>, ry: <code>Any</code>, sides: <code>Any</code>, angle: <code>Any</code>, color: <code>Any</code>)</li> <li>ring(context: <code>Any</code>, ox: <code>Any</code>, oy: <code>Any</code>, oz: <code>Any</code>, rx: <code>Any</code>, ry: <code>Any</code>, start_angle: <code>Any</code>, end_angle: <code>Any</code>, smoothness: <code>Any</code>, style: <code>Any</code>)</li> <li>ring(context: <code>Any</code>, ox: <code>Any</code>, oy: <code>Any</code>, oz: <code>Any</code>, radius: <code>Any</code>, smoothness: <code>Any</code>, style: <code>Any</code>)</li> <li>circle(context: <code>Any</code>, ox: <code>Any</code>, oy: <code>Any</code>, oz: <code>Any</code>, radius: <code>Any</code>, smoothness: <code>Any</code>, color: <code>Any</code>)</li> <li>circle(context: <code>Any</code>, ox: <code>Any</code>, oy: <code>Any</code>, oz: <code>Any</code>, rx: <code>Any</code>, ry: <code>Any</code>, start_angle: <code>Any</code>, end_angle: <code>Any</code>, smoothness: <code>Any</code>, color: <code>Any</code>)</li> <li>line(context: <code>Any</code>, x1: <code>Any</code>, y1: <code>Any</code>, x2: <code>Any</code>, y2: <code>Any</code>, z: <code>Any</code>, style: <code>Any</code>)</li> <li>path(context: <code>Any</code>, points: <code>Any</code>, style: <code>Any</code>, closed: <code>Any</code>)</li> <li>path3D(context: <code>Any</code>, points: <code>Any</code>, style: <code>Any</code>, closed: <code>Any</code>)</li> <li>line3D(context: <code>Draw</code>, start: <code>Vec</code>, end: <code>Vec</code>, style: <code>PathStyle</code>)</li> <li>bounds3D(context: <code>Any</code>, geometry: <code>Any</code>, style: <code>Any</code>)</li> <li>aabb3D(context: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>, style: <code>Any</code>)</li> <li>plane3D(context: <code>Draw</code>, pos: <code>Vec</code>, normal: <code>Vec</code>, radius: <code>Num</code>, style: <code>PathStyle</code>)</li> <li>plus3D(context: <code>Draw</code>, pos: <code>Vec</code>, radius: <code>Num</code>, style: <code>PathStyle</code>)</li> <li>ring3D(context: <code>Draw</code>, pos: <code>Vec3</code>, radius: <code>Vec2</code>, start_angle: <code>Num</code>, end_angle: <code>Num</code>, smoothness: <code>Num</code>, style: <code>PathStyle</code>)</li> <li>plus(context: <code>Draw</code>, pos: <code>Vec</code>, radius: <code>Num</code>, style: <code>PathStyle</code>)</li> <li>camera(context: <code>Draw</code>, camera: <code>Entity</code>, style: <code>PathStyle</code>)</li> <li>frustum(context: <code>Draw</code>, corners: <code>List</code>, style: <code>PathStyle</code>)</li> <li>text(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, string: <code>Any</code>, size: <code>Any</code>, font: <code>Any</code>, color: <code>Any</code>, align: <code>Any</code>, align_vertical: <code>Any</code>)</li> <li>text(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, string: <code>Any</code>, size: <code>Any</code>, font: <code>Any</code>, color: <code>Any</code>, align: <code>Any</code>, align_vertical: <code>Any</code>)</li> <li>text(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, string: <code>Any</code>, size: <code>Any</code>, color: <code>Any</code>)</li> <li>image(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, angle: <code>Any</code>, material: <code>Any</code>)</li> <li>image(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, angle: <code>Any</code>, color: <code>Any</code>, uv: <code>Any</code>, material: <code>Any</code>)</li> <li>cross(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, radius: <code>Any</code>, angle: <code>Any</code>, style: <code>Any</code>)</li> <li>sphere3D_slice(context: <code>Draw</code>, pos: <code>Vec3</code>, radius: <code>Vec2</code>, start_angle: <code>Num</code>, end_angle: <code>Num</code>, layers: <code>Num</code>, style: <code>PathStyle</code>)</li> </ul> <p> Draw.create(set: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Creates a new drawing context to draw with. The <code>set</code> passed in is a <code>RenderSet</code>, which you normally get from a <code>World</code> via <code>World.render_set(world)</code>. This would place the canvas in the world to be rendered at the same time, as part of the world.</p> <pre><code>var canvas = Draw.create(World.render_set(app.world))\n</code></pre> <p> Draw.create(set: <code>RenderSet</code>, tri_basis: <code>String</code>, text_basis: <code>String</code>, line_basis: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Creates a new drawing context to draw with. The <code>set</code> passed in is a <code>RenderSet</code>, which you normally get from a <code>World</code> via <code>World.render_set(world)</code>. This would place the canvas in the world to be rendered at the same time, as part of the world.</p> <ul> <li><code>tri_basis</code></li> <li>Triangle Material Basis for the geometry</li> <li>default <code>luxe: material_basis/solid</code></li> <li><code>text_basis</code></li> <li>Text Material Basis</li> <li>default <code>luxe: material_basis/font</code></li> <li><code>line_basis</code></li> <li>Line Material Basis for 3D line geometry</li> <li> <p>default <code>luxe: material_basis/debug_line3d</code></p> <p>var canvas = Draw.create(World.render_set(app.world),                           \"luxe: material_basis/solid\",                           \"luxe: material_basis/font\",                          \"luxe: material_basis/debug_line3d\")   </p> </li> </ul> <p> Draw.destroy(context: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Destroy a previously created context.</p> <pre><code>var canvas = Draw.create(World.render_set(app.world))\n...\nDraw.destroy(canvas)\n</code></pre> <p> Draw.valid(context: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Returns true if the context is valid (and hasn't been destroyed).</p> <pre><code>var canvas = Draw.create(World.render_set(app.world))\nvar canvas = Draw.create(World.render_set(app.world))\nLog.print(Draw.valid(canvas)) //true\nDraw.destroy(canvas)\nLog.print(Draw.valid(canvas)) //false\n</code></pre> <p> Draw.clear(context: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Clears the context of any drawn content. This clears both committed and uncommitted data.</p> <pre><code>Draw.clear(draw)\n</code></pre> <p> Draw.commit(context: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Commit the content that has been drawn to the context.</p> <p>When using the Draw API, you can submit a bunch of drawing to happen, but it won't show up until it is committed. </p> <p>You can think of the draw calls as a queue, commit will process  that queue, and the canvas contents will be updated. The content will stay there until commit is called again. </p> <p>Calling commit with nothing in the queue will clear the contents (see also <code>Draw.clear</code>).</p> <pre><code>var canvas = Draw.create(World.render_set(app.world))\n//draw a red box rotated 45 degrees\nDraw.quad(canvas, 0, 0, 0, 100, 100, 45, [1, 0, 0, 1])\nDraw.commit(canvas)\n</code></pre> <p> Draw.rect(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, angle: <code>Any</code>, style: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draws a rectangle outline using <code>style</code> (<code>PathStyle</code>) at <code>x</code>,<code>y</code>, with depth <code>z</code>, with width of <code>w</code> and height of <code>h</code>. The rectangle will be rotated <code>angle</code> degrees.</p> <pre><code>var depth = 0\nvar angle = 45\nvar style = PathStyle.new()\n    style.color = [1,0,0,1]\n    style.thickness = 2\nDraw.rect(canvas, 0, 0, depth, 100, 100, angle, style)\n</code></pre> <p> Draw.rect_detailed(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, angle: <code>Any</code>, radius: <code>Any</code>, smoothness: <code>Any</code>, style: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draws a detailed rectangle outline using <code>style</code> (<code>PathStyle</code>) at <code>x</code>,<code>y</code>, with depth <code>z</code>, with width of <code>w</code> and height of <code>h</code>. The rectangle will be rotated <code>angle</code> degrees. </p> <p>\"Detailed\" means that the corners can be configured using the <code>radius</code> and <code>smoothness</code> values. This allows drawing rounded rectangles, rectangles with inverted rounded corners, and with flat corners. The radius controls the amount inset from the edges. With a smoothness of 0, the corners will be angled/flat.</p> <p>The order is <code>[bottom left, bottom right, top right, top left]</code> for radius + smoothness.</p> <pre><code>var depth = 0\nvar angle = 0\nvar style = PathStyle.new()\nvar radius = [16, 16, 16, 16]\nvar smoothness = [2, 2, 2, 2]\nDraw.rect_detailed(_ctx, 64, 64, depth, 256, 128, angle, radius, smoothness, style)\n</code></pre> <p> Draw.quad_detailed(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, angle: <code>Any</code>, radius: <code>Any</code>, smoothness: <code>Any</code>, color: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draws a detailed rectangle using <code>color</code> at <code>x</code>,<code>y</code>, with depth <code>z</code>, with width of <code>w</code> and height of <code>h</code>. The rectangle will be rotated <code>angle</code> degrees. </p> <p>\"Detailed\" means that the corners can be configured using the <code>radius</code> and <code>smoothness</code> values. This allows drawing rounded rectangles, rectangles with inverted rounded corners, and with flat corners. The radius controls the amount inset from the edges. With a smoothness of 0, the corners will be angled/flat.</p> <p>The order is <code>[bottom left, bottom right, top right, top left]</code> for radius + smoothness.</p> <pre><code>var depth = 0\nvar angle = 0\nvar color = [0,0,0,1]\nvar radius = [16, 16, 16, 16]\nvar smoothness = [2, 2, 2, 2]\nDraw.quad_detailed(_ctx, 64, 64, depth, 256, 128, angle, radius, smoothness, color)\n</code></pre> <p> Draw.quad(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, angle: <code>Any</code>, color: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draws a solid rectangle using <code>color</code> at <code>x</code>,<code>y</code>, with depth <code>z</code>, with width of <code>w</code> and height of <code>h</code>. The rectangle will be rotated <code>angle</code> degrees.</p> <pre><code>//draw a black solid rectangle\nvar depth = 0\nvar angle = 45\nDraw.quad(canvas, 0, 0, depth, 100, 100, angle, [0,0,0,1])\n</code></pre> <p> Draw.ngon(context: <code>Any</code>, ox: <code>Any</code>, oy: <code>Any</code>, oz: <code>Any</code>, rx: <code>Any</code>, ry: <code>Any</code>, sides: <code>Any</code>, angle: <code>Any</code>, style: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw an ngon (like a triangle, hexagon, pentagon etc) outline at <code>ox</code>,<code>oy</code> at depth <code>oz</code>.  The <code>rx</code> and <code>ry</code> radius values control the size of the shape around its origin. The number of <code>sides</code> controls how many sides the polygon will have (3 for a triangle, 6 for a hexagon). <code>sides</code> must be bigger than <code>3</code> to make sense for this function, it will be clamped to 3.</p> <pre><code>var depth = 0\nvar sides = 3\nvar radius = 32\nvar angle = 45\nvar style = PathStyle.new()\nDraw.ngon(canvas, 128, 128, depth, radius, radius, sides, angle, style)\n</code></pre> <p> Draw.ngon_solid(context: <code>Any</code>, ox: <code>Any</code>, oy: <code>Any</code>, oz: <code>Any</code>, rx: <code>Any</code>, ry: <code>Any</code>, sides: <code>Any</code>, angle: <code>Any</code>, color: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a solid ngon (like a triangle, hexagon, pentagon etc)  at <code>ox</code>,<code>oy</code> at depth <code>oz</code>.  The <code>rx</code> and <code>ry</code> radius values control the size of the shape around its origin. The number of <code>sides</code> controls how many sides the polygon will have (3 for a triangle, 6 for a hexagon). <code>sides</code> must be bigger than <code>3</code> to make sense for this function.</p> <p>:todo: this naming will change soon to be consistent across all draw APIs.</p> <pre><code>var depth = 0\nvar sides = 3\nvar radius = 32\nvar angle = 45\nDraw.ngon_solid(canvas, 128, 128, depth, radius, radius, sides, angle, Color.pink)\n</code></pre> <p> Draw.ring(context: <code>Any</code>, ox: <code>Any</code>, oy: <code>Any</code>, oz: <code>Any</code>, rx: <code>Any</code>, ry: <code>Any</code>, start_angle: <code>Any</code>, end_angle: <code>Any</code>, smoothness: <code>Any</code>, style: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a circle outline at <code>ox</code>,<code>oy</code> at depth <code>oz</code>. <code>rx</code> and <code>ry</code> control separate radius values for x and y axis, to draw an ellipse.</p> <p><code>start_angle</code> and <code>end_angle</code> specify in degrees allow drawing an open arc, instead of a closed circle. A closed circle has <code>start_angle</code> as <code>0</code> and <code>end_angle</code> as <code>360</code>. These angles match \"the unit circle\" in mathematics, where 0 is to the right, and 90 is pointing up.</p> <p>:todo: <code>smoothness</code> controls how smooth the circle will be.</p> <pre><code>var depth = 0\nvar start_angle = 0\nvar end_angle = 270\nvar smoothness = 2\nvar style = PathStyle.new()\nDraw.ring(canvas, 128, 128, depth, 32, 16, start_angle, end_angle, smoothness, style)\n</code></pre> <p> Draw.ring(context: <code>Any</code>, ox: <code>Any</code>, oy: <code>Any</code>, oz: <code>Any</code>, radius: <code>Any</code>, smoothness: <code>Any</code>, style: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Similar to <code>ring</code> with a single radius for both <code>x</code> and <code>y</code>.   </p> <p> Draw.circle(context: <code>Any</code>, ox: <code>Any</code>, oy: <code>Any</code>, oz: <code>Any</code>, radius: <code>Any</code>, smoothness: <code>Any</code>, color: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a solid circle at <code>ox</code>,<code>oy</code> at depth <code>oz</code>, using <code>color</code> and <code>radius</code> in size. :todo: <code>smoothness</code> controls how smooth the circle will be.</p> <pre><code>var depth = 0\nvar smoothness = 2\nDraw.circle(canvas, 128, 128, depth, 32, smoothness, [1,0,0,1])\n</code></pre> <p> Draw.circle(context: <code>Any</code>, ox: <code>Any</code>, oy: <code>Any</code>, oz: <code>Any</code>, rx: <code>Any</code>, ry: <code>Any</code>, start_angle: <code>Any</code>, end_angle: <code>Any</code>, smoothness: <code>Any</code>, color: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a solid circle at <code>ox</code>,<code>oy</code> at depth <code>oz</code>. <code>rx</code> and <code>ry</code> control separate radius values for x and y axis, to draw an ellipse.</p> <p><code>start_angle</code> and <code>end_angle</code> specify in degrees allow drawing an open area, like a pie chart (or pacman) instead of a closed circle. A closed circle has <code>start_angle</code> as <code>0</code> and <code>end_angle</code> as <code>360</code>. These angles match \"the unit circle\" in mathematics, where 0 is to the right, and 90 is pointing up.</p> <p>:todo: <code>smoothness</code> controls how smooth the circle will be.</p> <pre><code>var depth = 0\nvar start_angle = 0\nvar end_angle = 270\nvar smoothness = 2\nDraw.circle(canvas, 128, 128, depth, 32, 16, start_angle, end_angle, smoothness, Color.black)\n</code></pre> <p> Draw.line(context: <code>Any</code>, x1: <code>Any</code>, y1: <code>Any</code>, x2: <code>Any</code>, y2: <code>Any</code>, z: <code>Any</code>, style: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a line from <code>x1</code>,<code>y1</code> to <code>x2</code>,<code>y2</code> at depth <code>z</code> using <code>style</code> (<code>PathStyle</code>).</p> <pre><code>var depth = 0\nvar style = PathStyle.new()\nDraw.line(canvas, 0,0, 100,100, depth, style)\n</code></pre> <p> Draw.path(context: <code>Any</code>, points: <code>Any</code>, style: <code>Any</code>, closed: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a path consisting of a list of points. </p> <p>If <code>closed</code> is true it is expected that the first and last point in <code>points</code> have the same positions. </p> <p><code>points</code> is a <code>List</code> of <code>[x, y]</code> or <code>[x,y,z]</code> points.  If <code>z</code> is not specified for a point it will be 0.  Note that this is a 2D drawing function atm, so different z values may not be what you expect.</p> <pre><code>var style = PathStyle.new()\nvar points = [\n  [0,0],\n  [100,100],\n  [120,50],\n  [0,0]\n]\nDraw.path(canvas, points, style, true)\n</code></pre> <p> Draw.path3D(context: <code>Any</code>, points: <code>Any</code>, style: <code>Any</code>, closed: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a 3D path consisting of a list of points. </p> <p>If <code>closed</code> is true it is expected that the first and last point in <code>points</code> have the same positions. </p> <p><code>points</code> is a <code>List</code> of <code>[x,y,z]</code> points. </p> <pre><code>var style = PathStyle.new()\nvar points = [\n  [0,0,0],\n  [100,100,100],\n  [120,50,100],\n  [0,0,0]\n]\nDraw.path3D(canvas, points, style, true)\n</code></pre> <p> Draw.line3D(context: <code>Draw</code>, start: <code>Vec</code>, end: <code>Vec</code>, style: <code>PathStyle</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a 3D line from <code>start</code> to <code>end</code> using <code>style</code>. </p> <pre><code>var style = PathStyle.new()\nDraw.line3D(canvas, [100,100,100], [120,50,100], style)\n</code></pre> <p> Draw.bounds3D(context: <code>Any</code>, geometry: <code>Any</code>, style: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Draw.aabb3D(context: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>, style: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Draw.plane3D(context: <code>Draw</code>, pos: <code>Vec</code>, normal: <code>Vec</code>, radius: <code>Num</code>, style: <code>PathStyle</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Draw.plus3D(context: <code>Draw</code>, pos: <code>Vec</code>, radius: <code>Num</code>, style: <code>PathStyle</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a 3D plus at <code>pos</code> with size <code>radius</code> using <code>style</code>. </p> <pre><code>var style = PathStyle.new()\nDraw.plus3D(canvas, [100,100,100], 4, style)\n</code></pre> <p> Draw.ring3D(context: <code>Draw</code>, pos: <code>Vec3</code>, radius: <code>Vec2</code>, start_angle: <code>Num</code>, end_angle: <code>Num</code>, smoothness: <code>Num</code>, style: <code>PathStyle</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a 3D ring at <code>pos</code> with radius <code>[radius_x, radius_y]</code> using <code>style</code>. </p> <pre><code>var style = PathStyle.new()\nDraw.ring3D(canvas, [100,100,100], [4, 4], 0, 360, smoothness, style)\n</code></pre> <p> Draw.plus(context: <code>Draw</code>, pos: <code>Vec</code>, radius: <code>Num</code>, style: <code>PathStyle</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a 2D plus at <code>pos</code> with size <code>radius</code> using <code>style</code>. </p> <pre><code>var style = PathStyle.new()\nDraw.plus(canvas, [100,100], 20, style)\n</code></pre> <p> Draw.camera(context: <code>Draw</code>, camera: <code>Entity</code>, style: <code>PathStyle</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a 3D camera frustum for the given camera entity using <code>style</code>. </p> <pre><code>var style = PathStyle.new()\nDraw.camera(canvas, camera, style)\n</code></pre> <p> Draw.frustum(context: <code>Draw</code>, corners: <code>List</code>, style: <code>PathStyle</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a 3D camera frustum for the given 8 corner points using <code>style</code>. (You can get one from Camera.get_frustum(entity) for example, but can use Draw.camera as well).</p> <pre><code>var style = PathStyle.new()\nvar corners = [\n  near_top_left, \n  near_top_right, \n  near_bottom_left, \n  near_bottom_right,\n  far_top_left, \n  far_top_right, \n  far_bottom_left, \n  far_bottom_right,\n]\nDraw.frustum(canvas, corners, style)\n</code></pre> <p> Draw.text(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, string: <code>Any</code>, size: <code>Any</code>, font: <code>Any</code>, color: <code>Any</code>, align: <code>Any</code>, align_vertical: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw the specified <code>string</code> at <code>x</code>,<code>y</code> and depth <code>z</code>. <code>w</code> and <code>h</code> specify the bounds for the text, bottom left origin, y going up.  The <code>size</code> specifies the text size, and <code>color</code> the color. <code>font</code> is a font asset, e.g Asset.font(\"luxe: font/lato\").  <code>align</code> and <code>align_vertical</code> control alignment within the bounds,  using the <code>TextAlign</code> enums such as <code>TextAlign.left</code>.</p> <pre><code>var depth = 0\nvar size = 24\nvar red = [1,0,0,1]\nDraw.text(canvas, 32, 32, depth, 100, 32, \"hello\", size, Asset.font(\"luxe: font/lato\"), red, TextAlign.center, TextAlign.bottom)\n</code></pre> <p> Draw.text(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, string: <code>Any</code>, size: <code>Any</code>, font: <code>Any</code>, color: <code>Any</code>, align: <code>Any</code>, align_vertical: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw the specified <code>string</code> at <code>x</code>,<code>y</code> and depth <code>z</code>.  The <code>size</code> specifies the text size, and <code>color</code> the color.  <code>font</code> is a font asset, e.g Asset.font(\"luxe: font/lato\").  <code>align</code> and <code>align_vertical</code> control alignment relative to the specified position,  using the <code>TextAlign</code> enums such as <code>TextAlign.left</code>.</p> <pre><code>var depth = 0\nvar size = 24\nvar red = [1,0,0,1]\nDraw.text(canvas, 32, 32, depth, \"hello\", size, Asset.font(\"luxe: font/lato\"), red, TextAlign.center, TextAlign.bottom)\n</code></pre> <p> Draw.text(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, string: <code>Any</code>, size: <code>Any</code>, color: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw the specified <code>string</code> at <code>x</code>,<code>y</code>, <code>z</code>. The <code>size</code> specifies the text size, and <code>color</code> the color. </p> <pre><code>var depth = 0\nvar size = 24\nvar red = [1,0,0,1]\nDraw.text(canvas, 32, 32, depth, \"hello\", size, red)\n</code></pre> <p> Draw.image(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, angle: <code>Any</code>, material: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw an image with the specified <code>material</code> at <code>x</code>,<code>y</code> and depth <code>z</code>.  The image will be rotated by <code>angle</code> degrees.</p> <pre><code>var depth = 0\nvar angle = 30\nvar material = Assets.material(\"luxe: material/logo.sprite\")\nDraw.image(canvas, 128, 128, depth, 64, 64, angle, material)\n</code></pre> <p> Draw.image(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, angle: <code>Any</code>, color: <code>Any</code>, uv: <code>Any</code>, material: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw an image with the specified <code>material</code> at <code>x</code>,<code>y</code> and depth <code>z</code>.  The image will be rotated by <code>angle</code> degrees. </p> <p>The <code>uv</code> value specifies a fixed rectangle like <code>[left, top, right, bottom]</code> in the <code>0..1</code> range, where <code>[0,0,1,1]</code> is the default and displays the full image.  A <code>uv</code> value of <code>[0.5, 0, 1, 0.5]</code> would draw the top right corner of the image only. A <code>uv</code> value of <code>[0, 0, 4, 4]</code> would tile the image 4 times (as long as the material has a repeat mode for the image).</p> <pre><code>var depth = 0\nvar angle = 30\nvar material = Assets.material(\"luxe: material/logo.sprite\")\nvar uv = [0, 0.5, 0, 1] //bottom right\nDraw.image(canvas, 128, 128, depth, 64, 64, angle, uv, material)\n</code></pre> <p> Draw.cross(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, radius: <code>Any</code>, angle: <code>Any</code>, style: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draws a cross, an x shape   </p> <p> Draw.sphere3D_slice(context: <code>Draw</code>, pos: <code>Vec3</code>, radius: <code>Vec2</code>, start_angle: <code>Num</code>, end_angle: <code>Num</code>, layers: <code>Num</code>, style: <code>PathStyle</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a 3D sphere made from layered circles with <code>layers</code> number of circles and <code>radius</code> radius. Make the <code>start_angle</code> 0 and the <code>end_angle</code> 360 to make a full sphere, or 0/180 for a half sphere.</p> <pre><code>Draw.sphere3D_slice(canvas, [0, 2, 0], 1, 0, 360, 16, PathStyle.new())\n</code></pre>"},{"location":"api/v/2025.1.1/draw/#linecap","title":"LineCap","text":"<p><code>import \"luxe: draw\" for LineCap</code></p> <p>The end of a line is called a \"cap\", when drawing paths, this determines the type of cap that a line will have. :todo: images</p> <ul> <li>butt</li> <li>round</li> <li>square</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> LineCap.butt \u00b6 returns <code>unknown</code></p> <p>This cap is as if there was no cap, the line is just ended. The default.</p> <pre><code>var style = PathStyle.new()\n    style.cap = LineCap.butt\n</code></pre> <p> LineCap.round \u00b6 returns <code>unknown</code></p> <p>A round cap is a half circle at the end of the line.</p> <pre><code>var style = PathStyle.new()\n    style.cap = LineCap.round\n</code></pre> <p> LineCap.square \u00b6 returns <code>unknown</code></p> <p>A square cap is a square at the end of the line.</p> <pre><code>var style = PathStyle.new()\n    style.cap = LineCap.square\n</code></pre> <p> LineCap.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Convert a string to a LineCap value.</p> <pre><code>Log.print(LineCap.round == LineCap.from_string(\"round\")) //true\n</code></pre>"},{"location":"api/v/2025.1.1/draw/#linejoin","title":"LineJoin","text":"<p><code>import \"luxe: draw\" for LineJoin</code></p> <p>When drawing a path, a series of lines will be drawn and joined together. The join of each connection can be configured when drawing paths using <code>LineJoin</code>. :todo: images</p> <ul> <li>bevel</li> <li>round</li> <li>miter</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> LineJoin.bevel \u00b6 returns <code>unknown</code></p> <p>The default join is a bevel, which is a flat join.</p> <pre><code>var style = PathStyle.new()\n    style.join = LineJoin.bevel\n</code></pre> <p> LineJoin.round \u00b6 returns <code>unknown</code></p> <p>A round join is a semi circle that makes the corner rounded.</p> <pre><code>var style = PathStyle.new()\n    style.join = LineJoin.round\n</code></pre> <p> LineJoin.miter \u00b6 returns <code>unknown</code></p> <p>A miter join is a sharp triangle join that has a limit value (which falls back to bevel).</p> <pre><code>var style = PathStyle.new()\n    style.join = LineJoin.miter\n    style.miter_limit = 8\n</code></pre> <p> LineJoin.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Convert a string to a LineJoin value.</p> <pre><code>Log.print(LineJoin.round == LineJoin.from_string(\"round\")) //true\n</code></pre>"},{"location":"api/v/2025.1.1/draw/#pathstyle","title":"PathStyle","text":"<p><code>import \"luxe: draw\" for PathStyle</code></p> <ul> <li>array</li> <li>color</li> <li>alpha(value: <code>Any</code>)</li> <li>color(value: <code>Any</code>)</li> <li>thickness(value: <code>Any</code>)</li> <li>color=(value : Any)</li> <li>alpha</li> <li>alpha=(value : Any)</li> <li>thickness</li> <li>thickness=(value : Any)</li> <li>feather</li> <li>feather=(value : Any)</li> <li>cap</li> <li>cap=(value : Any)</li> <li>join</li> <li>join=(value : Any)</li> <li>miter_limit</li> <li>miter_limit=(value : Any)</li> <li>new()</li> </ul> <p> PathStyle.array \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PathStyle.color \u00b6 returns <code>unknown</code></p> <p>Returns the color of the path style.</p> <pre><code>var style = PathStyle.new()\nvar color = style.color //the default color\n</code></pre> <p> PathStyle.alpha(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PathStyle.color(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PathStyle.thickness(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PathStyle.color=(value : Any) \u00b6 returns <code>unknown</code></p> <p>Set the color for the style.</p> <pre><code>var style = PathStyle.new()\nstyle.color = [0, 0, 0, 1] //black\n</code></pre> <p> PathStyle.alpha \u00b6 returns <code>unknown</code></p> <p>Returns the alpha from the color of the path style.</p> <pre><code>var style = PathStyle.new()\nvar color = style.alpha //the alpha value of the default color\n</code></pre> <p> PathStyle.alpha=(value : Any) \u00b6 returns <code>unknown</code></p> <p>Set the alpha of the color for the style.</p> <pre><code>var style = PathStyle.new()\nstyle.alpha = 0.5 //half alpha\n</code></pre> <p> PathStyle.thickness \u00b6 returns <code>unknown</code></p> <p>Returns the thickness of the path style.</p> <pre><code>var style = PathStyle.new()\nLog.print(style.thickness) //1\n</code></pre> <p> PathStyle.thickness=(value : Any) \u00b6 returns <code>unknown</code></p> <p>Set the thickness of the path style.</p> <pre><code>var style = PathStyle.new()\nstyle.thickness = 4\n</code></pre> <p> PathStyle.feather \u00b6 returns <code>unknown</code></p> <p>Returns the feather value for the path style.  Note: not used much at the moment.</p> <pre><code>var style = PathStyle.new()\nvar feather = style.feather\n</code></pre> <p> PathStyle.feather=(value : Any) \u00b6 returns <code>unknown</code></p> <p>Set the feather value for the path style.  Note: not used much at the moment.</p> <pre><code>var style = PathStyle.new()\nstyle.feather = 2\n</code></pre> <p> PathStyle.cap \u00b6 returns <code>unknown</code></p> <p>Returns the <code>LineCap</code> type for the path style.</p> <pre><code>var style = PathStyle.new()\nvar cap = style.cap\n</code></pre> <p> PathStyle.cap=(value : Any) \u00b6 returns <code>unknown</code></p> <p>Set the <code>LineCap</code> type for the path style.</p> <pre><code>var style = PathStyle.new()\nstyle.cap = LineCap.round\n</code></pre> <p> PathStyle.join \u00b6 returns <code>unknown</code></p> <p>Returns the <code>LineJoin</code> type for the path style.</p> <pre><code>var style = PathStyle.new()\nvar join = style.join\n</code></pre> <p> PathStyle.join=(value : Any) \u00b6 returns <code>unknown</code></p> <p>Set the <code>LineJoin</code> type for the path style.</p> <pre><code>var style = PathStyle.new()\nstyle.cap = LineJoin.round\n</code></pre> <p> PathStyle.miter_limit \u00b6 returns <code>unknown</code></p> <p>Returns the miter limit for the path style. Only relevant if the <code>join</code> type is <code>LineJoin.miter</code>.</p> <pre><code>var style = PathStyle.new()\nvar limit = style.miter_limit\n</code></pre> <p> PathStyle.miter_limit=(value : Any) \u00b6 returns <code>unknown</code></p> <p>Set the miter limit for the path style. Only relevant if the <code>join</code> type is <code>LineJoin.miter</code>.</p> <pre><code>var style = PathStyle.new()\nstyle.miter_limit = 8\n</code></pre> <p> PathStyle.new() \u00b6 returns <code>PathStyle</code></p> <p>Create a new <code>PathStyle</code> instance.</p> <pre><code>var style = PathStyle.new()\nstyle.color = [1,0,0,1]\nstyle.thickness = 2\nstyle.join = LineJoin.round\n//use style\n//...\nstyle.thickness = 1\n//use style again...\n</code></pre>"},{"location":"api/v/2025.1.1/editor/","title":"Editor","text":""},{"location":"api/v/2025.1.1/editor/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/editor/#luxe-editor-module","title":"<code>luxe: editor</code> module","text":"<ul> <li>Editor </li> </ul>"},{"location":"api/v/2025.1.1/editor/#editor","title":"Editor","text":"<p><code>import \"luxe: editor\" for Editor</code></p> <p>Access to information about the editor, if the game is currently running in the editor. Please note this API is new and heavily work in progress.</p> <ul> <li>get</li> <li>get(context_id: <code>Any</code>)</li> </ul> <p> Editor.get \u00b6 returns <code>unknown</code></p> <p>Returns the editor API for access to the editor   </p> <p> Editor.get(context_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Returns the editor context with the given ID. Examples include <code>luxe.editor.world</code> for the world editor, or <code>luxe.editor.tiles</code>.</p> <pre><code>//We can check if a world is in edit mode via the `edit` tag.\n//For example, a scene being previewed in editor is still running in \n//the editor, but we don't want to act as if it's being edited.\nvar is_world_editable = World.tag_has(world, \"edit\")\nif(!is_world_editable) return\n\n//if we're in the editor, we can access the world editor and do some things\nvar world_editor = Editor.get(\"luxe.editor.world\")\nif(world_editor) {\n  //simple example, make sure the gizmo matches the transform\n  //if there's no gizmo, the function returns null\n  var gizmo = world_editor.gizmo\n  if(gizmo) gizmo.refresh()\n}\n</code></pre>"},{"location":"api/v/2025.1.1/events/","title":"Events","text":""},{"location":"api/v/2025.1.1/events/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/events/#luxe-events-module","title":"<code>luxe: events</code> module","text":"<ul> <li>Events </li> </ul>"},{"location":"api/v/2025.1.1/events/#events","title":"Events","text":"<p><code>import \"luxe: events\" for Events</code></p> <p>A simple event system for listening to and emitting events.</p> <p>Note: this API will likely change to ID based soon, where  on listening, an ID will be returned, and use that ID to unlisten  rather than needing the function object.</p> <ul> <li>new()</li> <li>once(tags: <code>List</code>, fn: <code>Fn</code>)</li> <li>listen(tags: <code>List</code>, fn: <code>Fn</code>)</li> <li>unlisten(tags: <code>List</code>, fn: <code>Fn</code>)</li> <li>unlisten_id(tags: <code>List</code>, id: <code>String</code>)</li> <li>unlisten(tags: <code>List</code>)</li> <li>emit(tags: <code>List</code>)</li> <li>emit(tags: <code>List</code>, data: <code>Any</code>)</li> </ul> <p> Events.new() \u00b6 returns <code>Events</code></p> <p>Create a new <code>Events</code> instance to use.</p> <pre><code>var events = Events.new()\n</code></pre> <p> Events.once(tags: <code>List</code>, fn: <code>Fn</code>) \u00b6 returns <code>String</code></p> <p>Connect a function to the given tags, that is automatically removed after the event is emitted. The function takes a single argument, <code>data</code>, which is sent from <code>emit</code>.</p> <pre><code>events.once([\"example\"]) {|data|\n  Log.print(\"event received: data = `%(data)`\")\n}\n\n//make the event happen, will call the above function\n//which prints  event received: data = `321`\nevents.emit([\"example\"], 321)\n//fire the event again, but this one does NOT print,\n//because the event was only listening once\nevents.emit([\"example\"], 654)\n</code></pre> <p> Events.listen(tags: <code>List</code>, fn: <code>Fn</code>) \u00b6 returns <code>String</code></p> <p>Connect a function to the given tags. The function will be called each time the event is emitted, until <code>unlisten</code> is called. The function takes a single argument, <code>data</code>, which is sent through <code>emit</code>. Returns an id that you give to <code>unlisten</code>.</p> <pre><code>var tags = [\"example\", \"tags\"]\nvar fn = Fn.new {|data|\n  Log.print(\"data = `%(data)`\")\n}\n\nvar id = events.listen(tags, fn)\nevents.emit(tags, \"hello\")          //prints data = `hello`\nevents.emit(tags, { \"map\":\"data\" }) //prints data = `{map:data}`\nevents.emit(tags)                   //prints data = `null`\nevents.unlisten_id(tags, id)        //remove the function\nevents.emit(tags)                   //nothing printed\n</code></pre> <p> Events.unlisten(tags: <code>List</code>, fn: <code>Fn</code>) \u00b6 returns <code>None</code></p> <p>Removes a connected function for the specified tags (if one exists),  by specifying the same function passed to <code>listen</code>. See <code>listen</code> for example.</p> <pre><code>events.unlisten([\"tag\"], fn)\n</code></pre> <p> Events.unlisten_id(tags: <code>List</code>, id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Removes a connected function for the specified tags (if one exists). The id is the one returned from <code>listen</code>. See <code>listen</code> for example.</p> <pre><code>events.unlisten_id([\"tag\"], id)\n</code></pre> <p> Events.unlisten(tags: <code>List</code>) \u00b6 returns <code>None</code></p> <p>Removes ALL functions from the specified tags, clearing them.</p> <pre><code>events.unlisten([\"tag\"])\n</code></pre> <p> Events.emit(tags: <code>List</code>) \u00b6 returns <code>None</code></p> <p>Emit the event tags so that any connected functions will be called. Sends <code>null</code> for the data argument to the functions. See <code>listen</code> for an example.</p> <pre><code>events.emit([\"tag\"])\n</code></pre> <p> Events.emit(tags: <code>List</code>, data: <code>Any</code>) \u00b6 returns <code>None</code></p> <p>Emit the event tags so that any connected functions will be called. Sends <code>data</code> as is for the data argument to the functions. See <code>listen</code> for an example.</p> <pre><code>events.emit([\"tag\"], [\"hello\"])\n</code></pre>"},{"location":"api/v/2025.1.1/fuzzy/","title":"Fuzzy","text":""},{"location":"api/v/2025.1.1/fuzzy/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/fuzzy/#luxe-fuzzy-module","title":"<code>luxe: fuzzy</code> module","text":"<ul> <li>Fuzzy </li> <li>FuzzyResult </li> <li>FuzzyScore </li> </ul>"},{"location":"api/v/2025.1.1/fuzzy/#fuzzy","title":"Fuzzy","text":"<p><code>import \"luxe: fuzzy\" for Fuzzy</code></p> <p>no docs found</p> <ul> <li>sorted(pattern: <code>String</code>, items: <code>List</code>)</li> <li>matches(pattern: <code>String</code>, items: <code>List</code>)</li> <li>matches(pattern: <code>String</code>, items: <code>List</code>, fn: <code>Fn</code>)</li> <li>match(pattern: <code>String</code>, str: <code>String</code>)</li> <li>match_at(pattern: <code>List</code>, str: <code>List</code>, pattern_idx: <code>Any</code>, str_idx: <code>Any</code>)</li> <li>match_simple(pattern: <code>String</code>, str: <code>String</code>)</li> <li>is_camel_case(c0: <code>Num</code>, c1: <code>Num</code>)</li> <li>match_recursive(pattern: <code>List</code>, str: <code>List</code>, pattern_idx: <code>Num</code>, str_idx: <code>Num</code>, srcMatches: <code>List</code>, matches: <code>List</code>, maxMatches: <code>Num</code>, nextMatch: <code>Num</code>, count: <code>Num</code>, limit: <code>Num</code>)</li> </ul> <p> Fuzzy.sorted(pattern: <code>String</code>, items: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Fuzzy.matches(pattern: <code>String</code>, items: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Fuzzy.matches(pattern: <code>String</code>, items: <code>List</code>, fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Fuzzy.match(pattern: <code>String</code>, str: <code>String</code>) \u00b6 returns <code>Result</code></p> <p>no docs found   </p> <p> Fuzzy.match_at(pattern: <code>List</code>, str: <code>List</code>, pattern_idx: <code>Any</code>, str_idx: <code>Any</code>) \u00b6 returns <code>Bool</code></p> <p>returns true if character at two positions is the same   </p> <p> Fuzzy.match_simple(pattern: <code>String</code>, str: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>returns true if each character in pattern is found sequentially within str   </p> <p> Fuzzy.is_camel_case(c0: <code>Num</code>, c1: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Fuzzy.match_recursive(pattern: <code>List</code>, str: <code>List</code>, pattern_idx: <code>Num</code>, str_idx: <code>Num</code>, srcMatches: <code>List</code>, matches: <code>List</code>, maxMatches: <code>Num</code>, nextMatch: <code>Num</code>, count: <code>Num</code>, limit: <code>Num</code>) \u00b6 returns <code>Result</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/fuzzy/#fuzzyresult","title":"FuzzyResult","text":"<p><code>import \"luxe: fuzzy\" for FuzzyResult</code></p> <p>no docs found</p> <ul> <li>item</li> <li>score</li> <li>matches</li> <li>new(item: <code>String</code>, score: <code>Num</code>, matches: <code>List</code>)</li> </ul> <p> FuzzyResult.item \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> FuzzyResult.score \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> FuzzyResult.matches \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> FuzzyResult.new(item: <code>String</code>, score: <code>Num</code>, matches: <code>List</code>) \u00b6 returns <code>FuzzyResult</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/fuzzy/#fuzzyscore","title":"FuzzyScore","text":"<p><code>import \"luxe: fuzzy\" for FuzzyScore</code></p> <p>no docs found</p> <ul> <li>sequential_bonus</li> <li>separator_bonus</li> <li>camel_bonus</li> <li>first_letter_bonus</li> <li>leading_letter_penalty</li> <li>max_leading_letter_penalty</li> <li>unmatched_letter_penalty</li> </ul> <p> FuzzyScore.sequential_bonus \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> FuzzyScore.separator_bonus \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> FuzzyScore.camel_bonus \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> FuzzyScore.first_letter_bonus \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> FuzzyScore.leading_letter_penalty \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> FuzzyScore.max_leading_letter_penalty \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> FuzzyScore.unmatched_letter_penalty \u00b6 returns <code>Num</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/game/","title":"Game","text":""},{"location":"api/v/2025.1.1/game/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/game/#luxe-game-module","title":"<code>luxe: game</code> module","text":"<ul> <li>Frame </li> <li>FrameSection </li> <li>FrameWhen </li> <li>Ready </li> </ul>"},{"location":"api/v/2025.1.1/game/#frame","title":"Frame","text":"<p><code>import \"luxe: game\" for Frame</code></p> <p>Access to the frame and game loop.  At the moment, the loop contains fixed sections, <code>begin</code> -&gt; <code>init</code> -&gt; <code>sim</code> -&gt; <code>visual</code> -&gt; <code>debug</code> -&gt; <code>end</code>.</p> <p>Functions can be hooked into sections of the frame using <code>before</code>, <code>after</code> or <code>on</code> ordering.</p> <p>Note: This API is a work in progress.</p> <ul> <li>begin</li> <li>init</li> <li>sim</li> <li>visual</li> <li>debug</li> <li>end</li> <li>queue(fn: <code>Fn</code>)</li> <li>next(fn: <code>Fn</code>)</li> <li>end(fn: <code>Fn</code>)</li> <li>schedule(time: <code>Num</code>, fn: <code>Fn</code>)</li> <li>schedule(time: <code>Num</code>, count: <code>Num</code>, fn: <code>Fn</code>)</li> <li>unschedule(handle: <code>Handle</code>)</li> <li>off(handle: <code>Handle</code>)</li> <li>once(section: <code>String</code>, priority: <code>Num</code>, fn: <code>Fn</code>)</li> <li>on(section: <code>String</code>, priority: <code>Num</code>, fn: <code>Fn</code>)</li> <li>before(section: <code>String</code>, priority: <code>Num</code>, fn: <code>Fn</code>)</li> <li>after(section: <code>String</code>, priority: <code>Num</code>, fn: <code>Fn</code>)</li> <li>on(section: <code>String</code>, fn: <code>Fn</code>)</li> <li>once(section: <code>String</code>, fn: <code>Fn</code>)</li> <li>before(section: <code>String</code>, fn: <code>Fn</code>)</li> <li>after(section: <code>String</code>, fn: <code>Fn</code>)</li> <li>skip(count_frames: <code>Num</code>, fn: <code>Fn</code>)</li> <li>mark(id: <code>String</code>, display: <code>String</code>)</li> <li>get_marks(frame_index: <code>Num</code>)</li> <li>index</li> <li>delta</li> </ul> <p> Frame.begin \u00b6 returns <code>String</code></p> <p>An enum value for the <code>begin</code> section in the loop. The `begin section is the start of the frame from the game's perspective.</p> <pre><code>Frame.on(Frame.begin) {|delta| ... }\n</code></pre> <p> Frame.init \u00b6 returns <code>String</code></p> <p>An enum value for the <code>init</code> section in the loop. The <code>init</code> section is used for initialization tasks that happen before updates, like when a new entity is created, it can be added to a queue and processed in init to set some default values before it arrives in <code>sim</code> or <code>visual</code>.</p> <pre><code>Frame.on(Frame.init) {|delta| ... }\n</code></pre> <p> Frame.sim \u00b6 returns <code>String</code></p> <p>An enum value for the <code>sim</code> section in the loop. The <code>sim</code> section is for simulation, also known as <code>update</code>.  In this section you would update game logic and modify things that the <code>visual</code> section would reference.</p> <pre><code>Frame.on(Frame.sim) {|delta| ... }\n</code></pre> <p> Frame.visual \u00b6 returns <code>String</code></p> <p>An enum value for the <code>visual</code> section in the loop. The <code>visual</code> section is for rendering, also known as <code>render</code>. Updating visual state from the sim states happens here.</p> <pre><code>Frame.on(Frame.visual) {|delta| ... }\n</code></pre> <p> Frame.debug \u00b6 returns <code>String</code></p> <p>An enum value for the <code>debug</code> section in the loop. The <code>debug</code> part of the loop can perform debug related tasks before the end of the frame and rendering is submitted.</p> <pre><code>Frame.on(Frame.debug) {|delta| ... }\n</code></pre> <p> Frame.end \u00b6 returns <code>String</code></p> <p>An enum value for the <code>end</code> section in the loop. The <code>end</code> of the loop can perform tasks after rendering and simulation.</p> <pre><code>Frame.on(Frame.end) {|delta| ... }\n</code></pre> <p> Frame.queue(fn: <code>Fn</code>) \u00b6 returns <code>None</code></p> <p>Once off. Queue a function to be called after the current section has completed fully. That is, if we were inside of <code>sim</code> and we queued a function, it would happen after <code>before</code> <code>on</code> and <code>after</code>.</p> <p>This is used for systems that fire callbacks, you normally don't want to fire callbacks during processing, so you can queue them to happen \"as soon as possible\" but in a well defined place and time.</p> <pre><code>Frame.queue {\n  Log.print(\"happens at the end of the current section\")\n}\n\n//fake example: collision callbacks\nfor(entity in collidable) {\n  if(collides(entity)) {\n    var fn = callbacks[entity]\n    Frame.queue { fn.call() }\n  }\n}\n</code></pre> <p> Frame.next(fn: <code>Fn</code>) \u00b6 returns <code>None</code></p> <p>Once off. Queue a function to be called at the beginning of the next frame,  before any sections.</p> <pre><code>Frame.next {\n  Log.print(\"next frame!\")\n}\n\n//common example, destroying something when it might\n//not be safe to. Instead, just destroy it later\nfor(thing in list) {\n  Frame.next { Thing.destroy(thing) }\n}\n</code></pre> <p> Frame.end(fn: <code>Fn</code>) \u00b6 returns <code>None</code></p> <p>Once off. Queue a function to be called at the end of the current frame, after all sections.</p> <pre><code>Frame.end {\n  Log.print(\"end frame!\")\n}\n</code></pre> <p> Frame.schedule(time: <code>Num</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>Schedule a function to be called in future.  The <code>time</code> value is in seconds, and is not affected by any time scaling. The function is only called once. To repeat, see the other <code>schedule</code> method.   </p> <p> Frame.schedule(time: <code>Num</code>, count: <code>Num</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>Schedule a function to be called in future.  The <code>time</code> value is in seconds, and is not affected by any time scaling. If <code>count</code> is 0, the function will be called repeatedly until <code>unschedule</code> is called.   </p> <p> Frame.unschedule(handle: <code>Handle</code>) \u00b6 returns <code>None</code></p> <p>Unschedule a function scheduled previously, using the handle returned from <code>schedule</code>.   </p> <p> Frame.off(handle: <code>Handle</code>) \u00b6 returns <code>Bool</code></p> <p>Disconnect a function using the handle returned from one of the recurring functions. This will remove the function from the loop and it will no longer be called.</p> <p>Returns true if the function was valid and removed.</p> <pre><code>var tick = Frame.on(Frame.sim) {|delta| Log.print(\"delta:%(delta)\") }\n//...\nFrame.off(tick)\n</code></pre> <p> Frame.once(section: <code>String</code>, priority: <code>Num</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>Once off. Queues a function to the specified section, with a given priority which will be executed during the section. Priority is based on \"highest priority first\". So priority 1 executes before 0.</p> <p>Returns a handle that can be used to remove the function via <code>off</code>.</p> <pre><code>Frame.once(Frame.sim, 3) {|delta| Log.print(\"prints first\") }\nFrame.once(Frame.sim, 1) {|delta| Log.print(\"prints second\") }\n</code></pre> <p> Frame.on(section: <code>String</code>, priority: <code>Num</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>Connect a function to the specified section, with a given priority which will be executed during the section. Priority is based on \"highest priority first\". So priority 1 executes before 0.</p> <p>Returns a handle that can be used to remove the function via <code>off</code>.</p> <pre><code>Frame.on(Frame.sim, 3) {|delta| Log.print(\"prints first\") }\nFrame.on(Frame.sim, 1) {|delta| Log.print(\"prints second\") }\n</code></pre> <p> Frame.before(section: <code>String</code>, priority: <code>Num</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>Connect a function to the specified section, with a given priority which will be executed before the section. Priority is based on \"highest priority first\". So priority 1 executes before 0.</p> <p>Returns a handle that can be used to remove the function via <code>off</code>.</p> <pre><code>Frame.before(Frame.sim, 0) {|delta| Log.print(\"prints second\") }\nFrame.before(Frame.sim, 1) {|delta| Log.print(\"prints first\") }\n</code></pre> <p> Frame.after(section: <code>String</code>, priority: <code>Num</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>Connect a function to the specified section, with a given priority which will be executed after the section. Priority is based on \"highest priority first\". So priority 1 executes before 0.</p> <p>Returns a handle that can be used to remove the function via <code>off</code>.</p> <pre><code>Frame.after(Frame.sim, 2) {|delta| Log.print(\"prints first\") }\nFrame.after(Frame.sim, 1) {|delta| Log.print(\"prints second\") }\n</code></pre> <p> Frame.on(section: <code>String</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>Connect a function to the specified section (with priority 0) which will be executed during the section.</p> <p>Returns a handle that can be used to remove the function via <code>off</code>.</p> <pre><code>Frame.on(Frame.sim) {|delta| Log.print(\"delta:%(delta)\") }\n</code></pre> <p> Frame.once(section: <code>String</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>Once off. Queue a function to the specified section (with priority 0) which will be executed during the section. Returns a handle that can be used to remove the function via <code>off</code>.</p> <pre><code>Frame.once(Frame.sim) { Log.print(\"happens during 'sim'\") }\n</code></pre> <p> Frame.before(section: <code>String</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>Connect a function to the specified section (with priority 0) which will be executed before the section.</p> <p>Returns a handle that can be used to remove the function via <code>off</code>.</p> <pre><code>Frame.before(Frame.sim) {|delta| Log.print(\"delta:%(delta)\") }\n</code></pre> <p> Frame.after(section: <code>String</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>Connect a function to the specified section (with priority 0) which will be executed after the section.</p> <p>Returns a handle that can be used to remove the function via <code>off</code>.</p> <pre><code>Frame.after(Frame.sim) {|delta| Log.print(\"delta:%(delta)\") }\n</code></pre> <p> Frame.skip(count_frames: <code>Num</code>, fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>Once off. Queue a function to be called at the beginning of the frame <code>count_frames</code> from now,  before any sections. This is <code>Frame.next</code> but can push actions forward by frame count instead of time.</p> <pre><code>Frame.skip(3) {\n  Log.print(\"three frames from now!\")\n}\n</code></pre> <p> Frame.mark(id: <code>String</code>, display: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Frame.get_marks(frame_index: <code>Num</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Frame.index \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Frame.delta \u00b6 returns <code>Num</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/game/#framesection","title":"FrameSection","text":"<p><code>import \"luxe: game\" for FrameSection</code></p> <p>no docs found</p> <ul> <li>begin</li> <li>init</li> <li>sim</li> <li>visual</li> <li>debug</li> <li>end</li> <li>name(value: <code>Any</code>)</li> </ul> <p> FrameSection.begin \u00b6 returns <code>String</code></p> <p>An enum value for the <code>begin</code> section in the loop. The `begin section is the start of the frame from the game's perspective.</p> <pre><code>Frame.on(Frame.begin) {|delta| ... }\n</code></pre> <p> FrameSection.init \u00b6 returns <code>String</code></p> <p>An enum value for the <code>init</code> section in the loop. The <code>init</code> section is used for initialization tasks that happen before updates, like when a new entity is created, it can be added to a queue and processed in init to set some default values before it arrives in <code>sim</code> or <code>visual</code>.</p> <pre><code>Frame.on(Frame.init) {|delta| ... }\n</code></pre> <p> FrameSection.sim \u00b6 returns <code>String</code></p> <p>An enum value for the <code>sim</code> section in the loop. The <code>sim</code> section is for simulation, also known as <code>update</code>.  In this section you would update game logic and modify things that the <code>visual</code> section would reference.</p> <pre><code>Frame.on(Frame.sim) {|delta| ... }\n</code></pre> <p> FrameSection.visual \u00b6 returns <code>String</code></p> <p>An enum value for the <code>visual</code> section in the loop. The <code>visual</code> section is for rendering, also known as <code>render</code>. Updating visual state from the sim states happens here.</p> <pre><code>Frame.on(Frame.visual) {|delta| ... }\n</code></pre> <p> FrameSection.debug \u00b6 returns <code>String</code></p> <p>An enum value for the <code>debug</code> section in the loop. The <code>debug</code> part of the loop can perform debug related tasks before the end of the frame and rendering is submitted.</p> <pre><code>Frame.on(Frame.debug) {|delta| ... }\n</code></pre> <p> FrameSection.end \u00b6 returns <code>String</code></p> <p>An enum value for the <code>end</code> section in the loop. The <code>end</code> of the loop can perform tasks after rendering and simulation.</p> <pre><code>Frame.on(Frame.end) {|delta| ... }\n</code></pre> <p> FrameSection.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/game/#framewhen","title":"FrameWhen","text":"<p><code>import \"luxe: game\" for FrameWhen</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>before</li> <li>on</li> <li>after</li> <li>name(value: <code>Any</code>)</li> </ul> <p> FrameWhen.unknown \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> FrameWhen.before \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> FrameWhen.on \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> FrameWhen.after \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> FrameWhen.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/game/#ready","title":"Ready","text":"<p><code>import \"luxe: game\" for Ready</code></p> <p>The base class for a luxe game.</p> <ul> <li>ready()</li> <li>ready(message: <code>String</code>)</li> <li>tick(delta: <code>Num</code>)</li> <li>destroy()</li> </ul> <p> Ready.ready() \u00b6 returns <code>None</code></p> <p>Called via <code>super()</code> inside your <code>ready</code> function. Must be called.   </p> <p> Ready.ready(message: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Called via <code>super(message)</code> inside your <code>ready</code> function. Must be called.   </p> <p> Ready.tick(delta: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>A default implementation for tick.   </p> <p> Ready.destroy() \u00b6 returns <code>None</code></p> <p>A default implementation for destroy.   </p>"},{"location":"api/v/2025.1.1/id/","title":"Id","text":""},{"location":"api/v/2025.1.1/id/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/id/#luxe-id-module","title":"<code>luxe: id</code> module","text":"<ul> <li>ID </li> </ul>"},{"location":"api/v/2025.1.1/id/#id","title":"ID","text":"<p><code>import \"luxe: id\" for ID</code></p> <p>IDs are useful in many cases, this API provides them in various forms like UUID or unique short strings.</p> <ul> <li>unique()</li> <li>unique(length: <code>Num</code>)</li> <li>index(index: <code>Num</code>)</li> <li>uuid()</li> <li>uuid(from: <code>String</code>)</li> <li>uuid_validate(uuid: <code>String</code>)</li> <li>uuid_base62()</li> <li>uuid_combine(uuid_a: <code>String</code>, uuid_b: <code>String</code>)</li> </ul> <p> ID.unique() \u00b6 returns <code>String</code></p> <p>Returns a unique short string ID for use. These are useful for default generated names, random urls, etc.</p> <p>Note that these are \"unique enough\" but has higher risk of collision than a UUID. If you want universally unique IDs that's what UUID is for. (Don't make assumptions about the length of the ID, for fixed length use <code>ID.unique(length: Num)</code>).</p> <pre><code>Log.print(ID.unique()) //UuIyH\nLog.print(ID.unique()) //39sjDw\nLog.print(ID.unique()) //28zASZ\n</code></pre> <p> ID.unique(length: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Returns a unique short string ID for use. These are useful for default generated names, random urls, etc.</p> <p>Note that these are \"unique enough\" but has higher risk of collision than a UUID. If you want universally unique IDs that's what UUID is for.</p> <pre><code>Log.print(ID.unique(6)) //Uu2IyH\nLog.print(ID.unique(8)) //39sjDwl4\n</code></pre> <p> ID.index(index: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> ID.uuid() \u00b6 returns <code>String</code></p> <p>Returns a UUID v4 ID. These are unique enough to not worry about collisions (not for cryptography).</p> <pre><code>Log.print(ID.uuid()) //5606ba0f-968a-4ab7-8230-ba46cdb345da\nLog.print(ID.uuid()) //48e3d469-e9fa-4a24-aa22-d653de9af5b2\nLog.print(ID.uuid()) //a4861cc5-c2e4-4656-a3a4-176bc63e5d05\n</code></pre> <p> ID.uuid(from: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Returns a UUID v4 from the given string (treated as bytes). This runs a 128 bit hash (spooky v2) over the string, converting the bits to a uuid string.</p> <pre><code>Log.print(ID.uuid(\"hello\")) //3768826a-d382-e6ca-5c94-1ed1c71ae043\nLog.print(ID.uuid(\"luxe\")) //7281a4a8-abc4-dc50-52ae-7f59626f242a\n</code></pre> <p> ID.uuid_validate(uuid: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Returns true if the given UUID is valid (using regex matching).</p> <pre><code>Log.print(ID.validate_uuid(ID.uuid())) //true\nLog.print(ID.validate_uuid(\"hello\"))   //false\n</code></pre> <p> ID.uuid_base62() \u00b6 returns <code>String</code></p> <p>Returns a UUID represented as a base62 string.</p> <pre><code>Log.print(ID.uuid_base62()) //AXiFxIVixJM-EDCrnEHVkWJ\n</code></pre> <p> ID.uuid_combine(uuid_a: <code>String</code>, uuid_b: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Returns a new UUID by combining the two UUIDs given.</p> <pre><code>Log.print(ID.uuid_combine(ID.uuid(), ID.uuid())) //5f558462-7525-48c0-812d-a65df074ce42\n</code></pre>"},{"location":"api/v/2025.1.1/input/","title":"Input","text":""},{"location":"api/v/2025.1.1/input/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/input/#luxe-input-module","title":"<code>luxe: input</code> module","text":"<ul> <li>GamepadEvent </li> <li>InputBind </li> <li>InputCh </li> <li>InputEvent </li> <li>InputNode </li> <li>InputState </li> <li>InputType </li> <li>Input </li> <li>Key </li> <li>Mod </li> <li>ModState </li> <li>MouseButton </li> <li>Scan </li> <li>SystemCursor </li> <li>TextEvent </li> </ul>"},{"location":"api/v/2025.1.1/input/#gamepadevent","title":"GamepadEvent","text":"<p><code>import \"luxe: input\" for GamepadEvent</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>device_added</li> <li>device_removed</li> <li>device_remapped</li> <li>name(value: <code>Any</code>)</li> </ul> <p> GamepadEvent.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> GamepadEvent.device_added \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> GamepadEvent.device_removed \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> GamepadEvent.device_remapped \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> GamepadEvent.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/input/#inputbind","title":"InputBind","text":"<p><code>import \"luxe: input\" for InputBind</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>key_state</li> <li>mouse_state</li> <li>mouse_axis</li> <li>touch_state</li> <li>touch_axis</li> <li>gamepad_state</li> <li>gamepad_axis</li> <li>name(value: <code>Any</code>)</li> </ul> <p> InputBind.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputBind.key_state \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputBind.mouse_state \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputBind.mouse_axis \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputBind.touch_state \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputBind.touch_axis \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputBind.gamepad_state \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputBind.gamepad_axis \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputBind.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/input/#inputch","title":"InputCh","text":"<p><code>import \"luxe: input\" for InputCh</code></p> <p>no docs found</p> <ul> <li>none</li> <li>c01</li> <li>c02</li> <li>c03</li> <li>c04</li> <li>c05</li> <li>c06</li> <li>c07</li> <li>c08</li> <li>c09</li> <li>c10</li> <li>c11</li> <li>c12</li> <li>c13</li> <li>c14</li> <li>c15</li> <li>c16</li> <li>all</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> InputCh.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c01 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c02 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c03 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c04 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c05 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c06 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c07 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c08 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c09 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c10 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c11 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c12 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c13 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c14 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c15 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c16 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.all \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/input/#inputevent","title":"InputEvent","text":"<p><code>import \"luxe: input\" for InputEvent</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>type</li> <li>key</li> <li>scan</li> <li>repeat</li> <li>mod</li> <li>x</li> <li>y</li> <li>dx</li> <li>dy</li> <li>x_rel</li> <li>y_rel</li> <li>value</li> <li>value1</li> <li>value2</li> <li>state</li> <li>touch_id</li> <li>axis</li> <li>button</li> <li>gamepad</li> </ul> <p> InputEvent.new() \u00b6 returns <code>InputEvent</code></p> <p>no docs found   </p> <p> InputEvent.type \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.key \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.scan \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.repeat \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.mod \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.x \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.y \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.dx \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.dy \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.x_rel \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.y_rel \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.value \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.value1 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.value2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.state \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.touch_id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.axis \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.button \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.gamepad \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/input/#inputnode","title":"InputNode","text":"<p><code>import \"luxe: input\" for InputNode</code></p> <p>no docs found</p> <ul> <li>node</li> </ul> <p> InputNode.node \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/input/#inputstate","title":"InputState","text":"<p><code>import \"luxe: input\" for InputState</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>began</li> <li>active</li> <li>ended</li> <li>name(value: <code>Any</code>)</li> </ul> <p> InputState.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputState.began \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputState.active \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputState.ended \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputState.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/input/#inputtype","title":"InputType","text":"<p><code>import \"luxe: input\" for InputType</code></p> <p>no docs found</p> <ul> <li>none</li> <li>key_down</li> <li>key_up</li> <li>text</li> <li>mouse_down</li> <li>mouse_up</li> <li>mouse_move</li> <li>mouse_wheel</li> <li>touch_down</li> <li>touch_up</li> <li>touch_move</li> <li>gamepad_axis</li> <li>gamepad_down</li> <li>gamepad_up</li> <li>gamepad_device</li> <li>name(type: <code>Any</code>)</li> </ul> <p> InputType.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.key_down \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.key_up \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.text \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.mouse_down \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.mouse_up \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.mouse_move \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.mouse_wheel \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.touch_down \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.touch_up \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.touch_move \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.gamepad_axis \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.gamepad_down \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.gamepad_up \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.gamepad_device \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.name(type: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/input/#input","title":"Input","text":"<p><code>import \"luxe: input\" for Input</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>tick_pre()</li> <li>tick()</li> <li>tick_post()</li> <li>graph</li> <li>key_down(key: <code>Any</code>, scan: <code>Any</code>, repeat: <code>Any</code>, mod: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>)</li> <li>key_up(key: <code>Any</code>, scan: <code>Any</code>, mod: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>)</li> <li>text(text: <code>Any</code>, start: <code>Any</code>, length: <code>Any</code>, type: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>)</li> <li>mouse_down(x: <code>Any</code>, y: <code>Any</code>, button: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>)</li> <li>mouse_up(x: <code>Any</code>, y: <code>Any</code>, button: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>)</li> <li>mouse_move(x: <code>Any</code>, y: <code>Any</code>, x_rel: <code>Any</code>, y_rel: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>)</li> <li>mouse_wheel(x: <code>Any</code>, y: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>)</li> <li>touch_down(x: <code>Any</code>, y: <code>Any</code>, touch_id: <code>Any</code>, timestamp: <code>Any</code>)</li> <li>touch_up(x: <code>Any</code>, y: <code>Any</code>, touch_id: <code>Any</code>, timestamp: <code>Any</code>)</li> <li>touch_move(x: <code>Any</code>, y: <code>Any</code>, dx: <code>Any</code>, dy: <code>Any</code>, touch_id: <code>Any</code>, timestamp: <code>Any</code>)</li> <li>gamepad_axis(gamepad: <code>Any</code>, axis: <code>Any</code>, value: <code>Any</code>, timestamp: <code>Any</code>)</li> <li>gamepad_down(gamepad: <code>Any</code>, button: <code>Any</code>, value: <code>Any</code>, timestamp: <code>Any</code>)</li> <li>gamepad_up(gamepad: <code>Any</code>, button: <code>Any</code>, value: <code>Any</code>, timestamp: <code>Any</code>)</li> <li>gamepad_device(gamepad: <code>Any</code>, name: <code>Any</code>, type: <code>Any</code>, timestamp: <code>Any</code>)</li> <li>deadzone(x: <code>Any</code>, y: <code>Any</code>, zone: <code>Any</code>)</li> <li>define_event(bind_type: <code>Any</code>, name: <code>Any</code>)</li> <li>define_event(bind_type: <code>Any</code>, name: <code>Any</code>, args: <code>Any</code>)</li> <li>undefine_event(bind_type: <code>Any</code>, name: <code>Any</code>)</li> <li>undefine_event(name: <code>Any</code>)</li> <li>listen_for(type: <code>Any</code>, at_node: <code>Any</code>, fn: <code>Any</code>)</li> <li>listen_for(type: <code>Any</code>, fn: <code>Any</code>)</li> <li>unlisten(type: <code>Any</code>, fn: <code>Any</code>)</li> <li>unlisten(type: <code>Any</code>, at_node: <code>Any</code>, fn: <code>Any</code>)</li> <li>listen_for_event(name: <code>Any</code>, at_node: <code>Any</code>, fn: <code>Any</code>)</li> <li>listen_for_event(name: <code>Any</code>, fn: <code>Any</code>)</li> <li>unlisten_for_event(name: <code>Any</code>, fn: <code>Any</code>)</li> <li>unlisten_for_event(name: <code>Any</code>, at_node: <code>Any</code>, fn: <code>Any</code>)</li> <li>event_active(name: <code>Any</code>, at_node: <code>Any</code>)</li> <li>event_began(name: <code>Any</code>, at_node: <code>Any</code>)</li> <li>event_ended(name: <code>Any</code>, at_node: <code>Any</code>)</li> <li>event_active(name: <code>Any</code>)</li> <li>event_began(name: <code>Any</code>)</li> <li>event_ended(name: <code>Any</code>)</li> <li>key_state_down(key: <code>Any</code>, at_node: <code>Any</code>)</li> <li>key_state_pressed(key: <code>Any</code>, at_node: <code>Any</code>)</li> <li>key_state_released(key: <code>Any</code>, at_node: <code>Any</code>)</li> <li>scan_state_down(scan: <code>Any</code>, at_node: <code>Any</code>)</li> <li>scan_state_pressed(scan: <code>Any</code>, at_node: <code>Any</code>)</li> <li>scan_state_released(scan: <code>Any</code>, at_node: <code>Any</code>)</li> <li>mouse_state_down(button: <code>Any</code>, at_node: <code>Any</code>)</li> <li>mouse_state_pressed(button: <code>Any</code>, at_node: <code>Any</code>)</li> <li>mouse_state_released(button: <code>Any</code>, at_node: <code>Any</code>)</li> <li>mouse_state_released(button: <code>Any</code>, at_node: <code>Any</code>, channels: <code>Any</code>)</li> <li>gamepad_state_down(gamepad: <code>Any</code>, button: <code>Any</code>, at_node: <code>Any</code>)</li> <li>gamepad_state_pressed(gamepad: <code>Any</code>, button: <code>Any</code>, at_node: <code>Any</code>)</li> <li>gamepad_state_released(gamepad: <code>Any</code>, button: <code>Any</code>, at_node: <code>Any</code>)</li> <li>gamepad_state_axis(gamepad: <code>Any</code>, axis: <code>Any</code>, at_node: <code>Any</code>)</li> <li>key_state_down(key: <code>Any</code>)</li> <li>key_state_pressed(key: <code>Any</code>)</li> <li>key_state_released(key: <code>Any</code>)</li> <li>scan_state_down(scan: <code>Any</code>)</li> <li>scan_state_pressed(scan: <code>Any</code>)</li> <li>scan_state_released(scan: <code>Any</code>)</li> <li>mouse_state_down(button: <code>Any</code>)</li> <li>mouse_state_released(button: <code>Any</code>)</li> <li>mouse_state_pressed(button: <code>Any</code>)</li> <li>mouse_state_wheel()</li> <li>mouse_x()</li> <li>mouse_y()</li> <li>mouse_x_rel()</li> <li>mouse_y_rel()</li> <li>set_mouse_cursor(image: <code>Image</code>, cursor_x: <code>Num</code>, cursor_y: <code>Num</code>)</li> <li>set_mouse_system_cursor(cursor: <code>SystemCursor</code>)</li> <li>set_mouse_pos(x: <code>Num</code>, y: <code>Num</code>)</li> <li>set_mouse_visible(state: <code>Bool</code>)</li> <li>set_mouse_capture(state: <code>Bool</code>)</li> <li>get_mouse_capture()</li> <li>gamepad_state_down(gamepad: <code>Any</code>, button: <code>Any</code>)</li> <li>gamepad_state_pressed(gamepad: <code>Any</code>, button: <code>Any</code>)</li> <li>gamepad_state_released(gamepad: <code>Any</code>, button: <code>Any</code>)</li> <li>gamepad_state_axis(gamepad: <code>Any</code>, axis: <code>Any</code>)</li> <li>define_node_front(id: <code>Any</code>, type: <code>Any</code>, channels: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>)</li> <li>define_node_back(id: <code>Any</code>, type: <code>Any</code>, channels: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>)</li> <li>define_node_after(other: <code>Any</code>, id: <code>Any</code>, type: <code>Any</code>, channels: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>)</li> <li>define_node_before(other: <code>Any</code>, id: <code>Any</code>, type: <code>Any</code>, channels: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>)</li> <li>node_defined(node: <code>Any</code>)</li> <li>undefine_node(id: <code>Any</code>)</li> <li>channels_active(at_node: <code>Any</code>, channels: <code>Any</code>)</li> <li>channels_active(at_node: <code>Any</code>)</li> <li>channels_state(at_node: <code>Any</code>)</li> <li>channels_at(at_node: <code>Any</code>)</li> <li>channels_plus_at(at_node: <code>Any</code>)</li> <li>channels_minus_at(at_node: <code>Any</code>)</li> <li>channels_set(at_node: <code>Any</code>, channels: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>)</li> <li>channels_add(at_node: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>)</li> <li>channels_remove(at_node: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>)</li> <li>channels_add_plus(at_node: <code>Any</code>, plus: <code>Any</code>)</li> <li>channels_add_minus(at_node: <code>Any</code>, minus: <code>Any</code>)</li> <li>channels_remove_plus(at_node: <code>Any</code>, plus: <code>Any</code>)</li> <li>channels_remove_minus(at_node: <code>Any</code>, minus: <code>Any</code>)</li> <li>channels_set(at_node: <code>Any</code>, channels: <code>Any</code>)</li> <li>channels_set_plus(at_node: <code>Any</code>, plus: <code>Any</code>)</li> <li>channels_set_minus(at_node: <code>Any</code>, minus: <code>Any</code>)</li> <li>set_events(ev: <code>Any</code>)</li> </ul> <p> Input.new() \u00b6 returns <code>Input</code></p> <p>no docs found   </p> <p> Input.tick_pre() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.tick() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.tick_post() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.graph \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.key_down(key: <code>Any</code>, scan: <code>Any</code>, repeat: <code>Any</code>, mod: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.key_up(key: <code>Any</code>, scan: <code>Any</code>, mod: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.text(text: <code>Any</code>, start: <code>Any</code>, length: <code>Any</code>, type: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_down(x: <code>Any</code>, y: <code>Any</code>, button: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_up(x: <code>Any</code>, y: <code>Any</code>, button: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_move(x: <code>Any</code>, y: <code>Any</code>, x_rel: <code>Any</code>, y_rel: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_wheel(x: <code>Any</code>, y: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.touch_down(x: <code>Any</code>, y: <code>Any</code>, touch_id: <code>Any</code>, timestamp: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.touch_up(x: <code>Any</code>, y: <code>Any</code>, touch_id: <code>Any</code>, timestamp: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.touch_move(x: <code>Any</code>, y: <code>Any</code>, dx: <code>Any</code>, dy: <code>Any</code>, touch_id: <code>Any</code>, timestamp: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.gamepad_axis(gamepad: <code>Any</code>, axis: <code>Any</code>, value: <code>Any</code>, timestamp: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.gamepad_down(gamepad: <code>Any</code>, button: <code>Any</code>, value: <code>Any</code>, timestamp: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.gamepad_up(gamepad: <code>Any</code>, button: <code>Any</code>, value: <code>Any</code>, timestamp: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.gamepad_device(gamepad: <code>Any</code>, name: <code>Any</code>, type: <code>Any</code>, timestamp: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.deadzone(x: <code>Any</code>, y: <code>Any</code>, zone: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.define_event(bind_type: <code>Any</code>, name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.define_event(bind_type: <code>Any</code>, name: <code>Any</code>, args: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.undefine_event(bind_type: <code>Any</code>, name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.undefine_event(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.listen_for(type: <code>Any</code>, at_node: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.listen_for(type: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.unlisten(type: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.unlisten(type: <code>Any</code>, at_node: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.listen_for_event(name: <code>Any</code>, at_node: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.listen_for_event(name: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.unlisten_for_event(name: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.unlisten_for_event(name: <code>Any</code>, at_node: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.event_active(name: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.event_began(name: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.event_ended(name: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.event_active(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.event_began(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.event_ended(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.key_state_down(key: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.key_state_pressed(key: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.key_state_released(key: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.scan_state_down(scan: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.scan_state_pressed(scan: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.scan_state_released(scan: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_state_down(button: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_state_pressed(button: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_state_released(button: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_state_released(button: <code>Any</code>, at_node: <code>Any</code>, channels: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.gamepad_state_down(gamepad: <code>Any</code>, button: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.gamepad_state_pressed(gamepad: <code>Any</code>, button: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.gamepad_state_released(gamepad: <code>Any</code>, button: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.gamepad_state_axis(gamepad: <code>Any</code>, axis: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.key_state_down(key: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.key_state_pressed(key: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.key_state_released(key: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.scan_state_down(scan: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.scan_state_pressed(scan: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.scan_state_released(scan: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_state_down(button: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_state_released(button: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_state_pressed(button: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_state_wheel() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_x() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_y() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_x_rel() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_y_rel() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.set_mouse_cursor(image: <code>Image</code>, cursor_x: <code>Num</code>, cursor_y: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.set_mouse_system_cursor(cursor: <code>SystemCursor</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.set_mouse_pos(x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.set_mouse_visible(state: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.set_mouse_capture(state: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.get_mouse_capture() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.gamepad_state_down(gamepad: <code>Any</code>, button: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.gamepad_state_pressed(gamepad: <code>Any</code>, button: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.gamepad_state_released(gamepad: <code>Any</code>, button: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.gamepad_state_axis(gamepad: <code>Any</code>, axis: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.define_node_front(id: <code>Any</code>, type: <code>Any</code>, channels: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.define_node_back(id: <code>Any</code>, type: <code>Any</code>, channels: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.define_node_after(other: <code>Any</code>, id: <code>Any</code>, type: <code>Any</code>, channels: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.define_node_before(other: <code>Any</code>, id: <code>Any</code>, type: <code>Any</code>, channels: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.node_defined(node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.undefine_node(id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_active(at_node: <code>Any</code>, channels: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_active(at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_state(at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_at(at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_plus_at(at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_minus_at(at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_set(at_node: <code>Any</code>, channels: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_add(at_node: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_remove(at_node: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_add_plus(at_node: <code>Any</code>, plus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_add_minus(at_node: <code>Any</code>, minus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_remove_plus(at_node: <code>Any</code>, plus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_remove_minus(at_node: <code>Any</code>, minus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_set(at_node: <code>Any</code>, channels: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_set_plus(at_node: <code>Any</code>, plus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_set_minus(at_node: <code>Any</code>, minus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.set_events(ev: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/input/#key","title":"Key","text":"<p><code>import \"luxe: input\" for Key</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>enter</li> <li>escape</li> <li>backspace</li> <li>tab</li> <li>space</li> <li>exclaim</li> <li>quotedbl</li> <li>hash</li> <li>percent</li> <li>dollar</li> <li>ampersand</li> <li>quote</li> <li>leftparen</li> <li>rightparen</li> <li>asterisk</li> <li>plus</li> <li>comma</li> <li>minus</li> <li>period</li> <li>slash</li> <li>key_0</li> <li>key_1</li> <li>key_2</li> <li>key_3</li> <li>key_4</li> <li>key_5</li> <li>key_6</li> <li>key_7</li> <li>key_8</li> <li>key_9</li> <li>colon</li> <li>semicolon</li> <li>less</li> <li>equals</li> <li>greater</li> <li>question</li> <li>at</li> <li>leftbracket</li> <li>backslash</li> <li>rightbracket</li> <li>caret</li> <li>underscore</li> <li>backquote</li> <li>key_a</li> <li>key_b</li> <li>key_c</li> <li>key_d</li> <li>key_e</li> <li>key_f</li> <li>key_g</li> <li>key_h</li> <li>key_i</li> <li>key_j</li> <li>key_k</li> <li>key_l</li> <li>key_m</li> <li>key_n</li> <li>key_o</li> <li>key_p</li> <li>key_q</li> <li>key_r</li> <li>key_s</li> <li>key_t</li> <li>key_u</li> <li>key_v</li> <li>key_w</li> <li>key_x</li> <li>key_y</li> <li>key_z</li> <li>capslock</li> <li>f1</li> <li>f2</li> <li>f3</li> <li>f4</li> <li>f5</li> <li>f6</li> <li>f7</li> <li>f8</li> <li>f9</li> <li>f10</li> <li>f11</li> <li>f12</li> <li>printscreen</li> <li>scrolllock</li> <li>pause</li> <li>insert</li> <li>home</li> <li>pageup</li> <li>delete</li> <li>end</li> <li>pagedown</li> <li>right</li> <li>left</li> <li>down</li> <li>up</li> <li>numlockclear</li> <li>kp_divide</li> <li>kp_multiply</li> <li>kp_minus</li> <li>kp_plus</li> <li>kp_enter</li> <li>kp_1</li> <li>kp_2</li> <li>kp_3</li> <li>kp_4</li> <li>kp_5</li> <li>kp_6</li> <li>kp_7</li> <li>kp_8</li> <li>kp_9</li> <li>kp_0</li> <li>kp_period</li> <li>application</li> <li>power</li> <li>kp_equals</li> <li>f13</li> <li>f14</li> <li>f15</li> <li>f16</li> <li>f17</li> <li>f18</li> <li>f19</li> <li>f20</li> <li>f21</li> <li>f22</li> <li>f23</li> <li>f24</li> <li>execute</li> <li>help</li> <li>menu</li> <li>select</li> <li>stop</li> <li>again</li> <li>undo</li> <li>cut</li> <li>copy</li> <li>paste</li> <li>find</li> <li>mute</li> <li>volumeup</li> <li>volumedown</li> <li>kp_comma</li> <li>kp_equalsas400</li> <li>alterase</li> <li>sysreq</li> <li>cancel</li> <li>clear</li> <li>prior</li> <li>return2</li> <li>separator</li> <li>out</li> <li>oper</li> <li>clearagain</li> <li>crsel</li> <li>exsel</li> <li>kp_00</li> <li>kp_000</li> <li>thousandsseparator</li> <li>decimalseparator</li> <li>currencyunit</li> <li>currencysubunit</li> <li>kp_leftparen</li> <li>kp_rightparen</li> <li>kp_leftbrace</li> <li>kp_rightbrace</li> <li>kp_tab</li> <li>kp_backspace</li> <li>kp_a</li> <li>kp_b</li> <li>kp_c</li> <li>kp_d</li> <li>kp_e</li> <li>kp_f</li> <li>kp_xor</li> <li>kp_power</li> <li>kp_percent</li> <li>kp_less</li> <li>kp_greater</li> <li>kp_ampersand</li> <li>kp_dblampersand</li> <li>kp_verticalbar</li> <li>kp_dblverticalbar</li> <li>kp_colon</li> <li>kp_hash</li> <li>kp_space</li> <li>kp_at</li> <li>kp_exclam</li> <li>kp_memstore</li> <li>kp_memrecall</li> <li>kp_memclear</li> <li>kp_memadd</li> <li>kp_memsubtract</li> <li>kp_memmultiply</li> <li>kp_memdivide</li> <li>kp_plusminus</li> <li>kp_clear</li> <li>kp_clearentry</li> <li>kp_binary</li> <li>kp_octal</li> <li>kp_decimal</li> <li>kp_hexadecimal</li> <li>lctrl</li> <li>lshift</li> <li>lalt</li> <li>lmeta</li> <li>rctrl</li> <li>rshift</li> <li>ralt</li> <li>rmeta</li> <li>mode</li> <li>audionext</li> <li>audioprev</li> <li>audiostop</li> <li>audioplay</li> <li>audiomute</li> <li>mediaselect</li> <li>www</li> <li>mail</li> <li>calculator</li> <li>computer</li> <li>ac_search</li> <li>ac_home</li> <li>ac_back</li> <li>ac_forward</li> <li>ac_stop</li> <li>ac_refresh</li> <li>ac_bookmarks</li> <li>brightnessdown</li> <li>brightnessup</li> <li>displayswitch</li> <li>kbdillumtoggle</li> <li>kbdillumdown</li> <li>kbdillumup</li> <li>eject</li> <li>sleep</li> <li>from_string(value: <code>Any</code>)</li> <li>name(value: <code>Any</code>)</li> <li>display_name(value: <code>Any</code>)</li> </ul> <p> Key.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.enter \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.escape \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.backspace \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.tab \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.space \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.exclaim \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.quotedbl \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.hash \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.percent \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.dollar \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.ampersand \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.quote \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.leftparen \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.rightparen \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.asterisk \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.plus \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.comma \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.minus \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.period \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.slash \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_0 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_1 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_5 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_6 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_7 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_8 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_9 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.colon \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.semicolon \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.less \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.equals \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.greater \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.question \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.at \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.leftbracket \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.backslash \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.rightbracket \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.caret \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.underscore \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.backquote \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_a \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_b \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_c \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_d \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_e \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_f \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_g \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_h \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_i \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_j \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_k \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_l \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_m \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_n \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_o \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_p \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_q \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_r \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_s \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_t \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_u \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_v \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_w \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_x \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_y \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_z \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.capslock \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f1 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f5 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f6 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f7 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f8 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f9 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f10 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f11 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f12 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.printscreen \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.scrolllock \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.pause \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.insert \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.home \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.pageup \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.delete \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.end \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.pagedown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.right \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.left \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.down \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.up \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.numlockclear \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_divide \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_multiply \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_minus \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_plus \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_enter \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_1 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_5 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_6 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_7 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_8 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_9 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_0 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_period \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.application \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.power \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_equals \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f13 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f14 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f15 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f16 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f17 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f18 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f19 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f20 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f21 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f22 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f23 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f24 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.execute \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.help \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.menu \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.select \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.stop \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.again \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.undo \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.cut \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.copy \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.paste \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.find \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.mute \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.volumeup \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.volumedown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_comma \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_equalsas400 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.alterase \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.sysreq \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.cancel \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.clear \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.prior \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.return2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.separator \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.out \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.oper \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.clearagain \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.crsel \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.exsel \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_00 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_000 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.thousandsseparator \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.decimalseparator \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.currencyunit \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.currencysubunit \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_leftparen \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_rightparen \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_leftbrace \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_rightbrace \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_tab \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_backspace \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_a \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_b \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_c \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_d \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_e \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_f \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_xor \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_power \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_percent \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_less \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_greater \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_ampersand \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_dblampersand \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_verticalbar \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_dblverticalbar \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_colon \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_hash \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_space \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_at \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_exclam \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_memstore \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_memrecall \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_memclear \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_memadd \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_memsubtract \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_memmultiply \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_memdivide \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_plusminus \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_clear \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_clearentry \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_binary \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_octal \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_decimal \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_hexadecimal \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.lctrl \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.lshift \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.lalt \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.lmeta \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.rctrl \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.rshift \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.ralt \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.rmeta \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.mode \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.audionext \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.audioprev \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.audiostop \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.audioplay \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.audiomute \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.mediaselect \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.www \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.mail \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.calculator \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.computer \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.ac_search \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.ac_home \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.ac_back \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.ac_forward \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.ac_stop \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.ac_refresh \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.ac_bookmarks \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.brightnessdown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.brightnessup \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.displayswitch \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kbdillumtoggle \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kbdillumdown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kbdillumup \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.eject \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.sleep \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.display_name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/input/#mod","title":"Mod","text":"<p><code>import \"luxe: input\" for Mod</code></p> <p>no docs found</p> <ul> <li>none</li> <li>lshift</li> <li>rshift</li> <li>lctrl</li> <li>rctrl</li> <li>lalt</li> <li>ralt</li> <li>lmeta</li> <li>rmeta</li> <li>num</li> <li>caps</li> <li>mode</li> <li>ctrl</li> <li>shift</li> <li>alt</li> <li>meta</li> </ul> <p> Mod.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.lshift \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.rshift \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.lctrl \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.rctrl \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.lalt \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.ralt \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.lmeta \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.rmeta \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.num \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.caps \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.mode \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.ctrl \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.shift \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.alt \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.meta \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/input/#modstate","title":"ModState","text":"<p><code>import \"luxe: input\" for ModState</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>new(value: <code>Num</code>)</li> <li>value=(v : Any)</li> <li>value</li> <li>none</li> <li>lshift</li> <li>rshift</li> <li>lctrl</li> <li>rctrl</li> <li>lalt</li> <li>ralt</li> <li>lmeta</li> <li>rmeta</li> <li>num</li> <li>caps</li> <li>mode</li> <li>ctrl</li> <li>shift</li> <li>alt</li> <li>meta</li> </ul> <p> ModState.new() \u00b6 returns <code>ModState</code></p> <p>no docs found   </p> <p> ModState.new(value: <code>Num</code>) \u00b6 returns <code>ModState</code></p> <p>no docs found   </p> <p> ModState.value=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.value \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.lshift \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.rshift \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.lctrl \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.rctrl \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.lalt \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.ralt \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.lmeta \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.rmeta \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.num \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.caps \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.mode \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.ctrl \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.shift \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.alt \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.meta \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/input/#mousebutton","title":"MouseButton","text":"<p><code>import \"luxe: input\" for MouseButton</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>left</li> <li>middle</li> <li>right</li> <li>four</li> <li>five</li> <li>six</li> <li>seven</li> <li>eight</li> <li>name(value: <code>Any</code>)</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> MouseButton.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MouseButton.left \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MouseButton.middle \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MouseButton.right \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MouseButton.four \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MouseButton.five \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MouseButton.six \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MouseButton.seven \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MouseButton.eight \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MouseButton.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MouseButton.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/input/#scan","title":"Scan","text":"<p><code>import \"luxe: input\" for Scan</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>scan_a</li> <li>scan_b</li> <li>scan_c</li> <li>scan_d</li> <li>scan_e</li> <li>scan_f</li> <li>scan_g</li> <li>scan_h</li> <li>scan_i</li> <li>scan_j</li> <li>scan_k</li> <li>scan_l</li> <li>scan_m</li> <li>scan_n</li> <li>scan_o</li> <li>scan_p</li> <li>scan_q</li> <li>scan_r</li> <li>scan_s</li> <li>scan_t</li> <li>scan_u</li> <li>scan_v</li> <li>scan_w</li> <li>scan_x</li> <li>scan_y</li> <li>scan_z</li> <li>scan_1</li> <li>scan_2</li> <li>scan_3</li> <li>scan_4</li> <li>scan_5</li> <li>scan_6</li> <li>scan_7</li> <li>scan_8</li> <li>scan_9</li> <li>scan_0</li> <li>enter</li> <li>escape</li> <li>backspace</li> <li>tab</li> <li>space</li> <li>minus</li> <li>equals</li> <li>leftbracket</li> <li>rightbracket</li> <li>backslash</li> <li>nonushash</li> <li>semicolon</li> <li>apostrophe</li> <li>grave</li> <li>comma</li> <li>period</li> <li>slash</li> <li>capslock</li> <li>f1</li> <li>f2</li> <li>f3</li> <li>f4</li> <li>f5</li> <li>f6</li> <li>f7</li> <li>f8</li> <li>f9</li> <li>f10</li> <li>f11</li> <li>f12</li> <li>printscreen</li> <li>scrolllock</li> <li>pause</li> <li>insert</li> <li>home</li> <li>pageup</li> <li>delete</li> <li>end</li> <li>pagedown</li> <li>right</li> <li>left</li> <li>down</li> <li>up</li> <li>numlockclear</li> <li>kp_divide</li> <li>kp_multiply</li> <li>kp_minus</li> <li>kp_plus</li> <li>kp_enter</li> <li>kp_1</li> <li>kp_2</li> <li>kp_3</li> <li>kp_4</li> <li>kp_5</li> <li>kp_6</li> <li>kp_7</li> <li>kp_8</li> <li>kp_9</li> <li>kp_0</li> <li>kp_period</li> <li>nonusbackslash</li> <li>application</li> <li>power</li> <li>kp_equals</li> <li>f13</li> <li>f14</li> <li>f15</li> <li>f16</li> <li>f17</li> <li>f18</li> <li>f19</li> <li>f20</li> <li>f21</li> <li>f22</li> <li>f23</li> <li>f24</li> <li>execute</li> <li>help</li> <li>menu</li> <li>select</li> <li>stop</li> <li>again</li> <li>undo</li> <li>cut</li> <li>copy</li> <li>paste</li> <li>find</li> <li>mute</li> <li>volumeup</li> <li>volumedown</li> <li>kp_comma</li> <li>kp_equalsas400</li> <li>international1</li> <li>international2</li> <li>international3</li> <li>international4</li> <li>international5</li> <li>international6</li> <li>international7</li> <li>international8</li> <li>international9</li> <li>lang1</li> <li>lang2</li> <li>lang3</li> <li>lang4</li> <li>lang5</li> <li>lang6</li> <li>lang7</li> <li>lang8</li> <li>lang9</li> <li>alterase</li> <li>sysreq</li> <li>cancel</li> <li>clear</li> <li>prior</li> <li>return2</li> <li>separator</li> <li>out</li> <li>oper</li> <li>clearagain</li> <li>crsel</li> <li>exsel</li> <li>kp_00</li> <li>kp_000</li> <li>thousandsseparator</li> <li>decimalseparator</li> <li>currencyunit</li> <li>currencysubunit</li> <li>kp_leftparen</li> <li>kp_rightparen</li> <li>kp_leftbrace</li> <li>kp_rightbrace</li> <li>kp_tab</li> <li>kp_backspace</li> <li>kp_a</li> <li>kp_b</li> <li>kp_c</li> <li>kp_d</li> <li>kp_e</li> <li>kp_f</li> <li>kp_xor</li> <li>kp_power</li> <li>kp_percent</li> <li>kp_less</li> <li>kp_greater</li> <li>kp_ampersand</li> <li>kp_dblampersand</li> <li>kp_verticalbar</li> <li>kp_dblverticalbar</li> <li>kp_colon</li> <li>kp_hash</li> <li>kp_space</li> <li>kp_at</li> <li>kp_exclam</li> <li>kp_memstore</li> <li>kp_memrecall</li> <li>kp_memclear</li> <li>kp_memadd</li> <li>kp_memsubtract</li> <li>kp_memmultiply</li> <li>kp_memdivide</li> <li>kp_plusminus</li> <li>kp_clear</li> <li>kp_clearentry</li> <li>kp_binary</li> <li>kp_octal</li> <li>kp_decimal</li> <li>kp_hexadecimal</li> <li>lctrl</li> <li>lshift</li> <li>lalt</li> <li>lmeta</li> <li>rctrl</li> <li>rshift</li> <li>ralt</li> <li>rmeta</li> <li>mode</li> <li>audionext</li> <li>audioprev</li> <li>audiostop</li> <li>audioplay</li> <li>audiomute</li> <li>mediaselect</li> <li>www</li> <li>mail</li> <li>calculator</li> <li>computer</li> <li>ac_search</li> <li>ac_home</li> <li>ac_back</li> <li>ac_forward</li> <li>ac_stop</li> <li>ac_refresh</li> <li>ac_bookmarks</li> <li>brightnessdown</li> <li>brightnessup</li> <li>displayswitch</li> <li>kbdillumtoggle</li> <li>kbdillumdown</li> <li>kbdillumup</li> <li>eject</li> <li>sleep</li> <li>app1</li> <li>app2</li> <li>MAX</li> </ul> <p> Scan.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_a \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_b \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_c \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_d \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_e \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_f \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_g \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_h \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_i \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_j \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_k \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_l \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_m \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_n \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_o \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_p \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_q \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_r \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_s \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_t \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_u \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_v \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_w \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_x \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_y \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_z \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_1 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_5 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_6 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_7 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_8 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_9 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_0 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.enter \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.escape \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.backspace \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.tab \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.space \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.minus \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.equals \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.leftbracket \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.rightbracket \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.backslash \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.nonushash \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.semicolon \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.apostrophe \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.grave \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.comma \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.period \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.slash \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.capslock \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f1 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f5 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f6 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f7 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f8 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f9 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f10 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f11 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f12 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.printscreen \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scrolllock \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.pause \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.insert \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.home \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.pageup \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.delete \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.end \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.pagedown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.right \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.left \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.down \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.up \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.numlockclear \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_divide \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_multiply \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_minus \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_plus \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_enter \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_1 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_5 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_6 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_7 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_8 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_9 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_0 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_period \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.nonusbackslash \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.application \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.power \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_equals \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f13 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f14 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f15 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f16 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f17 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f18 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f19 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f20 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f21 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f22 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f23 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f24 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.execute \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.help \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.menu \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.select \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.stop \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.again \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.undo \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.cut \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.copy \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.paste \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.find \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.mute \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.volumeup \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.volumedown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_comma \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_equalsas400 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.international1 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.international2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.international3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.international4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.international5 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.international6 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.international7 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.international8 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.international9 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lang1 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lang2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lang3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lang4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lang5 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lang6 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lang7 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lang8 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lang9 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.alterase \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.sysreq \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.cancel \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.clear \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.prior \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.return2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.separator \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.out \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.oper \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.clearagain \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.crsel \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.exsel \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_00 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_000 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.thousandsseparator \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.decimalseparator \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.currencyunit \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.currencysubunit \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_leftparen \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_rightparen \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_leftbrace \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_rightbrace \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_tab \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_backspace \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_a \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_b \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_c \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_d \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_e \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_f \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_xor \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_power \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_percent \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_less \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_greater \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_ampersand \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_dblampersand \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_verticalbar \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_dblverticalbar \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_colon \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_hash \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_space \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_at \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_exclam \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_memstore \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_memrecall \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_memclear \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_memadd \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_memsubtract \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_memmultiply \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_memdivide \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_plusminus \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_clear \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_clearentry \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_binary \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_octal \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_decimal \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_hexadecimal \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lctrl \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lshift \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lalt \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lmeta \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.rctrl \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.rshift \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.ralt \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.rmeta \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.mode \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.audionext \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.audioprev \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.audiostop \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.audioplay \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.audiomute \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.mediaselect \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.www \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.mail \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.calculator \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.computer \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.ac_search \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.ac_home \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.ac_back \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.ac_forward \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.ac_stop \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.ac_refresh \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.ac_bookmarks \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.brightnessdown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.brightnessup \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.displayswitch \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kbdillumtoggle \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kbdillumdown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kbdillumup \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.eject \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.sleep \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.app1 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.app2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.MAX \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/input/#systemcursor","title":"SystemCursor","text":"<p><code>import \"luxe: input\" for SystemCursor</code></p> <p>no docs found</p> <ul> <li>invalid</li> <li>default</li> <li>hand</li> <li>no</li> <li>typing</li> <li>wait</li> <li>wait_arrow</li> <li>crosshair</li> <li>move</li> <li>resize_bottom_right</li> <li>resize_bottom_left</li> <li>resize_horizontal</li> <li>resize_vertical</li> <li>name(value: <code>SystemCursor</code>)</li> </ul> <p> SystemCursor.invalid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.default \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.hand \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.no \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.typing \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.wait \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.wait_arrow \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.crosshair \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.move \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.resize_bottom_right \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.resize_bottom_left \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.resize_horizontal \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.resize_vertical \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.name(value: <code>SystemCursor</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/input/#textevent","title":"TextEvent","text":"<p><code>import \"luxe: input\" for TextEvent</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>edit</li> <li>input</li> <li>name(value: <code>Any</code>)</li> </ul> <p> TextEvent.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextEvent.edit \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextEvent.input \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextEvent.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/io/","title":"Io","text":""},{"location":"api/v/2025.1.1/io/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/io/#luxe-io-module","title":"<code>luxe: io</code> module","text":"<ul> <li>DirNode </li> <li>Flags </li> <li>PlotType </li> <li>ProcFlags </li> </ul>"},{"location":"api/v/2025.1.1/io/#dirnode","title":"DirNode","text":"<p><code>import \"luxe: io\" for DirNode</code></p> <p>no docs found</p> <ul> <li>path</li> <li>name</li> <li>ext</li> <li>is_regular</li> <li>is_directory</li> <li>new(in_path: <code>Any</code>, in_name: <code>Any</code>, in_ext: <code>Any</code>, in_is_regular: <code>Any</code>, in_is_directory: <code>Any</code>)</li> </ul> <p> DirNode.path \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> DirNode.name \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> DirNode.ext \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> DirNode.is_regular \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> DirNode.is_directory \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> DirNode.new(in_path: <code>Any</code>, in_name: <code>Any</code>, in_ext: <code>Any</code>, in_is_regular: <code>Any</code>, in_is_directory: <code>Any</code>) \u00b6 returns <code>DirNode</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/io/#flags","title":"Flags","text":"<p><code>import \"luxe: io\" for Flags</code></p> <p>no docs found</p> <ul> <li>new(args: <code>Any</code>)</li> <li>all()</li> <li>has(flag: <code>Any</code>)</li> <li>value(flag: <code>Any</code>)</li> <li>value(flag: <code>Any</code>, require: <code>Any</code>)</li> <li>values(flag: <code>Any</code>)</li> <li>values(flag: <code>Any</code>, require: <code>Any</code>)</li> </ul> <p> Flags.new(args: <code>Any</code>) \u00b6 returns <code>Flags</code></p> <p>no docs found   </p> <p> Flags.all() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Flags.has(flag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Flags.value(flag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Flags.value(flag: <code>Any</code>, require: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Flags.values(flag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Flags.values(flag: <code>Any</code>, require: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/io/#plottype","title":"PlotType","text":"<p><code>import \"luxe: io\" for PlotType</code></p> <p>no docs found</p> <ul> <li>normal</li> <li>counter</li> </ul> <p> PlotType.normal \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PlotType.counter \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/io/#procflags","title":"ProcFlags","text":"<p><code>import \"luxe: io\" for ProcFlags</code></p> <p>no docs found</p> <ul> <li>none</li> <li>setuid</li> <li>setgid</li> <li>windows_verbatim_arguments</li> <li>detached</li> <li>windows_hide</li> <li>windows_hide_console</li> <li>windows_hide_gui</li> </ul> <p> ProcFlags.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ProcFlags.setuid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ProcFlags.setgid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ProcFlags.windows_verbatim_arguments \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ProcFlags.detached \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ProcFlags.windows_hide \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ProcFlags.windows_hide_console \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ProcFlags.windows_hide_gui \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/lx/","title":"Lx","text":""},{"location":"api/v/2025.1.1/lx/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/lx/#luxe-lx-module","title":"<code>luxe: lx</code> module","text":"<ul> <li>LX </li> <li>LXMerge </li> </ul>"},{"location":"api/v/2025.1.1/lx/#lx","title":"LX","text":"<p><code>import \"luxe: lx\" for LX</code></p> <p>no docs found</p> <ul> <li>parse_bytes(source_name: <code>Any</code>, bytes: <code>Any</code>)</li> <li>read(path: <code>Any</code>)</li> <li>read(source_id: <code>Any</code>, path: <code>Any</code>)</li> <li>parse(data: <code>Any</code>)</li> <li>parse(source_path: <code>Any</code>, data: <code>Any</code>)</li> <li>apply(from: <code>Any</code>, to: <code>Any</code>)</li> <li>clone(lx: <code>Any</code>)</li> <li>equal(lxA: <code>Any</code>, lxB: <code>Any</code>)</li> <li>delta(lxA: <code>Any</code>, lxB: <code>Any</code>)</li> <li>delta_apply(lx: <code>Any</code>, delta: <code>Any</code>)</li> <li>delta_unapply(lx: <code>Any</code>, delta: <code>Any</code>)</li> <li>key_get(lx: <code>Any</code>, key: <code>Any</code>)</li> <li>key_get_via_list(lx: <code>Any</code>, key: <code>Any</code>)</li> <li>key_remove(lx: <code>Any</code>, key: <code>Any</code>)</li> <li>key_remove_via_list(lx: <code>Any</code>, key: <code>Any</code>)</li> <li>key_set(lx: <code>Any</code>, key: <code>Any</code>, value: <code>Any</code>)</li> <li>key_set_via_list(lx: <code>Any</code>, key: <code>Any</code>, value: <code>Any</code>)</li> <li>stringify(root: <code>Any</code>)</li> <li>stringify(root: <code>Any</code>, spaces: <code>Any</code>)</li> <li>stringify(root: <code>Any</code>, spaces: <code>Any</code>, with_root: <code>Any</code>)</li> <li>stringify_to_bytes(root: <code>Any</code>, max_size: <code>Any</code>, spaces: <code>Any</code>, with_root: <code>Any</code>)</li> <li>write(contents: <code>Any</code>, path: <code>Any</code>)</li> <li>write(contents: <code>Any</code>, path: <code>Any</code>, spaces: <code>Any</code>)</li> <li>write(contents: <code>Any</code>, path: <code>Any</code>, spaces: <code>Any</code>, with_root: <code>Any</code>)</li> <li>stringify_to_file(root: <code>Any</code>, path: <code>Any</code>)</li> <li>stringify_to_file(root: <code>Any</code>, path: <code>Any</code>, spaces: <code>Any</code>, with_root: <code>Any</code>)</li> <li>flatten(lx: <code>Any</code>)</li> <li>flatten(lx: <code>Any</code>, delimiter: <code>Any</code>)</li> </ul> <p> LX.parse_bytes(source_name: <code>Any</code>, bytes: <code>Any</code>) \u00b6 returns <code>Result</code></p> <p>no docs found   </p> <p> LX.read(path: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.read(source_id: <code>Any</code>, path: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.parse(data: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.parse(source_path: <code>Any</code>, data: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.apply(from: <code>Any</code>, to: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.clone(lx: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.equal(lxA: <code>Any</code>, lxB: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.delta(lxA: <code>Any</code>, lxB: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.delta_apply(lx: <code>Any</code>, delta: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.delta_unapply(lx: <code>Any</code>, delta: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.key_get(lx: <code>Any</code>, key: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.key_get_via_list(lx: <code>Any</code>, key: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.key_remove(lx: <code>Any</code>, key: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.key_remove_via_list(lx: <code>Any</code>, key: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.key_set(lx: <code>Any</code>, key: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.key_set_via_list(lx: <code>Any</code>, key: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.stringify(root: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.stringify(root: <code>Any</code>, spaces: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.stringify(root: <code>Any</code>, spaces: <code>Any</code>, with_root: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.stringify_to_bytes(root: <code>Any</code>, max_size: <code>Any</code>, spaces: <code>Any</code>, with_root: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.write(contents: <code>Any</code>, path: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.write(contents: <code>Any</code>, path: <code>Any</code>, spaces: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.write(contents: <code>Any</code>, path: <code>Any</code>, spaces: <code>Any</code>, with_root: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.stringify_to_file(root: <code>Any</code>, path: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.stringify_to_file(root: <code>Any</code>, path: <code>Any</code>, spaces: <code>Any</code>, with_root: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.flatten(lx: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.flatten(lx: <code>Any</code>, delimiter: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/lx/#lxmerge","title":"LXMerge","text":"<p><code>import \"luxe: lx\" for LXMerge</code></p> <p>no docs found</p> <ul> <li>merge_map(from_map: <code>Map</code>, to_map: <code>Map</code>)</li> <li>merge_list(from_list: <code>List</code>, to_list: <code>List</code>)</li> <li>merge(from: <code>Any</code>, to: <code>Any</code>)</li> </ul> <p> LXMerge.merge_map(from_map: <code>Map</code>, to_map: <code>Map</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LXMerge.merge_list(from_list: <code>List</code>, to_list: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LXMerge.merge(from: <code>Any</code>, to: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/mat4/","title":"Mat4","text":""},{"location":"api/v/2025.1.1/mat4/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/mat4/#luxe-mat4-module","title":"<code>luxe: mat4</code> module","text":"<ul> <li>Matrix </li> </ul>"},{"location":"api/v/2025.1.1/mat4/#matrix","title":"Matrix","text":"<p><code>import \"luxe: mat4\" for Matrix</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>m</li> <li>ortho(left: <code>Any</code>, right: <code>Any</code>, top: <code>Any</code>, bottom: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>)</li> <li>make_angle_axis(axis: <code>Any</code>, theta: <code>Any</code>)</li> <li>apply_to_float3(vec: <code>Float3</code>)</li> <li>set(n11: <code>Any</code>, n12: <code>Any</code>, n13: <code>Any</code>, n14: <code>Any</code>, n21: <code>Any</code>, n22: <code>Any</code>, n23: <code>Any</code>, n24: <code>Any</code>, n31: <code>Any</code>, n32: <code>Any</code>, n33: <code>Any</code>, n34: <code>Any</code>, n41: <code>Any</code>, n42: <code>Any</code>, n43: <code>Any</code>, n44: <code>Any</code>)</li> <li>pos_x</li> <li>pos_y</li> <li>pos_z</li> <li>pos_x=(v : Any)</li> <li>pos_y=(v : Any)</li> <li>pos_z=(v : Any)</li> <li>pos</li> <li>pos=(v : Any)</li> <li>scale_x</li> <li>scale_y</li> <li>scale_z</li> </ul> <p> Matrix.new() \u00b6 returns <code>Matrix</code></p> <p>no docs found   </p> <p> Matrix.m \u00b6 returns <code>Floats</code></p> <p>no docs found   </p> <p> Matrix.ortho(left: <code>Any</code>, right: <code>Any</code>, top: <code>Any</code>, bottom: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.make_angle_axis(axis: <code>Any</code>, theta: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.apply_to_float3(vec: <code>Float3</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.set(n11: <code>Any</code>, n12: <code>Any</code>, n13: <code>Any</code>, n14: <code>Any</code>, n21: <code>Any</code>, n22: <code>Any</code>, n23: <code>Any</code>, n24: <code>Any</code>, n31: <code>Any</code>, n32: <code>Any</code>, n33: <code>Any</code>, n34: <code>Any</code>, n41: <code>Any</code>, n42: <code>Any</code>, n43: <code>Any</code>, n44: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.pos_x \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.pos_y \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.pos_z \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.pos_x=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.pos_y=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.pos_z=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.pos \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.pos=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.scale_x \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.scale_y \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.scale_z \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/math/","title":"Math","text":""},{"location":"api/v/2025.1.1/math/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/math/#luxe-math-module","title":"<code>luxe: math</code> module","text":"<ul> <li>Math </li> </ul>"},{"location":"api/v/2025.1.1/math/#math","title":"Math","text":"<p><code>import \"luxe: math\" for Math</code></p> <p>Utility class with static math functions.</p> <ul> <li>add(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>add2D(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>add_to(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>add2D_to(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>sub(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>sub2D(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>sub_to(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>sub2D_to(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>mults(a: <code>Vec</code>, b: <code>Num</code>)</li> <li>mult(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>mult2D(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>mult_to(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>mults_to(a: <code>Vec</code>, b: <code>Num</code>)</li> <li>mult2D_to(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>scale(a: <code>Vec</code>, s: <code>Num</code>)</li> <li>scale2D(a: <code>Vec</code>, s: <code>Num</code>)</li> <li>scale_to(a: <code>Vec</code>, s: <code>Num</code>)</li> <li>scale2D_to(a: <code>Vec</code>, s: <code>Num</code>)</li> <li>divide(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>divide_to(vec: <code>Vec</code>, other: <code>Vec</code>)</li> <li>div(a: <code>Vec</code>, s: <code>Num</code>)</li> <li>div2D(a: <code>Vec</code>, s: <code>Num</code>)</li> <li>div_to(a: <code>Vec</code>, s: <code>Num</code>)</li> <li>div2D_to(a: <code>Vec</code>, s: <code>Num</code>)</li> <li>equal(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>length(x: <code>Num</code>, y: <code>Num</code>)</li> <li>length(x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>length(vec: <code>Vec</code>)</li> <li>length2D(vec: <code>Vec</code>)</li> <li>length_sq(x: <code>Num</code>, y: <code>Num</code>)</li> <li>length_sq(x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>length_sq(vec: <code>Vec</code>)</li> <li>length_sq2D(vec: <code>Vec</code>)</li> <li>dot(x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, other_x: <code>Num</code>, other_y: <code>Num</code>, other_z: <code>Num</code>)</li> <li>dot(x: <code>Num</code>, y: <code>Num</code>, other_x: <code>Num</code>, other_y: <code>Num</code>)</li> <li>dot(vec: <code>Vec</code>, other: <code>Vec</code>)</li> <li>dot2D(vec: <code>Vec</code>, other: <code>Vec</code>)</li> <li>cross(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>angle(from: <code>Vec</code>, to: <code>Vec</code>)</li> <li>angle(v1: <code>Vec</code>, v2: <code>Vec</code>, up: <code>Vec</code>)</li> <li>angle2D(from: <code>Vec</code>, to: <code>Vec</code>)</li> <li>angle2D(from_x: <code>Num</code>, from_y: <code>Num</code>, to_x: <code>Num</code>, to_y: <code>Num</code>)</li> <li>normalize2D(vec: <code>Vec</code>)</li> <li>normalized(vec: <code>Vec</code>)</li> <li>normalized2D(vec: <code>Vec</code>)</li> <li>normalize(vec: <code>Vec</code>)</li> <li>dist(x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, other_x: <code>Num</code>, other_y: <code>Num</code>, other_z: <code>Num</code>)</li> <li>dist(vec: <code>Vec</code>, other: <code>Vec</code>)</li> <li>dist2D(vec: <code>Vec</code>, other: <code>Vec</code>)</li> <li>dist2D(x: <code>Num</code>, y: <code>Num</code>, other_x: <code>Num</code>, other_y: <code>Num</code>)</li> <li>dir2D(pos: <code>Vec</code>, target: <code>Vec</code>)</li> <li>dir(pos: <code>Vec</code>, target: <code>Vec</code>)</li> <li>rotate(vec: <code>Vec</code>, axis: <code>Vec</code>, angle: <code>Num</code>)</li> <li>rotate_by_quat(vec: <code>Vec</code>, quat: <code>Float4</code>)</li> <li>quat_from_euler(vec: <code>Vec</code>)</li> <li>rotate(vec: <code>Vec</code>, ox: <code>Num</code>, oy: <code>Num</code>, angle: <code>Num</code>)</li> <li>ray_intersect_plane(plane_x: <code>Num</code>, plane_y: <code>Num</code>, plane_z: <code>Num</code>, normal_x: <code>Num</code>, normal_y: <code>Num</code>, normal_z: <code>Num</code>, ray_x: <code>Num</code>, ray_y: <code>Num</code>, ray_z: <code>Num</code>, ray_dir_x: <code>Num</code>, ray_dir_y: <code>Num</code>, ray_dir_z: <code>Num</code>)</li> <li>closest_point_on_plane(plane_x: <code>Num</code>, plane_y: <code>Num</code>, plane_z: <code>Num</code>, normal_x: <code>Num</code>, normal_y: <code>Num</code>, normal_z: <code>Num</code>, point_x: <code>Num</code>, point_y: <code>Num</code>, point_z: <code>Num</code>)</li> <li>closest_point_on_line(line_x: <code>Num</code>, line_y: <code>Num</code>, line_z: <code>Num</code>, line_end_x: <code>Num</code>, line_end_y: <code>Num</code>, line_end_z: <code>Num</code>, point_x: <code>Num</code>, point_y: <code>Num</code>, point_z: <code>Num</code>)</li> <li>closest_point_on_line(line: <code>Vec</code>, line_end: <code>Vec</code>, point: <code>Vec</code>)</li> <li>in_rect(x: <code>Num</code>, y: <code>Num</code>, rx: <code>Num</code>, ry: <code>Num</code>, rw: <code>Num</code>, rh: <code>Num</code>)</li> <li>wrap(value: <code>Num</code>, modulus: <code>Num</code>)</li> <li>overlaps(x0: <code>Num</code>, y0: <code>Num</code>, w0: <code>Num</code>, h0: <code>Num</code>, x1: <code>Num</code>, y1: <code>Num</code>, w1: <code>Num</code>, h1: <code>Num</code>)</li> <li>sign(x: <code>Num</code>)</li> <li>sign0(x: <code>Num</code>)</li> <li>atan2(y: <code>Num</code>, x: <code>Num</code>)</li> <li>degrees(radians: <code>Num</code>)</li> <li>radians(degrees: <code>Num</code>)</li> <li>clamp(value: <code>Num</code>, a: <code>Num</code>, b: <code>Num</code>)</li> <li>min(a: <code>Num</code>, b: <code>Num</code>)</li> <li>max(a: <code>Num</code>, b: <code>Num</code>)</li> <li>floor_around_zero(a: <code>Num</code>)</li> <li>ceil_around_zero(a: <code>Num</code>)</li> <li>fixed(value: <code>Num</code>)</li> <li>fixed(value: <code>Num</code>, precision: <code>Num</code>)</li> <li>angle_delta(from: <code>Num</code>, to: <code>Num</code>)</li> <li>lerp2D(a: <code>Vec</code>, b: <code>Vec</code>, t: <code>Num</code>)</li> <li>lerp3D(a: <code>Vec</code>, b: <code>Vec</code>, t: <code>Num</code>)</li> <li>smooth_t(t: <code>Num</code>, smoothness: <code>Num</code>)</li> <li>smoother_t(t: <code>Num</code>, smoothness: <code>Num</code>)</li> <li>lerp(a: <code>Num</code>, b: <code>Num</code>, t: <code>Num</code>)</li> <li>lerp_angle(a: <code>Num</code>, b: <code>Num</code>, t: <code>Num</code>)</li> <li>weighted_avg(value: <code>Num</code>, target: <code>Num</code>, slowness: <code>Num</code>)</li> <li>within_range(value: <code>Num</code>, start_range: <code>Num</code>, end_range: <code>Num</code>)</li> <li>approx(one: <code>Num</code>, other: <code>Num</code>)</li> <li>approx(one: <code>Num</code>, other: <code>Num</code>, epsilon: <code>Num</code>)</li> <li>wrap_angle(degrees: <code>Num</code>)</li> <li>wrap_angle(degrees: <code>Num</code>, lower: <code>Num</code>, upper: <code>Num</code>)</li> <li>wrap_radians(radians: <code>Num</code>, lower: <code>Num</code>, upper: <code>Num</code>)</li> <li>nearest_power_of_two(value: <code>Num</code>)</li> <li>map_linear(value: <code>Num</code>, a1: <code>Num</code>, a2: <code>Num</code>, b1: <code>Num</code>, b2: <code>Num</code>)</li> <li>smoothstep(x: <code>Num</code>, min: <code>Num</code>, max: <code>Num</code>)</li> <li>smootherstep(x: <code>Num</code>, min: <code>Num</code>, max: <code>Num</code>)</li> <li>smoothstepx(x: <code>Num</code>, round: <code>Num</code>, steep: <code>Num</code>)</li> <li>random_point_in_unit_circle(rng: <code>Random</code>)</li> <li>slerp(a: <code>Quat</code>, b: <code>Quat</code>, t: <code>Num</code>)</li> </ul> <p> Math.add(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Add two 3D vectors together componentwise, returning the result   </p> <p> Math.add2D(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Add two vector2s together componentwise, returning the result   </p> <p> Math.add_to(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Add two 3D vectors together componentwise, updating the first vector   </p> <p> Math.add2D_to(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Add two 2D vectors together componentwise, updating the first vector   </p> <p> Math.sub(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Subtract two 3D vectors together componentwise, returning the result   </p> <p> Math.sub2D(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Subtract two 2D vectors together componentwise, returning the result   </p> <p> Math.sub_to(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Subtract two 3D vectors together componentwise, updating the first vector   </p> <p> Math.sub2D_to(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Subtract two 2D vectors together componentwise, updating the first vector   </p> <p> Math.mults(a: <code>Vec</code>, b: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Multiply a 3D vector by a scalar, returning the result   </p> <p> Math.mult(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Multiply two 3D vectors together componentwise, returning the result   </p> <p> Math.mult2D(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Multiply two 2D vectors together componentwise, returning the result   </p> <p> Math.mult_to(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Multiply two 3D vectors together componentwise, updating the first vector   </p> <p> Math.mults_to(a: <code>Vec</code>, b: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Multiply a 3D vector by a scalar, updating the vector   </p> <p> Math.mult2D_to(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Multiply two 2D vectors together componentwise, updating the first vector   </p> <p> Math.scale(a: <code>Vec</code>, s: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Multiply a 3D vector by a scalar, returning the result   </p> <p> Math.scale2D(a: <code>Vec</code>, s: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Multiply a 2D vector by a scalar, returning the result   </p> <p> Math.scale_to(a: <code>Vec</code>, s: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Multiply a 3D vector by a scalar, updating the vector   </p> <p> Math.scale2D_to(a: <code>Vec</code>, s: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Multiply a 2D vector by a scalar, updating the vector   </p> <p> Math.divide(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Divide a 3D vector by another, returning the result   </p> <p> Math.divide_to(vec: <code>Vec</code>, other: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Divide a 3D vector by another, updating the vector   </p> <p> Math.div(a: <code>Vec</code>, s: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Divide a 3D vector by a scalar, returning the result   </p> <p> Math.div2D(a: <code>Vec</code>, s: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Divide a 2D vector by a scalar, returning the result   </p> <p> Math.div_to(a: <code>Vec</code>, s: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Divide a 3D vector by a scalar, updating the vector   </p> <p> Math.div2D_to(a: <code>Vec</code>, s: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Divide a 2D vector by a scalar, updating the vector   </p> <p> Math.equal(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>Bool</code></p> <p>Checks if two vectors are equal. Vectors of different dimensions (e.g. 2D and 3D) are considered unequal   </p> <p> Math.length(x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Length of a 2d vector.   </p> <p> Math.length(x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Length of a 3d vector.   </p> <p> Math.length(vec: <code>Vec</code>) \u00b6 returns <code>Num</code></p> <p>Length of a 3d vector.   </p> <p> Math.length2D(vec: <code>Vec</code>) \u00b6 returns <code>Num</code></p> <p>Length of a 2d vector.   </p> <p> Math.length_sq(x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Squared length of a 2d vector (slightly cheaper than length).   </p> <p> Math.length_sq(x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Squared length of a 3d vector (slightly cheaper than length).   </p> <p> Math.length_sq(vec: <code>Vec</code>) \u00b6 returns <code>Num</code></p> <p>Squared length of a 3d vector.   </p> <p> Math.length_sq2D(vec: <code>Vec</code>) \u00b6 returns <code>Num</code></p> <p>Squared length of a 2d vector.   </p> <p> Math.dot(x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, other_x: <code>Num</code>, other_y: <code>Num</code>, other_z: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Dot product (or scalar product) of two 3d vectors.   </p> <p> Math.dot(x: <code>Num</code>, y: <code>Num</code>, other_x: <code>Num</code>, other_y: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Dot product (or scalar product) of two 2d vectors.   </p> <p> Math.dot(vec: <code>Vec</code>, other: <code>Vec</code>) \u00b6 returns <code>Num</code></p> <p>Dot product (or scalar product) of two 3d vectors.   </p> <p> Math.dot2D(vec: <code>Vec</code>, other: <code>Vec</code>) \u00b6 returns <code>Num</code></p> <p>Dot product (or scalar product) of two 2d vectors.   </p> <p> Math.cross(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>Vec</code></p> <p>Cross product of two 3d vectors.  Result will always be orthogonal to both input vectors (and [0, 0, 0] if the arguments are parallel)   </p> <p> Math.angle(from: <code>Vec</code>, to: <code>Vec</code>) \u00b6 returns <code>Num</code></p> <p>Unsigned angle between two 3d vectors.   </p> <p> Math.angle(v1: <code>Vec</code>, v2: <code>Vec</code>, up: <code>Vec</code>) \u00b6 returns <code>Num</code></p> <p>Signed angle between two 3d vectors.   </p> <p> Math.angle2D(from: <code>Vec</code>, to: <code>Vec</code>) \u00b6 returns <code>Num</code></p> <p>Signed angle between two 2d vectors.   </p> <p> Math.angle2D(from_x: <code>Num</code>, from_y: <code>Num</code>, to_x: <code>Num</code>, to_y: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Signed angle between two 2d vectors.   </p> <p> Math.normalize2D(vec: <code>Vec</code>) \u00b6 returns <code>None</code></p> <p>Normalize 2d vector. Changes input vector and doesnt return anything. 0 length vectors remain untouched.   </p> <p> Math.normalized(vec: <code>Vec</code>) \u00b6 returns <code>None</code></p> <p>Normalize 3d vector. Returns the result.   </p> <p> Math.normalized2D(vec: <code>Vec</code>) \u00b6 returns <code>None</code></p> <p>Normalize 2d vector. Returns the result.   </p> <p> Math.normalize(vec: <code>Vec</code>) \u00b6 returns <code>None</code></p> <p>Normalize 3d vector. Changes input vector and doesnt return anything. 0 length vectors remain untouched.   </p> <p> Math.dist(x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, other_x: <code>Num</code>, other_y: <code>Num</code>, other_z: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Distance between two 3d vectors.   </p> <p> Math.dist(vec: <code>Vec</code>, other: <code>Vec</code>) \u00b6 returns <code>Num</code></p> <p>Distance between two 3d vectors.   </p> <p> Math.dist2D(vec: <code>Vec</code>, other: <code>Vec</code>) \u00b6 returns <code>Num</code></p> <p>Distance between two 2d vectors.   </p> <p> Math.dist2D(x: <code>Num</code>, y: <code>Num</code>, other_x: <code>Num</code>, other_y: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Distance between two 2d vectors.   </p> <p> Math.dir2D(pos: <code>Vec</code>, target: <code>Vec</code>) \u00b6 returns <code>Vec</code></p> <p>Directional vector (length 1 unless the arguments are the same) between two 2d vectors.   </p> <p> Math.dir(pos: <code>Vec</code>, target: <code>Vec</code>) \u00b6 returns <code>Vec</code></p> <p>Directional vector (length 1 unless the arguments are the same) between two 3d vectors.   </p> <p> Math.rotate(vec: <code>Vec</code>, axis: <code>Vec</code>, angle: <code>Num</code>) \u00b6 returns <code>Vec</code></p> <p>Rotate a 3d vector around the given axis by angle degrees   </p> <p> Math.rotate_by_quat(vec: <code>Vec</code>, quat: <code>Float4</code>) \u00b6 returns <code>Vec</code></p> <p>Rotate a 3d vector using the given quaternion   </p> <p> Math.quat_from_euler(vec: <code>Vec</code>) \u00b6 returns <code>Float4</code></p> <p>Create a quaternion from float3 euler (radians)   </p> <p> Math.rotate(vec: <code>Vec</code>, ox: <code>Num</code>, oy: <code>Num</code>, angle: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Rotate 2d vector around another 2d vector. This rotates the input vector and doesnt return anything.   </p> <p> Math.ray_intersect_plane(plane_x: <code>Num</code>, plane_y: <code>Num</code>, plane_z: <code>Num</code>, normal_x: <code>Num</code>, normal_y: <code>Num</code>, normal_z: <code>Num</code>, ray_x: <code>Num</code>, ray_y: <code>Num</code>, ray_z: <code>Num</code>, ray_dir_x: <code>Num</code>, ray_dir_y: <code>Num</code>, ray_dir_z: <code>Num</code>) \u00b6 returns <code>Vec</code></p> <p>Intersection point between an infinitely long ray and a infinitely big plane. Returns <code>null</code> if parallel.   </p> <p> Math.closest_point_on_plane(plane_x: <code>Num</code>, plane_y: <code>Num</code>, plane_z: <code>Num</code>, normal_x: <code>Num</code>, normal_y: <code>Num</code>, normal_z: <code>Num</code>, point_x: <code>Num</code>, point_y: <code>Num</code>, point_z: <code>Num</code>) \u00b6 returns <code>Vec</code></p> <p>Closest point on an infinite plane to a point.   </p> <p> Math.closest_point_on_line(line_x: <code>Num</code>, line_y: <code>Num</code>, line_z: <code>Num</code>, line_end_x: <code>Num</code>, line_end_y: <code>Num</code>, line_end_z: <code>Num</code>, point_x: <code>Num</code>, point_y: <code>Num</code>, point_z: <code>Num</code>) \u00b6 returns <code>Vec</code></p> <p>Closest point on an infinite line to a point. The progress from line start to line end in 4<sup>th</sup> component of return value. Line is constructed by 2 points on the line,  but the closest point can also be before the start of after the end  (in that case the 4<sup>th</sup> component of the return value wont be in the 0-1 range).   </p> <p> Math.closest_point_on_line(line: <code>Vec</code>, line_end: <code>Vec</code>, point: <code>Vec</code>) \u00b6 returns <code>Vec</code></p> <p>Closest point on an infinite line to a point. The progress from line start to line end in 4<sup>th</sup> component of return value. Line is constructed by 2 points on the line,  but the closest point can also be before the start of after the end  (in that case the 4<sup>th</sup> component of the return value wont be in the 0-1 range).   </p> <p> Math.in_rect(x: <code>Num</code>, y: <code>Num</code>, rx: <code>Num</code>, ry: <code>Num</code>, rw: <code>Num</code>, rh: <code>Num</code>) \u00b6 returns <code>Bool</code></p> <p>Checks if a 2d point is inside a rectangle. Only works for positive rectangle sizes.   </p> <p> Math.wrap(value: <code>Num</code>, modulus: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Math.overlaps(x0: <code>Num</code>, y0: <code>Num</code>, w0: <code>Num</code>, h0: <code>Num</code>, x1: <code>Num</code>, y1: <code>Num</code>, w1: <code>Num</code>, h1: <code>Num</code>) \u00b6 returns <code>Bool</code></p> <p>Checks if two rectangles overlap. Only works for positive rectangle sizes.   </p> <p> Math.sign(x: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>The sign of the number, expressed as a -1, 1 or 0, for negative and positive numbers, and zero.   </p> <p> Math.sign0(x: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>The sign of the number, expressed as a -1 0r 1, for negative and positive numbers, zero is positive.   </p> <p> Math.atan2(y: <code>Num</code>, x: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>The arc tangent of <code>y</code> when divided by <code>x</code>,      using the signs of the two numbers to determine the quadrant of the result.      (equivalient to <code>y.atan(x)</code>)   </p> <p> Math.degrees(radians: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Convert radians (0...2*PI) to degree (0...360).   </p> <p> Math.radians(degrees: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Convert degree (0...360) to radians (0...2*PI).   </p> <p> Math.clamp(value: <code>Num</code>, a: <code>Num</code>, b: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Clamp <code>value</code> between <code>a</code> and <code>b</code> (result will never be smaller than a or bigger than b).      Equivalent to <code>value.clamp(a, b)</code>.   </p> <p> Math.min(a: <code>Num</code>, b: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>The smaller of two numbers. Eqivalent to <code>a.min(b)</code>.   </p> <p> Math.max(a: <code>Num</code>, b: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>The larger of two numbers. Eqivalent to <code>a.max(b)</code>.   </p> <p> Math.floor_around_zero(a: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Round towards zero. (floor when positive, ceil when negative)   </p> <p> Math.ceil_around_zero(a: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Round away from zero. (ceil when positive, floor when negative)   </p> <p> Math.fixed(value: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Round number to 3 digits after comma precision.   </p> <p> Math.fixed(value: <code>Num</code>, precision: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Round number to <code>precision</code> digits after comma precision.   </p> <p> Math.angle_delta(from: <code>Num</code>, to: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Signed difference between two (degree) angles. Always in -180...180 range.   </p> <p> Math.lerp2D(a: <code>Vec</code>, b: <code>Vec</code>, t: <code>Num</code>) \u00b6 returns <code>Vec</code></p> <p>Linearly interpolate between two vectors. Returns <code>a</code> when <code>t</code> is <code>0</code> and <code>b</code> when <code>t</code> is <code>1</code>, with values inbetween interpolating inbetween. If <code>t</code> is outside 0-1 range, the output will be extrapolated.   </p> <p> Math.lerp3D(a: <code>Vec</code>, b: <code>Vec</code>, t: <code>Num</code>) \u00b6 returns <code>Vec</code></p> <p>Linearly interpolate between two vectors. Returns <code>a</code> when <code>t</code> is <code>0</code> and <code>b</code> when <code>t</code> is <code>1</code>, with values inbetween interpolating inbetween. If <code>t</code> is outside 0-1 range, the output will be extrapolated.   </p> <p> Math.smooth_t(t: <code>Num</code>, smoothness: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Get a smooth time t for lerping, based on a smoothness value. e.g t = smooth_t(delta, 1.25). exponential decay   </p> <p> Math.smoother_t(t: <code>Num</code>, smoothness: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Get a smooth time t for lerping, based on a smoothness value. e.g t = smoother_t(delta, 1.25). s curve like shape   </p> <p> Math.lerp(a: <code>Num</code>, b: <code>Num</code>, t: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Linearly interpolate between two numbers. Returns <code>a</code> when <code>t</code> is <code>0</code> and <code>b</code> when <code>t</code> is <code>1</code>, with values inbetween interpolating inbetween. If <code>t</code> is outside 0-1 range, the output will be extrapolated.   </p> <p> Math.lerp_angle(a: <code>Num</code>, b: <code>Num</code>, t: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Interpolates between angles. Always in 0...360 range.   </p> <p> Math.weighted_avg(value: <code>Num</code>, target: <code>Num</code>, slowness: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Math.within_range(value: <code>Num</code>, start_range: <code>Num</code>, end_range: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Checks whether <code>value</code> is inbetween <code>start_range</code> and <code>end_range</code> (inclusive).   </p> <p> Math.approx(one: <code>Num</code>, other: <code>Num</code>) \u00b6 returns <code>Bool</code></p> <p>Checks whether two values are approximately the same (with a max difference of 0.001).   </p> <p> Math.approx(one: <code>Num</code>, other: <code>Num</code>, epsilon: <code>Num</code>) \u00b6 returns <code>Bool</code></p> <p>Checks whether two values are approximately the same (with a max difference of <code>epsilon</code>).   </p> <p> Math.wrap_angle(degrees: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Bring angle into 0...360 degree space.   </p> <p> Math.wrap_angle(degrees: <code>Num</code>, lower: <code>Num</code>, upper: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Bring angle into lower...upper degree space.   </p> <p> Math.wrap_radians(radians: <code>Num</code>, lower: <code>Num</code>, upper: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Math.nearest_power_of_two(value: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Math.map_linear(value: <code>Num</code>, a1: <code>Num</code>, a2: <code>Num</code>, b1: <code>Num</code>, b2: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Remap value from <code>a1...a2</code> space to <code>b1...b2</code> space (unclamped).   </p> <p> Math.smoothstep(x: <code>Num</code>, min: <code>Num</code>, max: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Smoothed inverse lerp using cubic hermite interpolation. Output is clamped between 0 and 1.   </p> <p> Math.smootherstep(x: <code>Num</code>, min: <code>Num</code>, max: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Alternate smooth inverse interpolation with derivative of 0 at min and max points. Output is clamped between 0 and 1.   </p> <p> Math.smoothstepx(x: <code>Num</code>, round: <code>Num</code>, steep: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Math.random_point_in_unit_circle(rng: <code>Random</code>) \u00b6 returns <code>Num</code></p> <p>Random 2d point in circle of radius 1. Has uniform distribution.   </p> <p> Math.slerp(a: <code>Quat</code>, b: <code>Quat</code>, t: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/noise/","title":"Noise","text":""},{"location":"api/v/2025.1.1/noise/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/noise/#luxe-noise-module","title":"<code>luxe: noise</code> module","text":"<ul> <li>Noise </li> <li>NoiseCellularDistanceFunc </li> <li>NoiseCellularReturnType </li> <li>NoiseDomainWarpType </li> <li>NoiseFractalType </li> <li>NoiseRotationType3D </li> <li>NoiseType </li> </ul>"},{"location":"api/v/2025.1.1/noise/#noise","title":"Noise","text":"<p><code>import \"luxe: noise\" for Noise</code></p> <p>no docs found</p> <ul> <li>create(type: <code>NoiseType</code>)</li> <li>create(type: <code>NoiseType</code>, seed: <code>Num</code>)</li> <li>destroy(handle: <code>Noise</code>)</li> <li>valid(handle: <code>Noise</code>)</li> <li>get2D(handle: <code>Noise</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>get3D(handle: <code>Noise</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>set_seed(handle: <code>Noise</code>, seed: <code>Num</code>)</li> <li>domain_warp2D(handle: <code>Noise</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>domain_warp3D(handle: <code>Noise</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>set_rotation_type3D(handle: <code>Noise</code>, type: <code>NoiseRotationType3D</code>)</li> <li>set_fractal_type(handle: <code>Noise</code>, type: <code>NoiseFractalType</code>)</li> <li>set_fractal_octaves(handle: <code>Noise</code>, octaves: <code>Num</code>)</li> <li>set_fractal_lacunarity(handle: <code>Noise</code>, lacunarity: <code>Num</code>)</li> <li>set_fractal_gain(handle: <code>Noise</code>, gain: <code>Num</code>)</li> <li>set_fractal_weighted_strength(handle: <code>Noise</code>, weighted_strength: <code>Num</code>)</li> <li>set_fractal_ping_pong_strength(handle: <code>Noise</code>, ping_pong_strength: <code>Num</code>)</li> <li>set_cellular_distance_func(handle: <code>Noise</code>, distance_func: <code>NoiseCellularDistanceFunc</code>)</li> <li>set_cellular_return_type(handle: <code>Noise</code>, type: <code>NoiseCellularReturnType</code>)</li> <li>set_cellular_jitter(handle: <code>Noise</code>, jitter: <code>Num</code>)</li> <li>set_domain_warp_type(handle: <code>Noise</code>, type: <code>NoiseDomainWarpType</code>)</li> <li>set_domain_warp_amp(handle: <code>Noise</code>, amp: <code>Num</code>)</li> </ul> <p> Noise.create(type: <code>NoiseType</code>) \u00b6 returns <code>Noise</code></p> <p>no docs found   </p> <p> Noise.create(type: <code>NoiseType</code>, seed: <code>Num</code>) \u00b6 returns <code>Noise</code></p> <p>no docs found   </p> <p> Noise.destroy(handle: <code>Noise</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.valid(handle: <code>Noise</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Noise.get2D(handle: <code>Noise</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Noise.get3D(handle: <code>Noise</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Noise.set_seed(handle: <code>Noise</code>, seed: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.domain_warp2D(handle: <code>Noise</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>Vec2</code></p> <p>no docs found   </p> <p> Noise.domain_warp3D(handle: <code>Noise</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>Vec3</code></p> <p>no docs found   </p> <p> Noise.set_rotation_type3D(handle: <code>Noise</code>, type: <code>NoiseRotationType3D</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.set_fractal_type(handle: <code>Noise</code>, type: <code>NoiseFractalType</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.set_fractal_octaves(handle: <code>Noise</code>, octaves: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.set_fractal_lacunarity(handle: <code>Noise</code>, lacunarity: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.set_fractal_gain(handle: <code>Noise</code>, gain: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.set_fractal_weighted_strength(handle: <code>Noise</code>, weighted_strength: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.set_fractal_ping_pong_strength(handle: <code>Noise</code>, ping_pong_strength: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.set_cellular_distance_func(handle: <code>Noise</code>, distance_func: <code>NoiseCellularDistanceFunc</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.set_cellular_return_type(handle: <code>Noise</code>, type: <code>NoiseCellularReturnType</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.set_cellular_jitter(handle: <code>Noise</code>, jitter: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.set_domain_warp_type(handle: <code>Noise</code>, type: <code>NoiseDomainWarpType</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.set_domain_warp_amp(handle: <code>Noise</code>, amp: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/noise/#noisecellulardistancefunc","title":"NoiseCellularDistanceFunc","text":"<p><code>import \"luxe: noise\" for NoiseCellularDistanceFunc</code></p> <p>no docs found</p> <ul> <li>euclidean</li> <li>euclidean_sq</li> <li>manhattan</li> <li>hybrid</li> </ul> <p> NoiseCellularDistanceFunc.euclidean \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseCellularDistanceFunc.euclidean_sq \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseCellularDistanceFunc.manhattan \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseCellularDistanceFunc.hybrid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/noise/#noisecellularreturntype","title":"NoiseCellularReturnType","text":"<p><code>import \"luxe: noise\" for NoiseCellularReturnType</code></p> <p>no docs found</p> <ul> <li>cell_value</li> <li>distance</li> <li>distance2</li> <li>distance2_add</li> <li>distance2_sub</li> <li>distance2_mul</li> <li>distance2_div</li> </ul> <p> NoiseCellularReturnType.cell_value \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseCellularReturnType.distance \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseCellularReturnType.distance2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseCellularReturnType.distance2_add \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseCellularReturnType.distance2_sub \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseCellularReturnType.distance2_mul \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseCellularReturnType.distance2_div \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/noise/#noisedomainwarptype","title":"NoiseDomainWarpType","text":"<p><code>import \"luxe: noise\" for NoiseDomainWarpType</code></p> <p>no docs found</p> <ul> <li>open_simplex2</li> <li>open_simplex2_reduced</li> <li>basic_grid</li> </ul> <p> NoiseDomainWarpType.open_simplex2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseDomainWarpType.open_simplex2_reduced \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseDomainWarpType.basic_grid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/noise/#noisefractaltype","title":"NoiseFractalType","text":"<p><code>import \"luxe: noise\" for NoiseFractalType</code></p> <p>no docs found</p> <ul> <li>none</li> <li>fbm</li> <li>ridged</li> <li>pingpong</li> <li>domain_warp_progressive</li> <li>domain_warp_independent</li> </ul> <p> NoiseFractalType.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseFractalType.fbm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseFractalType.ridged \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseFractalType.pingpong \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseFractalType.domain_warp_progressive \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseFractalType.domain_warp_independent \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/noise/#noiserotationtype3d","title":"NoiseRotationType3D","text":"<p><code>import \"luxe: noise\" for NoiseRotationType3D</code></p> <p>no docs found</p> <ul> <li>none</li> <li>improve_xy_planes</li> <li>improve_xz_planes</li> </ul> <p> NoiseRotationType3D.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseRotationType3D.improve_xy_planes \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseRotationType3D.improve_xz_planes \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/noise/#noisetype","title":"NoiseType","text":"<p><code>import \"luxe: noise\" for NoiseType</code></p> <p>no docs found</p> <ul> <li>open_simplex2</li> <li>open_simplex2s</li> <li>cellular</li> <li>perlin</li> <li>value_cubic</li> <li>value</li> </ul> <p> NoiseType.open_simplex2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseType.open_simplex2s \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseType.cellular \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseType.perlin \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseType.value_cubic \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseType.value \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/plot/","title":"Plot","text":""},{"location":"api/v/2025.1.1/plot/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/plot/#luxe-plot-module","title":"<code>luxe: plot</code> module","text":"<ul> <li>Plot </li> </ul>"},{"location":"api/v/2025.1.1/plot/#plot","title":"Plot","text":"<p><code>import \"luxe: plot\" for Plot</code></p> <p>A service API to plot values for games + debugging. Can plot values from anywhere as a counter or as a running history. Counter plots add values to their total and add the total to the history at the end of the frame.</p> <ul> <li>define(id: <code>String</code>, type: <code>PlotType</code>)</li> <li>define(id: <code>String</code>, type: <code>PlotType</code>, max_history: <code>Num</code>)</li> <li>update(id: <code>String</code>, value: <code>Num</code>)</li> <li>list()</li> <li>history(id: <code>String</code>)</li> <li>latest(id: <code>String</code>)</li> <li>average(id: <code>String</code>)</li> </ul> <p> Plot.define(id: <code>String</code>, type: <code>PlotType</code>) \u00b6 returns <code>unknown</code></p> <p>Define a new plot by id, with the given <code>type</code>. The max history defaults to 60 values if not specified.   </p> <p> Plot.define(id: <code>String</code>, type: <code>PlotType</code>, max_history: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Define a new plot by id, with the given <code>type</code> and <code>max_history</code> </p> <p> Plot.update(id: <code>String</code>, value: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Update a given plot by id, with the given <code>value</code>.  For <code>PlotType.normal</code> this will add the value to the history. For <code>PlotType.counter</code> this will add the value to the total so far this frame.   </p> <p> Plot.list() \u00b6 returns <code>unknown</code></p> <p>Get a list of plots defined, as string id (e.g Strings.get(id) is needed)   </p> <p> Plot.history(id: <code>String</code>) \u00b6 returns <code>List</code></p> <p>Get the history for a given plot, as a list of values   </p> <p> Plot.latest(id: <code>String</code>) \u00b6 returns <code>Num</code></p> <p>Get the latest value for a given plot   </p> <p> Plot.average(id: <code>String</code>) \u00b6 returns <code>Num</code></p> <p>Get the average value for a given plot, averaging out the history   </p>"},{"location":"api/v/2025.1.1/pqueue/","title":"Pqueue","text":""},{"location":"api/v/2025.1.1/pqueue/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/pqueue/#luxe-pqueue-module","title":"<code>luxe: pqueue</code> module","text":"<ul> <li>MaxPQ </li> <li>MinPQ </li> </ul>"},{"location":"api/v/2025.1.1/pqueue/#maxpq","title":"MaxPQ","text":"<p><code>import \"luxe: pqueue\" for MaxPQ</code></p> <p>A priority queue that returns larger values first.</p> <p>A priority queue holds various values and will sort them into an ordered list by priority. When queried via <code>peek</code> or values removed via <code>pop</code> the values are sorted.</p> <ul> <li>value</li> <li>count</li> <li>new()</li> <li>new(get_priority_fn: <code>Any</code>)</li> <li>add(value: <code>Any</code>)</li> <li>pop()</li> <li>peek()</li> </ul> <p> MaxPQ.value \u00b6 returns <code>unknown</code></p> <p>Returns the internal array. Read only, modify the queue via <code>add</code> and <code>pop</code>.   </p> <p> MaxPQ.count \u00b6 returns <code>unknown</code></p> <p>Returns the number of items in the priority queue.   </p> <p> MaxPQ.new() \u00b6 returns <code>MaxPQ</code></p> <p>Create a new priority queue.   </p> <p> MaxPQ.new(get_priority_fn: <code>Any</code>) \u00b6 returns <code>MaxPQ</code></p> <p>Create a new priority queue with a callback for the priority of a value. The callback takes one parameter, the value, and should return a priority number  for that value.   </p> <p> MaxPQ.add(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Add a value to the queue.   </p> <p> MaxPQ.pop() \u00b6 returns <code>unknown</code></p> <p>Return the next value, removing it from the queue.   </p> <p> MaxPQ.peek() \u00b6 returns <code>unknown</code></p> <p>Return the next value without removing it from the queue.   </p>"},{"location":"api/v/2025.1.1/pqueue/#minpq","title":"MinPQ","text":"<p><code>import \"luxe: pqueue\" for MinPQ</code></p> <p>A priority queue that returns smaller values first.</p> <p>A priority queue holds various values and will sort them into an ordered list by priority. When queried via <code>peek</code> or values removed via <code>pop</code> the values are sorted.</p> <ul> <li>value</li> <li>count</li> <li>new()</li> <li>new(get_priority_fn: <code>Any</code>)</li> <li>add(value: <code>Any</code>)</li> <li>pop()</li> <li>peek()</li> </ul> <p> MinPQ.value \u00b6 returns <code>unknown</code></p> <p>Returns the internal array. Read only, modify the queue via <code>add</code> and <code>pop</code>.   </p> <p> MinPQ.count \u00b6 returns <code>unknown</code></p> <p>Returns the number of items in the priority queue.   </p> <p> MinPQ.new() \u00b6 returns <code>MinPQ</code></p> <p>Create a new priority queue.   </p> <p> MinPQ.new(get_priority_fn: <code>Any</code>) \u00b6 returns <code>MinPQ</code></p> <p>Create a new priority queue with a callback for the priority of a value. The callback takes one parameter, the value, and should return a priority number  for that value.   </p> <p> MinPQ.add(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Add a value to the queue.   </p> <p> MinPQ.pop() \u00b6 returns <code>unknown</code></p> <p>Return the next value, removing it from the queue.   </p> <p> MinPQ.peek() \u00b6 returns <code>unknown</code></p> <p>Return the next value without removing it from the queue.   </p>"},{"location":"api/v/2025.1.1/regex/","title":"Regex","text":""},{"location":"api/v/2025.1.1/regex/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/regex/#luxe-regex-module","title":"<code>luxe: regex</code> module","text":"<ul> <li>RegexInfo </li> <li>RegexMatch </li> <li>RegexSubMatch </li> </ul>"},{"location":"api/v/2025.1.1/regex/#regexinfo","title":"RegexInfo","text":"<p><code>import \"luxe: regex\" for RegexInfo</code></p> <p>A regular expression result, containing one or more matches</p> <ul> <li>matched</li> <li>match</li> <li>[index : Num]</li> </ul> <p> RegexInfo.matched \u00b6 returns <code>Bool</code></p> <p>True if there was any match   </p> <p> RegexInfo.match \u00b6 returns <code>List</code></p> <p>Returns the match results, a List of <code>RegexMatch</code>. Only valid if <code>matched</code> is true   </p> <p> RegexInfo [index : Num] \u00b6 returns <code>RegexMatch</code></p> <p>Convenience to access a specific match by index   </p>"},{"location":"api/v/2025.1.1/regex/#regexmatch","title":"RegexMatch","text":"<p><code>import \"luxe: regex\" for RegexMatch</code></p> <p>A single match in a regular expression result.</p> <ul> <li>subcount</li> <li>string</li> <li>offset</li> <li>count</li> <li>index</li> <li>[index : Num]</li> </ul> <p> RegexMatch.subcount \u00b6 returns <code>Num</code></p> <p>Number of sub matches (groups), not including 0 which is the full match   </p> <p> RegexMatch.string \u00b6 returns <code>String</code></p> <p>The matched string   </p> <p> RegexMatch.offset \u00b6 returns <code>Num</code></p> <p>The offset of the match in the original string   </p> <p> RegexMatch.count \u00b6 returns <code>Num</code></p> <p>The length of the match string   </p> <p> RegexMatch.index \u00b6 returns <code>Num</code></p> <p>Index of this match in the match results   </p> <p> RegexMatch [index : Num] \u00b6 returns <code>RegexSubMatch</code></p> <p>Access to a specific group/sub match by index. 0 is the full match, groups are 1-indexed   </p>"},{"location":"api/v/2025.1.1/regex/#regexsubmatch","title":"RegexSubMatch","text":"<p><code>import \"luxe: regex\" for RegexSubMatch</code></p> <p>A single group/sub match in a regular expression match.</p> <ul> <li>count</li> <li>offset</li> <li>string</li> <li>index</li> <li>[index : Num]</li> </ul> <p> RegexSubMatch.count \u00b6 returns <code>Num</code></p> <p>The length of the sub/group   </p> <p> RegexSubMatch.offset \u00b6 returns <code>Num</code></p> <p>The offset of the sub/group in the original match   </p> <p> RegexSubMatch.string \u00b6 returns <code>String</code></p> <p>The string of the sub/group   </p> <p> RegexSubMatch.index \u00b6 returns <code>Num</code></p> <p>The index of this sub/group in the match   </p> <p> RegexSubMatch [index : Num] \u00b6 returns <code>Any</code></p> <p>Returns info about this sub match by index. 0 returns <code>count</code>, 1 returns <code>offset</code>, 2 returns <code>string</code> </p>"},{"location":"api/v/2025.1.1/render/","title":"Render","text":""},{"location":"api/v/2025.1.1/render/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/render/#luxe-render-module","title":"<code>luxe: render</code> module","text":"<ul> <li>Atlas </li> <li>BlendFactor </li> <li>BlendOperation </li> <li>Clip </li> <li>ColorWriteMask </li> <li>CompareFunction </li> <li>ComputeLayerDesc </li> <li>ComputeLayerInput </li> <li>CullMode </li> <li>Geometry </li> <li>Image </li> <li>ImageDesc </li> <li>ImageType </li> <li>ImageUsage </li> <li>IndexType </li> <li>InputBuffer </li> <li>LayerCompute </li> <li>LayerPass </li> <li>LoadAction </li> <li>Material </li> <li>MaterialDesc </li> <li>MaterialFunction </li> <li>MaterialInput </li> <li>MaterialInputBlock </li> <li>MaterialInputImage </li> <li>MaterialInputType </li> <li>MaterialReplace </li> <li>PassLayerDesc </li> <li>PixelFormat </li> <li>Pose </li> <li>PoseGraph </li> <li>PoseNode </li> <li>Primitive </li> <li>Render </li> <li>RenderDest </li> <li>RenderDestColor </li> <li>RenderDestDepth </li> <li>RenderDestStencil </li> <li>RenderLayerDesc </li> <li>RenderPathContext </li> <li>RenderViewDesc </li> <li>SamplerAddressMode </li> <li>SamplerMinMagFilter </li> <li>SamplerMipFilter </li> <li>SamplerState </li> <li>SortType </li> <li>StencilOperation </li> <li>StoreAction </li> <li>TextAlign </li> <li>TextAttrType </li> <li>TextWrapMode </li> <li>VertexAttr </li> <li>VertexAttrFormat </li> <li>VertexFormat </li> <li>VertexInputRate </li> <li>VertexLayout </li> <li>Winding </li> </ul>"},{"location":"api/v/2025.1.1/render/#atlas","title":"Atlas","text":"<p><code>import \"luxe: render\" for Atlas</code></p> <p>no docs found</p> <ul> <li>create(size: <code>Any</code>, material: <code>Any</code>)</li> <li>destroy(atlas: <code>Any</code>)</li> <li>valid(atlas: <code>Any</code>)</li> <li>get_size(atlas: <code>Any</code>)</li> <li>get_material(atlas: <code>Any</code>)</li> <li>rect_add(atlas: <code>Any</code>, atlas_image_id: <code>Any</code>, frame: <code>Any</code>, rect: <code>Any</code>, rotated: <code>Any</code>)</li> <li>rect_remove(atlas: <code>Any</code>, atlas_image_id: <code>Any</code>)</li> <li>rect_get_frame(atlas: <code>Any</code>, atlas_image: <code>Any</code>)</li> <li>rect_get_rect(atlas: <code>Any</code>, atlas_image: <code>Any</code>)</li> <li>rect_get_rotated(atlas: <code>Any</code>, atlas_image: <code>Any</code>)</li> <li>rect_exists(atlas: <code>Any</code>, atlas_image: <code>Any</code>)</li> </ul> <p> Atlas.create(size: <code>Any</code>, material: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Atlas.destroy(atlas: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Atlas.valid(atlas: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Atlas.get_size(atlas: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Atlas.get_material(atlas: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Atlas.rect_add(atlas: <code>Any</code>, atlas_image_id: <code>Any</code>, frame: <code>Any</code>, rect: <code>Any</code>, rotated: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Atlas.rect_remove(atlas: <code>Any</code>, atlas_image_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Atlas.rect_get_frame(atlas: <code>Any</code>, atlas_image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Atlas.rect_get_rect(atlas: <code>Any</code>, atlas_image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Atlas.rect_get_rotated(atlas: <code>Any</code>, atlas_image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Atlas.rect_exists(atlas: <code>Any</code>, atlas_image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#blendfactor","title":"BlendFactor","text":"<p><code>import \"luxe: render\" for BlendFactor</code></p> <p>no docs found</p> <ul> <li>zero</li> <li>one</li> <li>source_color</li> <li>one_minus_source_color</li> <li>source_alpha</li> <li>one_minus_source_alpha</li> <li>destination_color</li> <li>one_minus_destination_color</li> <li>destination_alpha</li> <li>one_minus_destination_alpha</li> <li>source_alpha_saturated</li> <li>blend_color</li> <li>one_minus_blend_color</li> <li>blend_alpha</li> <li>one_minus_blend_alpha</li> <li>invalid</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> BlendFactor.zero \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.one \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.source_color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.one_minus_source_color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.source_alpha \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.one_minus_source_alpha \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.destination_color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.one_minus_destination_color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.destination_alpha \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.one_minus_destination_alpha \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.source_alpha_saturated \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.blend_color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.one_minus_blend_color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.blend_alpha \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.one_minus_blend_alpha \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.invalid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#blendoperation","title":"BlendOperation","text":"<p><code>import \"luxe: render\" for BlendOperation</code></p> <p>no docs found</p> <ul> <li>add</li> <li>subtract</li> <li>reverse_subtract</li> <li>min</li> <li>max</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> BlendOperation.add \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendOperation.subtract \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendOperation.reverse_subtract \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendOperation.min \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendOperation.max \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendOperation.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#clip","title":"Clip","text":"<p><code>import \"luxe: render\" for Clip</code></p> <p>no docs found</p> <ul> <li>get_duration(clip: <code>Clip</code>)</li> </ul> <p> Clip.get_duration(clip: <code>Clip</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#colorwritemask","title":"ColorWriteMask","text":"<p><code>import \"luxe: render\" for ColorWriteMask</code></p> <p>no docs found</p> <ul> <li>none</li> <li>red</li> <li>green</li> <li>blue</li> <li>alpha</li> <li>all</li> <li>invalid</li> <li>from_map(value: <code>Any</code>)</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> ColorWriteMask.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorWriteMask.red \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorWriteMask.green \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorWriteMask.blue \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorWriteMask.alpha \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorWriteMask.all \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorWriteMask.invalid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorWriteMask.from_map(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorWriteMask.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#comparefunction","title":"CompareFunction","text":"<p><code>import \"luxe: render\" for CompareFunction</code></p> <p>no docs found</p> <ul> <li>never</li> <li>less</li> <li>equal</li> <li>less_equal</li> <li>greater</li> <li>not_equal</li> <li>greater_equal</li> <li>always</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> CompareFunction.never \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CompareFunction.less \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CompareFunction.equal \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CompareFunction.less_equal \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CompareFunction.greater \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CompareFunction.not_equal \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CompareFunction.greater_equal \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CompareFunction.always \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CompareFunction.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#computelayerdesc","title":"ComputeLayerDesc","text":"<p><code>import \"luxe: render\" for ComputeLayerDesc</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>display_id</li> <li>display_id=(v : String)</li> <li>compute_id</li> <li>compute_id=(v : String)</li> <li>dimensions</li> <li>inputs</li> <li>inputs=(v : List)</li> <li>x</li> <li>x=(v : Num)</li> <li>y</li> <li>y=(v : Num)</li> <li>z</li> <li>z=(v : Num)</li> </ul> <p> ComputeLayerDesc.new() \u00b6 returns <code>ComputeLayerDesc</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.display_id \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.display_id=(v : String) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.compute_id \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.compute_id=(v : String) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.dimensions \u00b6 returns <code>Float3</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.inputs \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.inputs=(v : List) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.x \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.x=(v : Num) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.y \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.y=(v : Num) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.z \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.z=(v : Num) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#computelayerinput","title":"ComputeLayerInput","text":"<p><code>import \"luxe: render\" for ComputeLayerInput</code></p> <p>no docs found</p> <ul> <li>library</li> <li>type</li> <li>input</li> <li>buffer</li> <li>new(library: <code>Any</code>, type: <code>String</code>, input: <code>String</code>, buffer: <code>InputBuffer</code>)</li> </ul> <p> ComputeLayerInput.library \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> ComputeLayerInput.type \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> ComputeLayerInput.input \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> ComputeLayerInput.buffer \u00b6 returns <code>InputBuffer</code></p> <p>no docs found   </p> <p> ComputeLayerInput.new(library: <code>Any</code>, type: <code>String</code>, input: <code>String</code>, buffer: <code>InputBuffer</code>) \u00b6 returns <code>ComputeLayerInput</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#cullmode","title":"CullMode","text":"<p><code>import \"luxe: render\" for CullMode</code></p> <p>no docs found</p> <ul> <li>none</li> <li>front</li> <li>back</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> CullMode.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CullMode.front \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CullMode.back \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CullMode.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#geometry","title":"Geometry","text":"<p><code>import \"luxe: render\" for Geometry</code></p> <p>no docs found</p> <ul> <li>create(primitive: <code>Any</code>, material: <code>Any</code>, index_count: <code>Any</code>, index_type: <code>Any</code>, index_buffer: <code>Any</code>)</li> <li>create(primitive: <code>Any</code>, material: <code>Any</code>, vert_count: <code>Any</code>)</li> <li>destroy(geo: <code>Any</code>)</li> <li>valid(geo: <code>Any</code>)</li> <li>set_world_matrix(geo: <code>Any</code>, world: <code>Any</code>)</li> <li>set_vertex_buffer(geo: <code>Any</code>, index: <code>Any</code>, vertex_buffer: <code>Any</code>)</li> <li>get_vertex_buffer(geo: <code>Any</code>, index: <code>Any</code>)</li> <li>get_index_buffer(geo: <code>Any</code>)</li> <li>set_instance_count(geo: <code>Any</code>, count: <code>Any</code>)</li> <li>get_instance_count(geo: <code>Any</code>)</li> <li>set_vert_count(geo: <code>Any</code>, count: <code>Any</code>)</li> <li>set_material(geo: <code>Any</code>, material: <code>Any</code>)</li> <li>set_stencil_references(geo: <code>Any</code>, back: <code>Any</code>, front: <code>Any</code>)</li> <li>set_stencil_reference(geo: <code>Any</code>, value: <code>Any</code>)</li> <li>set_aabb(geo: <code>Any</code>, center_x: <code>Any</code>, center_y: <code>Any</code>, center_z: <code>Any</code>, radius_x: <code>Any</code>, radius_y: <code>Any</code>, radius_z: <code>Any</code>)</li> <li>get_aabb(geo: <code>Any</code>)</li> <li>get_world_obb(geo: <code>Any</code>)</li> <li>get_vert_count(geo: <code>Any</code>)</li> <li>get_material(geo: <code>Any</code>)</li> <li>obb_intersect_ray(geo: <code>Any</code>, ray_x: <code>Any</code>, ray_y: <code>Any</code>, ray_z: <code>Any</code>, ray_dir_x: <code>Any</code>, ray_dir_y: <code>Any</code>, ray_dir_z: <code>Any</code>)</li> <li>layer_include_add(geo: <code>Any</code>, layer_id: <code>Any</code>)</li> <li>layer_include_remove(geo: <code>Any</code>, layer_id: <code>Any</code>)</li> <li>layer_exclude_add(geo: <code>Any</code>, layer_id: <code>Any</code>)</li> <li>layer_exclude_remove(geo: <code>Any</code>, layer_id: <code>Any</code>)</li> </ul> <p> Geometry.create(primitive: <code>Any</code>, material: <code>Any</code>, index_count: <code>Any</code>, index_type: <code>Any</code>, index_buffer: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.create(primitive: <code>Any</code>, material: <code>Any</code>, vert_count: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.destroy(geo: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.valid(geo: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.set_world_matrix(geo: <code>Any</code>, world: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.set_vertex_buffer(geo: <code>Any</code>, index: <code>Any</code>, vertex_buffer: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.get_vertex_buffer(geo: <code>Any</code>, index: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.get_index_buffer(geo: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.set_instance_count(geo: <code>Any</code>, count: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.get_instance_count(geo: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.set_vert_count(geo: <code>Any</code>, count: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.set_material(geo: <code>Any</code>, material: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.set_stencil_references(geo: <code>Any</code>, back: <code>Any</code>, front: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.set_stencil_reference(geo: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.set_aabb(geo: <code>Any</code>, center_x: <code>Any</code>, center_y: <code>Any</code>, center_z: <code>Any</code>, radius_x: <code>Any</code>, radius_y: <code>Any</code>, radius_z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.get_aabb(geo: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.get_world_obb(geo: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.get_vert_count(geo: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.get_material(geo: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.obb_intersect_ray(geo: <code>Any</code>, ray_x: <code>Any</code>, ray_y: <code>Any</code>, ray_z: <code>Any</code>, ray_dir_x: <code>Any</code>, ray_dir_y: <code>Any</code>, ray_dir_z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.layer_include_add(geo: <code>Any</code>, layer_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.layer_include_remove(geo: <code>Any</code>, layer_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.layer_exclude_add(geo: <code>Any</code>, layer_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.layer_exclude_remove(geo: <code>Any</code>, layer_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#image","title":"Image","text":"<p><code>import \"luxe: render\" for Image</code></p> <p>no docs found</p> <ul> <li>create(desc: <code>Any</code>)</li> <li>redefine(image: <code>Any</code>, desc: <code>Any</code>)</li> <li>destroy(name: <code>Any</code>)</li> <li>valid(name: <code>Any</code>)</li> <li>get_resource(name: <code>Any</code>)</li> <li>generate_mipmaps(image: <code>Any</code>)</li> <li>update(image: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, level: <code>Any</code>, slice: <code>Any</code>, bytes: <code>Any</code>)</li> <li>get_type(image: <code>Any</code>)</li> <li>get_width(image: <code>Any</code>)</li> <li>get_height(image: <code>Any</code>)</li> <li>get_depth(image: <code>Any</code>)</li> <li>get_pixel_format(image: <code>Any</code>)</li> <li>get_mipmap_levels(image: <code>Any</code>)</li> <li>get_array_length(image: <code>Any</code>)</li> <li>get_sample_count(image: <code>Any</code>)</li> <li>get_bytes(image: <code>Any</code>, into_bytes: <code>Any</code>)</li> </ul> <p> Image.create(desc: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.redefine(image: <code>Any</code>, desc: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.destroy(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.valid(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.get_resource(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.generate_mipmaps(image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.update(image: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, level: <code>Any</code>, slice: <code>Any</code>, bytes: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.get_type(image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.get_width(image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.get_height(image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.get_depth(image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.get_pixel_format(image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.get_mipmap_levels(image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.get_array_length(image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.get_sample_count(image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.get_bytes(image: <code>Any</code>, into_bytes: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#imagedesc","title":"ImageDesc","text":"<p><code>import \"luxe: render\" for ImageDesc</code></p> <p>no docs found</p> <ul> <li>display_id</li> <li>display_id=(v : Any)</li> <li>type</li> <li>type=(v : Any)</li> <li>pixel_format</li> <li>pixel_format=(v : Any)</li> <li>width</li> <li>width=(v : Any)</li> <li>height</li> <li>height=(v : Any)</li> <li>depth</li> <li>depth=(v : Any)</li> <li>mipmap_levels</li> <li>mipmap_levels=(v : Any)</li> <li>array_length</li> <li>array_length=(v : Any)</li> <li>sample_count</li> <li>sample_count=(v : Any)</li> <li>usage</li> <li>usage=(v : Any)</li> <li>new()</li> </ul> <p> ImageDesc.display_id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.display_id=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.type \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.type=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.pixel_format \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.pixel_format=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.width \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.width=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.height \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.height=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.depth \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.depth=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.mipmap_levels \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.mipmap_levels=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.array_length \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.array_length=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.sample_count \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.sample_count=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.usage \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.usage=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.new() \u00b6 returns <code>ImageDesc</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#imagetype","title":"ImageType","text":"<p><code>import \"luxe: render\" for ImageType</code></p> <p>no docs found</p> <ul> <li>invalid</li> <li>image1D</li> <li>image1DArray</li> <li>image2D</li> <li>image2DArray</li> <li>image2DMultisample</li> <li>imageCube</li> <li>imageCubeArray</li> <li>image3D</li> <li>from_string(value: <code>Any</code>)</li> <li>name(value: <code>Any</code>)</li> </ul> <p> ImageType.invalid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageType.image1D \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageType.image1DArray \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageType.image2D \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageType.image2DArray \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageType.image2DMultisample \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageType.imageCube \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageType.imageCubeArray \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageType.image3D \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageType.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageType.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#imageusage","title":"ImageUsage","text":"<p><code>import \"luxe: render\" for ImageUsage</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>shader_read</li> <li>shader_write</li> <li>shader_read_write</li> <li>render_target</li> <li>pixel_format_view</li> <li>stream</li> </ul> <p> ImageUsage.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageUsage.shader_read \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageUsage.shader_write \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageUsage.shader_read_write \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageUsage.render_target \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageUsage.pixel_format_view \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageUsage.stream \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#indextype","title":"IndexType","text":"<p><code>import \"luxe: render\" for IndexType</code></p> <p>no docs found</p> <ul> <li>none</li> <li>u16</li> <li>u32</li> <li>size_of(value: <code>Any</code>)</li> </ul> <p> IndexType.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> IndexType.u16 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> IndexType.u32 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> IndexType.size_of(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#inputbuffer","title":"InputBuffer","text":"<p><code>import \"luxe: render\" for InputBuffer</code></p> <p>no docs found</p> <ul> <li>create(library: <code>String</code>, type: <code>String</code>, input: <code>String</code>, N: <code>Num</code>)</li> <li>set(buffer: <code>InputBuffer</code>, data: <code>String</code>)</li> </ul> <p> InputBuffer.create(library: <code>String</code>, type: <code>String</code>, input: <code>String</code>, N: <code>Num</code>) \u00b6 returns <code>InputBuffer</code></p> <p>no docs found   </p> <p> InputBuffer.set(buffer: <code>InputBuffer</code>, data: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#layercompute","title":"LayerCompute","text":"<p><code>import \"luxe: render\" for LayerCompute</code></p> <p>no docs found</p> <ul> <li>id</li> <li>id=(v : Any)</li> <li>new(desc: <code>ComputeLayerDesc</code>)</li> <li>update(desc: <code>ComputeLayerDesc</code>)</li> <li>queue(path: <code>RenderPath</code>)</li> </ul> <p> LayerCompute.id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LayerCompute.id=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LayerCompute.new(desc: <code>ComputeLayerDesc</code>) \u00b6 returns <code>LayerCompute</code></p> <p>no docs found   </p> <p> LayerCompute.update(desc: <code>ComputeLayerDesc</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LayerCompute.queue(path: <code>RenderPath</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#layerpass","title":"LayerPass","text":"<p><code>import \"luxe: render\" for LayerPass</code></p> <p>no docs found</p> <ul> <li>id</li> <li>id=(v : Any)</li> <li>new(pass: <code>Any</code>)</li> <li>queue(path: <code>Any</code>)</li> <li>new(path: <code>Any</code>, pass: <code>Any</code>)</li> <li>create_dest(pass: <code>Any</code>)</li> <li>update_material(desc: <code>Any</code>)</li> <li>create_material(pass: <code>PassLayerDesc</code>)</li> </ul> <p> LayerPass.id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LayerPass.id=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LayerPass.new(pass: <code>Any</code>) \u00b6 returns <code>LayerPass</code></p> <p>no docs found   </p> <p> LayerPass.queue(path: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LayerPass.new(path: <code>Any</code>, pass: <code>Any</code>) \u00b6 returns <code>LayerPass</code></p> <p>no docs found   </p> <p> LayerPass.create_dest(pass: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LayerPass.update_material(desc: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LayerPass.create_material(pass: <code>PassLayerDesc</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#loadaction","title":"LoadAction","text":"<p><code>import \"luxe: render\" for LoadAction</code></p> <p>no docs found</p> <ul> <li>dont_care</li> <li>load</li> <li>clear</li> </ul> <p> LoadAction.dont_care \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LoadAction.load \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LoadAction.clear \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#material","title":"Material","text":"<p><code>import \"luxe: render\" for Material</code></p> <p>no docs found</p> <ul> <li>create(basis_type: <code>Any</code>)</li> <li>clone(material: <code>Any</code>)</li> <li>destroy(material: <code>Any</code>)</li> <li>valid(material: <code>Any</code>)</li> <li>undefine(name: <code>Any</code>)</li> <li>get_source_id(material: <code>Any</code>)</li> <li>set_source_id(material: <code>Any</code>, source_id: <code>Any</code>)</li> <li>set_stencil_references(material: <code>Any</code>, back: <code>Any</code>, front: <code>Any</code>)</li> <li>set_stencil_reference(material: <code>Any</code>, value: <code>Any</code>)</li> <li>get_input_image(material: <code>Any</code>, name: <code>Any</code>)</li> <li>has_input(material: <code>Any</code>, name: <code>Any</code>)</li> <li>is_input_array(material: <code>Any</code>, name: <code>Any</code>)</li> <li>set_input(material: <code>Any</code>, name: <code>Any</code>, value: <code>Any</code>)</li> <li>define(name: <code>Any</code>, desc: <code>Any</code>)</li> </ul> <p> Material.create(basis_type: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.clone(material: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.destroy(material: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.valid(material: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.undefine(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.get_source_id(material: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.set_source_id(material: <code>Any</code>, source_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.set_stencil_references(material: <code>Any</code>, back: <code>Any</code>, front: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.set_stencil_reference(material: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.get_input_image(material: <code>Any</code>, name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.has_input(material: <code>Any</code>, name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.is_input_array(material: <code>Any</code>, name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.set_input(material: <code>Any</code>, name: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.define(name: <code>Any</code>, desc: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#materialdesc","title":"MaterialDesc","text":"<p><code>import \"luxe: render\" for MaterialDesc</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>vertex_format</li> <li>vertex_format=(v : Any)</li> <li>vertex</li> <li>vertex=(v : Any)</li> <li>fragment</li> <li>fragment=(v : Any)</li> <li>geometry</li> <li>geometry=(v : Any)</li> <li>depth_bias_enabled</li> <li>depth_bias_enabled=(v : Any)</li> <li>depth_bias</li> <li>depth_bias=(v : Any)</li> <li>depth_bias_slope_scale</li> <li>depth_bias_slope_scale=(v : Any)</li> <li>depth_test</li> <li>depth_test=(v : Any)</li> <li>depth_write</li> <li>depth_write=(v : Any)</li> <li>depth_compare</li> <li>depth_compare=(v : Any)</li> <li>stencil_test</li> <li>stencil_test=(v : Any)</li> <li>write_mask</li> <li>write_mask=(v : Any)</li> <li>blending</li> <li>blending=(v : Any)</li> <li>alpha_blend</li> <li>alpha_blend=(v : Any)</li> <li>rgb_blend</li> <li>rgb_blend=(v : Any)</li> <li>src_alpha</li> <li>src_alpha=(v : Any)</li> <li>src_rgb</li> <li>src_rgb=(v : Any)</li> <li>dest_alpha</li> <li>dest_alpha=(v : Any)</li> <li>dest_rgb</li> <li>dest_rgb=(v : Any)</li> <li>blend_color</li> <li>blend_color=(v : Any)</li> <li>cull</li> <li>cull=(v : Any)</li> <li>winding</li> <li>winding=(v : Any)</li> <li>layers</li> <li>layers=(v : Any)</li> <li>inputs</li> <li>inputs=(v : Any)</li> <li>blocks</li> <li>blocks=(v : Any)</li> <li>replace</li> <li>replace=(v : Any)</li> <li>stencil_back_failure_stencil</li> <li>stencil_back_failure_stencil=(v : Any)</li> <li>stencil_back_failure_depth</li> <li>stencil_back_failure_depth=(v : Any)</li> <li>stencil_back_pass_depth_stencil</li> <li>stencil_back_pass_depth_stencil=(v : Any)</li> <li>stencil_back_compare</li> <li>stencil_back_compare=(v : Any)</li> <li>stencil_back_mask_read</li> <li>stencil_back_mask_read=(v : Any)</li> <li>stencil_back_mask_write</li> <li>stencil_back_mask_write=(v : Any)</li> <li>stencil_back_reference</li> <li>stencil_back_reference=(v : Any)</li> <li>stencil_front_failure_stencil</li> <li>stencil_front_failure_stencil=(v : Any)</li> <li>stencil_front_failure_depth</li> <li>stencil_front_failure_depth=(v : Any)</li> <li>stencil_front_pass_depth_stencil</li> <li>stencil_front_pass_depth_stencil=(v : Any)</li> <li>stencil_front_compare</li> <li>stencil_front_compare=(v : Any)</li> <li>stencil_front_mask_read</li> <li>stencil_front_mask_read=(v : Any)</li> <li>stencil_front_mask_write</li> <li>stencil_front_mask_write=(v : Any)</li> <li>stencil_front_reference</li> <li>stencil_front_reference=(v : Any)</li> </ul> <p> MaterialDesc.new() \u00b6 returns <code>MaterialDesc</code></p> <p>no docs found   </p> <p> MaterialDesc.vertex_format \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.vertex_format=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.vertex \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.vertex=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.fragment \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.fragment=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.geometry \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.geometry=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.depth_bias_enabled \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.depth_bias_enabled=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.depth_bias \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.depth_bias=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.depth_bias_slope_scale \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.depth_bias_slope_scale=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.depth_test \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.depth_test=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.depth_write \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.depth_write=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.depth_compare \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.depth_compare=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_test \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_test=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.write_mask \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.write_mask=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.blending \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.blending=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.alpha_blend \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.alpha_blend=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.rgb_blend \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.rgb_blend=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.src_alpha \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.src_alpha=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.src_rgb \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.src_rgb=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.dest_alpha \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.dest_alpha=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.dest_rgb \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.dest_rgb=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.blend_color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.blend_color=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.cull \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.cull=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.winding \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.winding=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.layers \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.layers=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.inputs \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.inputs=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.blocks \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.blocks=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.replace \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.replace=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_failure_stencil \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_failure_stencil=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_failure_depth \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_failure_depth=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_pass_depth_stencil \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_pass_depth_stencil=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_compare \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_compare=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_mask_read \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_mask_read=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_mask_write \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_mask_write=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_reference \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_reference=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_failure_stencil \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_failure_stencil=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_failure_depth \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_failure_depth=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_pass_depth_stencil \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_pass_depth_stencil=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_compare \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_compare=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_mask_read \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_mask_read=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_mask_write \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_mask_write=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_reference \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_reference=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#materialfunction","title":"MaterialFunction","text":"<p><code>import \"luxe: render\" for MaterialFunction</code></p> <p>no docs found</p> <ul> <li>library</li> <li>library=(v : Any)</li> <li>function</li> <li>function=(v : Any)</li> <li>new()</li> </ul> <p> MaterialFunction.library \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialFunction.library=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialFunction.function \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialFunction.function=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialFunction.new() \u00b6 returns <code>MaterialFunction</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#materialinput","title":"MaterialInput","text":"<p><code>import \"luxe: render\" for MaterialInput</code></p> <p>no docs found</p> <ul> <li>name</li> <li>name=(name : Any)</li> <li>type</li> <li>type=(type : Any)</li> <li>value</li> <li>value=(value : Any)</li> <li>count</li> <li>count=(count : Any)</li> <li>new()</li> <li>new(name: <code>Any</code>, type: <code>Any</code>, value: <code>Any</code>, count: <code>Any</code>)</li> <li>new(name: <code>Any</code>, type: <code>Any</code>, value: <code>Any</code>)</li> <li>init(name: <code>Any</code>, type: <code>Any</code>, value: <code>Any</code>, count: <code>Any</code>)</li> </ul> <p> MaterialInput.name \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInput.name=(name : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInput.type \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInput.type=(type : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInput.value \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInput.value=(value : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInput.count \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInput.count=(count : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInput.new() \u00b6 returns <code>MaterialInput</code></p> <p>no docs found   </p> <p> MaterialInput.new(name: <code>Any</code>, type: <code>Any</code>, value: <code>Any</code>, count: <code>Any</code>) \u00b6 returns <code>MaterialInput</code></p> <p>no docs found   </p> <p> MaterialInput.new(name: <code>Any</code>, type: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>MaterialInput</code></p> <p>no docs found   </p> <p> MaterialInput.init(name: <code>Any</code>, type: <code>Any</code>, value: <code>Any</code>, count: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#materialinputblock","title":"MaterialInputBlock","text":"<p><code>import \"luxe: render\" for MaterialInputBlock</code></p> <p>no docs found</p> <ul> <li>get_defined(name: <code>Any</code>)</li> <li>has_input(block: <code>Any</code>, name: <code>Any</code>)</li> <li>is_input_array(block: <code>Any</code>, name: <code>Any</code>)</li> <li>set_floats(block: <code>MaterialInputBlock</code>, name: <code>String</code>, value: <code>Floats</code>)</li> <li>set_bytes(block: <code>MaterialInputBlock</code>, name: <code>String</code>, value: <code>Bytes</code>)</li> <li>set(block: <code>Any</code>, name: <code>Any</code>, value: <code>Any</code>)</li> </ul> <p> MaterialInputBlock.get_defined(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputBlock.has_input(block: <code>Any</code>, name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputBlock.is_input_array(block: <code>Any</code>, name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputBlock.set_floats(block: <code>MaterialInputBlock</code>, name: <code>String</code>, value: <code>Floats</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputBlock.set_bytes(block: <code>MaterialInputBlock</code>, name: <code>String</code>, value: <code>Bytes</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputBlock.set(block: <code>Any</code>, name: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#materialinputimage","title":"MaterialInputImage","text":"<p><code>import \"luxe: render\" for MaterialInputImage</code></p> <p>no docs found</p> <ul> <li>image</li> <li>image=(image : Any)</li> <li>type</li> <li>type=(type : Any)</li> <li>sampler</li> <li>sampler=(value : Any)</li> <li>new()</li> <li>new(in_image: <code>Any</code>, in_sampler: <code>Any</code>)</li> <li>new(in_image: <code>Any</code>, in_sampler: <code>Any</code>, in_type: <code>Any</code>)</li> </ul> <p> MaterialInputImage.image \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputImage.image=(image : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputImage.type \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputImage.type=(type : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputImage.sampler \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputImage.sampler=(value : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputImage.new() \u00b6 returns <code>MaterialInputImage</code></p> <p>no docs found   </p> <p> MaterialInputImage.new(in_image: <code>Any</code>, in_sampler: <code>Any</code>) \u00b6 returns <code>MaterialInputImage</code></p> <p>no docs found   </p> <p> MaterialInputImage.new(in_image: <code>Any</code>, in_sampler: <code>Any</code>, in_type: <code>Any</code>) \u00b6 returns <code>MaterialInputImage</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#materialinputtype","title":"MaterialInputType","text":"<p><code>import \"luxe: render\" for MaterialInputType</code></p> <p>no docs found</p> <ul> <li>invalid</li> <li>bool</li> <li>bool2</li> <li>bool4</li> <li>int</li> <li>int2</li> <li>int4</li> <li>uint</li> <li>uint2</li> <li>uint4</li> <li>float</li> <li>float2</li> <li>float4</li> <li>mat4</li> <li>image</li> <li>from_string(value: <code>Any</code>)</li> <li>name(value: <code>Any</code>)</li> <li>size_of(value: <code>Any</code>)</li> <li>default_of(value: <code>Any</code>)</li> </ul> <p> MaterialInputType.invalid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.bool \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.bool2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.bool4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.int \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.int2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.int4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.uint2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.uint4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.float \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.float2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.float4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.mat4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.image \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.size_of(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.default_of(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#materialreplace","title":"MaterialReplace","text":"<p><code>import \"luxe: render\" for MaterialReplace</code></p> <p>no docs found</p> <ul> <li>tag</li> <li>tag=(v : Any)</li> <li>basis</li> <li>basis=(v : Any)</li> <li>new()</li> </ul> <p> MaterialReplace.tag \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialReplace.tag=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialReplace.basis \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialReplace.basis=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialReplace.new() \u00b6 returns <code>MaterialReplace</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#passlayerdesc","title":"PassLayerDesc","text":"<p><code>import \"luxe: render\" for PassLayerDesc</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>display_id</li> <li>display_id=(v : Any)</li> <li>dest</li> <li>dest=(v : Any)</li> <li>basis</li> <li>basis=(v : Any)</li> <li>inputs</li> <li>inputs=(v : Any)</li> <li>targets</li> <li>targets=(v : Any)</li> <li>vertex=(v : Any)</li> <li>vertex</li> <li>fragment=(v : Any)</li> <li>fragment</li> <li>clear_color</li> <li>clear_color=(v : Any)</li> <li>clear_depth</li> <li>clear_depth=(v : Any)</li> <li>blending</li> <li>blending=(v : Any)</li> <li>write_mask</li> <li>write_mask=(v : Any)</li> <li>depth_test</li> <li>depth_test=(v : Any)</li> <li>depth_write</li> <li>depth_write=(v : Any)</li> <li>depth_compare</li> <li>depth_compare=(v : Any)</li> </ul> <p> PassLayerDesc.new() \u00b6 returns <code>PassLayerDesc</code></p> <p>no docs found   </p> <p> PassLayerDesc.display_id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.display_id=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.dest \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.dest=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.basis \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.basis=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.inputs \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.inputs=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.targets \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.targets=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.vertex=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.vertex \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.fragment=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.fragment \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.clear_color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.clear_color=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.clear_depth \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.clear_depth=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.blending \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.blending=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.write_mask \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.write_mask=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.depth_test \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.depth_test=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.depth_write \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.depth_write=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.depth_compare \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.depth_compare=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#pixelformat","title":"PixelFormat","text":"<p><code>import \"luxe: render\" for PixelFormat</code></p> <p>no docs found</p> <ul> <li>invalid</li> <li>rgb8Unorm</li> <li>rgb8Unorm_srgb</li> <li>rgb8Snorm</li> <li>rgb8Uint</li> <li>rgb8Sint</li> <li>rgb16Unorm</li> <li>rgb16Snorm</li> <li>rgb16Uint</li> <li>rgb16Sint</li> <li>rgb16Float</li> <li>rgb32Uint</li> <li>rgb32Sint</li> <li>rgb32Float</li> <li>rgba8Unorm</li> <li>rgba8Unorm_srgb</li> <li>rgba8Snorm</li> <li>rgba8Uint</li> <li>rgba8Sint</li> <li>rgba16Unorm</li> <li>rgba16Snorm</li> <li>rgba16Uint</li> <li>rgba16Sint</li> <li>rgba16Float</li> <li>rgba32Uint</li> <li>rgba32Sint</li> <li>rgba32Float</li> <li>r11g11b10Float</li> <li>bgra8Unorm</li> <li>bgra8Unorm_srgb</li> <li>depth16Unorm</li> <li>depth32Float</li> <li>stencil8</li> <li>depth24Unorm_stencil8</li> <li>depth32Float_stencil8</li> <li>bc1_rgba</li> <li>bc3_rgba</li> <li>r8Unorm</li> <li>r8Snorm</li> <li>r8Uint</li> <li>r8Sint</li> <li>rg8Unorm</li> <li>rg8Snorm</li> <li>rg8Uint</li> <li>rg8Sint</li> <li>r16Uint</li> <li>r16Sint</li> <li>r16Float</li> <li>rg16Uint</li> <li>rg16Sint</li> <li>rg16Float</li> <li>r32Uint</li> <li>r32Sint</li> <li>r32Float</li> <li>rg32Uint</li> <li>rg32Sint</li> <li>rg32Float</li> <li>from_string(value: <code>Any</code>)</li> <li>name(value: <code>Any</code>)</li> </ul> <p> PixelFormat.invalid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb8Unorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb8Unorm_srgb \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb8Snorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb8Uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb8Sint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb16Unorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb16Snorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb16Uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb16Sint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb16Float \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb32Uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb32Sint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb32Float \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba8Unorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba8Unorm_srgb \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba8Snorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba8Uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba8Sint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba16Unorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba16Snorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba16Uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba16Sint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba16Float \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba32Uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba32Sint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba32Float \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.r11g11b10Float \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.bgra8Unorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.bgra8Unorm_srgb \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.depth16Unorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.depth32Float \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.stencil8 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.depth24Unorm_stencil8 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.depth32Float_stencil8 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.bc1_rgba \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.bc3_rgba \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.r8Unorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.r8Snorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.r8Uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.r8Sint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rg8Unorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rg8Snorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rg8Uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rg8Sint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.r16Uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.r16Sint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.r16Float \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rg16Uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rg16Sint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rg16Float \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.r32Uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.r32Sint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.r32Float \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rg32Uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rg32Sint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rg32Float \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#pose","title":"Pose","text":"<p><code>import \"luxe: render\" for Pose</code></p> <p>no docs found</p> <ul> <li>create(skeleton: <code>Skeleton</code>)</li> <li>destroy(pose: <code>Pose</code>)</li> <li>reset(pose: <code>Pose</code>)</li> <li>copy(from: <code>Pose</code>, to: <code>Pose</code>)</li> <li>get_bone_pos_joint(pose: <code>Pose</code>, bone_id: <code>String</code>)</li> <li>get_bone_pos(pose: <code>Pose</code>, bone_id: <code>String</code>)</li> <li>get_bone_up(pose: <code>Pose</code>, bone_id: <code>String</code>)</li> <li>get_bone_forward(pose: <code>Pose</code>, bone_id: <code>String</code>)</li> <li>get_bone_right(pose: <code>Pose</code>, bone_id: <code>String</code>)</li> </ul> <p> Pose.create(skeleton: <code>Skeleton</code>) \u00b6 returns <code>Pose</code></p> <p>no docs found   </p> <p> Pose.destroy(pose: <code>Pose</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Pose.reset(pose: <code>Pose</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Pose.copy(from: <code>Pose</code>, to: <code>Pose</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Pose.get_bone_pos_joint(pose: <code>Pose</code>, bone_id: <code>String</code>) \u00b6 returns <code>Float3</code></p> <p>no docs found   </p> <p> Pose.get_bone_pos(pose: <code>Pose</code>, bone_id: <code>String</code>) \u00b6 returns <code>Float3</code></p> <p>no docs found   </p> <p> Pose.get_bone_up(pose: <code>Pose</code>, bone_id: <code>String</code>) \u00b6 returns <code>Float3</code></p> <p>no docs found   </p> <p> Pose.get_bone_forward(pose: <code>Pose</code>, bone_id: <code>String</code>) \u00b6 returns <code>Float3</code></p> <p>no docs found   </p> <p> Pose.get_bone_right(pose: <code>Pose</code>, bone_id: <code>String</code>) \u00b6 returns <code>Float3</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#posegraph","title":"PoseGraph","text":"<p><code>import \"luxe: render\" for PoseGraph</code></p> <p>no docs found</p> <ul> <li>create(skeleton: <code>Skeleton</code>)</li> <li>destroy(graph: <code>PoseGraph</code>)</li> <li>valid(graph: <code>PoseGraph</code>)</li> <li>tick(graph: <code>PoseGraph</code>, delta: <code>Num</code>)</li> <li>pose(graph: <code>PoseGraph</code>)</li> <li>set_time(graph: <code>PoseGraph</code>, time: <code>Num</code>)</li> <li>get_time(graph: <code>PoseGraph</code>)</li> <li>node_add(graph: <code>PoseGraph</code>, node: <code>PoseNode</code>)</li> <li>node_remove(graph: <code>PoseGraph</code>, index: <code>Num</code>)</li> <li>node_at(graph: <code>PoseGraph</code>, index: <code>Num</code>)</li> <li>node_index(graph: <code>PoseGraph</code>, node: <code>PoseNode</code>)</li> <li>node_count(graph: <code>PoseGraph</code>)</li> </ul> <p> PoseGraph.create(skeleton: <code>Skeleton</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PoseGraph.destroy(graph: <code>PoseGraph</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PoseGraph.valid(graph: <code>PoseGraph</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> PoseGraph.tick(graph: <code>PoseGraph</code>, delta: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PoseGraph.pose(graph: <code>PoseGraph</code>) \u00b6 returns <code>Pose</code></p> <p>no docs found   </p> <p> PoseGraph.set_time(graph: <code>PoseGraph</code>, time: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PoseGraph.get_time(graph: <code>PoseGraph</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> PoseGraph.node_add(graph: <code>PoseGraph</code>, node: <code>PoseNode</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PoseGraph.node_remove(graph: <code>PoseGraph</code>, index: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PoseGraph.node_at(graph: <code>PoseGraph</code>, index: <code>Num</code>) \u00b6 returns <code>PoseNode</code></p> <p>no docs found   </p> <p> PoseGraph.node_index(graph: <code>PoseGraph</code>, node: <code>PoseNode</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> PoseGraph.node_count(graph: <code>PoseGraph</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#posenode","title":"PoseNode","text":"<p><code>import \"luxe: render\" for PoseNode</code></p> <p>no docs found</p> <ul> <li>create(node_type_id: <code>String</code>)</li> <li>destroy(node: <code>PoseNode</code>)</li> <li>valid(node: <code>PoseNode</code>)</li> <li>pose(node: <code>PoseNode</code>)</li> <li>block(node: <code>PoseNode</code>)</li> <li>input(node: <code>PoseNode</code>)</li> </ul> <p> PoseNode.create(node_type_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PoseNode.destroy(node: <code>PoseNode</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PoseNode.valid(node: <code>PoseNode</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> PoseNode.pose(node: <code>PoseNode</code>) \u00b6 returns <code>Pose</code></p> <p>no docs found   </p> <p> PoseNode.block(node: <code>PoseNode</code>) \u00b6 returns <code>Block</code></p> <p>no docs found   </p> <p> PoseNode.input(node: <code>PoseNode</code>) \u00b6 returns <code>Any</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#primitive","title":"Primitive","text":"<p><code>import \"luxe: render\" for Primitive</code></p> <p>no docs found</p> <ul> <li>point</li> <li>line</li> <li>line_strip</li> <li>triangle</li> <li>triangle_strip</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> Primitive.point \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Primitive.line \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Primitive.line_strip \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Primitive.triangle \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Primitive.triangle_strip \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Primitive.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#render","title":"Render","text":"<p><code>import \"luxe: render\" for Render</code></p> <p>no docs found</p> <ul> <li>dispatch(library: <code>String</code>, function: <code>String</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>submit(set: <code>RenderSet</code>, target_path: <code>RenderPath</code>, target_resource: <code>String</code>, target_region: <code>Float4</code>, mat_proj: <code>Floats</code>, mat_view: <code>Floats</code>)</li> <li>submit_now(set: <code>RenderSet</code>, target_path: <code>RenderPath</code>, target_resource: <code>String</code>, target_region: <code>Float4</code>, mat_proj: <code>Floats</code>, mat_view: <code>Floats</code>)</li> <li>submit_fn(set: <code>RenderSet</code>, target_path: <code>String</code>, target_resource: <code>String</code>, target_region: <code>Float4</code>, mat_proj: <code>Floats</code>, mat_view: <code>Floats</code>, settings: <code>Maps</code>, fn: <code>Fn</code>)</li> <li>create_set()</li> <li>destroy_set(set: <code>RenderSet</code>)</li> <li>valid_set(set: <code>RenderSet</code>)</li> <li>set_add(set: <code>RenderSet</code>, geo: <code>Geometry</code>)</li> <li>set_remove(set: <code>RenderSet</code>, geo: <code>Geometry</code>)</li> <li>set_get_geometry(set: <code>RenderSet</code>, into: <code>List</code>)</li> <li>set_get_count(set: <code>RenderSet</code>)</li> <li>create_path()</li> <li>destroy_path(path: <code>RenderPath</code>)</li> <li>valid_path(path: <code>RenderPath</code>)</li> <li>window_w()</li> <li>window_h()</li> <li>window_state()</li> <li>window_focus()</li> <li>window_hide(state: <code>Any</code>)</li> <li>drawable_w()</li> <li>drawable_h()</li> <li>drawable_ratio()</li> <li>window_set_title(title: <code>String</code>)</li> <li>get_path_vertices(into_pos: <code>Any</code>, offset_pos: <code>Any</code>, stride_pos: <code>Any</code>, into_color: <code>Any</code>, offset_color: <code>Any</code>, stride_color: <code>Any</code>, points: <code>Any</code>, color: <code>Any</code>, thickness: <code>Any</code>, cap: <code>Any</code>, join: <code>Any</code>, closed: <code>Any</code>, miter_limit: <code>Any</code>)</li> <li>get_path_vertex_count(points: <code>Any</code>, thickness: <code>Any</code>, cap: <code>Any</code>, join: <code>Any</code>, closed: <code>Any</code>, miter_limit: <code>Any</code>)</li> <li>push_render_dest(dest: <code>Any</code>, into: <code>Any</code>)</li> <li>path_add_render_layers(path: <code>Any</code>, name: <code>Any</code>, layers_add: <code>Any</code>, layer: <code>Any</code>)</li> <li>path_add_render_layers(path: <code>Any</code>, name: <code>Any</code>, layers_add: <code>Any</code>, layers_exclude: <code>Any</code>, layer: <code>RenderLayerDesc</code>)</li> <li>path_add_render_layer(path: <code>Any</code>, name: <code>Any</code>, layer: <code>RenderLayerDesc</code>)</li> <li>path_add_compute_layer(path: <code>Any</code>, compute_id: <code>Any</code>, display: <code>Any</code>, dimensions: <code>Any</code>, inputs: <code>Any</code>)</li> <li>path_add_pass_layer(path: <code>Any</code>, name: <code>Any</code>, dest: <code>Any</code>, material: <code>Any</code>)</li> <li>path_remove(path: <code>Any</code>, name: <code>Any</code>)</li> <li>path_update(path: <code>Any</code>, name: <code>Any</code>, layer: <code>RenderLayerDesc</code>)</li> <li>define_compute(name: <code>String</code>, library: <code>String</code>, function: <code>String</code>, blocks: <code>List</code>)</li> <li>undefine_compute(name: <code>Any</code>)</li> <li>undefine_sampler_state(name: <code>Any</code>)</li> <li>define_sampler_state(name: <code>Any</code>, desc: <code>Any</code>)</li> <li>define_vertex_format(name: <code>Any</code>, desc: <code>Any</code>)</li> <li>undefine_vertex_format(name: <code>Any</code>)</li> <li>define_resource(name: <code>Any</code>, image: <code>Any</code>)</li> <li>resource_get_image(name: <code>Any</code>)</li> <li>undefine_resource(name: <code>Any</code>)</li> <li>create_vertex_buffer(data: <code>Any</code>, length: <code>Any</code>)</li> <li>vertex_buffer_get_size(vertex_buffer: <code>Any</code>)</li> <li>vertex_buffer_get_data(vertex_buffer: <code>Any</code>, into: <code>Any</code>, length: <code>Any</code>, offset: <code>Any</code>)</li> <li>vertex_buffer_replace(vertex_buffer: <code>Any</code>, data: <code>Any</code>, length: <code>Any</code>)</li> <li>vertex_buffer_update(vertex_buffer: <code>Any</code>, data: <code>Any</code>, length: <code>Any</code>, data_src_offset: <code>Any</code>, dest_offset: <code>Any</code>)</li> <li>destroy_vertex_buffer(vertex_buffer: <code>Any</code>)</li> <li>create_index_buffer(data: <code>Any</code>, length: <code>Any</code>)</li> <li>create_index_buffer32(data: <code>Any</code>, length: <code>Any</code>)</li> <li>index_buffer_get_size(index_buffer: <code>Any</code>)</li> <li>index_buffer_get_data(index_buffer: <code>Any</code>, into: <code>Any</code>, length: <code>Any</code>, offset: <code>Any</code>)</li> <li>index_buffer_replace(index_buffer: <code>Any</code>, data: <code>Any</code>, length: <code>Any</code>)</li> <li>index_buffer_update(index_buffer: <code>Any</code>, data: <code>Any</code>, length: <code>Any</code>, data_src_offset: <code>Any</code>, dest_offset: <code>Any</code>)</li> <li>destroy_index_buffer(index_buffer: <code>Any</code>)</li> <li>create_text(material: <code>Any</code>, default_size: <code>Any</code>, default_font: <code>Any</code>, default_color: <code>Any</code>, render_set: <code>Any</code>)</li> <li>destroy_text(text: <code>Any</code>)</li> <li>valid_text(text: <code>Any</code>)</li> <li>text_attr_clear(text: <code>Any</code>)</li> <li>text_set_text_buffer(text: <code>Any</code>, string: <code>Any</code>)</li> <li>text_set_attr(text: <code>Text</code>, start: <code>Num</code>, length: <code>Num</code>, type: <code>TextAttrType</code>, key: <code>String</code>, value: <code>Any</code>)</li> <li>text_set_outline(text: <code>Text</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>)</li> <li>text_set_shadow(text: <code>Text</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>)</li> <li>text_set_pos(text: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>)</li> <li>text_set_align(text: <code>Any</code>, align: <code>Any</code>, align_vertical: <code>Any</code>)</li> <li>text_set_bounds(text: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>)</li> <li>text_commit(text: <code>Any</code>)</li> <li>text_get_geometry(text: <code>Any</code>)</li> <li>text_get_extents(text: <code>Any</code>, offset: <code>Any</code>, count: <code>Any</code>)</li> <li>text_get_extents(text: <code>Any</code>)</li> <li>text_get_character_bounds(text: <code>Any</code>, index: <code>Any</code>)</li> <li>text_set_text(text: <code>Any</code>, string: <code>Any</code>)</li> <li>kVertexAttributes</li> <li>kColorTargets</li> <li>kMaterialLayerTargets</li> <li>kMaterialInputs</li> <li>kMaterialReplace</li> <li>kMaterialPassUsage</li> <li>kStencilUnset</li> </ul> <p> Render.dispatch(library: <code>String</code>, function: <code>String</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Dispatch a compute function directly (todo: doesn't have a way to get inputs atm)   </p> <p> Render.submit(set: <code>RenderSet</code>, target_path: <code>RenderPath</code>, target_resource: <code>String</code>, target_region: <code>Float4</code>, mat_proj: <code>Floats</code>, mat_view: <code>Floats</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.submit_now(set: <code>RenderSet</code>, target_path: <code>RenderPath</code>, target_resource: <code>String</code>, target_region: <code>Float4</code>, mat_proj: <code>Floats</code>, mat_view: <code>Floats</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.submit_fn(set: <code>RenderSet</code>, target_path: <code>String</code>, target_resource: <code>String</code>, target_region: <code>Float4</code>, mat_proj: <code>Floats</code>, mat_view: <code>Floats</code>, settings: <code>Maps</code>, fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.create_set() \u00b6 returns <code>RenderSet</code></p> <p>no docs found   </p> <p> Render.destroy_set(set: <code>RenderSet</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Render.valid_set(set: <code>RenderSet</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.set_add(set: <code>RenderSet</code>, geo: <code>Geometry</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.set_remove(set: <code>RenderSet</code>, geo: <code>Geometry</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.set_get_geometry(set: <code>RenderSet</code>, into: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.set_get_count(set: <code>RenderSet</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.create_path() \u00b6 returns <code>RenderPath</code></p> <p>no docs found   </p> <p> Render.destroy_path(path: <code>RenderPath</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.valid_path(path: <code>RenderPath</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.window_w() \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Render.window_h() \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Render.window_state() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.window_focus() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.window_hide(state: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.drawable_w() \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Render.drawable_h() \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Render.drawable_ratio() \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Render.window_set_title(title: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Render.get_path_vertices(into_pos: <code>Any</code>, offset_pos: <code>Any</code>, stride_pos: <code>Any</code>, into_color: <code>Any</code>, offset_color: <code>Any</code>, stride_color: <code>Any</code>, points: <code>Any</code>, color: <code>Any</code>, thickness: <code>Any</code>, cap: <code>Any</code>, join: <code>Any</code>, closed: <code>Any</code>, miter_limit: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.get_path_vertex_count(points: <code>Any</code>, thickness: <code>Any</code>, cap: <code>Any</code>, join: <code>Any</code>, closed: <code>Any</code>, miter_limit: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.push_render_dest(dest: <code>Any</code>, into: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.path_add_render_layers(path: <code>Any</code>, name: <code>Any</code>, layers_add: <code>Any</code>, layer: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.path_add_render_layers(path: <code>Any</code>, name: <code>Any</code>, layers_add: <code>Any</code>, layers_exclude: <code>Any</code>, layer: <code>RenderLayerDesc</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.path_add_render_layer(path: <code>Any</code>, name: <code>Any</code>, layer: <code>RenderLayerDesc</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.path_add_compute_layer(path: <code>Any</code>, compute_id: <code>Any</code>, display: <code>Any</code>, dimensions: <code>Any</code>, inputs: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.path_add_pass_layer(path: <code>Any</code>, name: <code>Any</code>, dest: <code>Any</code>, material: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.path_remove(path: <code>Any</code>, name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.path_update(path: <code>Any</code>, name: <code>Any</code>, layer: <code>RenderLayerDesc</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.define_compute(name: <code>String</code>, library: <code>String</code>, function: <code>String</code>, blocks: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.undefine_compute(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.undefine_sampler_state(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.define_sampler_state(name: <code>Any</code>, desc: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.define_vertex_format(name: <code>Any</code>, desc: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.undefine_vertex_format(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.define_resource(name: <code>Any</code>, image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.resource_get_image(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.undefine_resource(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.create_vertex_buffer(data: <code>Any</code>, length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.vertex_buffer_get_size(vertex_buffer: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.vertex_buffer_get_data(vertex_buffer: <code>Any</code>, into: <code>Any</code>, length: <code>Any</code>, offset: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.vertex_buffer_replace(vertex_buffer: <code>Any</code>, data: <code>Any</code>, length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.vertex_buffer_update(vertex_buffer: <code>Any</code>, data: <code>Any</code>, length: <code>Any</code>, data_src_offset: <code>Any</code>, dest_offset: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.destroy_vertex_buffer(vertex_buffer: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.create_index_buffer(data: <code>Any</code>, length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.create_index_buffer32(data: <code>Any</code>, length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.index_buffer_get_size(index_buffer: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.index_buffer_get_data(index_buffer: <code>Any</code>, into: <code>Any</code>, length: <code>Any</code>, offset: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.index_buffer_replace(index_buffer: <code>Any</code>, data: <code>Any</code>, length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.index_buffer_update(index_buffer: <code>Any</code>, data: <code>Any</code>, length: <code>Any</code>, data_src_offset: <code>Any</code>, dest_offset: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.destroy_index_buffer(index_buffer: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.create_text(material: <code>Any</code>, default_size: <code>Any</code>, default_font: <code>Any</code>, default_color: <code>Any</code>, render_set: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.destroy_text(text: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.valid_text(text: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_attr_clear(text: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_set_text_buffer(text: <code>Any</code>, string: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_set_attr(text: <code>Text</code>, start: <code>Num</code>, length: <code>Num</code>, type: <code>TextAttrType</code>, key: <code>String</code>, value: <code>Any</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Render.text_set_outline(text: <code>Text</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_set_shadow(text: <code>Text</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_set_pos(text: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_set_align(text: <code>Any</code>, align: <code>Any</code>, align_vertical: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_set_bounds(text: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_commit(text: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_get_geometry(text: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_get_extents(text: <code>Any</code>, offset: <code>Any</code>, count: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_get_extents(text: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_get_character_bounds(text: <code>Any</code>, index: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_set_text(text: <code>Any</code>, string: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.kVertexAttributes \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.kColorTargets \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.kMaterialLayerTargets \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.kMaterialInputs \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.kMaterialReplace \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.kMaterialPassUsage \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.kStencilUnset \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#renderdest","title":"RenderDest","text":"<p><code>import \"luxe: render\" for RenderDest</code></p> <p>no docs found</p> <ul> <li>target_region</li> <li>color</li> <li>depth</li> <li>stencil</li> <li>color=(color : Any)</li> <li>depth=(depth : Any)</li> <li>stencil=(stencil : Any)</li> <li>new()</li> </ul> <p> RenderDest.target_region \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDest.color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDest.depth \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDest.stencil \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDest.color=(color : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDest.depth=(depth : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDest.stencil=(stencil : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDest.new() \u00b6 returns <code>RenderDest</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#renderdestcolor","title":"RenderDestColor","text":"<p><code>import \"luxe: render\" for RenderDestColor</code></p> <p>no docs found</p> <ul> <li>render_target</li> <li>render_target=(render_target : Any)</li> <li>clear_color</li> <li>clear_color=(clear_color : Any)</li> <li>load_action</li> <li>load_action=(load_action : Any)</li> <li>store_action</li> <li>store_action=(store_action : Any)</li> <li>level</li> <li>level=(level : Any)</li> <li>slice</li> <li>slice=(slice : Any)</li> <li>depth</li> <li>depth=(depth : Any)</li> <li>new()</li> </ul> <p> RenderDestColor.render_target \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.render_target=(render_target : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.clear_color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.clear_color=(clear_color : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.load_action \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.load_action=(load_action : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.store_action \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.store_action=(store_action : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.level \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.level=(level : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.slice \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.slice=(slice : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.depth \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.depth=(depth : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.new() \u00b6 returns <code>RenderDestColor</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#renderdestdepth","title":"RenderDestDepth","text":"<p><code>import \"luxe: render\" for RenderDestDepth</code></p> <p>no docs found</p> <ul> <li>render_target</li> <li>render_target=(render_target : Any)</li> <li>clear_depth</li> <li>clear_depth=(clear_depth : Any)</li> <li>load_action</li> <li>load_action=(load_action : Any)</li> <li>store_action</li> <li>store_action=(store_action : Any)</li> <li>level</li> <li>level=(level : Any)</li> <li>slice</li> <li>slice=(slice : Any)</li> <li>depth</li> <li>depth=(depth : Any)</li> <li>new()</li> </ul> <p> RenderDestDepth.render_target \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.render_target=(render_target : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.clear_depth \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.clear_depth=(clear_depth : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.load_action \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.load_action=(load_action : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.store_action \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.store_action=(store_action : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.level \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.level=(level : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.slice \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.slice=(slice : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.depth \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.depth=(depth : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.new() \u00b6 returns <code>RenderDestDepth</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#renderdeststencil","title":"RenderDestStencil","text":"<p><code>import \"luxe: render\" for RenderDestStencil</code></p> <p>no docs found</p> <ul> <li>render_target</li> <li>render_target=(render_target : Any)</li> <li>clear_stencil</li> <li>clear_stencil=(clear_stencil : Any)</li> <li>load_action</li> <li>load_action=(load_action : Any)</li> <li>store_action</li> <li>store_action=(store_action : Any)</li> <li>level</li> <li>level=(level : Any)</li> <li>slice</li> <li>slice=(slice : Any)</li> <li>depth</li> <li>depth=(depth : Any)</li> <li>new()</li> </ul> <p> RenderDestStencil.render_target \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.render_target=(render_target : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.clear_stencil \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.clear_stencil=(clear_stencil : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.load_action \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.load_action=(load_action : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.store_action \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.store_action=(store_action : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.level \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.level=(level : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.slice \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.slice=(slice : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.depth \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.depth=(depth : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.new() \u00b6 returns <code>RenderDestStencil</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#renderlayerdesc","title":"RenderLayerDesc","text":"<p><code>import \"luxe: render\" for RenderLayerDesc</code></p> <p>no docs found</p> <ul> <li>display_id</li> <li>display_id=(display_id : Any)</li> <li>sort</li> <li>sort=(sort : Any)</li> <li>material_override</li> <li>material_override=(material_override : Any)</li> <li>replace_tag</li> <li>replace_tag=(replace_tag : Any)</li> <li>dest</li> <li>dest=(dest : Any)</li> <li>new()</li> </ul> <p> RenderLayerDesc.display_id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderLayerDesc.display_id=(display_id : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderLayerDesc.sort \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderLayerDesc.sort=(sort : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderLayerDesc.material_override \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderLayerDesc.material_override=(material_override : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderLayerDesc.replace_tag \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderLayerDesc.replace_tag=(replace_tag : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderLayerDesc.dest \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderLayerDesc.dest=(dest : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderLayerDesc.new() \u00b6 returns <code>RenderLayerDesc</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#renderpathcontext","title":"RenderPathContext","text":"<p><code>import \"luxe: render\" for RenderPathContext</code></p> <p>no docs found</p> <ul> <li>settings</li> <li>new(path: <code>String</code>, settings: <code>Map</code>)</li> <li>path</li> <li>change_path(path: <code>String</code>)</li> <li>layer_render(name: <code>String</code>, render_layer_desc: <code>RenderLayerDesc</code>)</li> <li>layers_render(name: <code>Any</code>, layers_add: <code>Any</code>, render_layer_desc: <code>Any</code>)</li> <li>layers_render(name: <code>Any</code>, layers_add: <code>Any</code>, layers_exclude: <code>Any</code>, render_layer_desc: <code>Any</code>)</li> <li>layer_pass(pass_layer_desc: <code>Any</code>)</li> <li>layer_compute(compute_layer_desc: <code>ComputeLayerDesc</code>)</li> <li>get(key: <code>Any</code>, default: <code>Any</code>)</li> <li>set(key: <code>Any</code>, value: <code>Any</code>)</li> </ul> <p> RenderPathContext.settings \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> RenderPathContext.new(path: <code>String</code>, settings: <code>Map</code>) \u00b6 returns <code>RenderPathContext</code></p> <p>no docs found   </p> <p> RenderPathContext.path \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> RenderPathContext.change_path(path: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderPathContext.layer_render(name: <code>String</code>, render_layer_desc: <code>RenderLayerDesc</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderPathContext.layers_render(name: <code>Any</code>, layers_add: <code>Any</code>, render_layer_desc: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderPathContext.layers_render(name: <code>Any</code>, layers_add: <code>Any</code>, layers_exclude: <code>Any</code>, render_layer_desc: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderPathContext.layer_pass(pass_layer_desc: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderPathContext.layer_compute(compute_layer_desc: <code>ComputeLayerDesc</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderPathContext.get(key: <code>Any</code>, default: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderPathContext.set(key: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#renderviewdesc","title":"RenderViewDesc","text":"<p><code>import \"luxe: render\" for RenderViewDesc</code></p> <p>no docs found</p> <ul> <li>target</li> <li>target=(v : Any)</li> <li>target(v: <code>Any</code>)</li> <li>path</li> <li>path=(v : Any)</li> <li>path(v: <code>Any</code>)</li> <li>region</li> <li>region=(v : Any)</li> <li>region(v: <code>Any</code>)</li> <li>settings</li> <li>settings=(v : Any)</li> <li>settings(v: <code>Any</code>)</li> <li>new(target_resource: <code>Any</code>, target_path: <code>Any</code>, target_region: <code>Any</code>, target_settings: <code>Any</code>)</li> <li>new()</li> </ul> <p> RenderViewDesc.target \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderViewDesc.target=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderViewDesc.target(v: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderViewDesc.path \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderViewDesc.path=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderViewDesc.path(v: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderViewDesc.region \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderViewDesc.region=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderViewDesc.region(v: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderViewDesc.settings \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderViewDesc.settings=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderViewDesc.settings(v: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderViewDesc.new(target_resource: <code>Any</code>, target_path: <code>Any</code>, target_region: <code>Any</code>, target_settings: <code>Any</code>) \u00b6 returns <code>RenderViewDesc</code></p> <p>no docs found   </p> <p> RenderViewDesc.new() \u00b6 returns <code>RenderViewDesc</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#sampleraddressmode","title":"SamplerAddressMode","text":"<p><code>import \"luxe: render\" for SamplerAddressMode</code></p> <p>no docs found</p> <ul> <li>clamp_to_edge</li> <li>repeat</li> <li>mirror_repeat</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> SamplerAddressMode.clamp_to_edge \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerAddressMode.repeat \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerAddressMode.mirror_repeat \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerAddressMode.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#samplerminmagfilter","title":"SamplerMinMagFilter","text":"<p><code>import \"luxe: render\" for SamplerMinMagFilter</code></p> <p>no docs found</p> <ul> <li>nearest</li> <li>linear</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> SamplerMinMagFilter.nearest \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerMinMagFilter.linear \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerMinMagFilter.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#samplermipfilter","title":"SamplerMipFilter","text":"<p><code>import \"luxe: render\" for SamplerMipFilter</code></p> <p>no docs found</p> <ul> <li>none</li> <li>nearest</li> <li>linear</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> SamplerMipFilter.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerMipFilter.nearest \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerMipFilter.linear \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerMipFilter.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#samplerstate","title":"SamplerState","text":"<p><code>import \"luxe: render\" for SamplerState</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>address_r</li> <li>address_r=(v : Any)</li> <li>address_s</li> <li>address_s=(v : Any)</li> <li>address_t</li> <li>address_t=(v : Any)</li> <li>filter_min</li> <li>filter_min=(v : Any)</li> <li>filter_mag</li> <li>filter_mag=(v : Any)</li> <li>filter_mip</li> <li>filter_mip=(v : Any)</li> </ul> <p> SamplerState.new() \u00b6 returns <code>SamplerState</code></p> <p>no docs found   </p> <p> SamplerState.address_r \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerState.address_r=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerState.address_s \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerState.address_s=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerState.address_t \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerState.address_t=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerState.filter_min \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerState.filter_min=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerState.filter_mag \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerState.filter_mag=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerState.filter_mip \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerState.filter_mip=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#sorttype","title":"SortType","text":"<p><code>import \"luxe: render\" for SortType</code></p> <p>no docs found</p> <ul> <li>front_to_back</li> <li>back_to_front</li> <li>sort_by_z</li> <li>sort_by_z_reverse</li> <li>none</li> </ul> <p> SortType.front_to_back \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SortType.back_to_front \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SortType.sort_by_z \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SortType.sort_by_z_reverse \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SortType.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#stenciloperation","title":"StencilOperation","text":"<p><code>import \"luxe: render\" for StencilOperation</code></p> <p>no docs found</p> <ul> <li>keep</li> <li>zero</li> <li>replace</li> <li>increment_clamp</li> <li>decrement_clamp</li> <li>invert</li> <li>increment_wrap</li> <li>decrement_wrap</li> <li>invalid</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> StencilOperation.keep \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> StencilOperation.zero \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> StencilOperation.replace \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> StencilOperation.increment_clamp \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> StencilOperation.decrement_clamp \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> StencilOperation.invert \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> StencilOperation.increment_wrap \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> StencilOperation.decrement_wrap \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> StencilOperation.invalid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> StencilOperation.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#storeaction","title":"StoreAction","text":"<p><code>import \"luxe: render\" for StoreAction</code></p> <p>no docs found</p> <ul> <li>dont_care</li> <li>store</li> </ul> <p> StoreAction.dont_care \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> StoreAction.store \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#textalign","title":"TextAlign","text":"<p><code>import \"luxe: render\" for TextAlign</code></p> <p>no docs found</p> <ul> <li>left</li> <li>center</li> <li>right</li> <li>top</li> <li>bottom</li> <li>from_string(value: <code>Any</code>)</li> <li>name(value: <code>Any</code>)</li> </ul> <p> TextAlign.left \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAlign.center \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAlign.right \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAlign.top \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAlign.bottom \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAlign.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAlign.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#textattrtype","title":"TextAttrType","text":"<p><code>import \"luxe: render\" for TextAttrType</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>handle32</li> <li>handle64</li> <li>number</li> <li>string</li> <li>color</li> <li>float2</li> <li>name(value: <code>Any</code>)</li> </ul> <p> TextAttrType.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAttrType.handle32 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAttrType.handle64 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAttrType.number \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAttrType.string \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAttrType.color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAttrType.float2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAttrType.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#textwrapmode","title":"TextWrapMode","text":"<p><code>import \"luxe: render\" for TextWrapMode</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>none</li> <li>word</li> <li>from_string(value: <code>Any</code>)</li> <li>name(value: <code>Any</code>)</li> </ul> <p> TextWrapMode.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextWrapMode.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextWrapMode.word \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextWrapMode.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextWrapMode.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#vertexattr","title":"VertexAttr","text":"<p><code>import \"luxe: render\" for VertexAttr</code></p> <p>no docs found</p> <ul> <li>new(name: <code>Any</code>)</li> <li>name</li> <li>name=(v : Any)</li> <li>format</li> <li>format=(v : Any)</li> <li>offset</li> <li>offset=(v : Any)</li> <li>buffer_index</li> <li>buffer_index=(v : Any)</li> </ul> <p> VertexAttr.new(name: <code>Any</code>) \u00b6 returns <code>VertexAttr</code></p> <p>no docs found   </p> <p> VertexAttr.name \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttr.name=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttr.format \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttr.format=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttr.offset \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttr.offset=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttr.buffer_index \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttr.buffer_index=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#vertexattrformat","title":"VertexAttrFormat","text":"<p><code>import \"luxe: render\" for VertexAttrFormat</code></p> <p>no docs found</p> <ul> <li>invalid</li> <li>bool</li> <li>bool2</li> <li>bool3</li> <li>bool4</li> <li>int</li> <li>int2</li> <li>int3</li> <li>int4</li> <li>uint</li> <li>uint2</li> <li>uint3</li> <li>uint4</li> <li>float</li> <li>float2</li> <li>float3</li> <li>float4</li> <li>double</li> <li>double2</li> <li>double3</li> <li>double4</li> <li>mat4</li> <li>from_string(value: <code>Any</code>)</li> <li>size_of(value: <code>Any</code>)</li> </ul> <p> VertexAttrFormat.invalid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.bool \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.bool2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.bool3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.bool4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.int \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.int2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.int3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.int4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.uint2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.uint3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.uint4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.float \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.float2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.float3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.float4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.double \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.double2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.double3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.double4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.mat4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.size_of(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#vertexformat","title":"VertexFormat","text":"<p><code>import \"luxe: render\" for VertexFormat</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>attributes</li> <li>attributes=(v : Any)</li> <li>layouts</li> <li>layouts=(v : Any)</li> </ul> <p> VertexFormat.new() \u00b6 returns <code>VertexFormat</code></p> <p>no docs found   </p> <p> VertexFormat.attributes \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexFormat.attributes=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexFormat.layouts \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexFormat.layouts=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#vertexinputrate","title":"VertexInputRate","text":"<p><code>import \"luxe: render\" for VertexInputRate</code></p> <p>no docs found</p> <ul> <li>vertex</li> <li>instance</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> VertexInputRate.vertex \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexInputRate.instance \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexInputRate.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#vertexlayout","title":"VertexLayout","text":"<p><code>import \"luxe: render\" for VertexLayout</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>stride</li> <li>stride=(v : Any)</li> </ul> <p> VertexLayout.new() \u00b6 returns <code>VertexLayout</code></p> <p>no docs found   </p> <p> VertexLayout.stride \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexLayout.stride=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/#winding","title":"Winding","text":"<p><code>import \"luxe: render\" for Winding</code></p> <p>no docs found</p> <ul> <li>clockwise</li> <li>counter_clockwise</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> Winding.clockwise \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Winding.counter_clockwise \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Winding.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/sat2D/","title":"sat2D","text":""},{"location":"api/v/2025.1.1/sat2D/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/sat2D/#luxe-sat2d-module","title":"<code>luxe: sat2D</code> module","text":"<ul> <li>SAT2D </li> </ul>"},{"location":"api/v/2025.1.1/sat2D/#sat2d","title":"SAT2D","text":"<p><code>import \"luxe: sat2D\" for SAT2D</code></p> <p>The SAT2D API is a collision and query API for the luxe: shape2D shapes and types. It implements the \"separating axis theorom\" for collision.  Note The return values in the API are not user friendly atm, this will improve. They return lists with various values packed inside.</p> <ul> <li>collide_shape(shape1: <code>Any</code>, shape2: <code>Any</code>)</li> <li>collide_shapes(shape: <code>Any</code>, list: <code>Any</code>)</li> <li>contains(shape: <code>Any</code>, point: <code>Any</code>)</li> <li>sweep_shape(shape1: <code>Any</code>, shape2: <code>Any</code>, vel: <code>Any</code>)</li> <li>raycast_ray(ray1: <code>Any</code>, ray2: <code>Any</code>)</li> <li>raycast_rays(ray: <code>Any</code>, rays: <code>Any</code>)</li> <li>raycast_shape(ray: <code>Any</code>, shape: <code>Any</code>)</li> <li>raycast_shapes(ray: <code>Any</code>, shapes: <code>Any</code>)</li> </ul> <p> SAT2D.collide_shape(shape1: <code>Any</code>, shape2: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Check if two <code>Shape2D</code> instances are colliding. Returns a result with several values in a <code>List</code>.</p> <p>The results include a <code>separation</code> value for x and y axis, which is how much to move <code>shape1</code> to cancel out the overlap. An example of using this: move a player <code>shape2D</code> collider, check for collision, and then move them back by <code>separation</code> so that they do not collide anymore.</p> <pre><code>[\n  shape1,       //the original shapes\n  shape2,\n  overlap,      //amount the shapes overlap\n  separation_x, //the amount to separate on the x axis\n  separation_y, //the amount to separate on the y axis\n  normal_x,     //the normal of the collision\n  normal_y      //the amount to separate on the y axis\n]\n</code></pre> <p> SAT2D.collide_shapes(shape: <code>Any</code>, list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Like <code>collide_shape</code> for details on the results, but checks multiple shapes against a single one.  For example <code>SAT2D.collide_shapes(player, walls)</code>, where walls is a list of <code>Shape2D</code> to collide against.</p> <p>Note this returns a list of results, and each result is a list described by <code>collide_shape</code>.</p> <pre><code>//:todo: example. see samples/wip/shape2D\n</code></pre> <p> SAT2D.contains(shape: <code>Any</code>, point: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Returns true if the given <code>Shape2D</code> contains <code>point</code>.   </p> <p> SAT2D.sweep_shape(shape1: <code>Any</code>, shape2: <code>Any</code>, vel: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p> SAT2D.raycast_ray(ray1: <code>Any</code>, ray2: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p> SAT2D.raycast_rays(ray: <code>Any</code>, rays: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p> SAT2D.raycast_shape(ray: <code>Any</code>, shape: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p> SAT2D.raycast_shapes(ray: <code>Any</code>, shapes: <code>Any</code>) \u00b6 returns <code>unknown</code></p>"},{"location":"api/v/2025.1.1/save/","title":"Save","text":""},{"location":"api/v/2025.1.1/save/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/save/#luxe-save-module","title":"<code>luxe: save</code> module","text":"<ul> <li>Save </li> <li>SaveScope </li> </ul>"},{"location":"api/v/2025.1.1/save/#save","title":"Save","text":"<p><code>import \"luxe: save\" for Save</code></p> <p>A cross platform save system with a Key/Value store and file storage for a user, and save slots.</p> <pre><code>  //create a new save profile. loads the default save slot for single save use\n  var save = Save.create(\"organization\", \"game\")\n  \n  //OR\n\n  //create a new slot and set it as the active save slot \n  Save.new_slot(save)\n  \n  //OR\n\n  //Load a save slot from e.g Save.list()\n  var list = Save.list(save)\n  //activate the first slot\n  Save.set_slot(save, list[0])\n\n  \n  //Set some slot specific values\n  Save.set(save, \"key\", \"value\")\n  //Set some user specific values\n  Save.set(save, \"key\", \"value\", SaveScope.user)\n\n  //Get some values from the slot\n  var name = Save.get(save, \"name\", \"default_name\")\n  //get user values, like settings\n  var setting = Save.get(save, \"setting\", false, SaveScope.user)\n</code></pre> <ul> <li>create(org: <code>String</code>, app: <code>String</code>)</li> <li>create(org: <code>String</code>, app: <code>String</code>, user_id: <code>String</code>)</li> <li>save(save: <code>Save</code>)</li> <li>new_slot(save: <code>Save</code>)</li> <li>set_slot(save: <code>Save</code>, slot: <code>String</code>)</li> <li>list(save: <code>Save</code>)</li> <li>file_exists(save: <code>Save</code>, file_id: <code>String</code>)</li> <li>file_exists(save: <code>Save</code>, file_id: <code>String</code>, kind: <code>SaveScope</code>)</li> <li>set_file(save: <code>Save</code>, file_id: <code>String</code>, file_contents: <code>String</code>)</li> <li>set_file(save: <code>Save</code>, file_id: <code>String</code>, file_contents: <code>String</code>, kind: <code>SaveScope</code>)</li> <li>get_file(save: <code>Save</code>, file_id: <code>String</code>)</li> <li>get_file(save: <code>Save</code>, file_id: <code>String</code>, kind: <code>SaveScope</code>)</li> <li>set(save: <code>Save</code>, key: <code>String</code>, value: <code>Any</code>)</li> <li>set(save: <code>Save</code>, key: <code>String</code>, value: <code>Any</code>, kind: <code>SaveScope</code>)</li> <li>get(save: <code>Save</code>, key: <code>String</code>, default: <code>Any</code>)</li> <li>get(save: <code>Save</code>, key: <code>String</code>, default: <code>Any</code>, kind: <code>SaveScope</code>)</li> <li>has(save: <code>Save</code>, key: <code>String</code>)</li> <li>has(save: <code>Save</code>, key: <code>String</code>, kind: <code>SaveScope</code>)</li> <li>get_keys(save: <code>Save</code>)</li> <li>get_keys(save: <code>Save</code>, kind: <code>SaveScope</code>)</li> <li>slot_clear(save: <code>Save</code>, slot: <code>String</code>)</li> <li>slot_backup(save: <code>Save</code>, slot: <code>String</code>)</li> <li>slot_modified_time(save: <code>Save</code>, slot: <code>String</code>)</li> <li>slot_file_exists(save: <code>Save</code>, slot: <code>String</code>, file_id: <code>String</code>)</li> <li>slot_set_file(save: <code>Save</code>, slot: <code>String</code>, file_id: <code>String</code>, file_contents: <code>String</code>)</li> <li>slot_get_file(save: <code>Save</code>, slot: <code>String</code>, file_id: <code>String</code>)</li> </ul> <p> Save.create(org: <code>String</code>, app: <code>String</code>) \u00b6 returns <code>Save</code></p> <p>Create a save slot for the given organization/app name pair. Defaults to 'user' for user id   </p> <p> Save.create(org: <code>String</code>, app: <code>String</code>, user_id: <code>String</code>) \u00b6 returns <code>Save</code></p> <p>Create a save slot for the given user and organization/app name pair. e.g If you have a steam user ID, you'd pass it in here as a string.   </p> <p> Save.save(save: <code>Save</code>) \u00b6 returns <code>unknown</code></p> <p>Flush the data for this profile to storage. Unless auto save on key change is off, unnecessary   </p> <p> Save.new_slot(save: <code>Save</code>) \u00b6 returns <code>None</code></p> <p>Set the current active save slot to a new slot ID.   </p> <p> Save.set_slot(save: <code>Save</code>, slot: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Set the current active save slot to a Slot ID (from Save.list or otherwise).   </p> <p> Save.list(save: <code>Save</code>) \u00b6 returns <code>unknown</code></p> <p>Return a list of save slot uuids for use with the slot query apis, sorted by modified time (latest first)   </p> <p> Save.file_exists(save: <code>Save</code>, file_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Returns true if the given file path can be found for the active save slot   </p> <p> Save.file_exists(save: <code>Save</code>, file_id: <code>String</code>, kind: <code>SaveScope</code>) \u00b6 returns <code>unknown</code></p> <p>Returns true if the given file path can be found   </p> <p> Save.set_file(save: <code>Save</code>, file_id: <code>String</code>, file_contents: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Save the contents of a file at the given path for the active save slot. The path is a relative style path, like <code>some/file/here</code> </p> <p> Save.set_file(save: <code>Save</code>, file_id: <code>String</code>, file_contents: <code>String</code>, kind: <code>SaveScope</code>) \u00b6 returns <code>unknown</code></p> <p>Save the contents of a file at the given path. The path is a relative style path, like <code>some/file/here</code> </p> <p> Save.get_file(save: <code>Save</code>, file_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Return the contents of the file with the given path for the active save slot. If not found, returns null   </p> <p> Save.get_file(save: <code>Save</code>, file_id: <code>String</code>, kind: <code>SaveScope</code>) \u00b6 returns <code>unknown</code></p> <p>Return the contents of the file with the given path. If not found, returns null   </p> <p> Save.set(save: <code>Save</code>, key: <code>String</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Set the value for a key to the given value, for the active save slot   </p> <p> Save.set(save: <code>Save</code>, key: <code>String</code>, value: <code>Any</code>, kind: <code>SaveScope</code>) \u00b6 returns <code>unknown</code></p> <p>Set the value for a key to the given value   </p> <p> Save.get(save: <code>Save</code>, key: <code>String</code>, default: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Returns the value for the given key if found, otherwise returns the default provided, for the active save slot   </p> <p> Save.get(save: <code>Save</code>, key: <code>String</code>, default: <code>Any</code>, kind: <code>SaveScope</code>) \u00b6 returns <code>unknown</code></p> <p>Returns the value for the given key if found, otherwise returns the default provided   </p> <p> Save.has(save: <code>Save</code>, key: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Returns true if the given key can be found, for the active save slot   </p> <p> Save.has(save: <code>Save</code>, key: <code>String</code>, kind: <code>SaveScope</code>) \u00b6 returns <code>unknown</code></p> <p>Returns true if the given key can be found   </p> <p> Save.get_keys(save: <code>Save</code>) \u00b6 returns <code>unknown</code></p> <p>Returns a list of knowns keys, for the active save slot   </p> <p> Save.get_keys(save: <code>Save</code>, kind: <code>SaveScope</code>) \u00b6 returns <code>unknown</code></p> <p>Returns a list of knowns keys   </p> <p> Save.slot_clear(save: <code>Save</code>, slot: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Slot query. Delete a save slot, return true or false for success   </p> <p> Save.slot_backup(save: <code>Save</code>, slot: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Slot query. Makes a backup of the slot, returns a slot ID of the backup if successful, null if false   </p> <p> Save.slot_modified_time(save: <code>Save</code>, slot: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Slot query. Returns the modified time for the given save slot ID   </p> <p> Save.slot_file_exists(save: <code>Save</code>, slot: <code>String</code>, file_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Slot query. Returns true if the given file path can be found for the given save slot ID   </p> <p> Save.slot_set_file(save: <code>Save</code>, slot: <code>String</code>, file_id: <code>String</code>, file_contents: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Slot query. Save the contents of a file at the given path for the given slot ID. The path is a relative style path, like <code>some/file/here</code> </p> <p> Save.slot_get_file(save: <code>Save</code>, slot: <code>String</code>, file_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Slot query. Return the contents of the file with the given path for the given slot ID. If not found, returns null   </p>"},{"location":"api/v/2025.1.1/save/#savescope","title":"SaveScope","text":"<p><code>import \"luxe: save\" for SaveScope</code></p> <p>no docs found</p> <ul> <li>slot</li> <li>user</li> </ul> <p> SaveScope.slot \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SaveScope.user \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/selection/","title":"Selection","text":""},{"location":"api/v/2025.1.1/selection/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/selection/#luxe-selection-module","title":"<code>luxe: selection</code> module","text":"<ul> <li>Selection </li> </ul>"},{"location":"api/v/2025.1.1/selection/#selection","title":"Selection","text":"<p><code>import \"luxe: selection\" for Selection</code></p> <p>no docs found</p> <ul> <li>CHANGE</li> <li>DESELECT</li> <li>SELECT</li> <li>INVALID</li> <li>PRE_CHANGE</li> <li>id</li> <li>events</li> <li>selected</li> <li>any()</li> <li>is_selected(value: <code>Any</code>)</li> <li>is_selected(value: <code>Any</code>, non_transient_only: <code>Bool</code>)</li> <li>is_invalid_selection(value: <code>Any</code>)</li> <li>count</li> <li>first</li> <li>last</li> <li>transient</li> <li>new(context: <code>String</code>)</li> <li>destroy()</li> <li>emit(kind: <code>Any</code>, items: <code>List</code>)</li> <li>start_transient(change: <code>Fn</code>)</li> <li>end_transient()</li> <li>sync(other: <code>Selection</code>)</li> <li>unsync(other: <code>Selection</code>)</li> <li>deselect()</li> <li>deselect(item: <code>Any</code>)</li> <li>deselect_items(items: <code>List</code>)</li> <li>select(item: <code>Any</code>)</li> <li>select(item: <code>Any</code>, plural: <code>Bool</code>)</li> <li>select_items(items: <code>List</code>)</li> <li>select_items(items: <code>List</code>, plural: <code>Bool</code>)</li> <li>toggle(item: <code>Any</code>)</li> <li>notify()</li> <li>set_invalid_handler(fn: <code>Fn</code>)</li> </ul> <p> Selection.CHANGE \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Selection.DESELECT \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Selection.SELECT \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Selection.INVALID \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Selection.PRE_CHANGE \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Selection.id \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Selection.events \u00b6 returns <code>Events</code></p> <p>no docs found   </p> <p> Selection.selected \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Selection.any() \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Selection.is_selected(value: <code>Any</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Selection.is_selected(value: <code>Any</code>, non_transient_only: <code>Bool</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Selection.is_invalid_selection(value: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>returns a string as a reason if not able to select, otherwise returns null   </p> <p> Selection.count \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Selection.first \u00b6 returns <code>Any</code></p> <p>no docs found   </p> <p> Selection.last \u00b6 returns <code>Any</code></p> <p>no docs found   </p> <p> Selection.transient \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Selection.new(context: <code>String</code>) \u00b6 returns <code>Selection</code></p> <p>no docs found   </p> <p> Selection.destroy() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Selection.emit(kind: <code>Any</code>, items: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Selection.start_transient(change: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>Start a transient selection where changes will be stored separately and notifed of a change directly   </p> <p> Selection.end_transient() \u00b6 returns <code>None</code></p> <p>End a transient selection, read .selected before calling to capture the transient selection   </p> <p> Selection.sync(other: <code>Selection</code>) \u00b6 returns <code>unknown</code></p> <p>Sync selection with another instance.   </p> <p> Selection.unsync(other: <code>Selection</code>) \u00b6 returns <code>unknown</code></p> <p>Stop syncing selection.   </p> <p> Selection.deselect() \u00b6 returns <code>unknown</code></p> <p>Clear the selection. emits <code>DESELECT</code> with a list of items deselected   </p> <p> Selection.deselect(item: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Deselect the given item. emits <code>DESELECT</code> with a list containing the item   </p> <p> Selection.deselect_items(items: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>Deselect the given items. emits <code>DESELECT</code> with a list containing the items (ones that were actually selected)   </p> <p> Selection.select(item: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>select the given item. emits <code>SELECT</code> with a list containing the item   </p> <p> Selection.select(item: <code>Any</code>, plural: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>Select the given item, and if plural is true, the item              is added to the existing selection. If not, the selection             is cleared and only this item is selected afterward.              Emits <code>SELECT</code> with a list containing the item   </p> <p> Selection.select_items(items: <code>List</code>) \u00b6 returns <code>None</code></p> <p>Select multiple items. Replaces the current selection. Emits <code>SELECT</code> with a list containing the items   </p> <p> Selection.select_items(items: <code>List</code>, plural: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Select the given items, and if plural is true, the items              are added to the existing selection. If not, the selection             is cleared and only the items are selected afterward.              Emits <code>SELECT</code> with a list containing the items   </p> <p> Selection.toggle(item: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Selection.notify() \u00b6 returns <code>None</code></p> <p>send a change event for the selection   </p> <p> Selection.set_invalid_handler(fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/semver/","title":"Semver","text":""},{"location":"api/v/2025.1.1/semver/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/semver/#luxe-semver-module","title":"<code>luxe: semver</code> module","text":"<ul> <li>Comparator </li> <li>SemVer </li> <li>SemVerRange </li> <li>SemVerSubset </li> <li>SemVerSubsetInterval </li> </ul>"},{"location":"api/v/2025.1.1/semver/#comparator","title":"Comparator","text":"<p><code>import \"luxe: semver\" for Comparator</code></p> <p>no docs found</p> <ul> <li>value</li> <li>semver</li> <li>operator</li> <li>loose</li> <li>any</li> <li>new(comp: <code>Any</code>)</li> <li>new(comp: <code>Any</code>, loose: <code>Any</code>)</li> <li>create(comp: <code>Any</code>, loose: <code>Any</code>)</li> <li>inverted()</li> <li>test(version: <code>Any</code>)</li> <li>parse(comp: <code>Any</code>)</li> <li>debug(a: <code>Any</code>)</li> <li>intersects(comp: <code>Any</code>)</li> <li>intersects(comp: <code>Any</code>, loose: <code>Any</code>)</li> </ul> <p> Comparator.value \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Comparator.semver \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Comparator.operator \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Comparator.loose \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Comparator.any \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Comparator.new(comp: <code>Any</code>) \u00b6 returns <code>Comparator</code></p> <p>no docs found   </p> <p> Comparator.new(comp: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>Comparator</code></p> <p>no docs found   </p> <p> Comparator.create(comp: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>Comparator</code></p> <p>no docs found   </p> <p> Comparator.inverted() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Comparator.test(version: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Comparator.parse(comp: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Comparator.debug(a: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Comparator.intersects(comp: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Comparator.intersects(comp: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/semver/#semver","title":"SemVer","text":"<p><code>import \"luxe: semver\" for SemVer</code></p> <p>no docs found</p> <ul> <li>SPEC</li> <li>loose</li> <li>version</li> <li>major</li> <li>minor</li> <li>patch</li> <li>build</li> <li>prerelease</li> <li>raw</li> <li>new(version: <code>Any</code>)</li> <li>new(version: <code>Any</code>, loose: <code>Any</code>)</li> <li>create(version: <code>Any</code>, loose: <code>Any</code>)</li> <li>format()</li> <li>!=(other: <code>Any</code>)</li> <li>==(other: <code>Any</code>)</li> <li>&lt;=(other: <code>Any</code>)</li> <li>&gt;=(other: <code>Any</code>)</li> <li>&gt;(other: <code>Any</code>)</li> <li>&lt;(other: <code>Any</code>)</li> <li>inc(release: <code>Any</code>)</li> <li>inc(release: <code>Any</code>, identifier: <code>Any</code>)</li> <li>compare(other: <code>Any</code>)</li> <li>inc(version: <code>Any</code>, release: <code>Any</code>)</li> <li>inc(version: <code>Any</code>, release: <code>Any</code>, identifier: <code>Any</code>)</li> <li>inc(version: <code>Any</code>, release: <code>Any</code>, loose: <code>Any</code>, identifier: <code>Any</code>)</li> <li>parse(version: <code>Any</code>)</li> <li>parse(version: <code>Any</code>, loose: <code>Any</code>)</li> <li>valid(version: <code>Any</code>)</li> <li>valid(version: <code>Any</code>, loose: <code>Any</code>)</li> <li>clean(version: <code>Any</code>)</li> <li>clean(version: <code>Any</code>, loose: <code>Any</code>)</li> <li>diff(version1: <code>Any</code>, version2: <code>Any</code>)</li> <li>major(a: <code>Any</code>)</li> <li>major(a: <code>Any</code>, loose: <code>Any</code>)</li> <li>minor(a: <code>Any</code>)</li> <li>minor(a: <code>Any</code>, loose: <code>Any</code>)</li> <li>patch(a: <code>Any</code>)</li> <li>patch(a: <code>Any</code>, loose: <code>Any</code>)</li> <li>prerelease(a: <code>Any</code>)</li> <li>prerelease(a: <code>Any</code>, loose: <code>Any</code>)</li> <li>compare(a: <code>Any</code>, b: <code>Any</code>)</li> <li>compare(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>)</li> <li>rcompare(a: <code>Any</code>, b: <code>Any</code>)</li> <li>rcompare(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>)</li> <li>sort(list: <code>Any</code>)</li> <li>sort(list: <code>Any</code>, loose: <code>Any</code>)</li> <li>rsort(list: <code>Any</code>)</li> <li>rsort(list: <code>Any</code>, loose: <code>Any</code>)</li> <li>gt(a: <code>Any</code>, b: <code>Any</code>)</li> <li>gt(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>)</li> <li>lt(a: <code>Any</code>, b: <code>Any</code>)</li> <li>lt(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>)</li> <li>gte(a: <code>Any</code>, b: <code>Any</code>)</li> <li>gte(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>)</li> <li>lte(a: <code>Any</code>, b: <code>Any</code>)</li> <li>lte(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>)</li> <li>eq(a: <code>Any</code>, b: <code>Any</code>)</li> <li>eq(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>)</li> <li>neq(a: <code>Any</code>, b: <code>Any</code>)</li> <li>neq(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>)</li> <li>cmp(a: <code>Any</code>, op: <code>Any</code>, b: <code>Any</code>)</li> <li>cmp(a: <code>Any</code>, op: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>)</li> <li>max_satisfying(versions: <code>Any</code>, range: <code>Any</code>)</li> <li>max_satisfying(versions: <code>Any</code>, range: <code>Any</code>, loose: <code>Any</code>)</li> <li>min_satisfying(versions: <code>Any</code>, range: <code>Any</code>)</li> <li>min_satisfying(versions: <code>Any</code>, range: <code>Any</code>, loose: <code>Any</code>)</li> <li>satisfies(version: <code>Any</code>, range: <code>Any</code>)</li> <li>satisfies(version: <code>Any</code>, range: <code>Any</code>, loose: <code>Any</code>)</li> <li>valid_range(range: <code>Any</code>)</li> <li>valid_range(range: <code>Any</code>, loose: <code>Any</code>)</li> <li>ltr(version: <code>Any</code>, range: <code>Any</code>)</li> <li>ltr(version: <code>Any</code>, range: <code>Any</code>, loose: <code>Any</code>)</li> <li>gtr(version: <code>Any</code>, range: <code>Any</code>)</li> <li>gtr(version: <code>Any</code>, range: <code>Any</code>, loose: <code>Any</code>)</li> <li>outside(version: <code>Any</code>, range: <code>Any</code>, hilo: <code>Any</code>)</li> <li>outside(version: <code>Any</code>, range: <code>Any</code>, hilo: <code>Any</code>, loose: <code>Any</code>)</li> <li>debug(a: <code>Any</code>)</li> <li>compare_main(other: <code>Any</code>)</li> <li>first_not_zero(a: <code>Any</code>, b: <code>Any</code>)</li> <li>first_not_zero(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>)</li> <li>compare_pre(other: <code>Any</code>)</li> <li>compare_identifiers(a: <code>Any</code>, b: <code>Any</code>)</li> </ul> <p> SemVer.SPEC \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.loose \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.version \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.major \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.minor \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.patch \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.build \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.prerelease \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.raw \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.new(version: <code>Any</code>) \u00b6 returns <code>SemVer</code></p> <p>no docs found   </p> <p> SemVer.new(version: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>SemVer</code></p> <p>no docs found   </p> <p> SemVer.create(version: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>SemVer</code></p> <p>no docs found   </p> <p> SemVer.format() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer !=(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer ==(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p>&lt;endpoint module=\"luxe: semver\" class=\"SemVer\" signature=\"&lt;=(other : Any)\"&gt; &lt;signature id=\"SemVer.&lt;=\"&gt;SemVer &lt;=(other: <code>Any</code>) &lt;a class=\"headerlink\" href=\"#SemVer.&lt;=\" title=\"Permanent link\"&gt;\u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> other: <code>Any</code>)  returns <code>unknown</code> <p>no docs found   </p> <p> other: <code>Any</code>)  returns <code>unknown</code> <p>no docs found   </p> <p>&lt;endpoint module=\"luxe: semver\" class=\"SemVer\" signature=\"&lt;(other : Any)\"&gt; &lt;signature id=\"SemVer.&lt;\"&gt;SemVer &lt;(other: <code>Any</code>) &lt;a class=\"headerlink\" href=\"#SemVer.&lt;\" title=\"Permanent link\"&gt;\u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.inc(release: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.inc(release: <code>Any</code>, identifier: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.compare(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.inc(version: <code>Any</code>, release: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.inc(version: <code>Any</code>, release: <code>Any</code>, identifier: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.inc(version: <code>Any</code>, release: <code>Any</code>, loose: <code>Any</code>, identifier: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.parse(version: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.parse(version: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.valid(version: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.valid(version: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.clean(version: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.clean(version: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.diff(version1: <code>Any</code>, version2: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.major(a: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.major(a: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.minor(a: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.minor(a: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.patch(a: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.patch(a: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.prerelease(a: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.prerelease(a: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.compare(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.compare(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.rcompare(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.rcompare(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.sort(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.sort(list: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.rsort(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.rsort(list: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.gt(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.gt(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.lt(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.lt(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.gte(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.gte(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.lte(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.lte(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.eq(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.eq(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.neq(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.neq(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.cmp(a: <code>Any</code>, op: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.cmp(a: <code>Any</code>, op: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.max_satisfying(versions: <code>Any</code>, range: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.max_satisfying(versions: <code>Any</code>, range: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.min_satisfying(versions: <code>Any</code>, range: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.min_satisfying(versions: <code>Any</code>, range: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.satisfies(version: <code>Any</code>, range: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.satisfies(version: <code>Any</code>, range: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.valid_range(range: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.valid_range(range: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.ltr(version: <code>Any</code>, range: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.ltr(version: <code>Any</code>, range: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.gtr(version: <code>Any</code>, range: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.gtr(version: <code>Any</code>, range: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.outside(version: <code>Any</code>, range: <code>Any</code>, hilo: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.outside(version: <code>Any</code>, range: <code>Any</code>, hilo: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.debug(a: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.compare_main(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.first_not_zero(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.first_not_zero(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.compare_pre(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.compare_identifiers(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/semver/#semverrange","title":"Semver","text":"<p><code>import \"luxe: semver\" for SemVerRange</code></p> <p>no docs found</p> <ul> <li>any</li> <li>empty</li> <li>debug(a: <code>Any</code>)</li> <li>set</li> <li>loose</li> <li>range</li> <li>raw</li> <li>isEmpty</li> <li>isAny</li> <li>new(range: <code>Any</code>)</li> <li>new(range: <code>Any</code>, loose: <code>Any</code>)</li> <li>create(range: <code>Any</code>, loose: <code>Any</code>)</li> <li>format()</li> <li>union(other: <code>Any</code>)</li> <li>intersects(range: <code>Any</code>)</li> <li>intersects(range: <code>Any</code>, loose: <code>Any</code>)</li> <li>pick_not_infinite(a: <code>Any</code>, b: <code>Any</code>)</li> <li>pick_infinite(a: <code>Any</code>, b: <code>Any</code>)</li> <li>comparator_intersection(a: <code>Any</code>, b: <code>Any</code>)</li> <li>intersection(other: <code>Any</code>)</li> <li>inverted()</li> <li>subset_contains(other: <code>Any</code>)</li> <li>subset_contains(other: <code>Any</code>, loose: <code>Any</code>)</li> <li>subset_of(other: <code>Any</code>)</li> <li>subset_of(other: <code>Any</code>, loose: <code>Any</code>)</li> <li>subset(needle: <code>Any</code>, haystack: <code>Any</code>)</li> <li>subset(needle: <code>Any</code>, haystack: <code>Any</code>, loose: <code>Any</code>)</li> <li>test(version: <code>Any</code>)</li> <li>is_x(id: <code>Any</code>)</li> <li>test_set(set: <code>Any</code>, version: <code>Any</code>)</li> <li>parse_range(range: <code>Any</code>)</li> <li>parse_comparator(comp: <code>Any</code>, loose: <code>Any</code>)</li> <li>replace_carets(comp: <code>Any</code>, loose: <code>Any</code>)</li> <li>replace_caret(comp: <code>Any</code>, loose: <code>Any</code>)</li> <li>replace_tildes(comp: <code>Any</code>, loose: <code>Any</code>)</li> <li>replace_tilde(comp: <code>Any</code>, loose: <code>Any</code>)</li> <li>replace_x_ranges(comp: <code>Any</code>, loose: <code>Any</code>)</li> <li>replace_x_range(comp: <code>Any</code>, loose: <code>Any</code>)</li> <li>replace_stars(comp: <code>Any</code>, loose: <code>Any</code>)</li> </ul> <p> SemVerRange.any \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.empty \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.debug(a: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.set \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.loose \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.range \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.raw \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.isEmpty \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.isAny \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.new(range: <code>Any</code>) \u00b6 returns <code>SemVerRange</code></p> <p>no docs found   </p> <p> SemVerRange.new(range: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>SemVerRange</code></p> <p>no docs found   </p> <p> SemVerRange.create(range: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>SemVerRange</code></p> <p>no docs found   </p> <p> SemVerRange.format() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.union(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.intersects(range: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.intersects(range: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.pick_not_infinite(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.pick_infinite(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.comparator_intersection(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.intersection(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.inverted() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.subset_contains(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.subset_contains(other: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.subset_of(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.subset_of(other: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.subset(needle: <code>Any</code>, haystack: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.subset(needle: <code>Any</code>, haystack: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.test(version: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.is_x(id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.test_set(set: <code>Any</code>, version: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.parse_range(range: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.parse_comparator(comp: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.replace_carets(comp: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.replace_caret(comp: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.replace_tildes(comp: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.replace_tilde(comp: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.replace_x_ranges(comp: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.replace_x_range(comp: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.replace_stars(comp: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/semver/#semversubset","title":"Semver","text":"<p><code>import \"luxe: semver\" for SemVerSubset</code></p> <p>no docs found</p> <ul> <li>subset(needle: <code>Any</code>, haystack: <code>Any</code>)</li> <li>subset(needle: <code>Any</code>, haystack: <code>Any</code>, loose: <code>Any</code>)</li> <li>gen_interval(comparators: <code>Any</code>)</li> <li>orderEq(v1: <code>Any</code>, v2: <code>Any</code>)</li> <li>orderGt(v1: <code>Any</code>, v2: <code>Any</code>)</li> <li>orderLt(v1: <code>Any</code>, v2: <code>Any</code>)</li> <li>isSubset(needle: <code>Any</code>, haystack: <code>Any</code>)</li> </ul> <p> SemVerSubset.subset(needle: <code>Any</code>, haystack: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerSubset.subset(needle: <code>Any</code>, haystack: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerSubset.gen_interval(comparators: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerSubset.orderEq(v1: <code>Any</code>, v2: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerSubset.orderGt(v1: <code>Any</code>, v2: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerSubset.orderLt(v1: <code>Any</code>, v2: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerSubset.isSubset(needle: <code>Any</code>, haystack: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/semver/#semversubsetinterval","title":"Semver","text":"<p><code>import \"luxe: semver\" for SemVerSubsetInterval</code></p> <p>no docs found</p> <ul> <li>left</li> <li>right</li> <li>leftValue</li> <li>rightValue</li> <li>new(left: <code>Any</code>, leftValue: <code>Any</code>, rightValue: <code>Any</code>, right: <code>Any</code>)</li> </ul> <p> SemVerSubsetInterval.left \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerSubsetInterval.right \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerSubsetInterval.leftValue \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerSubsetInterval.rightValue \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerSubsetInterval.new(left: <code>Any</code>, leftValue: <code>Any</code>, rightValue: <code>Any</code>, right: <code>Any</code>) \u00b6 returns <code>SemVerSubsetInterval</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/settings/","title":"Settings","text":""},{"location":"api/v/2025.1.1/settings/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/settings/#luxe-settings-module","title":"<code>luxe: settings</code> module","text":"<ul> <li>Settings </li> <li>SettingsType </li> </ul>"},{"location":"api/v/2025.1.1/settings/#settings","title":"Settings","text":"<p><code>import \"luxe: settings\" for Settings</code></p> <p>no docs found</p> <ul> <li>apply(settings_id: <code>String</code>)</li> <li>apply(settings_id: <code>String</code>, settings_lx_data: <code>String</code>)</li> <li>unapply(settings_id: <code>String</code>)</li> <li>forget(key: <code>String</code>)</li> <li>has(key: <code>String</code>)</li> <li>get(key: <code>String</code>, default: <code>Any</code>)</li> <li>set_string(key: <code>String</code>, value: <code>String</code>, length: <code>Num</code>)</li> <li>set_number(key: <code>String</code>, value: <code>Num</code>)</li> <li>set_bool(key: <code>String</code>, value: <code>Bool</code>)</li> <li>set_float2(key: <code>String</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>set_float3(key: <code>String</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>set_float4(key: <code>String</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>)</li> <li>set(key: <code>String</code>, value: <code>Any</code>)</li> </ul> <p> Settings.apply(settings_id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Settings.apply(settings_id: <code>String</code>, settings_lx_data: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Settings.unapply(settings_id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Settings.forget(key: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Settings.has(key: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Settings.get(key: <code>String</code>, default: <code>Any</code>) \u00b6 returns <code>Any</code></p> <p>no docs found   </p> <p> Settings.set_string(key: <code>String</code>, value: <code>String</code>, length: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Settings.set_number(key: <code>String</code>, value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Settings.set_bool(key: <code>String</code>, value: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Settings.set_float2(key: <code>String</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Settings.set_float3(key: <code>String</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Settings.set_float4(key: <code>String</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Settings.set(key: <code>String</code>, value: <code>Any</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/settings/#settingstype","title":"SettingsType","text":"<p><code>import \"luxe: settings\" for SettingsType</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>boolean</li> <li>number</li> <li>string</li> <li>float2</li> <li>float3</li> <li>float4</li> <li>name(value: <code>Any</code>)</li> </ul> <p> SettingsType.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SettingsType.boolean \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SettingsType.number \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SettingsType.string \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SettingsType.float2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SettingsType.float3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SettingsType.float4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SettingsType.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/shape2D/","title":"shape2D","text":""},{"location":"api/v/2025.1.1/shape2D/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/shape2D/#luxe-shape2d-module","title":"<code>luxe: shape2D</code> module","text":"<ul> <li>Ray2D </li> <li>Ray2DType </li> <li>Shape2D </li> <li>Shape2DType </li> </ul>"},{"location":"api/v/2025.1.1/shape2D/#ray2d","title":"Ray2D","text":"<p><code>import \"luxe: shape2D\" for Ray2D</code></p> <p>no docs found</p> <ul> <li>create(start: <code>Any</code>, end: <code>Any</code>, type: <code>Any</code>)</li> <li>set(ray: <code>Any</code>, start: <code>Any</code>, end: <code>Any</code>, type: <code>Any</code>)</li> <li>set_start(ray: <code>Any</code>, start: <code>Any</code>)</li> <li>set_end(ray: <code>Any</code>, end: <code>Any</code>)</li> <li>set_type(ray: <code>Any</code>, type: <code>Any</code>)</li> <li>get_start(ray: <code>Any</code>)</li> <li>get_end(ray: <code>Any</code>)</li> <li>get_type(ray: <code>Any</code>)</li> </ul> <p> Ray2D.create(start: <code>Any</code>, end: <code>Any</code>, type: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Ray2D.set(ray: <code>Any</code>, start: <code>Any</code>, end: <code>Any</code>, type: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Ray2D.set_start(ray: <code>Any</code>, start: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Ray2D.set_end(ray: <code>Any</code>, end: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Ray2D.set_type(ray: <code>Any</code>, type: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Ray2D.get_start(ray: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Ray2D.get_end(ray: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Ray2D.get_type(ray: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/shape2D/#ray2dtype","title":"Ray2DType","text":"<p><code>import \"luxe: shape2D\" for Ray2DType</code></p> <p>no docs found</p> <ul> <li>finite</li> <li>infinite_end</li> <li>infinite</li> <li>from_string(value: <code>Any</code>)</li> <li>name(value: <code>Any</code>)</li> </ul> <p> Ray2DType.finite \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Ray2DType.infinite_end \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Ray2DType.infinite \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Ray2DType.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Ray2DType.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/shape2D/#shape2d","title":"Shape2D","text":"<p><code>import \"luxe: shape2D\" for Shape2D</code></p> <p>no docs found</p> <ul> <li>create_poly(pos: <code>Any</code>, angle: <code>Any</code>, scale: <code>Any</code>, verts: <code>Any</code>)</li> <li>create_ngon(pos: <code>Any</code>, angle: <code>Any</code>, scale: <code>Any</code>, sides: <code>Any</code>, radius: <code>Any</code>)</li> <li>create_rect(pos: <code>Any</code>, angle: <code>Any</code>, scale: <code>Any</code>, size: <code>Any</code>, centered: <code>Any</code>)</li> <li>create_circle(pos: <code>Any</code>, angle: <code>Any</code>, scale: <code>Any</code>, radius: <code>Any</code>)</li> <li>destroy(shape: <code>Any</code>)</li> <li>set_pos(shape: <code>Any</code>, pos: <code>Any</code>)</li> <li>set_rotation(shape: <code>Any</code>, angle: <code>Any</code>)</li> <li>set_scale(shape: <code>Any</code>, scale: <code>Any</code>)</li> <li>get_type(shape: <code>Any</code>)</li> <li>get_pos(shape: <code>Any</code>)</li> <li>get_bounds(shape: <code>Any</code>, into: <code>Any</code>)</li> <li>get_rotation(shape: <code>Any</code>)</li> <li>get_scale(shape: <code>Any</code>)</li> <li>get_verts(shape: <code>Any</code>)</li> <li>get_radius(shape: <code>Any</code>)</li> </ul> <p> Shape2D.create_poly(pos: <code>Any</code>, angle: <code>Any</code>, scale: <code>Any</code>, verts: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.create_ngon(pos: <code>Any</code>, angle: <code>Any</code>, scale: <code>Any</code>, sides: <code>Any</code>, radius: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.create_rect(pos: <code>Any</code>, angle: <code>Any</code>, scale: <code>Any</code>, size: <code>Any</code>, centered: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.create_circle(pos: <code>Any</code>, angle: <code>Any</code>, scale: <code>Any</code>, radius: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.destroy(shape: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.set_pos(shape: <code>Any</code>, pos: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.set_rotation(shape: <code>Any</code>, angle: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.set_scale(shape: <code>Any</code>, scale: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.get_type(shape: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.get_pos(shape: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.get_bounds(shape: <code>Any</code>, into: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.get_rotation(shape: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.get_scale(shape: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.get_verts(shape: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.get_radius(shape: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/shape2D/#shape2dtype","title":"Shape2DType","text":"<p><code>import \"luxe: shape2D\" for Shape2DType</code></p> <p>no docs found</p> <ul> <li>poly</li> <li>circle</li> <li>from_string(value: <code>Any</code>)</li> <li>name(value: <code>Any</code>)</li> </ul> <p> Shape2DType.poly \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2DType.circle \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2DType.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2DType.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/string/","title":"String","text":""},{"location":"api/v/2025.1.1/string/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/string/#luxe-string-module","title":"<code>luxe: string</code> module","text":"<ul> <li>Loc </li> <li>Str </li> </ul>"},{"location":"api/v/2025.1.1/string/#loc","title":"Loc","text":"<p><code>import \"luxe: string\" for Loc</code></p> <p>Interface for the localisation system.</p> <p>Each translation always exists in a space and in a language. Spaces are contexts, so you might want different spaces for dialogue/menus/icons. Or you can leave everything in the default \"game\" translation space.</p> <p>Unless specified otherwise, the system will fetch the string from the currently active language if possible, if its not available there it will fall back to the set primary language. If the key isn't registered for that either, \"MISSING.STRING\" will be returned.</p> <p>By default there is no active active language set and the primary language is \"en\".</p> <pre><code>    //by default language is not set and primary language is `en` with no registered strings\n    Log.print(Strings.get(Loc.get_language())) //null\n    Log.print(Strings.get(Loc.get_primary())) //en\n    Loc.set_language(\"en\")\n    Log.print(Loc.get(\"start_game\")) //MISSING.STRING\n\n    //as soon as we add a line, we can query it\n    Loc.add(\"en\", Loc.default_space, \"start_game\", \"Start Game!\")\n    Log.print(Loc.get(\"start_game\")) //Start Game!\n\n    //if we query a word in a language where that translation doesnt exist yet (like toki pona here), it falls back to the primary language\n    Log.print(Loc.get(\"tp\", Loc.default_space, \"start_game\")) //Start Game!\n\n    //but as soon as it is registered, the translation in the respective language is returned\n    Loc.add(\"tp\", Loc.default_space, \"start_game\", \"o open e musi!\")\n    Log.print(Loc.get(\"tp\", Loc.default_space, \"start_game\")) //o open e musi!\n        \n    //same when we set the current language and use the shorthand get\n    Loc.set_language(\"tp\")\n    Log.print(Loc.get(\"start_game\")) //o open e musi!\n</code></pre> <ul> <li>default_space</li> <li>missing_string</li> <li>set_primary(language: <code>String</code>)</li> <li>get_primary()</li> <li>set_language(language: <code>String</code>)</li> <li>get_language()</li> <li>add_language(language: <code>String</code>, plural_form: <code>String</code>)</li> <li>add(language: <code>String</code>, space: <code>String</code>, key: <code>String</code>, string: <code>String</code>)</li> <li>add_plural(language: <code>String</code>, space: <code>String</code>, key: <code>String</code>, strings: <code>List</code>)</li> <li>get(language: <code>String</code>, space: <code>String</code>, key: <code>String</code>)</li> <li>has(language: <code>String</code>, space: <code>String</code>, key: <code>String</code>)</li> <li>get_plural(language: <code>String</code>, space: <code>String</code>, key: <code>String</code>, count: <code>Num</code>)</li> <li>get(space: <code>String</code>, key: <code>String</code>)</li> <li>get(key: <code>String</code>)</li> <li>has(key: <code>String</code>)</li> <li>load_primary(asset_id: <code>String</code>)</li> <li>load_language(asset_id: <code>String</code>)</li> <li>load_language(asset_id: <code>String</code>, primary: <code>Bool</code>)</li> </ul> <p> Loc.default_space \u00b6 returns <code>unknown</code></p> <p>The default space for localisations, \\\"game\\\".   </p> <p> Loc.missing_string \u00b6 returns <code>unknown</code></p> <p>The missing string fallback for the engine, typically \\\"MISSING.STRING\\\".   </p> <p> Loc.set_primary(language: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Set the primary language that is used as fallback if a key can't be found in another language.   </p> <p> Loc.get_primary() \u00b6 returns <code>unknown</code></p> <p>Get the primary language.   </p> <p> Loc.set_language(language: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Set the current language that strings are gotten for unless specified otherwise.   </p> <p> Loc.get_language() \u00b6 returns <code>unknown</code></p> <p>Get the current language.   </p> <p> Loc.add_language(language: <code>String</code>, plural_form: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Add a language with the given <code>id</code> and <code>plural_form</code> expression string (just the expression part, not the whole header).   </p> <p> Loc.add(language: <code>String</code>, space: <code>String</code>, key: <code>String</code>, string: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Add a string to the localisation system.   </p> <p> Loc.add_plural(language: <code>String</code>, space: <code>String</code>, key: <code>String</code>, strings: <code>List</code>) \u00b6 returns <code>None</code></p> <p>Add a plural string to the localisation system.   </p> <p> Loc.get(language: <code>String</code>, space: <code>String</code>, key: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Get the string for a key (or fallback in primary language) from the localisation system for a specific language/space.   </p> <p> Loc.has(language: <code>String</code>, space: <code>String</code>, key: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Check if the string for a key exists in the localisation system for a specific language/space.   </p> <p> Loc.get_plural(language: <code>String</code>, space: <code>String</code>, key: <code>String</code>, count: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Get the string for a key from the localisation system for a specific language/space, with the plural count.   </p> <p> Loc.get(space: <code>String</code>, key: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Get the string for a key (or fallback in primary language) from the localisation system in the current language and in a specific space.   </p> <p> Loc.get(key: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Get the string for a key (or fallback in primary language) from the localisation system in the current language and in the default space.   </p> <p> Loc.has(key: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Check if the string for a key exists in the localisation system for the current language and default space   </p> <p> Loc.load_primary(asset_id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Loc.load_language(asset_id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Loc.load_language(asset_id: <code>String</code>, primary: <code>Bool</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/string/#str","title":"Str","text":"<p><code>import \"luxe: string\" for Str</code></p> <p>Utility class for String functions.</p> <ul> <li>split_lines(string: <code>String</code>)</li> <li>split(string: <code>String</code>, delim: <code>String</code>)</li> <li>indent_strip(string: <code>String</code>)</li> <li>indent(string: <code>String</code>)</li> <li>trim(string: <code>String</code>)</li> <li>compare(a: <code>String</code>, b: <code>String</code>)</li> <li>replace(string: <code>String</code>, sub: <code>String</code>, repl: <code>String</code>)</li> <li>is_alphanumeric(str: <code>String</code>)</li> <li>is_numeric(str: <code>String</code>)</li> <li>increment_end(string: <code>String</code>)</li> <li>vec(value: <code>Vec</code>)</li> <li>vec(value: <code>Vec</code>, precision: <code>Num</code>)</li> <li>vec(value: <code>Vec</code>, precision: <code>Num</code>, sep: <code>String</code>)</li> <li>fixed(number: <code>Num</code>, precision: <code>Num</code>)</li> <li>fixed(number: <code>Num</code>)</li> <li>fixed(number: <code>Num</code>, precision: <code>Num</code>, padded: <code>Bool</code>)</li> <li>hex(number: <code>Num</code>)</li> <li>binary(number: <code>Num</code>)</li> <li>binary(number: <code>Num</code>, bit_width: <code>Num</code>)</li> <li>path_is_absolute(path: <code>String</code>)</li> <li>path_directory(path: <code>String</code>)</li> <li>path_filename(path: <code>String</code>)</li> <li>path_extension(path: <code>String</code>)</li> <li>path_extensionless(path: <code>String</code>)</li> <li>bytes_formatted(byte_count: <code>Num</code>)</li> <li>bytes_formatted(byte_count: <code>Num</code>, precision: <code>Num</code>)</li> <li>upper(string: <code>String</code>)</li> <li>lower(string: <code>String</code>)</li> <li>wrap(string: <code>String</code>, column: <code>Num</code>)</li> <li>path(path: <code>String</code>)</li> <li>strip_markup(string: <code>String</code>)</li> <li>path_normalize(string: <code>String</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>, arg9: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>, arg9: <code>Any</code>, arg10: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>, arg9: <code>Any</code>, arg10: <code>Any</code>, arg11: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>, arg9: <code>Any</code>, arg10: <code>Any</code>, arg11: <code>Any</code>, arg12: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>, arg9: <code>Any</code>, arg10: <code>Any</code>, arg11: <code>Any</code>, arg12: <code>Any</code>, arg13: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>, arg9: <code>Any</code>, arg10: <code>Any</code>, arg11: <code>Any</code>, arg12: <code>Any</code>, arg13: <code>Any</code>, arg14: <code>Any</code>)</li> <li>format_list(string: <code>String</code>, args: <code>List</code>)</li> <li>valid(string: <code>String</code>)</li> <li>template(string: <code>String</code>, key_value_context: <code>Map</code>)</li> </ul> <p> Str.split_lines(string: <code>String</code>) \u00b6 returns <code>List</code></p> <p>Split a string into its lines. Returns <code>[\"\"]</code> for empty strings.</p> <pre><code>    var multiline_string = \\\"\\\"\\\"\n    leaf\n    tree\n    fruit\n    mushroom\n    \\\"\\\"\\\"\n\n    var split_string = Str.split_lines(multiline_string)\n    Log.print(split_string) //[leaf, tree, fruit, mushroom]\n</code></pre> <p> Str.split(string: <code>String</code>, delim: <code>String</code>) \u00b6 returns <code>List</code></p> <p>Deprecated use <code>string.split(delim)</code> Split a string at every occurance of an delimiter.</p> <pre><code>    var input = \"Owl eats Squirrel eats Nuts\"\n    var split_string = Str.split(input, \" eats \")\n    Log.print(split_string) //[Owl, Squirrel, Nuts]\n</code></pre> <p> Str.indent_strip(string: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Removes indentation from the first line of a string, and the same amount from subsequent lines if any.  Lines with shorter indentation than the first line are skipped.</p> <pre><code>    var input = \\\"\\\"\\\"\n        Sparrow\n        Pidgeon\n            Crow\n    \\\"\\\"\\\"\n    var unindented = Str.indent_strip(input)\n    Log.print(unindented) //Sparrow\\nPidgeon\\n    Crow\n</code></pre> <p> Str.indent(string: <code>String</code>) \u00b6 returns <code>Num</code></p> <p>returns how much indentation characters (whitespace or tabs) a string has.</p> <pre><code>    var line = \"\\t  text\"\n    var indent = Str.indent(line)\n    Log.print(indent) //3\n</code></pre> <p> Str.trim(string: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Trims whitespace characters (\" \", \"\\n\", \"\\t\") from front and end of an string. Calls wren core <code>String.trim</code> internally.</p> <pre><code>    var input = \"  \\n\\t   Pallas's cat   \\n\\t  \"\n    var trimmed = Str.trim(input)\n    Log.print(trimmed) //Pallas's cat\n</code></pre> <p> Str.compare(a: <code>String</code>, b: <code>String</code>) \u00b6 returns <code>Num</code></p> <p>Comparison function for strings. Order is based on the unicode number of the first non-equal codepoint or length. Returns <code>1</code> when <code>a &gt; b</code> Returns <code>-1</code> when <code>a &lt; b</code> returns <code>0</code> when theyre equal</p> <pre><code>    Log.print(Str.compare(\"a\", \"b\")) // -1\n    Log.print(Str.compare(\"a\", \"Z\")) // 1\n    Log.print(Str.compare(\"abc\", \"abc\")) // 0\n    Log.print(Str.compare(\"abc\", \"abcd\")) // -1\n    Log.print(Str.compare(\"\u00f6\", \"\u00e4\")) // 1\n</code></pre> <p> Str.replace(string: <code>String</code>, sub: <code>String</code>, repl: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Replace all occurances of one substring with another. Call wren core <code>String.replace</code> internally.</p> <pre><code>    var input = \"Hello World\"\n    var replaced = Str.replace(input, \"o\", \"\u00f8\")\n    Log.print(replaced) //Hell\u00f8 W\u00f8rld\n</code></pre> <p> Str.is_alphanumeric(str: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether all characters in a string are alphanumeric (uppercase or lowercase latin characters or arabic numerals)</p> <pre><code>    Log.print(Str.is_alphanumeric(\"Leaf\")) //true\n    Log.print(Str.is_alphanumeric(\"4Leaf\")) //true\n    Log.print(Str.is_alphanumeric(\"4-leaf\")) //false\n    Log.print(Str.is_alphanumeric(\"W\u00f8rld\")) //false\n</code></pre> <p> Str.is_numeric(str: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether all characters in a string are numeric (arabic numerals)</p> <pre><code>    Log.print(Str.is_alphanumeric(\"Leaf\")) //false\n    Log.print(Str.is_alphanumeric(\"4\")) //true\n    Log.print(Str.is_alphanumeric(\"4-leaf\")) //false\n    Log.print(Str.is_alphanumeric(\"3\u00be\")) //false\n</code></pre> <p> Str.increment_end(string: <code>String</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.vec(value: <code>Vec</code>) \u00b6 returns <code>String</code></p> <p>Get the string representation of a vector. (uses 6 digits after decimal point and spaces between numbers)   </p> <p> Str.vec(value: <code>Vec</code>, precision: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Get the string representation of a vector with the specified digits after the decimal point. (puts spaces between numbers)   </p> <p> Str.vec(value: <code>Vec</code>, precision: <code>Num</code>, sep: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Get the string representation of a vector. You can specify both the precision (digits after decimal point) and the seperator of how the vector is rendered.</p> <pre><code>    var vector = [1, 2, 3.14159265359]\n    Log.print(Str.print(vector)) //1 2 3.141593\n    Log.print(Str.print(vector, 2)) //1 2 3.14\n    Log.print(Str.print(vector, 1, \", \")) //1, 2, 3.1\n</code></pre> <p> Str.fixed(number: <code>Num</code>, precision: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Get the string representation of a number with a specified amount of digits after the decimal point.   </p> <p> Str.fixed(number: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Get the string representation of a number with 6 digits after the decimal points.   </p> <p> Str.fixed(number: <code>Num</code>, precision: <code>Num</code>, padded: <code>Bool</code>) \u00b6 returns <code>String</code></p> <p>Get the string representation of a number with a specified amount of digits after the decimal point. If padded is true, this function adds zeroes until the requested amount of digits after the decimal point is reached.   </p> <p> Str.hex(number: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Get string representation of number in base-16/hexadecimal.   </p> <p> Str.binary(number: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Get string representation of number in base-2/binary.   </p> <p> Str.binary(number: <code>Num</code>, bit_width: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Get string representation of (positive integer) number in base-2/binary. <code>bit_width</code> declares to how many digits the number should be expanded (adds zeroes to left of it).   </p> <p> Str.path_is_absolute(path: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether a path is absolute (instead of relative).   </p> <p> Str.path_directory(path: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Get the directory path of a path pointing to a file.   </p> <p> Str.path_filename(path: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Get the filename (including extension) of a path pointing to a file.   </p> <p> Str.path_extension(path: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Get the extension of a path pointing to a file.   </p> <p> Str.path_extensionless(path: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Get the filename (excluding extension) of a path pointing to a file.   </p> <p> Str.bytes_formatted(byte_count: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Get a byte size as bytes/KB/MB/GB/TB (whichever is the biggest unit that is at least 1) with 3 digits after the decimal place.   </p> <p> Str.bytes_formatted(byte_count: <code>Num</code>, precision: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Get a byte size as bytes/KB/MB/GB/TB (whichever is the biggest unit that is at least 1) with <code>precision</code> digits after the decimal place.   </p> <p> Str.upper(string: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Converts a string to all uppercase.   </p> <p> Str.lower(string: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Converts a string to all lowercase.   </p> <p> Str.wrap(string: <code>String</code>, column: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Wraps text on spaces to keep line length within column width. Does not break words that are longer than column width.   </p> <p> Str.path(path: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Normalize a path.   </p> <p> Str.strip_markup(string: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Strips the luxe markup formatting from the given string, returning the raw value   </p> <p> Str.path_normalize(string: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Normalizes the path also resolving ../ and ./ and so on   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>, arg9: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>, arg9: <code>Any</code>, arg10: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>, arg9: <code>Any</code>, arg10: <code>Any</code>, arg11: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>, arg9: <code>Any</code>, arg10: <code>Any</code>, arg11: <code>Any</code>, arg12: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>, arg9: <code>Any</code>, arg10: <code>Any</code>, arg11: <code>Any</code>, arg12: <code>Any</code>, arg13: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>, arg9: <code>Any</code>, arg10: <code>Any</code>, arg11: <code>Any</code>, arg12: <code>Any</code>, arg13: <code>Any</code>, arg14: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format_list(string: <code>String</code>, args: <code>List</code>) \u00b6 returns <code>String</code></p> <p>Format the string, replacing placeholder with other text. Placeholders are in the format <code>{x}</code>, where <code>x</code> is an index into the arguments list of <code>format_list</code>, or a numbered argument in the <code>format</code> function. Placeholders can appear multiple times and do not need to appear in order.</p> <pre><code>    Log.print(Str.format(\"{0} {1} {2}\", \"Crown\", \"Trunk\", \"Roots\")) //Crown Trunk Roots\n    Log.print(Str.format(\"{2} {1} {0}\", \"Crown\", \"Trunk\", \"Roots\")) //Roots Trunk Crown\n    Log.print(Str.format(\"{0} {0} {1}\", \"Duck\", \"Goose\")) //Duck Duck Goose\n</code></pre> <p> Str.valid(string: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Check if string is null or empty   </p> <p> Str.template(string: <code>String</code>, key_value_context: <code>Map</code>) \u00b6 returns <code>unknown</code></p> <p>A simple templating helper. Replace parts of the text with data from a given context map, by simple (non nested) string keys. For example, given the string <code>\"hello &lt;[user.name]&gt;\"</code> we can do <code>Str.template(string, {\"user.name\": name})</code>. The keys are delimited with <code>&lt;[</code> and ended with <code>]&gt;</code> in the string. Any not matched, won't be replaced. If you have a wren map with nested values, <code>LX.flatten()</code> can convert to simple key values for you. Values in the map are converted with <code>toString</code> if not a string.</p> <pre><code>  Log.print(Str.template(\"hello &lt;[user.name]&gt;\", {\"user.name\" : \"luxe\"})) //hello luxe\n</code></pre>"},{"location":"api/v/2025.1.1/terminal/","title":"Terminal","text":""},{"location":"api/v/2025.1.1/terminal/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/terminal/#luxe-terminal-module","title":"<code>luxe: terminal</code> module","text":"<ul> <li>Terminal </li> </ul>"},{"location":"api/v/2025.1.1/terminal/#terminal","title":"Terminal","text":"<p><code>import \"luxe: terminal\" for Terminal</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>red</li> <li>cyan</li> <li>reset</li> <li>pink</li> <li>purple</li> <li>lime</li> <li>dim</li> <li>green</li> </ul> <p> Terminal.new() \u00b6 returns <code>Terminal</code></p> <p>no docs found   </p> <p> Terminal.red \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Terminal.cyan \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Terminal.reset \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Terminal.pink \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Terminal.purple \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Terminal.lime \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Terminal.dim \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Terminal.green \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/test/","title":"Test","text":""},{"location":"api/v/2025.1.1/test/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/test/#luxe-test-module","title":"<code>luxe: test</code> module","text":"<ul> <li>BaseMatchers </li> <li>ConsoleReporter </li> <li>Expectation </li> <li>FiberMatchers </li> <li>Matchers </li> <li>NumMatchers </li> <li>RangeMatchers </li> <li>Reporter </li> <li>Runnable </li> <li>Skippable </li> <li>Stub </li> <li>StubMatchers </li> <li>Suite </li> </ul>"},{"location":"api/v/2025.1.1/test/#basematchers","title":"BaseMatchers","text":"<p><code>import \"luxe: test\" for BaseMatchers</code></p> <p>no docs found</p> <ul> <li>new(value: <code>Any</code>)</li> <li>value</li> <li>not</li> <li>toBe(klass: <code>Any</code>)</li> <li>toBeFalse</li> <li>toBeTrue</li> <li>toBeNull</li> <li>toEqual(other: <code>Any</code>)</li> <li>toEqualDeeply(other: <code>Any</code>)</li> </ul> <p> BaseMatchers.new(value: <code>Any</code>) \u00b6 returns <code>BaseMatchers</code></p> <p>no docs found   </p> <p> BaseMatchers.value \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BaseMatchers.not \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BaseMatchers.toBe(klass: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BaseMatchers.toBeFalse \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BaseMatchers.toBeTrue \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BaseMatchers.toBeNull \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BaseMatchers.toEqual(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BaseMatchers.toEqualDeeply(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/test/#consolereporter","title":"ConsoleReporter","text":"<p><code>import \"luxe: test\" for ConsoleReporter</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>print_colors=(v : Any)</li> <li>epilogue()</li> <li>runnableSkipped(skippable: <code>Any</code>)</li> <li>suiteStart(title: <code>Any</code>)</li> <li>suiteEnd(title: <code>Any</code>)</li> <li>testStart(runnable: <code>Any</code>)</li> <li>testEnd(runnable: <code>Any</code>)</li> <li>testPassed(runnable: <code>Any</code>)</li> <li>testFailed(runnable: <code>Any</code>)</li> <li>testError(runnable: <code>Any</code>)</li> </ul> <p> ConsoleReporter.new() \u00b6 returns <code>ConsoleReporter</code></p> <p>no docs found   </p> <p> ConsoleReporter.print_colors=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ConsoleReporter.epilogue() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ConsoleReporter.runnableSkipped(skippable: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ConsoleReporter.suiteStart(title: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ConsoleReporter.suiteEnd(title: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ConsoleReporter.testStart(runnable: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ConsoleReporter.testEnd(runnable: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ConsoleReporter.testPassed(runnable: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ConsoleReporter.testFailed(runnable: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ConsoleReporter.testError(runnable: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/test/#expectation","title":"Expectation","text":"<p><code>import \"luxe: test\" for Expectation</code></p> <p>no docs found</p> <ul> <li>new(passed: <code>Any</code>, message: <code>Any</code>)</li> <li>passed</li> <li>message</li> </ul> <p> Expectation.new(passed: <code>Any</code>, message: <code>Any</code>) \u00b6 returns <code>Expectation</code></p> <p>no docs found   </p> <p> Expectation.passed \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Expectation.message \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/test/#fibermatchers","title":"FiberMatchers","text":"<p><code>import \"luxe: test\" for FiberMatchers</code></p> <p>no docs found</p> <ul> <li>new(value: <code>Any</code>)</li> <li>toBeARuntimeError</li> <li>toBeARuntimeError(errorMessage: <code>Any</code>)</li> <li>toBeDone</li> </ul> <p> FiberMatchers.new(value: <code>Any</code>) \u00b6 returns <code>FiberMatchers</code></p> <p>no docs found   </p> <p> FiberMatchers.toBeARuntimeError \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> FiberMatchers.toBeARuntimeError(errorMessage: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> FiberMatchers.toBeDone \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/test/#matchers","title":"Matchers","text":"<p><code>import \"luxe: test\" for Matchers</code></p> <p>no docs found</p> <ul> <li>new(value: <code>Any</code>)</li> </ul> <p> Matchers.new(value: <code>Any</code>) \u00b6 returns <code>Matchers</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/test/#nummatchers","title":"NumMatchers","text":"<p><code>import \"luxe: test\" for NumMatchers</code></p> <p>no docs found</p> <ul> <li>new(value: <code>Any</code>)</li> <li>toBeGreaterThan(other: <code>Any</code>)</li> <li>toBeLessThan(other: <code>Any</code>)</li> <li>toBeBetween(min: <code>Any</code>, max: <code>Any</code>)</li> </ul> <p> NumMatchers.new(value: <code>Any</code>) \u00b6 returns <code>NumMatchers</code></p> <p>no docs found   </p> <p> NumMatchers.toBeGreaterThan(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NumMatchers.toBeLessThan(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NumMatchers.toBeBetween(min: <code>Any</code>, max: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/test/#rangematchers","title":"RangeMatchers","text":"<p><code>import \"luxe: test\" for RangeMatchers</code></p> <p>no docs found</p> <ul> <li>new(value: <code>Any</code>)</li> <li>toContain(other: <code>Any</code>)</li> <li>toBeContainedBy(other: <code>Any</code>)</li> </ul> <p> RangeMatchers.new(value: <code>Any</code>) \u00b6 returns <code>RangeMatchers</code></p> <p>no docs found   </p> <p> RangeMatchers.toContain(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RangeMatchers.toBeContainedBy(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/test/#reporter","title":"Reporter","text":"<p><code>import \"luxe: test\" for Reporter</code></p> <p>no docs found</p> <ul> <li>epilogue()</li> <li>runnableSkipped(skippable: <code>Any</code>)</li> <li>suiteStart(title: <code>Any</code>)</li> <li>suiteEnd(title: <code>Any</code>)</li> <li>testStart(runnable: <code>Any</code>)</li> <li>testPassed(runnable: <code>Any</code>)</li> <li>testFailed(runnable: <code>Any</code>)</li> <li>testError(runnable: <code>Any</code>)</li> <li>testEnd(runnable: <code>Any</code>)</li> </ul> <p> Reporter.epilogue() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Reporter.runnableSkipped(skippable: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Reporter.suiteStart(title: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Reporter.suiteEnd(title: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Reporter.testStart(runnable: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Reporter.testPassed(runnable: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Reporter.testFailed(runnable: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Reporter.testError(runnable: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Reporter.testEnd(runnable: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/test/#runnable","title":"Runnable","text":"<p><code>import \"luxe: test\" for Runnable</code></p> <p>no docs found</p> <ul> <li>new(title: <code>Any</code>, beforeEaches: <code>Any</code>, afterEaches: <code>Any</code>, fn: <code>Any</code>)</li> <li>duration</li> <li>error</li> <li>expectations</li> <li>hasRun</li> <li>run()</li> <li>title</li> </ul> <p> Runnable.new(title: <code>Any</code>, beforeEaches: <code>Any</code>, afterEaches: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>Runnable</code></p> <p>no docs found   </p> <p> Runnable.duration \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Runnable.error \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Runnable.expectations \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Runnable.hasRun \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Runnable.run() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Runnable.title \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/test/#skippable","title":"Skippable","text":"<p><code>import \"luxe: test\" for Skippable</code></p> <p>no docs found</p> <ul> <li>new(title: <code>Any</code>)</li> <li>run</li> <li>title</li> </ul> <p> Skippable.new(title: <code>Any</code>) \u00b6 returns <code>Skippable</code></p> <p>no docs found   </p> <p> Skippable.run \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Skippable.title \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/test/#stub","title":"Stub","text":"<p><code>import \"luxe: test\" for Stub</code></p> <p>no docs found</p> <ul> <li>new(name: <code>Any</code>)</li> <li>new(name: <code>Any</code>, fakeFn: <code>Any</code>)</li> <li>andCallFake(name: <code>Any</code>, fakeFn: <code>Any</code>)</li> <li>andReturnValue(name: <code>Any</code>, returnValue: <code>Any</code>)</li> <li>called</li> <li>calls</li> <li>firstCall</li> <li>mostRecentCall</li> <li>name</li> <li>reset</li> <li>call</li> <li>call()</li> <li>call(a: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>, k: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>, k: <code>Any</code>, l: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>, k: <code>Any</code>, l: <code>Any</code>, m: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>, k: <code>Any</code>, l: <code>Any</code>, m: <code>Any</code>, n: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>, k: <code>Any</code>, l: <code>Any</code>, m: <code>Any</code>, n: <code>Any</code>, o: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>, k: <code>Any</code>, l: <code>Any</code>, m: <code>Any</code>, n: <code>Any</code>, o: <code>Any</code>, p: <code>Any</code>)</li> </ul> <p> Stub.new(name: <code>Any</code>) \u00b6 returns <code>Stub</code></p> <p>no docs found   </p> <p> Stub.new(name: <code>Any</code>, fakeFn: <code>Any</code>) \u00b6 returns <code>Stub</code></p> <p>no docs found   </p> <p> Stub.andCallFake(name: <code>Any</code>, fakeFn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.andReturnValue(name: <code>Any</code>, returnValue: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.called \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.calls \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.firstCall \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.mostRecentCall \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.name \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.reset \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>, k: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>, k: <code>Any</code>, l: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>, k: <code>Any</code>, l: <code>Any</code>, m: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>, k: <code>Any</code>, l: <code>Any</code>, m: <code>Any</code>, n: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>, k: <code>Any</code>, l: <code>Any</code>, m: <code>Any</code>, n: <code>Any</code>, o: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>, k: <code>Any</code>, l: <code>Any</code>, m: <code>Any</code>, n: <code>Any</code>, o: <code>Any</code>, p: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/test/#stubmatchers","title":"StubMatchers","text":"<p><code>import \"luxe: test\" for StubMatchers</code></p> <p>no docs found</p> <ul> <li>new(value: <code>Any</code>)</li> <li>toHaveBeenCalled</li> <li>toHaveBeenCalled(times: <code>Any</code>)</li> <li>toHaveBeenCalledWith(args: <code>Any</code>)</li> </ul> <p> StubMatchers.new(value: <code>Any</code>) \u00b6 returns <code>StubMatchers</code></p> <p>no docs found   </p> <p> StubMatchers.toHaveBeenCalled \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> StubMatchers.toHaveBeenCalled(times: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> StubMatchers.toHaveBeenCalledWith(args: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/test/#suite","title":"Suite","text":"<p><code>import \"luxe: test\" for Suite</code></p> <p>no docs found</p> <ul> <li>new(name: <code>Any</code>, block: <code>Any</code>)</li> <li>new(name: <code>Any</code>, beforeEaches: <code>Any</code>, afterEaches: <code>Any</code>, block: <code>Any</code>)</li> <li>afterEach</li> <li>afterEach(block: <code>Any</code>)</li> <li>beforeEach</li> <li>beforeEach(block: <code>Any</code>)</li> <li>run(reporter: <code>Any</code>)</li> <li>should(name: <code>Any</code>)</li> <li>should(name: <code>Any</code>, block: <code>Any</code>)</li> <li>skip(block: <code>Any</code>)</li> <li>suite(name: <code>Any</code>)</li> <li>suite(name: <code>Any</code>, block: <code>Any</code>)</li> <li>title</li> </ul> <p> Suite.new(name: <code>Any</code>, block: <code>Any</code>) \u00b6 returns <code>Suite</code></p> <p>no docs found   </p> <p> Suite.new(name: <code>Any</code>, beforeEaches: <code>Any</code>, afterEaches: <code>Any</code>, block: <code>Any</code>) \u00b6 returns <code>Suite</code></p> <p>no docs found   </p> <p> Suite.afterEach \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Suite.afterEach(block: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Suite.beforeEach \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Suite.beforeEach(block: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Suite.run(reporter: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Suite.should(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Suite.should(name: <code>Any</code>, block: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Suite.skip(block: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Suite.suite(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Suite.suite(name: <code>Any</code>, block: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Suite.title \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/toggle/","title":"Toggle","text":""},{"location":"api/v/2025.1.1/toggle/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/toggle/#luxe-toggle-module","title":"<code>luxe: toggle</code> module","text":"<ul> <li>Toggle </li> </ul>"},{"location":"api/v/2025.1.1/toggle/#toggle","title":"Toggle","text":"<p><code>import \"luxe: toggle\" for Toggle</code></p> <p>no docs found</p> <ul> <li>create()</li> <li>valid(toggle: <code>Toggle</code>)</li> <li>destroy(toggle: <code>Toggle</code>)</li> <li>set(toggle: <code>Toggle</code>, handle: <code>Num</code>, state: <code>Bool</code>)</li> <li>get(toggle: <code>Toggle</code>, handle: <code>Num</code>)</li> <li>get(toggle: <code>Toggle</code>)</li> <li>filter(toggle: <code>Toggle</code>, handles: <code>List</code>)</li> <li>link(toggle: <code>Toggle</code>, from_handle: <code>Num</code>, to_handle: <code>Num</code>)</li> </ul> <p> Toggle.create() \u00b6 returns <code>Toggle</code></p> <p>no docs found   </p> <p> Toggle.valid(toggle: <code>Toggle</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Toggle.destroy(toggle: <code>Toggle</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Toggle.set(toggle: <code>Toggle</code>, handle: <code>Num</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Toggle.get(toggle: <code>Toggle</code>, handle: <code>Num</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Toggle.get(toggle: <code>Toggle</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Toggle.filter(toggle: <code>Toggle</code>, handles: <code>List</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Toggle.link(toggle: <code>Toggle</code>, from_handle: <code>Num</code>, to_handle: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/topograph/","title":"Topograph","text":""},{"location":"api/v/2025.1.1/topograph/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/topograph/#luxe-topograph-module","title":"<code>luxe: topograph</code> module","text":"<ul> <li>TopoGraph </li> </ul>"},{"location":"api/v/2025.1.1/topograph/#topograph","title":"TopoGraph","text":"<p><code>import \"luxe: topograph\" for TopoGraph</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>add_vertex(vertex: <code>Any</code>)</li> <li>add_edge(v1: <code>Any</code>, v2: <code>Any</code>)</li> <li>sorted()</li> </ul> <p> TopoGraph.new() \u00b6 returns <code>TopoGraph</code></p> <p>no docs found   </p> <p> TopoGraph.add_vertex(vertex: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TopoGraph.add_edge(v1: <code>Any</code>, v2: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TopoGraph.sorted() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/triangulate/","title":"Triangulate","text":""},{"location":"api/v/2025.1.1/triangulate/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/triangulate/#luxe-triangulate-module","title":"<code>luxe: triangulate</code> module","text":"<ul> <li>Triangulate </li> </ul>"},{"location":"api/v/2025.1.1/triangulate/#triangulate","title":"Triangulate","text":"<p><code>import \"luxe: triangulate\" for Triangulate</code></p> <p>no docs found</p> <ul> <li>get_svg(file_contents: <code>String</code>, units: <code>String</code>, dpi: <code>Num</code>, tolerance: <code>Num</code>)</li> <li>svg_to_image(file_contents: <code>String</code>, units: <code>String</code>, dpi: <code>Num</code>, width: <code>Num</code>, height: <code>Num</code>)</li> <li>svg_to_geometry(file_contents: <code>String</code>, units: <code>String</code>, dpi: <code>Num</code>, resolution: <code>Num</code>, limit: <code>Num</code>, basis: <code>String</code>)</li> <li>svg_to_geometry(file_contents: <code>String</code>, units: <code>String</code>, dpi: <code>Num</code>, resolution: <code>Num</code>, limit: <code>Num</code>)</li> <li>points(points: <code>List</code>)</li> <li>polys(points: <code>List</code>, edges: <code>List</code>)</li> </ul> <p> Triangulate.get_svg(file_contents: <code>String</code>, units: <code>String</code>, dpi: <code>Num</code>, tolerance: <code>Num</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Triangulate.svg_to_image(file_contents: <code>String</code>, units: <code>String</code>, dpi: <code>Num</code>, width: <code>Num</code>, height: <code>Num</code>) \u00b6 returns <code>Image</code></p> <p>no docs found   </p> <p> Triangulate.svg_to_geometry(file_contents: <code>String</code>, units: <code>String</code>, dpi: <code>Num</code>, resolution: <code>Num</code>, limit: <code>Num</code>, basis: <code>String</code>) \u00b6 returns <code>Geometry</code></p> <p>no docs found   </p> <p> Triangulate.svg_to_geometry(file_contents: <code>String</code>, units: <code>String</code>, dpi: <code>Num</code>, resolution: <code>Num</code>, limit: <code>Num</code>) \u00b6 returns <code>Geometry</code></p> <p>no docs found   </p> <p> Triangulate.points(points: <code>List</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Triangulate.polys(points: <code>List</code>, edges: <code>List</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/","title":"Ui","text":""},{"location":"api/v/2025.1.1/ui/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/ui/#luxe-ui-module","title":"<code>luxe: ui</code> module","text":""},{"location":"api/v/2025.1.1/version/","title":"Version","text":""},{"location":"api/v/2025.1.1/version/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/version/#luxe-version-module","title":"<code>luxe: version</code> module","text":""},{"location":"api/v/2025.1.1/world/","title":"World","text":""},{"location":"api/v/2025.1.1/world/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/world/#luxe-world-module","title":"<code>luxe: world</code> module","text":"<ul> <li>Body2D </li> <li>Body3D </li> <li>BodyEvent </li> <li>BodyType </li> <li>Clock </li> <li>Entity </li> <li>EntityContextType </li> <li>EntityEventType </li> <li>MeshColliderType </li> <li>ModifierEventType </li> <li>ModifierSystem </li> <li>Modifiers </li> <li>Overlap </li> <li>Physics2D </li> <li>Physics3D </li> <li>Prototype </li> <li>Scene </li> <li>UI </li> <li>UIBehave </li> <li>UIClear </li> <li>UIContain </li> <li>UIDebugMode </li> <li>UIDrop </li> <li>UIEvent </li> <li>UIImageFit </li> <li>UIImageFlags </li> <li>UILayoutMode </li> <li>UIRenderMode </li> <li>WorldEventType </li> <li>WorldRenderDesc </li> </ul>"},{"location":"api/v/2025.1.1/world/#body2d","title":"Body2D","text":"<p><code>import \"luxe: world\" for Body2D</code></p> <p>no docs found</p> <ul> <li>create(entity: <code>Any</code>)</li> <li>has(entity: <code>Any</code>)</li> <li>create_collider_box(entity: <code>Any</code>, center: <code>Any</code>, size: <code>Any</code>, angle: <code>Any</code>)</li> <li>create_collider_circle(entity: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>)</li> <li>get_center(entity: <code>Any</code>)</li> <li>get_mass(entity: <code>Any</code>)</li> <li>get_inertia(entity: <code>Any</code>)</li> <li>set_type(entity: <code>Any</code>, type: <code>Any</code>)</li> <li>get_type(entity: <code>Any</code>)</li> <li>set_sleeping_allowed(entity: <code>Any</code>, allowed: <code>Any</code>)</li> <li>get_sleeping_allowed(entity: <code>Any</code>)</li> <li>set_sleeping(entity: <code>Any</code>, sleep_state: <code>Any</code>)</li> <li>get_sleeping(entity: <code>Any</code>)</li> <li>set_active(entity: <code>Any</code>, active_state: <code>Any</code>)</li> <li>get_active(entity: <code>Any</code>)</li> <li>set_velocity_linear(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>)</li> <li>get_velocity_linear(entity: <code>Any</code>)</li> <li>set_velocity_angular(entity: <code>Any</code>, angle: <code>Any</code>)</li> <li>get_velocity_angular(entity: <code>Any</code>)</li> <li>set_damping_linear(entity: <code>Any</code>, linear_damping: <code>Any</code>)</li> <li>get_damping_linear(entity: <code>Any</code>)</li> <li>set_damping_angular(entity: <code>Any</code>, angular_damping: <code>Any</code>)</li> <li>get_damping_angular(entity: <code>Any</code>)</li> <li>apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, force_awake: <code>Any</code>)</li> <li>apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>)</li> <li>apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, force_awake: <code>Any</code>)</li> <li>apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>)</li> <li>apply_torque(entity: <code>Any</code>, torque: <code>Any</code>, force_awake: <code>Any</code>)</li> <li>apply_torque(entity: <code>Any</code>, torque: <code>Any</code>)</li> <li>apply_impulse_linear(entity: <code>Any</code>, impulse_x: <code>Any</code>, impulse_y: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, force_awake: <code>Any</code>)</li> <li>apply_impulse_linear(entity: <code>Any</code>, impulse_x: <code>Any</code>, impulse_y: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>)</li> <li>apply_impulse_angular(entity: <code>Any</code>, impulse: <code>Any</code>, force_awake: <code>Any</code>)</li> <li>apply_impulse_angular(entity: <code>Any</code>, impulse: <code>Any</code>)</li> </ul> <p> Body2D.create(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.has(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.create_collider_box(entity: <code>Any</code>, center: <code>Any</code>, size: <code>Any</code>, angle: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.create_collider_circle(entity: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.get_center(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.get_mass(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.get_inertia(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.set_type(entity: <code>Any</code>, type: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.get_type(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.set_sleeping_allowed(entity: <code>Any</code>, allowed: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.get_sleeping_allowed(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.set_sleeping(entity: <code>Any</code>, sleep_state: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.get_sleeping(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.set_active(entity: <code>Any</code>, active_state: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.get_active(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.set_velocity_linear(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.get_velocity_linear(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.set_velocity_angular(entity: <code>Any</code>, angle: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.get_velocity_angular(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.set_damping_linear(entity: <code>Any</code>, linear_damping: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.get_damping_linear(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.set_damping_angular(entity: <code>Any</code>, angular_damping: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.get_damping_angular(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, force_awake: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, force_awake: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.apply_torque(entity: <code>Any</code>, torque: <code>Any</code>, force_awake: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.apply_torque(entity: <code>Any</code>, torque: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.apply_impulse_linear(entity: <code>Any</code>, impulse_x: <code>Any</code>, impulse_y: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, force_awake: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.apply_impulse_linear(entity: <code>Any</code>, impulse_x: <code>Any</code>, impulse_y: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.apply_impulse_angular(entity: <code>Any</code>, impulse: <code>Any</code>, force_awake: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.apply_impulse_angular(entity: <code>Any</code>, impulse: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/world/#body3d","title":"Body3D","text":"<p><code>import \"luxe: world\" for Body3D</code></p> <p>no docs found</p> <ul> <li>create(entity: <code>Any</code>)</li> <li>destroy(entity: <code>Any</code>)</li> <li>has(entity: <code>Any</code>)</li> <li>create_heightfield(entity: <code>Any</code>, image: <code>Any</code>)</li> <li>create_collider_box(entity: <code>Any</code>, center: <code>Any</code>, size: <code>Any</code>, euler: <code>Any</code>, physics_asset: <code>Any</code>)</li> <li>create_collider_box(entity: <code>Any</code>, center: <code>Any</code>, size: <code>Any</code>, euler: <code>Any</code>)</li> <li>create_collider_sphere(entity: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>, physics_asset: <code>Any</code>)</li> <li>create_collider_sphere(entity: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>)</li> <li>create_collider_cylinder(entity: <code>Any</code>, center: <code>Any</code>, size: <code>Any</code>, physics_asset: <code>Any</code>)</li> <li>create_collider_cylinder(entity: <code>Any</code>, center: <code>Any</code>, size: <code>Any</code>)</li> <li>create_collider_capsule(entity: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>, height: <code>Any</code>, physics_asset: <code>Any</code>)</li> <li>create_collider_capsule(entity: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>, height: <code>Any</code>)</li> <li>create_collider_mesh(entity: <code>Any</code>, center: <code>Any</code>, euler: <code>Any</code>, collider_type: <code>MeshColliderType</code>, mesh_asset: <code>Any</code>, mesh_level: <code>Any</code>, physics_asset: <code>Any</code>)</li> <li>create_collider_mesh(entity: <code>Any</code>, center: <code>Any</code>, euler: <code>Any</code>, collider_type: <code>MeshColliderType</code>, mesh_asset: <code>Any</code>, mesh_level: <code>Any</code>)</li> <li>get_aabb(entity: <code>Any</code>)</li> <li>get_center(entity: <code>Any</code>)</li> <li>get_mass(entity: <code>Any</code>)</li> <li>get_inertia(entity: <code>Any</code>)</li> <li>set_physics_asset(entity: <code>Any</code>, physics_asset: <code>Any</code>)</li> <li>on(entity: <code>Any</code>, type: <code>BodyEvent</code>, fn: <code>Any</code>)</li> <li>off(entity: <code>Any</code>, handle: <code>Any</code>)</li> <li>set_channel(entity: <code>Any</code>, channel: <code>Any</code>)</li> <li>set_type(entity: <code>Any</code>, type: <code>Any</code>)</li> <li>get_type(entity: <code>Any</code>)</li> <li>set_sleeping_allowed(entity: <code>Any</code>, allowed: <code>Any</code>)</li> <li>get_sleeping_allowed(entity: <code>Any</code>)</li> <li>set_sleeping(entity: <code>Any</code>, sleep_state: <code>Any</code>)</li> <li>get_sleeping(entity: <code>Any</code>)</li> <li>set_active(entity: <code>Any</code>, active_state: <code>Any</code>)</li> <li>get_active(entity: <code>Any</code>)</li> <li>set_rotation_allowed(entity: <code>Any</code>, axis: <code>Any</code>)</li> <li>get_rotation_allowed(entity: <code>Any</code>)</li> <li>set_velocity_linear(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>)</li> <li>get_velocity_linear(entity: <code>Any</code>)</li> <li>set_velocity_angular(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>)</li> <li>get_velocity_angular(entity: <code>Any</code>)</li> <li>set_damping_linear(entity: <code>Any</code>, linear_damping: <code>Any</code>)</li> <li>get_damping_linear(entity: <code>Any</code>)</li> <li>set_damping_angular(entity: <code>Any</code>, angular_damping: <code>Any</code>)</li> <li>get_damping_angular(entity: <code>Any</code>)</li> <li>apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, force_z: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, force_awake: <code>Any</code>)</li> <li>apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, force_z: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>)</li> <li>apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, force_z: <code>Any</code>, force_awake: <code>Any</code>)</li> <li>apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, force_z: <code>Any</code>)</li> <li>apply_torque(entity: <code>Any</code>, torque_x: <code>Any</code>, torque_y: <code>Any</code>, torque_z: <code>Any</code>, force_awake: <code>Any</code>)</li> <li>apply_torque(entity: <code>Any</code>, torque_x: <code>Any</code>, torque_y: <code>Any</code>, torque_z: <code>Any</code>)</li> <li>apply_impulse_linear(entity: <code>Any</code>, impulse_x: <code>Any</code>, impulse_y: <code>Any</code>, impulse_z: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, force_awake: <code>Any</code>)</li> <li>apply_impulse_linear(entity: <code>Any</code>, impulse_x: <code>Any</code>, impulse_y: <code>Any</code>, impulse_z: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>)</li> <li>apply_impulse_angular(entity: <code>Any</code>, impulse_x: <code>Any</code>, impulse_y: <code>Any</code>, impulse_z: <code>Any</code>, force_awake: <code>Any</code>)</li> <li>apply_impulse_angular(entity: <code>Any</code>, impulse_x: <code>Any</code>, impulse_y: <code>Any</code>, impulse_z: <code>Any</code>)</li> </ul> <p> Body3D.create(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.destroy(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.has(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.create_heightfield(entity: <code>Any</code>, image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.create_collider_box(entity: <code>Any</code>, center: <code>Any</code>, size: <code>Any</code>, euler: <code>Any</code>, physics_asset: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.create_collider_box(entity: <code>Any</code>, center: <code>Any</code>, size: <code>Any</code>, euler: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.create_collider_sphere(entity: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>, physics_asset: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.create_collider_sphere(entity: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.create_collider_cylinder(entity: <code>Any</code>, center: <code>Any</code>, size: <code>Any</code>, physics_asset: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.create_collider_cylinder(entity: <code>Any</code>, center: <code>Any</code>, size: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.create_collider_capsule(entity: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>, height: <code>Any</code>, physics_asset: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.create_collider_capsule(entity: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>, height: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.create_collider_mesh(entity: <code>Any</code>, center: <code>Any</code>, euler: <code>Any</code>, collider_type: <code>MeshColliderType</code>, mesh_asset: <code>Any</code>, mesh_level: <code>Any</code>, physics_asset: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.create_collider_mesh(entity: <code>Any</code>, center: <code>Any</code>, euler: <code>Any</code>, collider_type: <code>MeshColliderType</code>, mesh_asset: <code>Any</code>, mesh_level: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_aabb(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_center(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_mass(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_inertia(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.set_physics_asset(entity: <code>Any</code>, physics_asset: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.on(entity: <code>Any</code>, type: <code>BodyEvent</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.off(entity: <code>Any</code>, handle: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.set_channel(entity: <code>Any</code>, channel: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.set_type(entity: <code>Any</code>, type: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_type(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.set_sleeping_allowed(entity: <code>Any</code>, allowed: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_sleeping_allowed(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.set_sleeping(entity: <code>Any</code>, sleep_state: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_sleeping(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.set_active(entity: <code>Any</code>, active_state: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_active(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.set_rotation_allowed(entity: <code>Any</code>, axis: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_rotation_allowed(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.set_velocity_linear(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_velocity_linear(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.set_velocity_angular(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_velocity_angular(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.set_damping_linear(entity: <code>Any</code>, linear_damping: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_damping_linear(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.set_damping_angular(entity: <code>Any</code>, angular_damping: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_damping_angular(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, force_z: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, force_awake: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, force_z: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, force_z: <code>Any</code>, force_awake: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, force_z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.apply_torque(entity: <code>Any</code>, torque_x: <code>Any</code>, torque_y: <code>Any</code>, torque_z: <code>Any</code>, force_awake: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.apply_torque(entity: <code>Any</code>, torque_x: <code>Any</code>, torque_y: <code>Any</code>, torque_z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.apply_impulse_linear(entity: <code>Any</code>, impulse_x: <code>Any</code>, impulse_y: <code>Any</code>, impulse_z: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, force_awake: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.apply_impulse_linear(entity: <code>Any</code>, impulse_x: <code>Any</code>, impulse_y: <code>Any</code>, impulse_z: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.apply_impulse_angular(entity: <code>Any</code>, impulse_x: <code>Any</code>, impulse_y: <code>Any</code>, impulse_z: <code>Any</code>, force_awake: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.apply_impulse_angular(entity: <code>Any</code>, impulse_x: <code>Any</code>, impulse_y: <code>Any</code>, impulse_z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/world/#bodyevent","title":"BodyEvent","text":"<p><code>import \"luxe: world\" for BodyEvent</code></p> <p>no docs found</p> <ul> <li>invalid</li> <li>overlap</li> <li>collide</li> <li>name(value: <code>Any</code>)</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> BodyEvent.invalid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BodyEvent.overlap \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BodyEvent.collide \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BodyEvent.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BodyEvent.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/world/#bodytype","title":"BodyType","text":"<p><code>import \"luxe: world\" for BodyType</code></p> <p>no docs found</p> <ul> <li>static_body</li> <li>dynamic_body</li> <li>kinematic_body</li> <li>name(value: <code>Any</code>)</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> BodyType.static_body \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BodyType.dynamic_body \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BodyType.kinematic_body \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BodyType.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BodyType.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/world/#clock","title":"Clock","text":"<p><code>import \"luxe: world\" for Clock</code></p> <p>no docs found</p> <ul> <li>create(world: <code>Any</code>, rate: <code>Any</code>, paused: <code>Any</code>)</li> <li>create(world: <code>Any</code>, rate: <code>Any</code>)</li> <li>time(world: <code>Any</code>, clock: <code>Any</code>)</li> </ul> <p> Clock.create(world: <code>Any</code>, rate: <code>Any</code>, paused: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Clock.create(world: <code>Any</code>, rate: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Clock.time(world: <code>Any</code>, clock: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/world/#entity","title":"Entity","text":"<p><code>import \"luxe: world\" for Entity</code></p> <p>Anything that exists in a world is a <code>entity</code>. The entity itself is just a handle (represented by a number) with which modifiers and a name can be associated. Entities are very lightweight, so creating and destroying many of them usually isnt a concern.</p> <p>An entity in itself does not have a transform (you can attach the <code>transform</code> modifier to it to gain that) or any kind of hierarchy (different implicit hierarchies can result from modifiers). Entities can be created manually in code, or loaded as Scenes or Prototypes.</p> <ul> <li>none</li> <li>create(world: <code>World</code>)</li> <li>create(world: <code>World</code>, name: <code>String</code>)</li> <li>valid(entity: <code>Entity</code>)</li> <li>valid_handle(entity: <code>Entity</code>)</li> <li>get_world(entity: <code>Entity</code>)</li> <li>get(uuid: <code>String</code>)</li> <li>get_addressed_in(context_root: <code>Entity</code>, address: <code>List</code>)</li> <li>get_addressed(relative_to: <code>Entity</code>, address: <code>List</code>)</li> <li>resolve(relative_to: <code>Entity</code>, address: <code>List</code>)</li> <li>get_addressed_context(relative_to: <code>Entity</code>, address: <code>List</code>)</li> <li>get_named(world: <code>World</code>, name: <code>String</code>)</li> <li>get_named_all(world: <code>World</code>, name: <code>String</code>)</li> <li>get_named_in(context: <code>Entity</code>, name: <code>String</code>)</li> <li>get_named_all_in(context: <code>Entity</code>, name: <code>String</code>)</li> <li>get_name(entity: <code>Entity</code>)</li> <li>name(entity: <code>Entity</code>)</li> <li>get_folder(entity: <code>Entity</code>)</li> <li>set_folder(entity: <code>Entity</code>, folder: <code>String</code>)</li> <li>get_asset_id(entity: <code>Entity</code>)</li> <li>set_asset_id(entity: <code>Entity</code>, asset_id: <code>String</code>)</li> <li>get_context_asset_id(entity: <code>Entity</code>)</li> <li>set_context_asset_id(entity: <code>Entity</code>, asset_id: <code>String</code>)</li> <li>get_context_type(entity: <code>Entity</code>)</li> <li>get_context_instance_uuid(entity: <code>Entity</code>)</li> <li>get_context(entity: <code>Entity</code>)</li> <li>get_context_origin(entity: <code>Entity</code>)</li> <li>get_context_address(entity: <code>Entity</code>, context: <code>Entity</code>)</li> <li>list_context_all(context: <code>Entity</code>)</li> <li>list_context_direct(context: <code>Entity</code>)</li> <li>get_context_id(context: <code>Entity</code>)</li> <li>get_origin_address(entity: <code>Entity</code>)</li> <li>get_address(entity: <code>Entity</code>)</li> <li>get_context_is_direct(context: <code>Entity</code>, entity: <code>Entity</code>)</li> <li>init_into_context(entity: <code>Entity</code>, context: <code>Entity</code>)</li> <li>init_into_context(entity: <code>Entity</code>, context: <code>Entity</code>, address_uuid: <code>UUID</code>)</li> <li>note_add(entity: <code>Entity</code>, note: <code>String</code>)</li> <li>note_remove(entity: <code>Entity</code>, note: <code>String</code>)</li> <li>note_has(entity: <code>Entity</code>, note: <code>String</code>)</li> <li>notes(entity: <code>Entity</code>)</li> <li>set_name(entity: <code>Entity</code>, name: <code>String</code>)</li> <li>get_uuid(entity: <code>Entity</code>)</li> <li>set_uuid(entity: <code>Entity</code>, uuid_string: <code>String</code>)</li> <li>destroy(entity: <code>Entity</code>)</li> <li>duplicate(entity: <code>Entity</code>)</li> <li>duplicate(entity: <code>Entity</code>, world: <code>World</code>)</li> </ul> <p> Entity.none \u00b6 returns <code>Entity</code></p> <p>An entity representing no value. Note, not for comparisons! Use Entity.valid(entity) for that   </p> <p> Entity.create(world: <code>World</code>) \u00b6 returns <code>Entity</code></p> <p>Creates a new <code>entity</code> in the given <code>world</code>.</p> <pre><code>var player = Entity.create(app.world)\n</code></pre> <p> Entity.create(world: <code>World</code>, name: <code>String</code>) \u00b6 returns <code>Entity</code></p> <p>Creates a new <code>entity</code> in the given <code>world</code> with the specified <code>String</code> name.</p> <pre><code>var player = Entity.create(app.world, \"player\")\n</code></pre> <p> Entity.valid(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>Checks if the given variable references a valid <code>entity</code>.</p> <pre><code>var player = Entity.get_named(app.world, \"player\")\nif (Entity.valid(player)) {\n  Log.print(\"Got the player entity!\")\n}\n</code></pre> <p> Entity.valid_handle(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>Checks if the given variable references a valid <code>entity</code> handle. Note that when an entity is destroyed, it marks the entity as invalid  for Entity.valid(), but the destroy happens at the end of the frame. This means during that frame the entity can still be \"live\", but not valid.</p> <p>This is mostly useful in the detach handlers, where Entity.valid would return false.   </p> <p> Entity.get_world(entity: <code>Entity</code>) \u00b6 returns <code>World</code></p> <p>Get the <code>world</code> a given <code>entity</code> belongs to</p> <pre><code>var world = Entity.get_world(entity)\n</code></pre> <p> Entity.get(uuid: <code>String</code>) \u00b6 returns <code>Entity</code></p> <p>Get the entity with a given UUID. Since an entity can have  a name that is shared by several entities in the same world,  the unique ID of an entity is used to locate exactly one entity. Generally, no two entities will have the same UUID.</p> <pre><code>var entity = Entity.get(\"5b01869b-fd59-4f2c-892f-4c0b726c79a2\")\n\nif (Entity.valid(entity)) {\n  Log.print(\"found entity\")\n}\n</code></pre> <p> Entity.get_addressed_in(context_root: <code>Entity</code>, address: <code>List</code>) \u00b6 returns <code>Entity</code></p> <p>Find an entity by <code>address</code> in the given context (only).  The address is a list of uuids, and the context is a scene root entity,  or prototype root entity.   </p> <p> Entity.get_addressed(relative_to: <code>Entity</code>, address: <code>List</code>) \u00b6 returns <code>Entity</code></p> <p>Find an entity by <code>address</code> relative to the given entity, and will search upward through all contexts in the tree to try and find the addressed entity. The address is a list of uuids.   </p> <p> Entity.resolve(relative_to: <code>Entity</code>, address: <code>List</code>) \u00b6 returns <code>Entity</code></p> <p>Find an entity by <code>address</code> relative to the given entity, and will search upward through all contexts in the tree to try and find the addressed entity. The address is a list of uuids called a <code>Link</code> typically. Alias for <code>Entity.get_addressed</code>.   </p> <p> Entity.get_addressed_context(relative_to: <code>Entity</code>, address: <code>List</code>) \u00b6 returns <code>Entity</code></p> <p>Find an entity by <code>address</code> relative to the given entity, and will search upward through all contexts in the tree to try and find the addressed entity - but this function will return the context it was found in (e.g the context the address is for). The address is a list of uuids.   </p> <p> Entity.get_named(world: <code>World</code>, name: <code>String</code>) \u00b6 returns <code>Entity</code></p> <p>Get the first <code>entity</code> from the given <code>world</code> with the name <code>name</code>. Which entity is returned is unspecified if there are multiple with the same name. If you need to test further use <code>Entity.get_named_all</code>. Returns null if no entity is found by that name.</p> <pre><code>var player = Entity.get_named(app.world, \"player\")\n</code></pre> <p> Entity.get_named_all(world: <code>World</code>, name: <code>String</code>) \u00b6 returns <code>List</code></p> <p>Get a list of all <code>entities</code> from the given <code>world</code> with the name <code>name</code>. Returns a list of entities with an unspecified order. Returns an empty list if no entities are found.</p> <pre><code>var list = Entity.get_named_all(app.world, \"fern\")\nLog.print(\"There are %(list.count) ferns in this forest!\")\n</code></pre> <p> Entity.get_named_in(context: <code>Entity</code>, name: <code>String</code>) \u00b6 returns <code>Entity</code></p> <p>Get the first <code>entity</code> from the given <code>context</code> with the name <code>name</code>. The context is a scene root or a prototype root entity. Which entity is returned is unspecified if there are multiple with the same name. If you need to test further use <code>Entity.get_named_all</code>. Returns null if no entity is found by that name.</p> <pre><code>var prototype = Prototype.create(world, Asset.prototype(\"proto/example\"))\nvar item = Entity.get_named_in(prototype, \"item\")\n</code></pre> <p> Entity.get_named_all_in(context: <code>Entity</code>, name: <code>String</code>) \u00b6 returns <code>List</code></p> <p>Get a list of all <code>entities</code> from the given <code>context</code> with the name <code>name</code>. The context is a scene root or a prototype root entity. Returns a list of entities with an unspecified order. Returns an empty list if no entities are found.</p> <pre><code>  var scene = Scene.load(world, Asset.scene(\"scene/example\")) {\n  var list = Entity.get_named_all_in(scene, \"fern\")\n  Log.print(\"There are %(list.count) ferns in this forest!\")\n}\n</code></pre> <p> Entity.get_name(entity: <code>Entity</code>) \u00b6 returns <code>StringID</code></p> <p>Get the name of a given <code>entity</code> as a hashed string ID. Use <code>import \"luxe: assets\" for Strings</code> with <code>Strings.get(name)</code> to convert to a string. :note: this ID nuance is wip.</p> <pre><code>Entity.set_name(player, \"player\")\nvar name_id = Entity.get_name(player)\nvar name = Strings.get(name_id)\nLog.print(\"Entity name is `%(name)`!\")\n// prints \"Entity name is `player`\"\n</code></pre> <p> Entity.name(entity: <code>Entity</code>) \u00b6 returns <code>String</code></p> <p>Get the name of a given <code>entity</code> as a string. Supports invalid entities (returns <code>&lt;invalid&gt;</code>).</p> <pre><code>Entity.set_name(player, \"player\")\nvar name = Entity.name(player)\nLog.print(\"Entity name is `%(name)`!\")\n// prints \"Entity name is `player`\"\n</code></pre> <p> Entity.get_folder(entity: <code>Entity</code>) \u00b6 returns <code>String</code></p> <p>get the folder of this entity (used for nested display in a world outliner)   </p> <p> Entity.set_folder(entity: <code>Entity</code>, folder: <code>String</code>) \u00b6 returns <code>None</code></p> <p>set the folder of this entity (used for nested display in a world outliner)   </p> <p> Entity.get_asset_id(entity: <code>Entity</code>) \u00b6 returns <code>String</code></p> <p>get the asset ID of this entity (if it has one)   </p> <p> Entity.set_asset_id(entity: <code>Entity</code>, asset_id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>set the asset ID of this entity (used for e.g editor)   </p> <p> Entity.get_context_asset_id(entity: <code>Entity</code>) \u00b6 returns <code>String</code></p> <p>get the context asset ID of this entity (if it has one)   </p> <p> Entity.set_context_asset_id(entity: <code>Entity</code>, asset_id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>set the context asset ID of this entity (used for e.g editor)   </p> <p> Entity.get_context_type(entity: <code>Entity</code>) \u00b6 returns <code>EntityContextType</code></p> <p>get the context type for an entity   </p> <p> Entity.get_context_instance_uuid(entity: <code>Entity</code>) \u00b6 returns <code>String</code></p> <p>get the context uuid for a given entity. Entity should be EntityContextType <code>scene</code> or <code>prototype</code> or null is returned   </p> <p> Entity.get_context(entity: <code>Entity</code>) \u00b6 returns <code>Entity</code></p> <p>get the context this entity belongs to if any   </p> <p> Entity.get_context_origin(entity: <code>Entity</code>) \u00b6 returns <code>Entity</code></p> <p>get the context that this entity originated from. For example if a scene was loaded and inside it there was a prototype and so on, the scene is the origin.   </p> <p> Entity.get_context_address(entity: <code>Entity</code>, context: <code>Entity</code>) \u00b6 returns <code>List</code></p> <p>get the address of the entity within a given context.   </p> <p> Entity.list_context_all(context: <code>Entity</code>) \u00b6 returns <code>Set</code></p> <p>Get all the entities this context created as a Set of entities.   </p> <p> Entity.list_context_direct(context: <code>Entity</code>) \u00b6 returns <code>Set</code></p> <p>Get all the entities this context created directly (rather than indirectly) as a Set of entities.   </p> <p> Entity.get_context_id(context: <code>Entity</code>) \u00b6 returns <code>String</code></p> <p>get the id of the given context.   </p> <p> Entity.get_origin_address(entity: <code>Entity</code>) \u00b6 returns <code>List</code></p> <p>get the address of the entity within it's origin context.   </p> <p> Entity.get_address(entity: <code>Entity</code>) \u00b6 returns <code>List</code></p> <p>get the address of the entity within it's origin context.   </p> <p> Entity.get_context_is_direct(context: <code>Entity</code>, entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>returns true if the given entity is a direct entity in the context. This includes prototype roots spawned into the context (use context type to filter them out).   </p> <p> Entity.init_into_context(entity: <code>Entity</code>, context: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>Initialize an entity into an existing context (typically editor related)   </p> <p> Entity.init_into_context(entity: <code>Entity</code>, context: <code>Entity</code>, address_uuid: <code>UUID</code>) \u00b6 returns <code>unknown</code></p> <p>Initialize an entity into an existing context with an address uuid (typically editor related)   </p> <p> Entity.note_add(entity: <code>Entity</code>, note: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>add a note to this entity (like a lower level tag)   </p> <p> Entity.note_remove(entity: <code>Entity</code>, note: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>remove a note to this entity   </p> <p> Entity.note_has(entity: <code>Entity</code>, note: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>returns true if this note exists, false otherwise   </p> <p> Entity.notes(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>get all the notes on the given entity   </p> <p> Entity.set_name(entity: <code>Entity</code>, name: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Set the name of a given <code>entity</code>.</p> <pre><code>Entity.set_name(player, \"player\")\n</code></pre> <p> Entity.get_uuid(entity: <code>Entity</code>) \u00b6 returns <code>String</code></p> <p>Get the unique ID as a string UUID for a given <code>entity</code>.   </p> <p> Entity.set_uuid(entity: <code>Entity</code>, uuid_string: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Set the unique ID of a given <code>entity</code>. Typically used in special cases, not commonly used on the high level.   </p> <p> Entity.destroy(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>Destroy the given <code>entity</code>, removing it from the world it's in.</p> <p>At the moment destroy is immediate (potentially changing soon), so sometimes you might want <code>Frame.end { Entity.destroy(entity) }</code>  to push the destroy to the end of the frame, so it doesn't happen while iterating a list or when things are still processing it.   </p> <p> Entity.duplicate(entity: <code>Entity</code>) \u00b6 returns <code>Entity</code></p> <p>Duplicate the given <code>entity</code>.  Returns a new entity with the same notes, folder, name and modifiers.   </p> <p> Entity.duplicate(entity: <code>Entity</code>, world: <code>World</code>) \u00b6 returns <code>Entity</code></p> <p>Duplicate the given <code>entity</code> into another world. Returns a new entity with the same notes, folder, name and modifiers. Will not duplicate in same context as origin entity if the new world is different.   </p>"},{"location":"api/v/2025.1.1/world/#entitycontexttype","title":"EntityContextType","text":"<p><code>import \"luxe: world\" for EntityContextType</code></p> <p>no docs found</p> <ul> <li>none</li> <li>scene</li> <li>prototype</li> <li>name(value: <code>EntityContextType</code>)</li> </ul> <p> EntityContextType.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> EntityContextType.scene \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> EntityContextType.prototype \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> EntityContextType.name(value: <code>EntityContextType</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/world/#entityeventtype","title":"EntityEventType","text":"<p><code>import \"luxe: world\" for EntityEventType</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>create</li> <li>destroy</li> <li>load</li> <li>unload</li> <li>modifier</li> <li>name(value: <code>EntityEventType</code>)</li> </ul> <p> EntityEventType.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> EntityEventType.create \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> EntityEventType.destroy \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> EntityEventType.load \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> EntityEventType.unload \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> EntityEventType.modifier \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> EntityEventType.name(value: <code>EntityEventType</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/world/#meshcollidertype","title":"MeshColliderType","text":"<p><code>import \"luxe: world\" for MeshColliderType</code></p> <p>no docs found</p> <ul> <li>static_only</li> <li>dynamic_convex</li> <li>dynamic_concave</li> <li>name(value: <code>Any</code>)</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> MeshColliderType.static_only \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MeshColliderType.dynamic_convex \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MeshColliderType.dynamic_concave \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MeshColliderType.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MeshColliderType.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/world/#modifiereventtype","title":"ModifierEventType","text":"<p><code>import \"luxe: world\" for ModifierEventType</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>attach</li> <li>detach</li> <li>change</li> <li>name(value: <code>ModifierEventType</code>)</li> </ul> <p> ModifierEventType.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierEventType.attach \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierEventType.detach \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierEventType.change \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierEventType.name(value: <code>ModifierEventType</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/world/#modifiersystem","title":"ModifierSystem","text":"<p><code>import \"luxe: world\" for ModifierSystem</code></p> <p>no docs found</p> <ul> <li>priority</li> <li>persist</li> <li>count</li> <li>field</li> <li>items</li> <li>world</li> <li>each(fn: <code>Any</code>)</li> <li>each(unique: <code>Any</code>, fn: <code>Any</code>)</li> <li>find_entity(relative_entity: <code>Any</code>, uuid: <code>Any</code>)</li> <li>create(entity: <code>Any</code>)</li> <li>destroy(entity: <code>Any</code>)</li> <li>get(entity: <code>Any</code>)</li> <li>get(entity: <code>Any</code>, inst: <code>Any</code>)</li> <li>get_slot_at(index: <code>Any</code>)</li> <li>get_slot(entity: <code>Any</code>)</li> <li>get_entity(slot: <code>Any</code>)</li> <li>get_id(slot: <code>Any</code>)</li> <li>get_id_hash(slot: <code>Any</code>)</li> <li>set_entity(slot: <code>Any</code>, entity: <code>Any</code>)</li> <li>editor(editor: <code>Any</code>)</li> <li>init(world: <code>Any</code>)</li> <li>tick(delta: <code>Any</code>)</li> <li>destroy()</li> <li>detached()</li> <li>attached()</li> <li>disable(entity: <code>Any</code>, instance: <code>Any</code>)</li> <li>attach(entity: <code>Any</code>, instance: <code>Any</code>)</li> <li>detach(entity: <code>Any</code>, instance: <code>Any</code>)</li> <li>data</li> <li>id</li> <li>id=(v : Any)</li> <li>on_init(world: <code>Any</code>, data: <code>Any</code>)</li> <li>on_attached()</li> <li>on_detached()</li> <li>on_disabled(entities: <code>Any</code>, state: <code>Any</code>)</li> <li>on_destroying(entities: <code>Any</code>)</li> <li>on_destroyed(entities: <code>Any</code>)</li> <li>on_destroy()</li> <li>on_attach_block(block: <code>Any</code>, block_start: <code>Any</code>, block_end: <code>Any</code>, into: <code>Any</code>)</li> </ul> <p> ModifierSystem.priority \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.persist \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.count \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.field \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.items \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.world \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.each(fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.each(unique: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.find_entity(relative_entity: <code>Any</code>, uuid: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.create(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.destroy(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.get(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.get(entity: <code>Any</code>, inst: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.get_slot_at(index: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.get_slot(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.get_entity(slot: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.get_id(slot: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.get_id_hash(slot: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.set_entity(slot: <code>Any</code>, entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.editor(editor: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.init(world: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.tick(delta: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.destroy() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.detached() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.attached() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.disable(entity: <code>Any</code>, instance: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.attach(entity: <code>Any</code>, instance: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.detach(entity: <code>Any</code>, instance: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.data \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.id=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.on_init(world: <code>Any</code>, data: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.on_attached() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.on_detached() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.on_disabled(entities: <code>Any</code>, state: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.on_destroying(entities: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.on_destroyed(entities: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.on_destroy() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.on_attach_block(block: <code>Any</code>, block_start: <code>Any</code>, block_end: <code>Any</code>, into: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/world/#modifiers","title":"Modifiers","text":"<p><code>import \"luxe: world\" for Modifiers</code></p> <p>no docs found</p> <ul> <li>get_or_create_block(world: <code>Any</code>, module: <code>Any</code>, block_id: <code>Any</code>)</li> <li>attach_uuid(module: <code>Any</code>, entity: <code>Any</code>, uuid: <code>Any</code>)</li> <li>detach_uuid(module: <code>Any</code>, entity: <code>Any</code>, uuid: <code>Any</code>)</li> <li>has(module: <code>Any</code>, entity: <code>Any</code>)</li> <li>set_uuid(module: <code>Any</code>, entity: <code>Any</code>, uuid: <code>Any</code>)</li> <li>get_uuid(module: <code>Any</code>, entity: <code>Any</code>)</li> <li>get_attached(entity: <code>Any</code>)</li> <li>get_attached_types(entity: <code>Any</code>)</li> <li>get_entities(module: <code>Any</code>)</li> <li>get_instances(module: <code>Any</code>)</li> <li>get_module(uuid: <code>Any</code>)</li> <li>get_entity(uuid: <code>Any</code>)</li> <li>has_system_in_world(module: <code>Any</code>, world: <code>Any</code>)</li> <li>get_system_in_world(module: <code>Any</code>, world: <code>Any</code>)</li> <li>get(module: <code>Any</code>, entity: <code>Any</code>)</li> <li>get_system(module: <code>Any</code>, entity: <code>Any</code>)</li> <li>create(module: <code>Any</code>, entity: <code>Any</code>)</li> <li>destroy(module: <code>Any</code>, entity: <code>Any</code>)</li> <li>init(world: <code>Any</code>, modifier: <code>Any</code>, block: <code>Any</code>)</li> <li>get_asset_compiler(type: <code>Any</code>)</li> <li>get_compiler_for_input(modifier_id: <code>Any</code>)</li> <li>get_data_block_type(modifier_id: <code>Any</code>)</li> <li>get_input_block_type(modifier_id: <code>Any</code>)</li> </ul> <p> Modifiers.get_or_create_block(world: <code>Any</code>, module: <code>Any</code>, block_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.attach_uuid(module: <code>Any</code>, entity: <code>Any</code>, uuid: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.detach_uuid(module: <code>Any</code>, entity: <code>Any</code>, uuid: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.has(module: <code>Any</code>, entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.set_uuid(module: <code>Any</code>, entity: <code>Any</code>, uuid: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_uuid(module: <code>Any</code>, entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_attached(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_attached_types(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_entities(module: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_instances(module: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_module(uuid: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_entity(uuid: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.has_system_in_world(module: <code>Any</code>, world: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_system_in_world(module: <code>Any</code>, world: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get(module: <code>Any</code>, entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_system(module: <code>Any</code>, entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.create(module: <code>Any</code>, entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.destroy(module: <code>Any</code>, entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.init(world: <code>Any</code>, modifier: <code>Any</code>, block: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_asset_compiler(type: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_compiler_for_input(modifier_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_data_block_type(modifier_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_input_block_type(modifier_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/world/#overlap","title":"Overlap","text":"<p><code>import \"luxe: world\" for Overlap</code></p> <p>no docs found</p> <ul> <li>none</li> <li>begin</li> <li>end</li> <li>active</li> <li>name(value: <code>Any</code>)</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> Overlap.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Overlap.begin \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Overlap.end \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Overlap.active \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Overlap.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Overlap.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/world/#physics2d","title":"Physics2D","text":"<p><code>import \"luxe: world\" for Physics2D</code></p> <p>no docs found</p> <ul> <li>set_gravity(world: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>)</li> </ul> <p> Physics2D.set_gravity(world: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/world/#physics3d","title":"Physics3D","text":"<p><code>import \"luxe: world\" for Physics3D</code></p> <p>no docs found</p> <ul> <li>set_debug_draw(world: <code>Any</code>, state: <code>Any</code>)</li> <li>set_gravity(world: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>)</li> <li>cast_ray(world: <code>Any</code>, from: <code>Any</code>, to: <code>Any</code>)</li> <li>cast_shape(entity: <code>Any</code>, from: <code>Any</code>, to: <code>Any</code>, scale: <code>Any</code>)</li> <li>cast_shape(entity: <code>Any</code>, from: <code>Any</code>, to: <code>Any</code>)</li> <li>query_sphere(world: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>)</li> <li>query_box(world: <code>Any</code>, center: <code>Any</code>, size: <code>Any</code>)</li> </ul> <p> Physics3D.set_debug_draw(world: <code>Any</code>, state: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Physics3D.set_gravity(world: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Physics3D.cast_ray(world: <code>Any</code>, from: <code>Any</code>, to: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Physics3D.cast_shape(entity: <code>Any</code>, from: <code>Any</code>, to: <code>Any</code>, scale: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Physics3D.cast_shape(entity: <code>Any</code>, from: <code>Any</code>, to: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Physics3D.query_sphere(world: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Physics3D.query_box(world: <code>Any</code>, center: <code>Any</code>, size: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/world/#prototype","title":"Prototype","text":"<p><code>import \"luxe: world\" for Prototype</code></p> <p>Prototypes are collections of entities that are stored together and can be instanced together. Protoype instances can be nested in other prototypes as well as in scenes. If entities in a prototype have a transform modifier without a transform parent, the prototype root will automatically be set as their parent.</p> <p>Once a prototype is instanced in a world, all its entities behave just like other entities in the world and get assigned unique entity UUIDs. Relative prototype UUIDs, or named entities within a prototype can be accessed via the root entity of the prototype instance.</p> <ul> <li>destroy(entity: <code>Entity</code>)</li> <li>has(entity: <code>Entity</code>)</li> <li>get_type(entity: <code>Entity</code>)</li> <li>get_root(entity: <code>Entity</code>)</li> <li>get_tree(entity: <code>Entity</code>)</li> <li>has_tree(entity: <code>Entity</code>)</li> <li>get_ref(entity: <code>Entity</code>, uuid: <code>String</code>)</li> <li>get_ref_of(entity: <code>Entity</code>, target_entity: <code>Entity</code>)</li> <li>get_named(entity: <code>Entity</code>, name: <code>String</code>)</li> <li>get_named_all(entity: <code>Entity</code>, name: <code>String</code>)</li> <li>entity_list(entity: <code>Entity</code>)</li> <li>refs_list(entity: <code>Entity</code>)</li> <li>create(world: <code>World</code>, prototype_id: <code>String</code>, instance_id: <code>String</code>)</li> <li>create(world: <code>World</code>, prototype_id: <code>String</code>, instance_id: <code>String</code>, position: <code>Vec</code>)</li> <li>create(world: <code>World</code>, prototype_id: <code>String</code>, instance_id: <code>String</code>, position: <code>Vec</code>, rotation: <code>Vec</code>)</li> <li>create(world: <code>World</code>, prototype_id: <code>String</code>, instance_id: <code>String</code>, position: <code>Vec</code>, rotation: <code>Vec</code>, scale: <code>Vec</code>)</li> </ul> <p> Prototype.destroy(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Destroys the prototype instance. (called on the root entity and will also destroy member entities that were instanced with it)   </p> <p> Prototype.has(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether a entity has a prototype modifier (is a prototype instance root).   </p> <p> Prototype.get_type(entity: <code>Entity</code>) \u00b6 returns <code>ID</code></p> <p>Get the prototype id the prototype instance was spawned from.   </p> <p> Prototype.get_root(entity: <code>Entity</code>) \u00b6 returns <code>Entity</code></p> <p>Get the \\\"innermost\\\" prototype root if entity is part of a prototype instance. Returns the entity itself if it is a prototype root. Returns null if entity is not part of a prototype instance.   </p> <p> Prototype.get_tree(entity: <code>Entity</code>) \u00b6 returns <code>List</code></p> <p>Get the list of prototype instances this entity is a part of. (List will have 1 elements for unnested prototypes and goes from innermost to outermost instance root for nested prototypes.). Null if entity is not part of prototype instance.   </p> <p> Prototype.has_tree(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether the entity is part of a prototype instance.   </p> <p> Prototype.get_ref(entity: <code>Entity</code>, uuid: <code>String</code>) \u00b6 returns <code>Entity</code></p> <p>Get an entity by its reference (prototype-relative UUID) from its prototype root. (the same prototype asset may be instanced multiple times, so it may be important to find a specific prototype root and ask it for its version of the entity)   </p> <p> Prototype.get_ref_of(entity: <code>Entity</code>, target_entity: <code>Entity</code>) \u00b6 returns <code>String</code></p> <p>Get the reference (prototype-relative UUID) of an entity within a prototype instance. One Entity can be part of multiple nested prototypes and have different references in each context.   </p> <p> Prototype.get_named(entity: <code>Entity</code>, name: <code>String</code>) \u00b6 returns <code>Entity</code></p> <p>Get first entity in a prototype instance with a specific name.   </p> <p> Prototype.get_named_all(entity: <code>Entity</code>, name: <code>String</code>) \u00b6 returns <code>Entity</code></p> <p>Get all entities in a prototype instance with a specific name.   </p> <p> Prototype.entity_list(entity: <code>Entity</code>) \u00b6 returns <code>List</code></p> <p>Get a list of all entities that are part of a prototype instance.   </p> <p> Prototype.refs_list(entity: <code>Entity</code>) \u00b6 returns <code>List</code></p> <p>Get a list of all references (prototype-relative UUIDs) to entities within one prototype instance.   </p> <p> Prototype.create(world: <code>World</code>, prototype_id: <code>String</code>, instance_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Prototype.create(world: <code>World</code>, prototype_id: <code>String</code>, instance_id: <code>String</code>, position: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Prototype.create(world: <code>World</code>, prototype_id: <code>String</code>, instance_id: <code>String</code>, position: <code>Vec</code>, rotation: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Prototype.create(world: <code>World</code>, prototype_id: <code>String</code>, instance_id: <code>String</code>, position: <code>Vec</code>, rotation: <code>Vec</code>, scale: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Instantiate a new prototype into a world with a new name(instance id), position, rotation and scale. You may pass <code>null</code> into position rotation and scale (or call one of the functions that omit those arguments), to give them default values (0,0,0 for position/rotation, 1,1,1 for scale). This function returns the root entity of the newly created prototype instance.   </p>"},{"location":"api/v/2025.1.1/world/#scene","title":"Scene","text":"<p><code>import \"luxe: world\" for Scene</code></p> <p>Scenes are collections of entities that are stored together and can be instanced together. If entities in a scene have a transform modifier without a transform parent, the scene root will automatically be set as their parent.</p> <p>Once a scene is instanced in a world, all its entities behave just like other entities in the world and get assigned unique entity UUIDs. Relative scene UUIDs, or named entities within a scene can be accessed via the root entity of the scene instance.</p> <p>Scenes are mostly referred to by their scene ID. By default for new scenes, this is their asset id, but it can be changed to allow loading multiple scenes from the same asset and have them exist in the same world.</p> <ul> <li>create(world: <code>World</code>, id: <code>String</code>)</li> <li>destroy(world: <code>World</code>, id: <code>String</code>)</li> <li>get_list(world: <code>World</code>)</li> <li>exists(world: <code>World</code>, id: <code>String</code>)</li> <li>entity_list(world: <code>World</code>, id: <code>String</code>)</li> <li>entity_forget(world: <code>World</code>, id: <code>String</code>, entity: <code>Entity</code>)</li> <li>set_id(world: <code>World</code>, id: <code>String</code>, new_id: <code>String</code>)</li> </ul> <p> Scene.create(world: <code>World</code>, id: <code>String</code>) \u00b6 returns <code>Entity</code></p> <p>Create a new scene into a world. Does not load a scene asset with the given id. This function returns the root entity of the newly created scene.   </p> <p> Scene.destroy(world: <code>World</code>, id: <code>String</code>) \u00b6 returns <code>Entity</code></p> <p>Destroy a scene by its id.</p> <pre><code>  Scene.create(app.world, \"scenes/main\")\n  Scene.destroy(app.world, \"scenes/main\")\n</code></pre> <p> Scene.get_list(world: <code>World</code>) \u00b6 returns <code>List</code></p> <p>Get a list of scenes in a world. The list contains the IDs of the scenes (as string IDs).   </p> <p> Scene.exists(world: <code>World</code>, id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Check if a scene is currently instanced in a world.   </p> <p> Scene.entity_list(world: <code>World</code>, id: <code>String</code>) \u00b6 returns <code>List</code></p> <p>Get all entities that are part of an instanced scene.   </p> <p> Scene.entity_forget(world: <code>World</code>, id: <code>String</code>, entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Stop associating an entity with a loaded scene.   </p> <p> Scene.set_id(world: <code>World</code>, id: <code>String</code>, new_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Change the ID of a scene instance. </p> <p>By default this ID is the asset id, but with this function it can be changed and the original scene loaded again without causting conflicts.   </p>"},{"location":"api/v/2025.1.1/world/#ui","title":"UI","text":"<p><code>import \"luxe: world\" for UI</code></p> <p>A <code>UI</code> modifier holds controls which define a 2d user interface with images, buttons, sliders, etc...</p> <pre><code>  //create ui modifier in ui world\n  var ui = Entity.create(app.ui)\n  UI.create(ui, 0, 0, world.width, world.height, 0, app.ui_camera)\n\n  //add controls\n  var control = Control.create(ui)\n  //more control stuff\n\n  //then rebuild the UI\n  UI.commit(ui)\n</code></pre> <ul> <li>create(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, z: <code>Num</code>, camera: <code>Entity</code>)</li> <li>destroy(entity: <code>Entity</code>)</li> <li>has(entity: <code>Entity</code>)</li> <li>commit(entity: <code>Entity</code>)</li> <li>commit_now(entity: <code>Entity</code>)</li> <li>event_cancel(entity: <code>Entity</code>, event_id: <code>ID</code>)</li> <li>event_cancelled(entity: <code>Entity</code>, event_id: <code>ID</code>)</li> <li>set_camera(entity: <code>Entity</code>, camera: <code>Entity</code>)</li> <li>set_render_mode(entity: <code>Entity</code>, mode: <code>UIRenderMode</code>)</li> <li>set_material_basis(entity: <code>Entity</code>, solid: <code>String</code>, text: <code>String</code>)</li> <li>set_bounds(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, z: <code>Num</code>)</li> <li>get_pos(entity: <code>Entity</code>)</li> <li>get_opacity(entity: <code>Entity</code>)</li> <li>set_opacity(entity: <code>Entity</code>, opacity: <code>Num</code>)</li> <li>get_size(entity: <code>Entity</code>)</li> <li>get_debug_control(entity: <code>Entity</code>)</li> <li>get_debug_draw_depth(entity: <code>Entity</code>)</li> <li>get_input_node(entity: <code>Entity</code>)</li> <li>set_input_node(entity: <code>Entity</code>, input_node_id: <code>String</code>)</li> <li>set_layout_mode(entity: <code>Entity</code>, mode: <code>UILayoutMode</code>)</li> <li>set_debug_mode(entity: <code>Entity</code>, mode: <code>UIDebugMode</code>)</li> <li>any_marked()</li> <li>any_focused()</li> <li>get_focused(entity: <code>Entity</code>)</li> <li>get_captured(entity: <code>Entity</code>)</li> <li>get_marked(entity: <code>Entity</code>)</li> <li>get_control_count(entity: <code>Entity</code>)</li> <li>get_control(entity: <code>Entity</code>, index: <code>Num</code>)</li> <li>focus_invalidate(entity: <code>Entity</code>)</li> <li>focus(control: <code>Control</code>)</li> <li>unfocus(control: <code>Control</code>)</li> <li>mark(control: <code>Control</code>)</li> <li>unmark(control: <code>Control</code>)</li> <li>capture(control: <code>Control</code>)</li> <li>uncapture(control: <code>Control</code>)</li> <li>bring_to_front(control: <code>Control</code>)</li> <li>control_at_point(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>mouse_to_canvas(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>dump(ui: <code>Entity</code>)</li> <li>spawn(asset_id: <code>String</code>, parent: <code>Control</code>, instance_id: <code>String</code>)</li> <li>make(ui: <code>Entity</code>, asset: <code>String</code>, instance_id: <code>String</code>)</li> <li>draw_depth_of(control: <code>Control</code>, index: <code>Num</code>)</li> <li>draw_text(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, string: <code>String</code>, size: <code>Num</code>, font: <code>String</code>, color: <code>Color</code>, align: <code>TextAlign</code>, align_vertical: <code>TextAlign</code>)</li> <li>draw_text(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, string: <code>String</code>, size: <code>Num</code>, font: <code>String</code>, color: <code>Color</code>, align: <code>TextAlign</code>, align_vertical: <code>TextAlign</code>)</li> <li>draw_image(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, angle: <code>Num</code>, color: <code>Color</code>, uv: <code>Vec</code>, image: <code>Image</code>, flags: <code>UIImageFlags</code>)</li> <li>draw_image(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, angle: <code>Num</code>, color: <code>Color</code>, uv: <code>Vec</code>, image: <code>Image</code>)</li> <li>draw_quad(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, angle: <code>Num</code>, color: <code>Color</code>)</li> <li>draw_circle(control: <code>Control</code>, ox: <code>Num</code>, oy: <code>Num</code>, oz: <code>Num</code>, rx: <code>Num</code>, ry: <code>Num</code>, start_angle: <code>Num</code>, end_angle: <code>Num</code>, smoothness: <code>Num</code>, color: <code>Color</code>)</li> <li>draw_line(control: <code>Control</code>, x1: <code>Num</code>, y1: <code>Num</code>, x2: <code>Num</code>, y2: <code>Num</code>, z: <code>Num</code>, style: <code>PathStyle</code>)</li> <li>draw_rect(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, angle: <code>Num</code>, style: <code>PathStyle</code>)</li> <li>draw_rect_detailed(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, angle: <code>Num</code>, radius: <code>Num</code>, smoothness: <code>Num</code>, style: <code>PathStyle</code>)</li> <li>draw_quad_detailed(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, angle: <code>Num</code>, radius: <code>Num</code>, smoothness: <code>Num</code>, color: <code>Color</code>)</li> <li>draw_ring(control: <code>Control</code>, ox: <code>Num</code>, oy: <code>Num</code>, oz: <code>Num</code>, rx: <code>Num</code>, ry: <code>Num</code>, start_angle: <code>Num</code>, end_angle: <code>Num</code>, smoothness: <code>Num</code>, style: <code>PathStyle</code>)</li> <li>draw_path(control: <code>Control</code>, points: <code>List</code>, style: <code>PathStyle</code>, closed: <code>Bool</code>)</li> <li>events_emit(control: <code>Control</code>, type: <code>UIEvent</code>)</li> <li>events_emit(control: <code>Control</code>, type: <code>UIEvent</code>, data: <code>Any</code>)</li> <li>events_emit(control: <code>Control</code>, type: <code>UIEvent</code>, data: <code>Any</code>, data_before: <code>Any</code>)</li> </ul> <p> UI.create(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, z: <code>Num</code>, camera: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Create a UI modifier on an Entity. The <code>x</code> <code>y</code> <code>z</code> arguments are the position relative to the world origin, or relative to the <code>Transform</code> on the same entity if one exists. <code>w</code> and <code>h</code> are the width and the height of the canvas, this is both used for the mask texture (and in <code>UIRenderMode.image</code> the ui rendertarget) as well as the (unscaled) size of the UI in worldspace. <code>camera</code> describes a camera that is used to resolve input, most of the time this is the camera rendering the world the UI is in, but it doesnt have to be.   </p> <p> UI.destroy(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Remove a <code>UI</code> modifier from an entity. This also destroys all controls on that <code>UI</code>.   </p> <p> UI.has(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether an Entity has an <code>UI</code> modifier attached.   </p> <p> UI.commit(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Request all changes to the UI are committed before rendering happens   </p> <p> UI.commit_now(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Commit all changes to the UI immediately   </p> <p> UI.event_cancel(entity: <code>Entity</code>, event_id: <code>ID</code>) \u00b6 returns <code>None</code></p> <p>Cancel an event.   </p> <p> UI.event_cancelled(entity: <code>Entity</code>, event_id: <code>ID</code>) \u00b6 returns <code>Bool</code></p> <p>Check whether an event was cancelled before.   </p> <p> UI.set_camera(entity: <code>Entity</code>, camera: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Set the camera used for input calculations. Most of the time this is the camera rendering the world the UI is in, but it doesnt have to be.   </p> <p> UI.set_render_mode(entity: <code>Entity</code>, mode: <code>UIRenderMode</code>) \u00b6 returns <code>None</code></p> <p>Set the render mode of the UI canvas.</p> <p><code>UIRenderMode.world</code> renders the controls directly into the world, while <code>UIRenderMode.image</code> first renders them to an intermediate texture and then renders that.</p> <p><code>UIRenderMode.image</code> is the default as it can avoid artifacts and works in more circumstances, though <code>UIRenderMode.world</code> can lead to more sharp results and slightly better performance.   </p> <p> UI.set_material_basis(entity: <code>Entity</code>, solid: <code>String</code>, text: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Set the material basis the controls (excluding <code>UIImage</code>) is drawn with. By default \"luxe: material_basis/ui_solid\" is the basis for solid controls and \"luxe: material_basis/ui_font\" the basis for text.   </p> <p> UI.set_bounds(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set size and position of an <code>UI</code> modifier. The <code>x</code> <code>y</code> <code>z</code> arguments are the position relative to the world origin, or relative to the <code>Transform</code> on the same entity if one exists. <code>w</code> and <code>h</code> are the width and the height of the canvas, this is both used for the mask texture (and in <code>UIRenderMode.image</code> the ui rendertarget) as well as the (unscaled) size of the UI in worldspace.   </p> <p> UI.get_pos(entity: <code>Entity</code>) \u00b6 returns <code>Vec</code></p> <p>Get position of an <code>UI</code> modifier.   </p> <p> UI.get_opacity(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>Get overall UI opacity   </p> <p> UI.set_opacity(entity: <code>Entity</code>, opacity: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Set overall UI opacity   </p> <p> UI.get_size(entity: <code>Entity</code>) \u00b6 returns <code>Vec</code></p> <p>Get size of an <code>UI</code> modifier.   </p> <p> UI.get_debug_control(entity: <code>Entity</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p> <p> UI.get_debug_draw_depth(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> UI.get_input_node(entity: <code>Entity</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> UI.set_input_node(entity: <code>Entity</code>, input_node_id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.set_layout_mode(entity: <code>Entity</code>, mode: <code>UILayoutMode</code>) \u00b6 returns <code>None</code></p> <p>Set the layout mode of the UI.</p> <p>By default this is <code>UILayoutMode.none</code>, which will do no extra layouting and ignore <code>Control</code> margin, behave and contain.</p> <p><code>UILayoutMode.flex</code> is the default layout implementation which will follow the <code>Control</code> margin, behave and contain settings.</p> <pre><code>  UI.set_layout_mode(ui, UILayoutMode.flex)\n\n  var root = Control.create(ui)\n    Control.set_size(root, 300, 0)\n    Control.set_behave(root, UIBehave.left | UIBehave.top)\n    Control.set_margin(root, 100, 100, 0, 0)\n    Control.set_contain(root, UIContain.column | UIContain.start | UIContain.vfit)\n\n  var text_input = UIText.create(ui)\n    Control.set_behave(text_input, UIBehave.left | UIBehave.top | UIBehave.hfill)\n  Control.child_add(root, text_input)\n\n  var image = UIImage.create(ui)\n    UIImage.set_image(image, Assets.image(\"luxe: image/logo.sprite\"))\n    Control.set_size(image, 300, 300)\n    Control.set_behave(image, UIBehave.left | UIBehave.top | UIBehave.hfill)\n  Control.child_add(root, image)\n</code></pre> <p> UI.set_debug_mode(entity: <code>Entity</code>, mode: <code>UIDebugMode</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.any_marked() \u00b6 returns <code>Bool</code></p> <p>Returns true if any UI has a marked control (any control with input under the mouse)   </p> <p> UI.any_focused() \u00b6 returns <code>Bool</code></p> <p>Returns true if any UI has a focused control   </p> <p> UI.get_focused(entity: <code>Entity</code>) \u00b6 returns <code>Control</code></p> <p>Get currently focussed control. A control being focused means its been clicked on or otherwise focused and will recieve context inputs like keyboard presses on a text input field.   </p> <p> UI.get_captured(entity: <code>Entity</code>) \u00b6 returns <code>Control</code></p> <p>Get captured control, <code>null</code> if none is captured. A control being captured means all inputs will only be sent to this control until it is uncaptured again.   </p> <p> UI.get_marked(entity: <code>Entity</code>) \u00b6 returns <code>Control</code></p> <p>Get marked control, <code>null</code> if none is marked. A control being marked means it is hovered over and can be focused.   </p> <p> UI.get_control_count(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>Get amount of controls in a <code>UI</code>.   </p> <p> UI.get_control(entity: <code>Entity</code>, index: <code>Num</code>) \u00b6 returns <code>Control</code></p> <p>Get a control in a <code>UI</code> by its index. Useful for iterating over all controls.   </p> <p> UI.focus_invalidate(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Unfocus whatever is focussed in a specific <code>UI</code>.   </p> <p> UI.focus(control: <code>Control</code>) \u00b6 returns <code>None</code></p> <p>Focus a control. Will unfocus any previously focused controls on the <code>UI</code>. A control being focused means its been clicked on or otherwise focused and will recieve context inputs like keyboard presses on a text input field.   </p> <p> UI.unfocus(control: <code>Control</code>) \u00b6 returns <code>None</code></p> <p>Unfocus a specific control. If the control is not the focused control in the UI, this does nothing.   </p> <p> UI.mark(control: <code>Control</code>) \u00b6 returns <code>None</code></p> <p>Mark a control. Will unfocus any previously marked controls on the <code>UI</code>. A control being marked means it is hovered over and can be focused.   </p> <p> UI.unmark(control: <code>Control</code>) \u00b6 returns <code>None</code></p> <p>Unmark a specific control. If the control is not the marked control in the UI, this does nothing.   </p> <p> UI.capture(control: <code>Control</code>) \u00b6 returns <code>None</code></p> <p>Capture a control. Until uncaptured all inputs will only go to this control.   </p> <p> UI.uncapture(control: <code>Control</code>) \u00b6 returns <code>None</code></p> <p>Uncapture a control and have inputs be distributed regularly.   </p> <p> UI.bring_to_front(control: <code>Control</code>) \u00b6 returns <code>None</code></p> <p>Bring the control to the front in its current context (globally in the <code>UI</code> or within its parent if its a child)   </p> <p> UI.control_at_point(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>Control</code></p> <p>Get the highest control at a position.   </p> <p> UI.mouse_to_canvas(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>Float2</code></p> <p>Translate from mouse position on screen to canvas coordinates. Uses the set canvas camera.   </p> <p> UI.dump(ui: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Write a bunch of information about the <code>UI</code> and its controls into the console.   </p> <p> UI.spawn(asset_id: <code>String</code>, parent: <code>Control</code>, instance_id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Spawn controls from a ui asset. Puts newly spawned controls into a parent control.   </p> <p> UI.make(ui: <code>Entity</code>, asset: <code>String</code>, instance_id: <code>String</code>) \u00b6 returns <code>Control</code></p> <p>Spawn controls from a ui asset. Creates new root for newly spawned controls and returns that root control.   </p> <p> UI.draw_depth_of(control: <code>Control</code>, index: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.draw_text(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, string: <code>String</code>, size: <code>Num</code>, font: <code>String</code>, color: <code>Color</code>, align: <code>TextAlign</code>, align_vertical: <code>TextAlign</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.draw_text(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, string: <code>String</code>, size: <code>Num</code>, font: <code>String</code>, color: <code>Color</code>, align: <code>TextAlign</code>, align_vertical: <code>TextAlign</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.draw_image(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, angle: <code>Num</code>, color: <code>Color</code>, uv: <code>Vec</code>, image: <code>Image</code>, flags: <code>UIImageFlags</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.draw_image(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, angle: <code>Num</code>, color: <code>Color</code>, uv: <code>Vec</code>, image: <code>Image</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.draw_quad(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, angle: <code>Num</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.draw_circle(control: <code>Control</code>, ox: <code>Num</code>, oy: <code>Num</code>, oz: <code>Num</code>, rx: <code>Num</code>, ry: <code>Num</code>, start_angle: <code>Num</code>, end_angle: <code>Num</code>, smoothness: <code>Num</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.draw_line(control: <code>Control</code>, x1: <code>Num</code>, y1: <code>Num</code>, x2: <code>Num</code>, y2: <code>Num</code>, z: <code>Num</code>, style: <code>PathStyle</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.draw_rect(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, angle: <code>Num</code>, style: <code>PathStyle</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.draw_rect_detailed(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, angle: <code>Num</code>, radius: <code>Num</code>, smoothness: <code>Num</code>, style: <code>PathStyle</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.draw_quad_detailed(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, angle: <code>Num</code>, radius: <code>Num</code>, smoothness: <code>Num</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.draw_ring(control: <code>Control</code>, ox: <code>Num</code>, oy: <code>Num</code>, oz: <code>Num</code>, rx: <code>Num</code>, ry: <code>Num</code>, start_angle: <code>Num</code>, end_angle: <code>Num</code>, smoothness: <code>Num</code>, style: <code>PathStyle</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.draw_path(control: <code>Control</code>, points: <code>List</code>, style: <code>PathStyle</code>, closed: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.events_emit(control: <code>Control</code>, type: <code>UIEvent</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.events_emit(control: <code>Control</code>, type: <code>UIEvent</code>, data: <code>Any</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.events_emit(control: <code>Control</code>, type: <code>UIEvent</code>, data: <code>Any</code>, data_before: <code>Any</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/world/#uibehave","title":"UIBehave","text":"<p><code>import \"luxe: world\" for UIBehave</code></p> <p>no docs found</p> <ul> <li>left</li> <li>top</li> <li>right</li> <li>bottom</li> <li>hfill</li> <li>vfill</li> <li>hcenter</li> <li>vcenter</li> <li>center</li> <li>fill</li> <li>break_line</li> </ul> <p> UIBehave.left \u00b6 returns <code>unknown</code></p> <p>Item anchors to the item to its left or left side of parent   </p> <p> UIBehave.top \u00b6 returns <code>unknown</code></p> <p>Item anchors to the item above it or top side of parent   </p> <p> UIBehave.right \u00b6 returns <code>unknown</code></p> <p>Item anchors to the item to its right or right side of parent   </p> <p> UIBehave.bottom \u00b6 returns <code>unknown</code></p> <p>Item anchors to the item below it or bottom side of parent   </p> <p> UIBehave.hfill \u00b6 returns <code>unknown</code></p> <p>Item anchors to both left and right item or parent borders   </p> <p> UIBehave.vfill \u00b6 returns <code>unknown</code></p> <p>Item anchors to both top and bottom item or parent borders   </p> <p> UIBehave.hcenter \u00b6 returns <code>unknown</code></p> <p>Center item horizontally, with left margin as offset   </p> <p> UIBehave.vcenter \u00b6 returns <code>unknown</code></p> <p>Center item vertically, with top margin as offset   </p> <p> UIBehave.center \u00b6 returns <code>unknown</code></p> <p>Center item in both directions, with left/top margin as offset   </p> <p> UIBehave.fill \u00b6 returns <code>unknown</code></p> <p>Anchor item to all four directions   </p> <p> UIBehave.break_line \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/world/#uiclear","title":"UIClear","text":"<p><code>import \"luxe: world\" for UIClear</code></p> <p>no docs found</p> <ul> <li>destroy</li> <li>remove</li> <li>set_invisible</li> <li>remove_set_invisible</li> </ul> <p> UIClear.destroy \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIClear.remove \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIClear.set_invisible \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIClear.remove_set_invisible \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/world/#uicontain","title":"UIContain","text":"<p><code>import \"luxe: world\" for UIContain</code></p> <p>no docs found</p> <ul> <li>row</li> <li>column</li> <li>layout</li> <li>flex</li> <li>nowrap</li> <li>wrap</li> <li>start</li> <li>middle</li> <li>end</li> <li>justify</li> <li>vfit</li> <li>hfit</li> </ul> <p> UIContain.row \u00b6 returns <code>unknown</code></p> <p>Items go from left to right   </p> <p> UIContain.column \u00b6 returns <code>unknown</code></p> <p>Items go from top to bottom   </p> <p> UIContain.layout \u00b6 returns <code>unknown</code></p> <p>Use Free Layout model   </p> <p> UIContain.flex \u00b6 returns <code>unknown</code></p> <p>Use Flex Layout model   </p> <p> UIContain.nowrap \u00b6 returns <code>unknown</code></p> <p>Stays on a single line   </p> <p> UIContain.wrap \u00b6 returns <code>unknown</code></p> <p>Wraps to multiple lines, wrapping left to right   </p> <p> UIContain.start \u00b6 returns <code>unknown</code></p> <p>Items begin at start of row/column   </p> <p> UIContain.middle \u00b6 returns <code>unknown</code></p> <p>Items begin at middle of row/column   </p> <p> UIContain.end \u00b6 returns <code>unknown</code></p> <p>Items begin at end of row/column   </p> <p> UIContain.justify \u00b6 returns <code>unknown</code></p> <p>Insert spacing between items to stretch elements across whole row/column   </p> <p> UIContain.vfit \u00b6 returns <code>unknown</code></p> <p>Items stretch height to fill vertical space   </p> <p> UIContain.hfit \u00b6 returns <code>unknown</code></p> <p>Items stretch width to fill horizontal space   </p>"},{"location":"api/v/2025.1.1/world/#uidebugmode","title":"UIDebugMode","text":"<p><code>import \"luxe: world\" for UIDebugMode</code></p> <p>no docs found</p> <ul> <li>none</li> <li>basic</li> </ul> <p> UIDebugMode.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIDebugMode.basic \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/world/#uidrop","title":"UIDrop","text":"<p><code>import \"luxe: world\" for UIDrop</code></p> <p>no docs found</p> <ul> <li>start</li> <li>end</li> <li>move</li> <li>drop</li> </ul> <p> UIDrop.start \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIDrop.end \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIDrop.move \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIDrop.drop \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/world/#uievent","title":"UIEvent","text":"<p><code>import \"luxe: world\" for UIEvent</code></p> <p>The built in UI events that all controls can potentially use.</p> <ul> <li>name(value: <code>Any</code>)</li> <li>unknown</li> <li>enter</li> <li>exit</li> <li>press</li> <li>release</li> <li>scroll</li> <li>move</li> <li>key</li> <li>text</li> <li>focus</li> <li>unfocus</li> <li>capture</li> <li>uncapture</li> <li>commit</li> <li>destroy</li> <li>language</li> <li>change</li> <li>bounds</li> <li>drag</li> </ul> <p> UIEvent.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Converts a UIEvent value to a readable name.</p> <pre><code>Log.print(UIEvent.name(UIEvent.move)) //prints \"move\"\n</code></pre> <p> UIEvent.unknown \u00b6 returns <code>unknown</code></p> <p>An event of unknown type, invalid. This is the default value.   </p> <p> UIEvent.enter \u00b6 returns <code>unknown</code></p> <p>An input cursor has entered this control. (e.g on mouse enter). Sends no additional data in the event.</p> <pre><code>if(event.type == UIEvent.enter) {\n  Log.print(\"entered control!\")\n}\n</code></pre> <p> UIEvent.exit \u00b6 returns <code>unknown</code></p> <p>An input cursor has left this control. (e.g on mouse exit) Sends no additional data in the event.</p> <pre><code>if(event.type == UIEvent.exit) {\n  Log.print(\"exited control!\")\n}\n</code></pre> <p> UIEvent.press \u00b6 returns <code>unknown</code></p> <p>An input press event (e.g mouse button was pressed down). a.k.a \"down\" Sends <code>event.x</code>, <code>event.y</code> and <code>event.button</code>.</p> <pre><code>if(event.type == UIEvent.press) {\n  var button = MouseButton.name(event.button)\n  Log.print(\"pressed down on control at `%(event.x)`,`%(event.y)`\")\n  Log.print(\"  button was `%(button)`\")\n}\n</code></pre> <p> UIEvent.release \u00b6 returns <code>unknown</code></p> <p>An input release event (e.g mouse button was released). a.k.a \"up\" Sends <code>event.x</code>, <code>event.y</code> and <code>event.button</code>.</p> <pre><code>if(event.type == UIEvent.press) {\n  var button = MouseButton.name(event.button)\n  Log.print(\"released input on control at `%(event.x)`,`%(event.y)`\")\n  Log.print(\"  button was `%(button)`\")\n}\n</code></pre> <p> UIEvent.scroll \u00b6 returns <code>unknown</code></p> <p>A scroll event (e.g mouse wheel). Sends <code>event.x</code>, <code>event.y</code> where <code>x</code> is the horizontal scroll amount,  and <code>y</code> is the vertical scroll amount.</p> <pre><code>if(event.type == UIEvent.scroll) {\n  Log.print(\"scroll amount `%(event.x)`,`%(event.y)`\")\n}\n</code></pre> <p> UIEvent.move \u00b6 returns <code>unknown</code></p> <p>An input move event (e.g mouse movement). Sends <code>event.x</code>, <code>event.y</code> as the position of the input.</p> <pre><code>if(event.type == UIEvent.press) {\n  Log.print(\"move on control at `%(event.x)`,`%(event.y)`\")\n}\n</code></pre> <p> UIEvent.key \u00b6 returns <code>unknown</code></p> <p>A key input event. Sends a few useful values:</p> <ul> <li><code>event.key</code> - a Key value</li> <li><code>event.scan</code> - a Scan value</li> <li><code>event.mod</code> - a ModState value</li> <li><code>event.down</code> - a <code>Bool</code> value, whether the key is down or not</li> <li><code>event.repeat</code> - a <code>Bool</code> value, whether the event is from a key repeat</li> </ul> <pre><code>if(event.type == UIEvent.key) {\n  var down = event.down ? \"pressed\" : \"released\"\n  Log.print(\"key %(down), key was `%(Key.name(event.key))`\")\n  Log.print(\"  scan `%(Scan.name(event.scan))`, repeat? %(event.repeat)\")\n  if(event.mod.lshift || event.mod.rshift) {\n    Log.print(\"shift was also held down!\")\n  }\n}\n</code></pre> <p> UIEvent.text \u00b6 returns <code>unknown</code></p> <p>A control has sent a text event, which originates from typing.</p> <p>These events allow handling complex input that comes from the OS level IME input dialogs. On the simplest level, displaying <code>event.text</code> is enough to get started. </p> <p>Sends the following:</p> <ul> <li><code>event.text</code> - the latest text displayed</li> <li><code>event.text_start</code> - the start of the modified text</li> <li><code>event.text_length</code> - the length of the modified text</li> <li><code>event.text_type</code> - a TextEvent type (<code>edit</code> or <code>input</code>)</li> </ul> <p>The easiest way to understand might be to see. This video shows this at work.</p> <p>As a user is typing, there may be candidates avaiable to select from,  when this is true, these are sent as <code>TextInput.edit</code> events, with a start and end. When a candidate is selected (or no choices), a <code>TextEvent.input</code> is sent with the <code>text</code>.   </p> <p> UIEvent.focus \u00b6 returns <code>unknown</code></p> <p>A control has gained focus. Sends no additional data in the event.</p> <pre><code>if(event.type == UIEvent.focus) {\n  Log.print(\"gained focus!\")\n}\n</code></pre> <p> UIEvent.unfocus \u00b6 returns <code>unknown</code></p> <p>A control has lost focus. Sends no additional data in the event.</p> <pre><code>if(event.type == UIEvent.unfocus) {\n  Log.print(\"lost focus!\")\n}\n</code></pre> <p> UIEvent.capture \u00b6 returns <code>unknown</code></p> <p>A control has been captured.</p> <pre><code>if(event.type == UIEvent.capture) {\n  Log.print(\"gained input capture!\")\n}\n</code></pre> <p> UIEvent.uncapture \u00b6 returns <code>unknown</code></p> <p>A control has lost capture status.</p> <pre><code>if(event.type == UIEvent.uncapture) {\n  Log.print(\"lost input capture!\")\n}\n</code></pre> <p> UIEvent.commit \u00b6 returns <code>unknown</code></p> <p>When a control has changeable state (like an editable text control), it will send a <code>commit</code> event when the contents are being applied/committed. For example, if you are typing text and hit enter, or unfocus the control.</p> <pre><code>if(event.type == UIEvent.uncapture) {\n  Log.print(\"lost input capture!\")\n}\n</code></pre> <p> UIEvent.destroy \u00b6 returns <code>unknown</code></p> <p>When a control is destroyed you'll get notified here. Keep in mind that it's destroyed.</p> <pre><code>if(event.type == UIEvent.destroy) {\n  Log.print(\"destroyed!\")\n}\n</code></pre> <p> UIEvent.language \u00b6 returns <code>unknown</code></p> <p>When the UI lanuage changes, your control will receive this event.</p> <pre><code>if(event.type == UIEvent.language) {\n  Log.print(\"language changed.. I should update my size..\")\n}\n</code></pre> <p> UIEvent.change \u00b6 returns <code>unknown</code></p> <p>Change events are context specific, but notify you of a change in state. For example, UIWindow sends a change event with UIWindowChange to notify when a window was closed, collapsed or uncollapsed. A UIText sends a change event when the text has been changed, via typing or otherwise.</p> <p>In each case, <code>event.change</code> contains the relevant data.</p> <pre><code>//UIText example\nif(event.type == UIEvent.change) {\n  Log.print(\"text changed `%(event.change)`!\")\n}\n</code></pre> <p> UIEvent.bounds \u00b6 returns <code>unknown</code></p> <p>A control has changed bounds (note: this may not be working as intended right now). Sends <code>event.dx</code>, <code>event.dy</code> and <code>event.dw</code>, <code>event.dh</code> where <code>d</code> means <code>delta</code>. i.e the change in bounds as a difference between now and before.</p> <pre><code>if(event.type == UIEvent.bounds) {\n  if(event.dx != 0) Log.print(\"moved on x by %(event.dx) amount!\")\n  if(event.dy != 0) Log.print(\"moved on y by %(event.dy) amount!\")\n  if(event.dw != 0) Log.print(\"width changed by %(event.dw) amount!\")\n  if(event.dh != 0) Log.print(\"height changed by %(event.dh) amount!\")\n}\n</code></pre> <p> UIEvent.drag \u00b6 returns <code>unknown</code></p> <p>When a control is dragged or dropped on the UI canvas. The data field contains the kind of event, e.g UIDrag.start or UIDrag.end. The x/y is the start, and end_x/end_y is the end (for a start they're the same)</p> <pre><code>if(event.type == UIEvent.drag) {\n  Log.print(\"control drag changed.. %(event.data)\")\n}\n</code></pre>"},{"location":"api/v/2025.1.1/world/#uiimagefit","title":"UIImageFit","text":"<p><code>import \"luxe: world\" for UIImageFit</code></p> <p>no docs found</p> <ul> <li>fill</li> <li>contain</li> <li>cover</li> <li>keep_width</li> <li>keep_height</li> </ul> <p> UIImageFit.fill \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIImageFit.contain \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIImageFit.cover \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIImageFit.keep_width \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIImageFit.keep_height \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/world/#uiimageflags","title":"UIImageFlags","text":"<p><code>import \"luxe: world\" for UIImageFlags</code></p> <p>no docs found</p> <ul> <li>none</li> <li>pixelated</li> <li>use_mips</li> </ul> <p> UIImageFlags.none \u00b6 returns <code>unknown</code></p> <p>uses linear interpolation samplers, interpolating smoothly between pixels.   </p> <p> UIImageFlags.pixelated \u00b6 returns <code>unknown</code></p> <p>uses nearest neighbor samplers, leading to an interpolated look.   </p> <p> UIImageFlags.use_mips \u00b6 returns <code>unknown</code></p> <p>uses trilinear interpolation samplers, interpolating smoothly between pixels and mip levels.   </p>"},{"location":"api/v/2025.1.1/world/#uilayoutmode","title":"UILayoutMode","text":"<p><code>import \"luxe: world\" for UILayoutMode</code></p> <p>no docs found</p> <ul> <li>none</li> <li>flex</li> </ul> <p> UILayoutMode.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILayoutMode.flex \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/world/#uirendermode","title":"UIRenderMode","text":"<p><code>import \"luxe: world\" for UIRenderMode</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>image</li> <li>world</li> </ul> <p> UIRenderMode.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIRenderMode.image \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIRenderMode.world \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/world/#worldeventtype","title":"WorldEventType","text":"<p><code>import \"luxe: world\" for WorldEventType</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>create</li> <li>destroy</li> <li>tick</li> <li>modifier_tick</li> <li>name(value: <code>WorldEventType</code>)</li> </ul> <p> WorldEventType.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WorldEventType.create \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WorldEventType.destroy \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WorldEventType.tick \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WorldEventType.modifier_tick \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WorldEventType.name(value: <code>WorldEventType</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/world/#worldrenderdesc","title":"WorldRenderDesc","text":"<p><code>import \"luxe: world\" for WorldRenderDesc</code></p> <p>no docs found</p> <ul> <li>camera</li> <li>camera=(v : Any)</li> <li>camera(v: <code>Any</code>)</li> <li>cull_camera</li> <li>cull_camera=(v : Any)</li> <li>cull_camera(v: <code>Any</code>)</li> <li>new()</li> </ul> <p> WorldRenderDesc.camera \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WorldRenderDesc.camera=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WorldRenderDesc.camera(v: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WorldRenderDesc.cull_camera \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WorldRenderDesc.cull_camera=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WorldRenderDesc.cull_camera(v: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WorldRenderDesc.new() \u00b6 returns <code>WorldRenderDesc</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/asset/type/","title":"Type","text":""},{"location":"api/v/2025.1.1/asset/type/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/asset/type/#luxe-assettype-module","title":"<code>luxe: asset/type</code> module","text":"<ul> <li>AssetArtifact </li> <li>AssetContext </li> <li>AssetID </li> <li>AssetType </li> <li>AssetTypeID </li> </ul>"},{"location":"api/v/2025.1.1/asset/type/#assetartifact","title":"AssetArtifact","text":"<p><code>import \"luxe: asset/type\" for AssetArtifact</code></p> <p>no docs found</p> <ul> <li>id</li> <li>type</li> <li>path</li> <li>new(type: <code>String</code>, id: <code>String</code>, path: <code>String</code>)</li> </ul> <p> AssetArtifact.id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetArtifact.type \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetArtifact.path \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetArtifact.new(type: <code>String</code>, id: <code>String</code>, path: <code>String</code>) \u00b6 returns <code>AssetArtifact</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/asset/type/#assetcontext","title":"AssetContext","text":"<p><code>import \"luxe: asset/type\" for AssetContext</code></p> <p>no docs found</p> <ul> <li>id</li> <li>db</li> <li>artifacts</li> <li>ast_for_asset</li> <li>errors</li> <li>error(info: <code>String</code>)</li> <li>artifacts_for(type_id: <code>String</code>)</li> <li>ast_for(asset: <code>AssetID</code>)</li> <li>emit_block_def_for(asset: <code>AssetID</code>, block_tag: <code>String</code>, from: <code>String</code>)</li> <li>tagged(tag: <code>String</code>)</li> <li>tag(tag: <code>String</code>, value: <code>Any</code>)</li> <li>TYPE</li> <li>DEV</li> <li>RELEASE</li> <li>new(id: <code>String</code>, db: <code>Any</code>, artifact_root: <code>String</code>)</li> <li>set_modified(type: <code>String</code>, modified: <code>List</code>)</li> <li>get_modified(type: <code>String</code>)</li> <li>get_modified()</li> <li>skip(id: <code>String</code>)</li> <li>skipped(id: <code>String</code>)</li> <li>emit_path(id: <code>String</code>)</li> <li>emit_path(id: <code>String</code>, extra: <code>String</code>)</li> <li>emit(type_id: <code>String</code>, artifact_id: <code>String</code>, artifact_path: <code>String</code>)</li> </ul> <p> AssetContext.id \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetContext.db \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetContext.artifacts \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> AssetContext.ast_for_asset \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> AssetContext.errors \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> AssetContext.error(info: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetContext.artifacts_for(type_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetContext.ast_for(asset: <code>AssetID</code>) \u00b6 returns <code>Result</code></p> <p>no docs found   </p> <p> AssetContext.emit_block_def_for(asset: <code>AssetID</code>, block_tag: <code>String</code>, from: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetContext.tagged(tag: <code>String</code>) \u00b6 returns <code>Any</code></p> <p>no docs found   </p> <p> AssetContext.tag(tag: <code>String</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetContext.TYPE \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetContext.DEV \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetContext.RELEASE \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetContext.new(id: <code>String</code>, db: <code>Any</code>, artifact_root: <code>String</code>) \u00b6 returns <code>AssetContext</code></p> <p>no docs found   </p> <p> AssetContext.set_modified(type: <code>String</code>, modified: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetContext.get_modified(type: <code>String</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> AssetContext.get_modified() \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> AssetContext.skip(id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetContext.skipped(id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetContext.emit_path(id: <code>String</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetContext.emit_path(id: <code>String</code>, extra: <code>String</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetContext.emit(type_id: <code>String</code>, artifact_id: <code>String</code>, artifact_path: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/asset/type/#assetid","title":"AssetID","text":"<p><code>import \"luxe: asset/type\" for AssetID</code></p> <p>no docs found</p> <ul> <li>type_id</li> <li>id</li> <li>asset</li> <li>path</li> <li>ext</li> <li>subtype</li> <li>prefix</li> <li>root</li> <li>meta_uuid</li> <li>new(type_id: <code>String</code>, map: <code>Map</code>)</li> <li>from_id(type_id: <code>String</code>, asset_id: <code>String</code>)</li> <li>refresh()</li> </ul> <p> AssetID.type_id \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetID.id \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetID.asset \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetID.path \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetID.ext \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetID.subtype \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetID.prefix \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetID.root \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetID.meta_uuid \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetID.new(type_id: <code>String</code>, map: <code>Map</code>) \u00b6 returns <code>AssetID</code></p> <p>no docs found   </p> <p> AssetID.from_id(type_id: <code>String</code>, asset_id: <code>String</code>) \u00b6 returns <code>AssetID</code></p> <p>no docs found   </p> <p> AssetID.refresh() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/asset/type/#assettype","title":"AssetType","text":"<p><code>import \"luxe: asset/type\" for AssetType</code></p> <p>no docs found</p> <ul> <li>type_id</li> <li>version_id</li> <li>ext</li> <li>subtype</li> <li>ctx</li> <li>is_loader</li> <li>is_data</li> <li>is_handle</li> <li>version</li> <li>load_before</li> <li>load_after</li> <li>before</li> <li>after</li> <li>pre_early</li> <li>pre_late</li> <li>new(type_id: <code>String</code>, ctx: <code>AssetContext</code>)</li> <li>remap(asset: <code>AssetID</code>, new_id: <code>String</code>)</li> <li>get_remap(map: <code>Map</code>)</li> <li>modify_affected(asset: <code>AssetID</code>)</li> <li>modify(asset: <code>AssetID</code>)</li> <li>unmodify(asset: <code>AssetID</code>)</li> <li>emit_path(asset: <code>AssetID</code>)</li> <li>skip(asset: <code>AssetID</code>)</li> <li>get_data(id: <code>String</code>)</li> <li>set_handle(id: <code>String</code>, handle: <code>Num</code>)</li> <li>pre(assets: <code>List</code>)</li> <li>process(assets: <code>List</code>, each: <code>Fn</code>)</li> <li>loader(assets: <code>List</code>, artifacts: <code>List</code>)</li> </ul> <p> AssetType.type_id \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetType.version_id \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetType.ext \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetType.subtype \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetType.ctx \u00b6 returns <code>AssetContext</code></p> <p>no docs found   </p> <p> AssetType.is_loader \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> AssetType.is_data \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> AssetType.is_handle \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> AssetType.version \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> AssetType.load_before \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> AssetType.load_after \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> AssetType.before \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> AssetType.after \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> AssetType.pre_early \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> AssetType.pre_late \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> AssetType.new(type_id: <code>String</code>, ctx: <code>AssetContext</code>) \u00b6 returns <code>AssetType</code></p> <p>no docs found   </p> <p> AssetType.remap(asset: <code>AssetID</code>, new_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetType.get_remap(map: <code>Map</code>) \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> AssetType.modify_affected(asset: <code>AssetID</code>) \u00b6 returns <code>unknown</code></p> <p>modify all assets that refer to this one   </p> <p> AssetType.modify(asset: <code>AssetID</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetType.unmodify(asset: <code>AssetID</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetType.emit_path(asset: <code>AssetID</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetType.skip(asset: <code>AssetID</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetType.get_data(id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetType.set_handle(id: <code>String</code>, handle: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetType.pre(assets: <code>List</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> AssetType.process(assets: <code>List</code>, each: <code>Fn</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> AssetType.loader(assets: <code>List</code>, artifacts: <code>List</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/asset/type/#assettypeid","title":"AssetTypeID","text":"<p><code>import \"luxe: asset/type\" for AssetTypeID</code></p> <p>no docs found</p> <ul> <li>block</li> <li>block=(v : Any)</li> <li>block_class</li> <li>block_class=(v : Any)</li> <li>loader</li> <li>loader=(v : Any)</li> <li>handler</li> <li>handler=(v : Any)</li> <li>new(map: <code>Map</code>)</li> </ul> <p> AssetTypeID.block \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetTypeID.block=(v : Any) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetTypeID.block_class \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetTypeID.block_class=(v : Any) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetTypeID.loader \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetTypeID.loader=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetTypeID.handler \u00b6 returns <code>AssetType</code></p> <p>no docs found   </p> <p> AssetTypeID.handler=(v : Any) \u00b6 returns <code>AssetType</code></p> <p>no docs found   </p> <p> AssetTypeID.new(map: <code>Map</code>) \u00b6 returns <code>AssetTypeID</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/debug/alloc.block/","title":"Alloc.block","text":""},{"location":"api/v/2025.1.1/debug/alloc.block/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/debug/alloc.block/#luxe-debugallocblock-module","title":"<code>luxe: debug/alloc.block</code> module","text":"<ul> <li>AllocMeta </li> </ul>"},{"location":"api/v/2025.1.1/debug/alloc.block/#allocmeta","title":"AllocMeta","text":"<p><code>import \"luxe: debug/alloc.block\" for AllocMeta</code></p> <p>no docs found</p> <ul> <li><code>var kind : String = \"script\"</code></li> <li><code>var context : String = \"&lt;unknown.wren&gt;\"</code></li> <li><code>var note : String = \"\"</code></li> <li><code>var amount : Num = 0</code></li> </ul>"},{"location":"api/v/2025.1.1/pose/blend.pose_node/","title":"Blend.pose node","text":""},{"location":"api/v/2025.1.1/pose/blend.pose_node/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/pose/blend.pose_node/#luxe-poseblendpose_node-module","title":"<code>luxe: pose/blend.pose_node</code> module","text":"<ul> <li>BlendLayer </li> <li>BlendNode </li> </ul>"},{"location":"api/v/2025.1.1/pose/blend.pose_node/#blendlayer","title":"BlendLayer","text":"<p><code>import \"luxe: pose/blend.pose_node\" for BlendLayer</code></p> <p>no docs found</p> <ul> <li><code>var pose : Num = 0</code></li> <li><code>var weight : Num = 0</code></li> </ul>"},{"location":"api/v/2025.1.1/pose/blend.pose_node/#blendnode","title":"BlendNode","text":"<p><code>import \"luxe: pose/blend.pose_node\" for BlendNode</code></p> <p>no docs found</p> <ul> <li><code>var layers : List = []</code></li> <li><code>var threshold : Num = 0.01</code></li> <li><code>var ratio_1D : Num = -1</code></li> <li>id</li> </ul> <p> BlendNode.id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/pose/ccdik.pose_node/","title":"Ccdik.pose node","text":""},{"location":"api/v/2025.1.1/pose/ccdik.pose_node/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/pose/ccdik.pose_node/#luxe-poseccdikpose_node-module","title":"<code>luxe: pose/ccdik.pose_node</code> module","text":"<ul> <li>CCDIKNode </li> </ul>"},{"location":"api/v/2025.1.1/pose/ccdik.pose_node/#ccdiknode","title":"CCDIKNode","text":"<p><code>import \"luxe: pose/ccdik.pose_node\" for CCDIKNode</code></p> <p>no docs found</p> <ul> <li><code>var input_pose : Num = 0</code></li> <li><code>var target : Float3 = [0, 0, 1]</code></li> <li><code>var start_bone : String = null</code></li> <li><code>var end_bone : String = null</code></li> <li><code>var max_iterations : Num = 10</code></li> <li><code>var min_iterations : Num = 1</code></li> <li><code>var threshold : Num = 0.01</code></li> <li><code>var annealing_exponent : Num = 0</code></li> <li><code>var weight : Num = 1</code></li> <li>id</li> </ul> <p> CCDIKNode.id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/pose/clip.pose_node/","title":"Clip.pose node","text":""},{"location":"api/v/2025.1.1/pose/clip.pose_node/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/pose/clip.pose_node/#luxe-poseclippose_node-module","title":"<code>luxe: pose/clip.pose_node</code> module","text":"<ul> <li>ClipNode </li> </ul>"},{"location":"api/v/2025.1.1/pose/clip.pose_node/#clipnode","title":"ClipNode","text":"<p><code>import \"luxe: pose/clip.pose_node\" for ClipNode</code></p> <p>no docs found</p> <ul> <li><code>var clip : Num = 0</code></li> <li><code>var offset : Num = 0</code></li> <li><code>var rate : Num = 1</code></li> <li><code>var time : Num = 0</code></li> <li>id</li> </ul> <p> ClipNode.id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/pose/look_at_ik.pose_node/","title":"Look at ik.pose node","text":""},{"location":"api/v/2025.1.1/pose/look_at_ik.pose_node/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/pose/look_at_ik.pose_node/#luxe-poselook_at_ikpose_node-module","title":"<code>luxe: pose/look_at_ik.pose_node</code> module","text":"<ul> <li>LookAtIKNode </li> </ul>"},{"location":"api/v/2025.1.1/pose/look_at_ik.pose_node/#lookatiknode","title":"LookAtIKNode","text":"<p><code>import \"luxe: pose/look_at_ik.pose_node\" for LookAtIKNode</code></p> <p>no docs found</p> <ul> <li><code>var input_pose : Num = 0</code></li> <li><code>var bone : String = null</code></li> <li><code>var target : Float3 = [0, 0, 2]</code></li> <li><code>var offset : Float3 = [0, 0, 0]</code></li> <li><code>var forward : Float3 = [0, 0, 1]</code></li> <li><code>var up : Float3 = [0, 1, 0]</code></li> <li><code>var weight : Num = 1</code></li> <li><code>var twist_angle : Num = 0</code></li> <li><code>var pole_vector : Float3 = [0, 0, 1]</code></li> <li>id</li> </ul> <p> LookAtIKNode.id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/pose/two_bone_ik.pose_node/","title":"Two bone ik.pose node","text":""},{"location":"api/v/2025.1.1/pose/two_bone_ik.pose_node/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/pose/two_bone_ik.pose_node/#luxe-posetwo_bone_ikpose_node-module","title":"<code>luxe: pose/two_bone_ik.pose_node</code> module","text":"<ul> <li>TwoBoneIKNode </li> </ul>"},{"location":"api/v/2025.1.1/pose/two_bone_ik.pose_node/#twoboneiknode","title":"TwoBoneIKNode","text":"<p><code>import \"luxe: pose/two_bone_ik.pose_node\" for TwoBoneIKNode</code></p> <p>no docs found</p> <ul> <li><code>var input_pose : Num = 0</code></li> <li><code>var target : Float3 = [0, 0, 1]</code></li> <li><code>var start_bone : String = null</code></li> <li><code>var middle_bone : String = null</code></li> <li><code>var end_bone : String = null</code></li> <li><code>var soften : Num = 0.97</code></li> <li><code>var weight : Num = 1</code></li> <li><code>var twist_angle : Num = 0</code></li> <li><code>var mid_axis : Float3 = [0, 0, 1]</code></li> <li><code>var pole_vector : Float3 = [0, 0, 1]</code></li> <li>id</li> </ul> <p> TwoBoneIKNode.id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/render/font/","title":"Font","text":""},{"location":"api/v/2025.1.1/render/font/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/render/font/#luxe-renderfont-module","title":"<code>luxe: render/font</code> module","text":"<ul> <li>Font </li> </ul>"},{"location":"api/v/2025.1.1/render/font/#font","title":"Font","text":"<p><code>import \"luxe: render/font\" for Font</code></p> <p>no docs found</p> <ul> <li>get_page_image(font: <code>Font</code>, index: <code>Num</code>)</li> </ul> <p> Font.get_page_image(font: <code>Font</code>, index: <code>Num</code>) \u00b6 returns <code>Image</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/string/po/","title":"Po","text":""},{"location":"api/v/2025.1.1/string/po/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/string/po/#luxe-stringpo-module","title":"<code>luxe: string/po</code> module","text":"<ul> <li>PO </li> <li>POData </li> <li>POElement </li> <li>POHeader </li> <li>POString </li> </ul>"},{"location":"api/v/2025.1.1/string/po/#po","title":"PO","text":"<p><code>import \"luxe: string/po\" for PO</code></p> <p>no docs found</p> <ul> <li>parse_header(lines: <code>List</code>)</li> <li>parse_elements(lines: <code>List</code>)</li> <li>parse(asset_id: <code>String</code>, bytes: <code>String</code>)</li> </ul> <p> PO.parse_header(lines: <code>List</code>) \u00b6 returns <code>Result</code></p> <p>no docs found   </p> <p> PO.parse_elements(lines: <code>List</code>) \u00b6 returns <code>List</code></p> <p>converts the lines into chunks separated by lines   </p> <p> PO.parse(asset_id: <code>String</code>, bytes: <code>String</code>) \u00b6 returns <code>Result</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/string/po/#podata","title":"POData","text":"<p><code>import \"luxe: string/po\" for POData</code></p> <p>no docs found</p> <ul> <li>language</li> <li>headers</li> <li>elements</li> <li>new(asset_id: <code>String</code>, language: <code>String</code>, headers: <code>Map</code>)</li> <li>to_string()</li> </ul> <p> POData.language \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> POData.headers \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> POData.elements \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> POData.new(asset_id: <code>String</code>, language: <code>String</code>, headers: <code>Map</code>) \u00b6 returns <code>POData</code></p> <p>no docs found   </p> <p> POData.to_string() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/string/po/#poelement","title":"POElement","text":"<p><code>import \"luxe: string/po\" for POElement</code></p> <p>An element inside the PO file</p> <ul> <li>id</li> <li>key</li> <li>file_index</li> <li>plural_id</li> <li>comments</li> <li>is_plural</li> <li>strings</li> <li>new(file_index: <code>Num</code>, key: <code>String</code>, plural_id: <code>String</code>, id: <code>String</code>, strings: <code>List</code>, comments: <code>List</code>)</li> <li>update_id(id: <code>String</code>)</li> <li>update_comments(comments: <code>List</code>)</li> </ul> <p> POElement.id \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> POElement.key \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> POElement.file_index \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> POElement.plural_id \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> POElement.comments \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> POElement.is_plural \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> POElement.strings \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> POElement.new(file_index: <code>Num</code>, key: <code>String</code>, plural_id: <code>String</code>, id: <code>String</code>, strings: <code>List</code>, comments: <code>List</code>) \u00b6 returns <code>POElement</code></p> <p>no docs found   </p> <p> POElement.update_id(id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> POElement.update_comments(comments: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/string/po/#poheader","title":"POHeader","text":"<p><code>import \"luxe: string/po\" for POHeader</code></p> <p>a single header line</p> <ul> <li>key</li> <li>value</li> <li>file_index</li> <li>new(file_index: <code>Num</code>, key: <code>String</code>, value: <code>String</code>)</li> <li>update_value(value: <code>String</code>)</li> </ul> <p> POHeader.key \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> POHeader.value \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> POHeader.file_index \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> POHeader.new(file_index: <code>Num</code>, key: <code>String</code>, value: <code>String</code>) \u00b6 returns <code>POHeader</code></p> <p>no docs found   </p> <p> POHeader.update_value(value: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/string/po/#postring","title":"POString","text":"<p><code>import \"luxe: string/po\" for POString</code></p> <p>a single msgstr, with an optional [index]</p> <ul> <li>value</li> <li>index</li> <li>new(value: <code>String</code>, index: <code>Num</code>)</li> </ul> <p> POString.value \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> POString.index \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> POString.new(value: <code>String</code>, index: <code>Num</code>) \u00b6 returns <code>POString</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/anim.modifier/","title":"Anim.modifier","text":""},{"location":"api/v/2025.1.1/system/anim.modifier/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/system/anim.modifier/#luxe-systemanimmodifier-module","title":"<code>luxe: system/anim.modifier</code> module","text":"<ul> <li>Anim </li> <li>AnimEvent </li> <li>AnimInterpolation </li> <li>AnimInterval </li> <li>AnimState </li> <li>Data </li> <li>System </li> </ul>"},{"location":"api/v/2025.1.1/system/anim.modifier/#anim","title":"Anim","text":"<p><code>import \"luxe: system/anim.modifier\" for Anim</code></p> <p><code>Anim</code> is an animation player attached to an entity.</p> <p>It plays animations from animation assets or ones created from code.  Animations can target the entity <code>Anim</code> is attached to,  but can target any entity.  For example, a level cutscene could be played back from one entity,  but it drives several other entities. From assets like scenes and prototypes,  <code>Anim</code> provides an autoplay list, for playing when loaded. </p> <p>You can play multiple animations at the same time,  for example, the player might have a walk animation playing  and you play a glowing animation on top. </p> <p><code>Anim</code> supports curve, linear and discrete driven animations  and is expanded on by World Systems that provide animation tracks.</p> <ul> <li>create(entity: <code>Entity</code>)</li> <li>destroy(entity: <code>Entity</code>)</li> <li>has(entity: <code>Entity</code>)</li> <li>valid(entity: <code>Entity</code>, anim: <code>Anim</code>)</li> <li>get_source_id(entity: <code>Entity</code>, anim: <code>Anim</code>)</li> <li>get_state(entity: <code>Entity</code>, anim: <code>Anim</code>)</li> <li>get_active_anims(entity: <code>Entity</code>)</li> <li>play(entity: <code>Entity</code>, anim_lx: <code>ID</code>, time_offset: <code>Num</code>)</li> <li>blend(entity: <code>Entity</code>, anim_lx: <code>ID</code>, blend_time: <code>Num</code>, time_offset: <code>Num</code>)</li> <li>play(entity: <code>Entity</code>, anim_lx: <code>ID</code>)</li> <li>blend(entity: <code>Entity</code>, anim_lx: <code>ID</code>, blend_time: <code>Num</code>)</li> <li>play_only(entity: <code>Entity</code>, anim_lx: <code>ID</code>, time_offset: <code>Num</code>)</li> <li>play_only(entity: <code>Entity</code>, anim_lx: <code>ID</code>)</li> <li>stop(entity: <code>Entity</code>, anim: <code>Anim</code>, reset: <code>Bool</code>)</li> <li>stop(entity: <code>Entity</code>, anim: <code>Anim</code>)</li> <li>stop_all(entity: <code>Entity</code>, reset: <code>Bool</code>)</li> <li>stop_all(entity: <code>Entity</code>)</li> <li>create_track(entity: <code>Entity</code>, anim: <code>Anim</code>, track_id: <code>Any</code>, track_type: <code>Any</code>)</li> <li>has_track(entity: <code>Entity</code>, anim: <code>Anim</code>, track_id: <code>Any</code>)</li> <li>track_set_range(entity: <code>Entity</code>, anim: <code>Anim</code>, track_id: <code>Any</code>, min: <code>Any</code>, max: <code>Any</code>)</li> <li>track_get_range(entity: <code>Entity</code>, anim: <code>Anim</code>, track_id: <code>Any</code>)</li> <li>track_set(entity: <code>Entity</code>, anim: <code>Anim</code>, track_id: <code>Any</code>, property: <code>Any</code>, value: <code>Any</code>)</li> <li>track_set_channel(entity: <code>Entity</code>, anim: <code>Anim</code>, track_id: <code>Any</code>, channel_id: <code>Any</code>, channel_idx: <code>Any</code>, interp: <code>Any</code>, keys: <code>Any</code>)</li> <li>set_play_count(entity: <code>Entity</code>, anim: <code>Anim</code>, play_count: <code>Num</code>)</li> <li>set_rate(entity: <code>Entity</code>, anim: <code>Anim</code>, rate: <code>Num</code>)</li> <li>set_start(entity: <code>Entity</code>, anim: <code>Anim</code>, start: <code>Num</code>)</li> <li>set_end(entity: <code>Entity</code>, anim: <code>Anim</code>, end: <code>Num</code>)</li> <li>set_interval_time(entity: <code>Entity</code>, anim: <code>Anim</code>, time: <code>Num</code>)</li> <li>get_play_count(entity: <code>Entity</code>, anim: <code>Anim</code>)</li> <li>get_rate(entity: <code>Entity</code>, anim: <code>Anim</code>)</li> <li>get_duration(entity: <code>Entity</code>, anim: <code>Anim</code>)</li> <li>get_start(entity: <code>Entity</code>, anim: <code>Anim</code>)</li> <li>get_end(entity: <code>Entity</code>, anim: <code>Anim</code>)</li> <li>get_interval_time(entity: <code>Entity</code>, anim: <code>Anim</code>)</li> <li>on_event(entity: <code>Entity</code>, anim: <code>Anim</code>, fn: <code>Fn</code>)</li> </ul> <p> Anim.create(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>Attach an <code>Anim</code> modifier to <code>entity</code>.</p> <pre><code>var entity = Entity.create(world)\nAnim.create(entity)\n</code></pre> <p> Anim.destroy(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Detach and destroy the <code>Anim</code> attached to <code>entity</code>.</p> <pre><code>Anim.destroy(entity)\n</code></pre> <p> Anim.has(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>Returns whether <code>entity</code> has an <code>Anim</code> modifier attached. </p> <pre><code>if(Anim.has(entity)) {\n  Log.print(\"found anim\")\n}\n</code></pre> <p> Anim.valid(entity: <code>Entity</code>, anim: <code>Anim</code>) \u00b6 returns <code>Bool</code></p> <p>Returns whether the <code>Anim</code> instance is valid for the <code>Anim</code> attached to <code>entity</code>. </p> <pre><code>var anim = Anim.play(entity, \"player/idle\")\nif(!Anim.valid(entity, anim)) {\n  Log.print(\"oh no!\")\n}\n</code></pre> <p> Anim.get_source_id(entity: <code>Entity</code>, anim: <code>Anim</code>) \u00b6 returns <code>ID</code></p> <p>Returns the <code>ID</code> of the animation asset that the <code>Anim</code> instance was played from,  if known, by asking the <code>Anim</code> attached to <code>entity</code>. Returns <code>null</code> if not. </p> <pre><code>var anim = Anim.play(entity, \"player/idle\")\nvar source_id = Anim.get_source_id(entity, anim)\nLog.print(Strings.get(source_id)) //expect: \"player/idle\"\n</code></pre> <p> Anim.get_state(entity: <code>Entity</code>, anim: <code>Anim</code>) \u00b6 returns <code>AnimState</code></p> <p>Return the animation state of the <code>Anim</code> instance, by asking the <code>Anim</code> attached to <code>entity</code>. </p> <pre><code>var anim = Anim.play(entity, \"player/idle\")\nvar state = Anim.get_state(entity, anim)\nif(state == AnimState.playing) {\n  Anim.stop(entity, anim)\n}\n</code></pre> <p> Anim.get_active_anims(entity: <code>Entity</code>) \u00b6 returns <code>List</code></p> <p>Returns a list of <code>Anim</code> instances that are active on the <code>Anim</code> attached to <code>entity</code>. </p> <pre><code>var active = Anim.get_active_anims(entity)\nfor(anim in active) {\n  var state = Anim.get_state(entity, anim)\n  Log.print(AnimState.name(state));\n}\n</code></pre> <p> Anim.play(entity: <code>Entity</code>, anim_lx: <code>ID</code>, time_offset: <code>Num</code>) \u00b6 returns <code>Anim</code></p> <p>Play the animation asset <code>anim_lx</code> on the Anim attached to <code>entity</code>.  The <code>time_offset</code> is a time in seconds to begin playback from.  For example, you might pause an animation and hold onto the animation time when it was paused.  Then when resuming, you can play from the new time. Returns the newly started <code>Anim</code> instance.</p> <pre><code>var anim = Anim.play(entity, \"player/idle\", 0.5)\n</code></pre> <p> Anim.blend(entity: <code>Entity</code>, anim_lx: <code>ID</code>, blend_time: <code>Num</code>, time_offset: <code>Num</code>) \u00b6 returns <code>Anim</code></p> <p>Play the animation asset <code>anim_lx</code> on the <code>Anim</code> attached to <code>entity</code> with a blend fade time.  The <code>time_offset</code> is a time in seconds to begin playback from.  The <code>blend_time</code> is handled by some tracks, not all. Returns the newly started <code>Anim</code> instance.</p> <pre><code>//fade in the animation over 0.6 seconds\nvar anim = Anim.blend(entity, \"player/idle\", 0.6)\n</code></pre> <p> Anim.play(entity: <code>Entity</code>, anim_lx: <code>ID</code>) \u00b6 returns <code>Anim</code></p> <p>Play the animation asset <code>anim_lx</code> on the <code>Anim</code> attached to <code>entity</code>.  Plays from the beginning. Returns the newly started <code>Anim</code> instance.</p> <pre><code>var anim = Anim.play(entity, \"player/idle\")\n</code></pre> <p> Anim.blend(entity: <code>Entity</code>, anim_lx: <code>ID</code>, blend_time: <code>Num</code>) \u00b6 returns <code>Anim</code></p> <p>Play the animation asset <code>anim_lx</code> on the <code>Anim</code> attached to <code>entity</code> with a blend fade time.  Plays from the beginning. Blend time is handled by some tracks, not all. Returns the newly started <code>Anim</code> instance.</p> <pre><code>//fade in the animation over 0.6 seconds\nvar anim = Anim.blend(entity, \"player/idle\", 0.6)\n</code></pre> <p> Anim.play_only(entity: <code>Entity</code>, anim_lx: <code>ID</code>, time_offset: <code>Num</code>) \u00b6 returns <code>Anim</code></p> <p>Play the animation asset <code>anim_lx</code> on the <code>Anim</code> attached to <code>entity</code>, stopping all other active anims,  and only playing this one. The <code>time_offset</code> is a time in seconds to begin playback from.  Returns the newly started <code>Anim</code> instance.</p> <pre><code>var anim = Anim.play_only(entity, \"player/idle\", 0.5)\n</code></pre> <p> Anim.play_only(entity: <code>Entity</code>, anim_lx: <code>ID</code>) \u00b6 returns <code>Anim</code></p> <p>Play the animation asset <code>anim_lx</code> on the <code>Anim</code> attached to <code>entity</code>, stopping all other active anims,  and only playing this one. Returns the newly started <code>Anim</code> instance.</p> <pre><code>var anim = Anim.play_only(entity, \"player/idle\")\n</code></pre> <p> Anim.stop(entity: <code>Entity</code>, anim: <code>Anim</code>, reset: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Stop the <code>Anim</code> instance if playing on the <code>Anim</code> attached to <code>entity</code>.</p> <p>If <code>reset</code> is <code>true</code>, the state of anything that was being animated by this <code>Anim</code> instance,  will be reset to what it was before it was played. For example, if your animation is changing the transform position,  it will revert back to the position at the time the animation was played. </p> <pre><code>var anim = Anim.play(entity, \"player/idle\")\nAnim.stop(entity, anim, true)\n</code></pre> <p> Anim.stop(entity: <code>Entity</code>, anim: <code>Anim</code>) \u00b6 returns <code>None</code></p> <p>Stop the <code>Anim</code> instance if playing on the <code>Anim</code> attached to <code>entity</code>.  State is not reset (see <code>Anim.stop(entity, anim, reset)</code>). </p> <pre><code>var anim = Anim.play(entity, \"player/idle\")\nAnim.stop(entity, anim)\n</code></pre> <p> Anim.stop_all(entity: <code>Entity</code>, reset: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Stop all active <code>Anim</code> instances playing on the <code>Anim</code> attached to <code>entity</code>.  If <code>reset</code> is <code>true</code>, state will be reset to the state before the animation started (see <code>Anim.stop(entity, anim, reset)</code>). </p> <pre><code>var anim = Anim.play(entity, \"player/idle\")\nAnim.stop_all(entity, true)\n</code></pre> <p> Anim.stop_all(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Stop all active <code>Anim</code> instances playing on the <code>Anim</code> attached to <code>entity</code>.  State is not reset (see <code>Anim.stop(entity, anim, reset)</code>). </p> <pre><code>var anim = Anim.play(entity, \"player/idle\")\nAnim.stop_all(entity)\n</code></pre> <p> Anim.create_track(entity: <code>Entity</code>, anim: <code>Anim</code>, track_id: <code>Any</code>, track_type: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Anim.has_track(entity: <code>Entity</code>, anim: <code>Anim</code>, track_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Anim.track_set_range(entity: <code>Entity</code>, anim: <code>Anim</code>, track_id: <code>Any</code>, min: <code>Any</code>, max: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Anim.track_get_range(entity: <code>Entity</code>, anim: <code>Anim</code>, track_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Anim.track_set(entity: <code>Entity</code>, anim: <code>Anim</code>, track_id: <code>Any</code>, property: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Anim.track_set_channel(entity: <code>Entity</code>, anim: <code>Anim</code>, track_id: <code>Any</code>, channel_id: <code>Any</code>, channel_idx: <code>Any</code>, interp: <code>Any</code>, keys: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Anim.set_play_count(entity: <code>Entity</code>, anim: <code>Anim</code>, play_count: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the amount of times to play the <code>Anim</code> instance on the <code>Anim</code> attached to <code>entity</code>.  The <code>play_count</code> value can be <code>0</code>, which will loop forever.</p> <pre><code>//play 3 times and then end\nvar anim = Anim.play(entity, \"player/idle\")\nAnim.set_play_count(entity, anim, 3)\n</code></pre> <p> Anim.set_rate(entity: <code>Entity</code>, anim: <code>Anim</code>, rate: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the playback rate of the <code>Anim</code> instance on the <code>Anim</code> attached to <code>entity</code>.  The rate of <code>1</code> is the default speed. <code>0.5</code> is half speed, and <code>2</code> is twice as fast. </p> <pre><code>var anim = Anim.play(entity, \"player/idle\")\nAnim.set_rate(entity, anim, 0.5)\n</code></pre> <p> Anim.set_start(entity: <code>Entity</code>, anim: <code>Anim</code>, start: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the start marker of the <code>Anim</code> instance on the <code>Anim</code> attached to <code>entity</code>. note This API is WIP. </p> <pre><code>Anim.set_start(entity, anim, 0)\n</code></pre> <p> Anim.set_end(entity: <code>Entity</code>, anim: <code>Anim</code>, end: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the end marker of the <code>Anim</code> instance on the <code>Anim</code> attached to <code>entity</code>. note This API is WIP. </p> <pre><code>Anim.set_end(entity, anim, 1)\n</code></pre> <p> Anim.set_interval_time(entity: <code>Entity</code>, anim: <code>Anim</code>, time: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the current playback time of the <code>Anim</code> instance on the <code>Anim</code> attached to <code>entity</code>. note This API is WIP. </p> <pre><code>Anim.set_interval_time(entity, anim, 0.5)\n</code></pre> <p> Anim.get_play_count(entity: <code>Entity</code>, anim: <code>Anim</code>) \u00b6 returns <code>Num</code></p> <p>Return the play count of the <code>Anim</code> instance on the <code>Anim</code> attached to <code>entity</code>. </p> <pre><code>var play_count = Anim.get_play_count(entity, anim)\n</code></pre> <p> Anim.get_rate(entity: <code>Entity</code>, anim: <code>Anim</code>) \u00b6 returns <code>Num</code></p> <p>Return the rate of playback of the <code>Anim</code> instance on the <code>Anim</code> attached to <code>entity</code>. </p> <pre><code>var play_count = Anim.get_play_count(entity, anim)\n</code></pre> <p> Anim.get_duration(entity: <code>Entity</code>, anim: <code>Anim</code>) \u00b6 returns <code>Num</code></p> <p>Return the duration of the <code>Anim</code> instance on the <code>Anim</code> attached to <code>entity</code>. </p> <pre><code>var play_count = Anim.get_play_count(entity, anim)\n</code></pre> <p> Anim.get_start(entity: <code>Entity</code>, anim: <code>Anim</code>) \u00b6 returns <code>Num</code></p> <p>Return the start marker of the <code>Anim</code> instance on the <code>Anim</code> attached to <code>entity</code>. </p> <pre><code>var play_count = Anim.get_play_count(entity, anim)\n</code></pre> <p> Anim.get_end(entity: <code>Entity</code>, anim: <code>Anim</code>) \u00b6 returns <code>Num</code></p> <p>Return the end marker of the <code>Anim</code> instance on the <code>Anim</code> attached to <code>entity</code>. </p> <pre><code>var play_count = Anim.get_play_count(entity, anim)\n</code></pre> <p> Anim.get_interval_time(entity: <code>Entity</code>, anim: <code>Anim</code>) \u00b6 returns <code>Num</code></p> <p>Return the current playback time of the <code>Anim</code> instance on the <code>Anim</code> attached to entity. note This API is WIP. </p> <pre><code>var play_count = Anim.get_play_count(entity, anim)\n</code></pre> <p> Anim.on_event(entity: <code>Entity</code>, anim: <code>Anim</code>, fn: <code>Fn</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/anim.modifier/#animevent","title":"AnimEvent","text":"<p><code>import \"luxe: system/anim.modifier\" for AnimEvent</code></p> <p>no docs found</p> <ul> <li>start</li> <li>tick</li> <li>complete</li> </ul> <p> AnimEvent.start \u00b6 returns <code>unknown</code></p> <p>An event fired when an animation started playing.   </p> <p> AnimEvent.tick \u00b6 returns <code>unknown</code></p> <p>An event fired when an animation is updated, but only if the track is set to emit the event.   </p> <p> AnimEvent.complete \u00b6 returns <code>unknown</code></p> <p>An event fired when an animation is stopped or done playing.   </p>"},{"location":"api/v/2025.1.1/system/anim.modifier/#animinterpolation","title":"AnimInterpolation","text":"<p><code>import \"luxe: system/anim.modifier\" for AnimInterpolation</code></p> <p>An enum for types of interpolation in animation tracks.</p> <ul> <li>unknown</li> <li>curve</li> <li>linear</li> <li>discrete</li> <li>name(value: <code>AnimInterpolation</code>)</li> <li>from_string(value: <code>String</code>)</li> </ul> <p> AnimInterpolation.unknown \u00b6 returns <code>unknown</code></p> <p>An invalid or unknown value.</p> <pre><code>if(value == AnimInterpolation.unknown) {\n  Log.print(\"unknown interpolation type!\")\n}\n</code></pre> <p> AnimInterpolation.curve \u00b6 returns <code>unknown</code></p> <p>The animation values between keys will be interpolated  according to the curve defined by the keys themselves. </p> <pre><code>if(value == AnimInterpolation.curve) {\n  Log.print(\"curve\")\n}\n</code></pre> <p> AnimInterpolation.linear \u00b6 returns <code>unknown</code></p> <p>The animation values between keys will be interpolated linearly.  For example if your keys were <code>{ time=0 value=0 }</code> and <code>{ time=1 value=4 }</code>,  at the time of <code>0.5</code> the value would be <code>2</code>, half of the next key. </p> <pre><code>if(value == AnimInterpolation.linear) {\n  Log.print(\"linear\")\n}\n</code></pre> <p> AnimInterpolation.discrete \u00b6 returns <code>unknown</code></p> <p>The animation values between keys would not be interpolated,  they would jump from one value to the next.  For example if your keys were <code>{ time=0 value=0 }</code> and <code>{ time=1 value=3 }</code>,  with discrete the value at time <code>0.5</code> is still <code>0</code>  (instead of <code>1.5</code> with linear).  It will only change to <code>3</code> when the next key is reached. </p> <pre><code>if(value == AnimInterpolation.discrete) {\n  Log.print(\"discrete\")\n}\n</code></pre> <p> AnimInterpolation.name(value: <code>AnimInterpolation</code>) \u00b6 returns <code>String</code></p> <p>Convert an <code>AnimInterpolation</code> value to a string. </p> <pre><code>var type = AnimInterpolation.linear\nvar name = AnimInterpolation.name(type)\nLog.print(\"type is %(name)\") //expect: \"linear\"\n</code></pre> <p> AnimInterpolation.from_string(value: <code>String</code>) \u00b6 returns <code>AnimInterpolation</code></p> <p>Get the <code>AnimInterpolation</code> value to a name.</p> <pre><code>var type = AnimInterpolation.from_string(\"discrete\")\nLog.print(\"discrete is value %(type)\") //expect: \"3\", the internal value\n</code></pre>"},{"location":"api/v/2025.1.1/system/anim.modifier/#animinterval","title":"AnimInterval","text":"<p><code>import \"luxe: system/anim.modifier\" for AnimInterval</code></p> <p>no docs found</p> <ul> <li>create(world: <code>Any</code>, duration: <code>Any</code>, rate: <code>Any</code>)</li> <li>create(world: <code>Any</code>, duration: <code>Any</code>)</li> <li>time(world: <code>Any</code>, anim: <code>Any</code>)</li> <li>set_time(world: <code>Any</code>, anim: <code>Any</code>, time: <code>Any</code>)</li> <li>set_now(world: <code>Any</code>, anim: <code>Any</code>, offset: <code>Any</code>)</li> <li>set_now(world: <code>Any</code>, anim: <code>Any</code>)</li> <li>set_play_count(world: <code>Any</code>, anim: <code>Any</code>, count: <code>Any</code>)</li> <li>set_clock(world: <code>Any</code>, anim: <code>Any</code>, clock: <code>Any</code>)</li> <li>set_rate(world: <code>Any</code>, anim: <code>Any</code>, rate: <code>Any</code>)</li> <li>set_duration(world: <code>Any</code>, anim: <code>Any</code>, duration: <code>Any</code>)</li> <li>set_start(world: <code>Any</code>, anim: <code>Any</code>, start: <code>Any</code>)</li> <li>set_end(world: <code>Any</code>, anim: <code>Any</code>, end: <code>Any</code>)</li> <li>get_now(world: <code>Any</code>, anim: <code>Any</code>)</li> <li>get_play_count(world: <code>Any</code>, anim: <code>Any</code>)</li> <li>get_clock(world: <code>Any</code>, anim: <code>Any</code>)</li> <li>get_rate(world: <code>Any</code>, anim: <code>Any</code>)</li> <li>get_duration(world: <code>Any</code>, anim: <code>Any</code>)</li> <li>get_start(world: <code>Any</code>, anim: <code>Any</code>)</li> <li>get_end(world: <code>Any</code>, anim: <code>Any</code>)</li> </ul> <p> AnimInterval.create(world: <code>Any</code>, duration: <code>Any</code>, rate: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.create(world: <code>Any</code>, duration: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.time(world: <code>Any</code>, anim: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.set_time(world: <code>Any</code>, anim: <code>Any</code>, time: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.set_now(world: <code>Any</code>, anim: <code>Any</code>, offset: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.set_now(world: <code>Any</code>, anim: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.set_play_count(world: <code>Any</code>, anim: <code>Any</code>, count: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.set_clock(world: <code>Any</code>, anim: <code>Any</code>, clock: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.set_rate(world: <code>Any</code>, anim: <code>Any</code>, rate: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.set_duration(world: <code>Any</code>, anim: <code>Any</code>, duration: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.set_start(world: <code>Any</code>, anim: <code>Any</code>, start: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.set_end(world: <code>Any</code>, anim: <code>Any</code>, end: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.get_now(world: <code>Any</code>, anim: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.get_play_count(world: <code>Any</code>, anim: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.get_clock(world: <code>Any</code>, anim: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.get_rate(world: <code>Any</code>, anim: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.get_duration(world: <code>Any</code>, anim: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.get_start(world: <code>Any</code>, anim: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.get_end(world: <code>Any</code>, anim: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/anim.modifier/#animstate","title":"AnimState","text":"<p><code>import \"luxe: system/anim.modifier\" for AnimState</code></p> <p>An enum for the state of an <code>Anim</code> instance.</p> <ul> <li>inactive</li> <li>playing</li> <li>ending</li> <li>complete</li> <li>name(value: <code>Num</code>)</li> <li>from_string(value: <code>String</code>)</li> </ul> <p> AnimState.inactive \u00b6 returns <code>Num</code></p> <p>The animation is inactive. :todo: This may be obsolete.</p> <pre><code>var state = Anim.get_state(entity, anim)\nif(state == AnimState.inactive) {\n  Log.print(\"anim is inactive\")\n}\n</code></pre> <p> AnimState.playing \u00b6 returns <code>Num</code></p> <p>The animation is active and is playing.</p> <pre><code>var state = Anim.get_state(entity, anim)\nif(state == AnimState.playing) {\n  Log.print(\"anim is playing\")\n}\n</code></pre> <p> AnimState.ending \u00b6 returns <code>Num</code></p> <p>The animation is ending, and will be marked complete next update.</p> <pre><code>var state = Anim.get_state(entity, anim)\nif(state == AnimState.ending) {\n  Log.print(\"anim is ending\")\n}\n</code></pre> <p> AnimState.complete \u00b6 returns <code>Num</code></p> <p>The animation has ended and is complete.</p> <pre><code>var state = Anim.get_state(entity, anim)\nif(state == AnimState.complete) {\n  Log.print(\"anim is complete\")\n}\n</code></pre> <p> AnimState.name(value: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Convert an <code>AnimState</code> value to a string.</p> <pre><code>var type = AnimState.ending\nvar name = AnimState.name(type)\nLog.print(\"type is %(name)\") //expect: \"ending\"\n</code></pre> <p> AnimState.from_string(value: <code>String</code>) \u00b6 returns <code>Num</code></p> <p>Convert a string to an enum value.</p> <pre><code>var state = AnimState.from_string(\"ending\")\nvar same = state == AnimState.ending //true\n</code></pre>"},{"location":"api/v/2025.1.1/system/anim.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/anim.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var play : List = []</code></li> </ul>"},{"location":"api/v/2025.1.1/system/anim.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/anim.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/camera.modifier/","title":"Camera.modifier","text":""},{"location":"api/v/2025.1.1/system/camera.modifier/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/system/camera.modifier/#luxe-systemcameramodifier-module","title":"<code>luxe: system/camera.modifier</code> module","text":"<ul> <li>Camera </li> <li>CameraProjection </li> <li>CameraViewType </li> <li>Data </li> <li>PerEntityInfo </li> <li>System </li> </ul>"},{"location":"api/v/2025.1.1/system/camera.modifier/#camera","title":"Camera","text":"<p><code>import \"luxe: system/camera.modifier\" for Camera</code></p> <p>no docs found</p> <ul> <li>create(entity: <code>Any</code>)</li> <li>destroy(entity: <code>Any</code>)</li> <li>has(entity: <code>Any</code>)</li> <li>get_default(world: <code>Any</code>)</li> <li>set_default(world: <code>Any</code>, camera: <code>Any</code>)</li> <li>set_fov_vertical(entity: <code>Any</code>, fov_vertical: <code>Any</code>)</li> <li>get_fov_vertical(entity: <code>Any</code>)</li> <li>get_projection(entity: <code>Any</code>)</li> <li>set_zoom2D(entity: <code>Entity</code>, zoom: <code>Num</code>)</li> <li>get_zoom2D(entity: <code>Any</code>)</li> <li>get_near(entity: <code>Any</code>)</li> <li>get_far(entity: <code>Any</code>)</li> <li>get_aspect(entity: <code>Any</code>)</li> <li>get_frustum(entity: <code>Any</code>)</li> <li>perspective(entity: <code>Any</code>, fov_vertical: <code>Any</code>, aspect: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>)</li> <li>ortho(entity: <code>Any</code>, left: <code>Any</code>, top: <code>Any</code>, right: <code>Any</code>, bottom: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>)</li> <li>look_at(entity: <code>Any</code>, from: <code>Any</code>, to: <code>Any</code>, up: <code>Any</code>)</li> <li>set2D(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, width: <code>Any</code>, height: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>)</li> <li>set3D(entity: <code>Any</code>, fov_vertical: <code>Any</code>, aspect: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>)</li> <li>screen_point_to_world(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>)</li> <li>world_point_to_screen(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>, pos_z: <code>Any</code>)</li> <li>world_point_to_view(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>, pos_z: <code>Any</code>, into: <code>Any</code>)</li> <li>world_point_to_view(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>, pos_z: <code>Any</code>)</li> <li>view_point_to_world(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>, pos_z: <code>Any</code>)</li> <li>world_point_to_clip(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>, pos_z: <code>Any</code>)</li> <li>clip_point_to_world(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>, pos_z: <code>Any</code>)</li> <li>get_view_matrix(entity: <code>Any</code>, into_matrix: <code>Any</code>)</li> <li>get_projection_matrix(entity: <code>Any</code>, into_matrix: <code>Any</code>)</li> <li>get_view_projection_matrix(entity: <code>Any</code>, into_matrix: <code>Any</code>)</li> <li>set_view_matrix(entity: <code>Any</code>, matrix: <code>Any</code>)</li> <li>set_projection_matrix(entity: <code>Any</code>, matrix: <code>Any</code>)</li> <li>cull(camera: <code>Any</code>, render_set: <code>Any</code>)</li> <li>froxelize(camera: <code>Any</code>, slices: <code>Any</code>, entity_info_list: <code>Any</code>, cluster_image: <code>Any</code>, items_image: <code>Any</code>)</li> <li>cut(camera: <code>Entity</code>, to_camera: <code>Entity</code>)</li> <li>blend(camera: <code>Entity</code>, from_camera: <code>Entity</code>, to_camera: <code>Entity</code>, t: <code>Num</code>)</li> <li>blend(camera: <code>Entity</code>, to_camera: <code>Entity</code>, t: <code>Num</code>)</li> </ul> <p> Camera.create(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.destroy(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.has(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.get_default(world: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.set_default(world: <code>Any</code>, camera: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.set_fov_vertical(entity: <code>Any</code>, fov_vertical: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.get_fov_vertical(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.get_projection(entity: <code>Any</code>) \u00b6 returns <code>CameraProjection</code></p> <p>no docs found   </p> <p> Camera.set_zoom2D(entity: <code>Entity</code>, zoom: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Camera.get_zoom2D(entity: <code>Any</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Camera.get_near(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.get_far(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.get_aspect(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.get_frustum(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.perspective(entity: <code>Any</code>, fov_vertical: <code>Any</code>, aspect: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.ortho(entity: <code>Any</code>, left: <code>Any</code>, top: <code>Any</code>, right: <code>Any</code>, bottom: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.look_at(entity: <code>Any</code>, from: <code>Any</code>, to: <code>Any</code>, up: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.set2D(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, width: <code>Any</code>, height: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.set3D(entity: <code>Any</code>, fov_vertical: <code>Any</code>, aspect: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.screen_point_to_world(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.world_point_to_screen(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>, pos_z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.world_point_to_view(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>, pos_z: <code>Any</code>, into: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.world_point_to_view(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>, pos_z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.view_point_to_world(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>, pos_z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.world_point_to_clip(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>, pos_z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.clip_point_to_world(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>, pos_z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.get_view_matrix(entity: <code>Any</code>, into_matrix: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.get_projection_matrix(entity: <code>Any</code>, into_matrix: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.get_view_projection_matrix(entity: <code>Any</code>, into_matrix: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.set_view_matrix(entity: <code>Any</code>, matrix: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.set_projection_matrix(entity: <code>Any</code>, matrix: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.cull(camera: <code>Any</code>, render_set: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.froxelize(camera: <code>Any</code>, slices: <code>Any</code>, entity_info_list: <code>Any</code>, cluster_image: <code>Any</code>, items_image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.cut(camera: <code>Entity</code>, to_camera: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.blend(camera: <code>Entity</code>, from_camera: <code>Entity</code>, to_camera: <code>Entity</code>, t: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.blend(camera: <code>Entity</code>, to_camera: <code>Entity</code>, t: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/camera.modifier/#cameraprojection","title":"CameraProjection","text":"<p><code>import \"luxe: system/camera.modifier\" for CameraProjection</code></p> <p>no docs found</p> <ul> <li>ortho</li> <li>perspective</li> <li>custom</li> </ul> <p> CameraProjection.ortho \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CameraProjection.perspective \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CameraProjection.custom \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/camera.modifier/#cameraviewtype","title":"CameraViewType","text":"<p><code>import \"luxe: system/camera.modifier\" for CameraViewType</code></p> <p>no docs found</p> <ul> <li>view_2D</li> <li>view_3D</li> <li>custom</li> </ul> <p> CameraViewType.view_2D \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CameraViewType.view_3D \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CameraViewType.custom \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/camera.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/camera.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var align_to_view : Num = 0</code></li> <li><code>var kind : CameraViewType = CameraViewType.view_2D</code></li> <li><code>var offset : Float2 = [0, 0]</code></li> <li><code>var size : Float2 = [0, 0]</code></li> <li><code>var near_2d : Num = -2000</code></li> <li><code>var far_2d : Num = 2000</code></li> <li><code>var zoom : Num = 1</code></li> <li><code>var fov_vertical : Num = 60</code></li> <li><code>var aspect : Num = 0</code></li> <li><code>var near_3d : Num = 0.1</code></li> <li><code>var far_3d : Num = 100</code></li> <li><code>var default : Bool = false</code></li> <li><code>var debug_draw : Bool = false</code></li> <li><code>var debug_color : Color = [0.965, 0, 0.486, 1]</code></li> <li><code>var debug_thickness : Num = 1</code></li> </ul>"},{"location":"api/v/2025.1.1/system/camera.modifier/#perentityinfo","title":"PerEntityInfo","text":"<p><code>import \"luxe: system/camera.modifier\" for PerEntityInfo</code></p> <p>no docs found</p> <ul> <li><code>var entity : Num = 0</code></li> <li><code>var window : Any = null</code></li> <li><code>var preview : Any = null</code></li> <li><code>var world_edit : Any = null</code></li> <li>new(in_entity: <code>Any</code>)</li> <li>destroy()</li> <li>show(state: <code>Bool</code>)</li> <li>update()</li> </ul> <p> PerEntityInfo.new(in_entity: <code>Any</code>) \u00b6 returns <code>PerEntityInfo</code></p> <p>no docs found   </p> <p> PerEntityInfo.destroy() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PerEntityInfo.show(state: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PerEntityInfo.update() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/camera.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/camera.modifier\" for System</code></p> <p>no docs found</p> <ul> <li><code>var draw : Draw = null</code></li> <li><code>var style : null = PathStyle.new</code></li> <li><code>var window : Any = null</code></li> <li><code>var preview : Any = null</code></li> <li><code>var world_edit : Any = null</code></li> <li><code>var current_selection : PerEntityInfo = null</code></li> <li>new(world: <code>World</code>)</li> <li>editor_init(world: <code>World</code>)</li> <li>init(world: <code>World</code>)</li> <li>editor_attach(entity: <code>Entity</code>, data: <code>Data</code>)</li> <li>editor_detach(entity: <code>Entity</code>, data: <code>Data</code>)</li> <li>tick(delta: <code>Num</code>)</li> <li>editor_change(entity: <code>Entity</code>, change: <code>ModifierChange</code>)</li> <li>editor_tick(delta: <code>Num</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p> <p> System.editor_init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.editor_attach(entity: <code>Entity</code>, data: <code>Data</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.editor_detach(entity: <code>Entity</code>, data: <code>Data</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.tick(delta: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.editor_change(entity: <code>Entity</code>, change: <code>ModifierChange</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.editor_tick(delta: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/mesh.modifier/","title":"Mesh.modifier","text":""},{"location":"api/v/2025.1.1/system/mesh.modifier/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/system/mesh.modifier/#luxe-systemmeshmodifier-module","title":"<code>luxe: system/mesh.modifier</code> module","text":"<ul> <li>Data </li> <li>InstancedMode </li> <li>Mesh </li> <li>System </li> </ul>"},{"location":"api/v/2025.1.1/system/mesh.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/mesh.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var mesh : Asset = null</code></li> <li><code>var material : Asset = null</code></li> <li><code>var instanced : InstancedMode = InstancedMode.none</code></li> <li><code>var own_materials : Bool = false</code></li> </ul>"},{"location":"api/v/2025.1.1/system/mesh.modifier/#instancedmode","title":"InstancedMode","text":"<p><code>import \"luxe: system/mesh.modifier\" for InstancedMode</code></p> <p>no docs found</p> <ul> <li>none</li> <li>group_auto</li> <li>group_custom</li> </ul> <p> InstancedMode.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InstancedMode.group_auto \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InstancedMode.group_custom \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/mesh.modifier/#mesh","title":"Mesh","text":"<p><code>import \"luxe: system/mesh.modifier\" for Mesh</code></p> <p>no docs found</p> <ul> <li>create(entity: <code>Entity</code>)</li> <li>create(entity: <code>Entity</code>, material: <code>Material</code>, mesh_lx: <code>String</code>)</li> <li>destroy(entity: <code>Entity</code>)</li> <li>set_instanced_auto_units(world: <code>World</code>, grid_units_cell_size: <code>Num</code>)</li> <li>get_instanced_auto_units(world: <code>World</code>)</li> <li>has(entity: <code>Entity</code>)</li> <li>clear(entity: <code>Entity</code>)</li> <li>level_get_element_count(entity: <code>Entity</code>, level: <code>Num</code>)</li> <li>level_get_count(entity: <code>Entity</code>)</li> <li>level_set_active(entity: <code>Entity</code>, level: <code>Num</code>, disable_current: <code>Bool</code>)</li> <li>level_get_active(entity: <code>Entity</code>)</li> <li>level_set_enabled(entity: <code>Entity</code>, level: <code>Num</code>, state: <code>Bool</code>)</li> <li>level_get_enabled(entity: <code>Entity</code>, level: <code>Num</code>)</li> <li>set_asset(entity: <code>Entity</code>, asset_id: <code>String</code>)</li> <li>set_instanced_group(entity: <code>Entity</code>, group_id: <code>String</code>)</li> <li>get_instanced_group(entity: <code>Entity</code>)</li> <li>set_instanced(entity: <code>Entity</code>, state: <code>Bool</code>)</li> <li>get_instanced(entity: <code>Entity</code>)</li> <li>get_source_id(entity: <code>Entity</code>)</li> <li>get_default_material(entity: <code>Entity</code>)</li> <li>set_default_material(entity: <code>Entity</code>, material: <code>Material</code>)</li> <li>get_geometry(entity: <code>Entity</code>, level: <code>Num</code>, element: <code>Num</code>)</li> <li>get_geometry(entity: <code>Entity</code>)</li> <li>obb_intersect_ray(entity: <code>Entity</code>, ray_x: <code>Num</code>, ray_y: <code>Num</code>, ray_z: <code>Num</code>, ray_dir_x: <code>Num</code>, ray_dir_y: <code>Num</code>, ray_dir_z: <code>Num</code>)</li> </ul> <p> Mesh.create(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Mesh.create(entity: <code>Entity</code>, material: <code>Material</code>, mesh_lx: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Mesh.destroy(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Mesh.set_instanced_auto_units(world: <code>World</code>, grid_units_cell_size: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Mesh.get_instanced_auto_units(world: <code>World</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Mesh.has(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Mesh.clear(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.level_get_element_count(entity: <code>Entity</code>, level: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.level_get_count(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.level_set_active(entity: <code>Entity</code>, level: <code>Num</code>, disable_current: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.level_get_active(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.level_set_enabled(entity: <code>Entity</code>, level: <code>Num</code>, state: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.level_get_enabled(entity: <code>Entity</code>, level: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.set_asset(entity: <code>Entity</code>, asset_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.set_instanced_group(entity: <code>Entity</code>, group_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.get_instanced_group(entity: <code>Entity</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Mesh.set_instanced(entity: <code>Entity</code>, state: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.get_instanced(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Mesh.get_source_id(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.get_default_material(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.set_default_material(entity: <code>Entity</code>, material: <code>Material</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.get_geometry(entity: <code>Entity</code>, level: <code>Num</code>, element: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.get_geometry(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.obb_intersect_ray(entity: <code>Entity</code>, ray_x: <code>Num</code>, ray_y: <code>Num</code>, ray_z: <code>Num</code>, ray_dir_x: <code>Num</code>, ray_dir_y: <code>Num</code>, ray_dir_z: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/mesh.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/mesh.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/nav.modifier/","title":"Nav.modifier","text":""},{"location":"api/v/2025.1.1/system/nav.modifier/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/system/nav.modifier/#luxe-systemnavmodifier-module","title":"<code>luxe: system/nav.modifier</code> module","text":"<ul> <li>Data </li> <li>Nav </li> <li>Partition </li> <li>System </li> </ul>"},{"location":"api/v/2025.1.1/system/nav.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/nav.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var rebuild : Num = 1</code></li> <li><code>var mesh : Asset = null</code></li> <li><code>var tile_size : Num = 32</code></li> <li><code>var cell_size : Num = 0.3</code></li> <li><code>var cell_height : Num = 0.2</code></li> <li><code>var height : Num = 2</code></li> <li><code>var radius : Num = 0.6</code></li> <li><code>var max_climb : Num = 0.9</code></li> <li><code>var max_slope : Num = 45</code></li> <li><code>var min_region_size : Num = 8</code></li> <li><code>var merged_region_size : Num = 20</code></li> <li><code>var max_edge_length : Num = 12</code></li> <li><code>var max_edge_error : Num = 1.3</code></li> <li><code>var verts_per_poly : Num = 6</code></li> <li><code>var detail_sample_distance : Num = 6</code></li> <li><code>var detail_sample_max_error : Num = 1</code></li> <li><code>var partition : Partition = Partition.watershed</code></li> <li><code>var no_low_hanging : Bool = true</code></li> <li><code>var no_ledge_spans : Bool = true</code></li> <li><code>var no_walkable_low_spans : Bool = true</code></li> <li><code>var debug_draw : Bool = false</code></li> <li><code>var keep_debug_data : Bool = false</code></li> </ul>"},{"location":"api/v/2025.1.1/system/nav.modifier/#nav","title":"Nav","text":"<p><code>import \"luxe: system/nav.modifier\" for Nav</code></p> <p>no docs found</p> <ul> <li>raycast(entity: <code>Entity</code>, start: <code>Float3</code>, end: <code>Float3</code>, extents: <code>Float3</code>)</li> <li>nearest_point(entity: <code>Entity</code>, start: <code>Float3</code>, extents: <code>Float3</code>)</li> <li>get_path(entity: <code>Entity</code>, start: <code>Float3</code>, end: <code>Float3</code>, extents: <code>Float3</code>)</li> </ul> <p> Nav.raycast(entity: <code>Entity</code>, start: <code>Float3</code>, end: <code>Float3</code>, extents: <code>Float3</code>) \u00b6 returns <code>Float3</code></p> <p>no docs found   </p> <p> Nav.nearest_point(entity: <code>Entity</code>, start: <code>Float3</code>, extents: <code>Float3</code>) \u00b6 returns <code>Float3</code></p> <p>no docs found   </p> <p> Nav.get_path(entity: <code>Entity</code>, start: <code>Float3</code>, end: <code>Float3</code>, extents: <code>Float3</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/nav.modifier/#partition","title":"Partition","text":"<p><code>import \"luxe: system/nav.modifier\" for Partition</code></p> <p>no docs found</p> <ul> <li>watershed</li> <li>monotone</li> <li>layers</li> </ul> <p> Partition.watershed \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Partition.monotone \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Partition.layers \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/nav.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/nav.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/skeleton.modifier/","title":"Skeleton.modifier","text":""},{"location":"api/v/2025.1.1/system/skeleton.modifier/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/system/skeleton.modifier/#luxe-systemskeletonmodifier-module","title":"<code>luxe: system/skeleton.modifier</code> module","text":"<ul> <li>Data </li> <li>Skeleton </li> <li>System </li> </ul>"},{"location":"api/v/2025.1.1/system/skeleton.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/skeleton.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var skeleton : Asset = null</code></li> <li><code>var draw_skeleton : Bool = false</code></li> </ul>"},{"location":"api/v/2025.1.1/system/skeleton.modifier/#skeleton","title":"Skeleton","text":"<p><code>import \"luxe: system/skeleton.modifier\" for Skeleton</code></p> <p>no docs found</p> <ul> <li>has(entity: <code>Entity</code>)</li> <li>set_pose(entity: <code>Entity</code>, pose: <code>Pose</code>)</li> <li>get_pose(entity: <code>Entity</code>)</li> <li>get_skeleton(entity: <code>Entity</code>)</li> </ul> <p> Skeleton.has(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Skeleton.set_pose(entity: <code>Entity</code>, pose: <code>Pose</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Skeleton.get_pose(entity: <code>Entity</code>) \u00b6 returns <code>Pose</code></p> <p>no docs found   </p> <p> Skeleton.get_skeleton(entity: <code>Entity</code>) \u00b6 returns <code>Skeleton</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/skeleton.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/skeleton.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/skin.modifier/","title":"Skin.modifier","text":""},{"location":"api/v/2025.1.1/system/skin.modifier/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/system/skin.modifier/#luxe-systemskinmodifier-module","title":"<code>luxe: system/skin.modifier</code> module","text":"<ul> <li>Data </li> <li>Skin </li> <li>System </li> </ul>"},{"location":"api/v/2025.1.1/system/skin.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/skin.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var mesh_entity : Link = null</code></li> <li><code>var skeleton_entity : Link = null</code></li> </ul>"},{"location":"api/v/2025.1.1/system/skin.modifier/#skin","title":"Skin","text":"<p><code>import \"luxe: system/skin.modifier\" for Skin</code></p> <p>no docs found</p>"},{"location":"api/v/2025.1.1/system/skin.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/skin.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/sound.modifier/","title":"Sound.modifier","text":""},{"location":"api/v/2025.1.1/system/sound.modifier/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/system/sound.modifier/#luxe-systemsoundmodifier-module","title":"<code>luxe: system/sound.modifier</code> module","text":"<ul> <li>Data </li> <li>Sound </li> <li>SoundAttenuation </li> <li>System </li> </ul>"},{"location":"api/v/2025.1.1/system/sound.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/sound.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var source : Asset = null</code></li> <li><code>var bus : Asset = null</code></li> <li><code>var volume : Num = -1</code></li> <li><code>var pan : Num = 0</code></li> <li><code>var pitch : Num = 1</code></li> <li><code>var looping : Bool = false</code></li> <li><code>var world_space : Bool = false</code></li> <li><code>var debug_draw : Bool = true</code></li> <li><code>var attenuation : SoundAttenuation = SoundAttenuation.none</code></li> <li><code>var range : Float2 = [1, 10]</code></li> <li><code>var rolloff : Num = 1</code></li> <li><code>var simulate_doppler : Bool = false</code></li> <li><code>var doppler_factor : Num = 1</code></li> </ul>"},{"location":"api/v/2025.1.1/system/sound.modifier/#sound","title":"Sound","text":"<p><code>import \"luxe: system/sound.modifier\" for Sound</code></p> <p>no docs found</p>"},{"location":"api/v/2025.1.1/system/sound.modifier/#soundattenuation","title":"SoundAttenuation","text":"<p><code>import \"luxe: system/sound.modifier\" for SoundAttenuation</code></p> <p>no docs found</p> <ul> <li>none</li> <li>inverse_distance</li> <li>linear_distance</li> <li>exponential_distance</li> </ul> <p> SoundAttenuation.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SoundAttenuation.inverse_distance \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SoundAttenuation.linear_distance \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SoundAttenuation.exponential_distance \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/sound.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/sound.modifier\" for System</code></p> <p>no docs found</p> <ul> <li><code>var draw : Draw = null</code></li> <li><code>var style : null = PathStyle.new</code></li> <li><code>var last_pos : Map = {}</code></li> <li>new(world: <code>World</code>)</li> <li>init(world: <code>World</code>)</li> <li>editor_init(world: <code>World</code>)</li> <li>attach(entity: <code>Entity</code>, data: <code>Data</code>)</li> <li>detach(entity: <code>Entity</code>, data: <code>Data</code>)</li> <li>get_attenuation(attn: <code>SoundAttenuation</code>)</li> <li>tick(delta: <code>Num</code>)</li> <li>draw(entity: <code>Entity</code>, data: <code>Data</code>)</li> <li>editor_change(entity: <code>Entity</code>, change: <code>ModifierChange</code>)</li> <li>editor_tick(delta: <code>Num</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p> <p> System.init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.editor_init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.attach(entity: <code>Entity</code>, data: <code>Data</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.detach(entity: <code>Entity</code>, data: <code>Data</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.get_attenuation(attn: <code>SoundAttenuation</code>) \u00b6 returns <code>AudioAttenuation</code></p> <p>no docs found   </p> <p> System.tick(delta: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.draw(entity: <code>Entity</code>, data: <code>Data</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.editor_change(entity: <code>Entity</code>, change: <code>ModifierChange</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.editor_tick(delta: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/sprite.modifier/","title":"Sprite.modifier","text":""},{"location":"api/v/2025.1.1/system/sprite.modifier/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/system/sprite.modifier/#luxe-systemspritemodifier-module","title":"<code>luxe: system/sprite.modifier</code> module","text":"<ul> <li>Advanced </li> <li>Data </li> <li>Dissolve </li> <li>HSV </li> <li>Outline </li> <li>Shadow </li> <li>Shine </li> <li>Sprite </li> <li>SpriteBillboard </li> <li>System </li> </ul>"},{"location":"api/v/2025.1.1/system/sprite.modifier/#advanced","title":"Advanced","text":"<p><code>import \"luxe: system/sprite.modifier\" for Advanced</code></p> <p>no docs found</p> <ul> <li><code>var auto_size : Bool = true</code></li> <li><code>var material_input : String = \"sprite.image\"</code></li> <li><code>var HSV : HSV = Object</code></li> <li><code>var outline : Outline = Object</code></li> <li><code>var shadow : Shadow = Object</code></li> <li><code>var dissolve : Dissolve = Object</code></li> <li><code>var shine : Shine = Object</code></li> </ul>"},{"location":"api/v/2025.1.1/system/sprite.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/sprite.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var image : Asset = \"luxe: image/logo\"</code></li> <li><code>var size : Float2 = [64, 64]</code></li> <li><code>var origin : Float2 = [0.5, 0.5]</code></li> <li><code>var skew : Float2 = [0, 0]</code></li> <li><code>var color : Color = [1, 1, 1, 1]</code></li> <li><code>var uv : Float4 = [0, 0, 1, 1]</code></li> <li><code>var flip_x : Bool = false</code></li> <li><code>var flip_y : Bool = false</code></li> <li><code>var pixelated : Bool = false</code></li> <li><code>var billboard : SpriteBillboard = SpriteBillboard.none</code></li> <li><code>var billboard_lock : Float3 = [0, 0, 0]</code></li> <li><code>var atlas : Asset = null</code></li> <li><code>var atlas_image_id : String = null</code></li> <li><code>var material : Asset = null</code></li> <li><code>var advanced : Advanced = Object</code></li> </ul>"},{"location":"api/v/2025.1.1/system/sprite.modifier/#dissolve","title":"Dissolve","text":"<p><code>import \"luxe: system/sprite.modifier\" for Dissolve</code></p> <p>no docs found</p> <ul> <li><code>var enabled : Bool = false</code></li> <li><code>var image : Asset = null</code></li> <li><code>var uv : Float4 = [0, 0, 1, 1]</code></li> <li><code>var value : Num = 1</code></li> </ul>"},{"location":"api/v/2025.1.1/system/sprite.modifier/#hsv","title":"HSV","text":"<p><code>import \"luxe: system/sprite.modifier\" for HSV</code></p> <p>no docs found</p> <ul> <li><code>var enabled : Bool = false</code></li> <li><code>var hue_change : Num = 0</code></li> <li><code>var saturation : Num = 1</code></li> <li><code>var value : Num = 1</code></li> </ul>"},{"location":"api/v/2025.1.1/system/sprite.modifier/#outline","title":"Outline","text":"<p><code>import \"luxe: system/sprite.modifier\" for Outline</code></p> <p>no docs found</p> <ul> <li><code>var enabled : Bool = false</code></li> <li><code>var color : Color = [1, 1, 1, 1]</code></li> <li><code>var thickness : Num = 0</code></li> </ul>"},{"location":"api/v/2025.1.1/system/sprite.modifier/#shadow","title":"Shadow","text":"<p><code>import \"luxe: system/sprite.modifier\" for Shadow</code></p> <p>no docs found</p> <ul> <li><code>var enabled : Bool = false</code></li> <li><code>var offset : Float2 = [0, 0]</code></li> <li><code>var color : Color = [0, 0, 0, 1]</code></li> <li><code>var softness : Num = 0</code></li> </ul>"},{"location":"api/v/2025.1.1/system/sprite.modifier/#shine","title":"Shine","text":"<p><code>import \"luxe: system/sprite.modifier\" for Shine</code></p> <p>no docs found</p> <ul> <li><code>var enabled : Bool = false</code></li> <li><code>var color : Color = [1, 0.92, 0.16, 1]</code></li> <li><code>var direction : Float2 = [0, 0]</code></li> <li><code>var width : Num = 0</code></li> <li><code>var speed : Num = 0</code></li> <li><code>var spacing : Num = 0</code></li> </ul>"},{"location":"api/v/2025.1.1/system/sprite.modifier/#sprite","title":"Sprite","text":"<p><code>import \"luxe: system/sprite.modifier\" for Sprite</code></p> <p>A sprite is an image attached to an entity.  The <code>Sprite</code> modifier provides flipping, sizing, sub images and more. To attach a sprite to an entity, call <code>Sprite.create</code>:</p> <pre><code>var entity = Entity.create(world)\nvar material = Assets.material(\"luxe: material/logo\")\nSprite.create(entity, material, 128, 128)\n</code></pre> <ul> <li>create(entity: <code>Entity</code>, image: <code>Image</code>, width: <code>Num</code>, height: <code>Num</code>)</li> <li>create(entity: <code>Entity</code>, image: <code>Image</code>)</li> <li>create(entity: <code>Entity</code>)</li> <li>create_with(entity: <code>Entity</code>, material: <code>Material</code>, width: <code>Num</code>, height: <code>Num</code>)</li> <li>create_with(entity: <code>Entity</code>, material: <code>Material</code>)</li> <li>create(entity: <code>Entity</code>, atlas: <code>Atlas</code>, atlas_image: <code>String</code>)</li> <li>destroy(entity: <code>Entity</code>)</li> <li>has(entity: <code>Entity</code>)</li> <li>contains(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>set_material(entity: <code>Entity</code>, material: <code>Material</code>)</li> <li>get_material(entity: <code>Entity</code>)</li> <li>set_image(entity: <code>Entity</code>, image: <code>Image</code>)</li> <li>get_image(entity: <code>Entity</code>)</li> <li>set_origin(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>get_origin(entity: <code>Entity</code>)</li> <li>set_flip_h(entity: <code>Entity</code>, flipped: <code>Bool</code>)</li> <li>get_flip_h(entity: <code>Entity</code>)</li> <li>set_flip_v(entity: <code>Entity</code>, flipped: <code>Bool</code>)</li> <li>get_flip_v(entity: <code>Entity</code>)</li> <li>set_billboard(entity: <code>Entity</code>, kind: <code>SpriteBillboard</code>, lock: <code>Float3</code>)</li> <li>get_billboard(entity: <code>Entity</code>)</li> <li>set_size(entity: <code>Entity</code>, width: <code>Num</code>, height: <code>Num</code>)</li> <li>set_width(entity: <code>Entity</code>, width: <code>Num</code>)</li> <li>get_width(entity: <code>Entity</code>)</li> <li>set_height(entity: <code>Entity</code>, height: <code>Num</code>)</li> <li>get_height(entity: <code>Entity</code>)</li> <li>set_alpha(entity: <code>Entity</code>, alpha: <code>Num</code>)</li> <li>get_alpha(entity: <code>Entity</code>)</li> <li>set_color(entity: <code>Entity</code>, color: <code>Color</code>)</li> <li>set_color(entity: <code>Entity</code>, r: <code>Num</code>, g: <code>Num</code>, b: <code>Num</code>, a: <code>Num</code>)</li> <li>get_color(entity: <code>Entity</code>)</li> <li>set_uv(entity: <code>Entity</code>, x0: <code>Num</code>, y0: <code>Num</code>, x1: <code>Num</code>, y1: <code>Num</code>)</li> <li>get_uv(entity: <code>Entity</code>)</li> <li>set_skew(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>get_skew(entity: <code>Entity</code>)</li> <li>get_geometry(entity: <code>Entity</code>)</li> <li>set_geometry(entity: <code>Entity</code>, geo: <code>Geometry</code>)</li> <li>get_auto_size(entity: <code>Entity</code>)</li> <li>set_auto_size(entity: <code>Entity</code>, value: <code>Bool</code>)</li> <li>get_material_input(entity: <code>Entity</code>)</li> <li>set_material_input(entity: <code>Entity</code>, value: <code>Bool</code>)</li> <li>get_hsv_adjust(entity: <code>Entity</code>)</li> <li>set_hsv_adjust(entity: <code>Entity</code>, enabled: <code>Bool</code>, hue_change: <code>Num</code>, saturation: <code>Num</code>, value: <code>Num</code>)</li> <li>set_effect_HSV_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>)</li> <li>get_effect_HSV_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>)</li> <li>set_effect_HSV_hue_change(entity: <code>Entity</code>, hue_change: <code>Num</code>)</li> <li>get_effect_HSV_hue_change(entity: <code>Entity</code>, hue_change: <code>Num</code>)</li> <li>set_effect_HSV_saturation(entity: <code>Entity</code>, saturation: <code>Num</code>)</li> <li>get_effect_HSV_saturation(entity: <code>Entity</code>, saturation: <code>Num</code>)</li> <li>set_effect_HSV_value(entity: <code>Entity</code>, value: <code>Num</code>)</li> <li>get_effect_HSV_value(entity: <code>Entity</code>, value: <code>Num</code>)</li> <li>get_outline(entity: <code>Entity</code>)</li> <li>set_outline(entity: <code>Entity</code>, enabled: <code>Bool</code>, color: <code>Color</code>, thickness: <code>Num</code>)</li> <li>set_effect_outline_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>)</li> <li>get_effect_outline_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>)</li> <li>set_effect_outline_color(entity: <code>Entity</code>, color: <code>Color</code>)</li> <li>get_effect_outline_color(entity: <code>Entity</code>, color: <code>Color</code>)</li> <li>set_effect_outline_thickness(entity: <code>Entity</code>, thickness: <code>Num</code>)</li> <li>get_effect_outline_thickness(entity: <code>Entity</code>, thickness: <code>Num</code>)</li> <li>get_shadow(entity: <code>Entity</code>)</li> <li>set_shadow(entity: <code>Entity</code>, enabled: <code>Bool</code>, offset: <code>Num</code>, color: <code>Color</code>, softness: <code>Num</code>)</li> <li>set_effect_shadow_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>)</li> <li>get_effect_shadow_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>)</li> <li>set_effect_shadow_offset(entity: <code>Entity</code>, offset: <code>Vector2</code>)</li> <li>get_effect_shadow_offset(entity: <code>Entity</code>, offset: <code>Vector2</code>)</li> <li>set_effect_shadow_color(entity: <code>Entity</code>, color: <code>Color</code>)</li> <li>get_effect_shadow_color(entity: <code>Entity</code>, color: <code>Color</code>)</li> <li>get_dissolve(entity: <code>Entity</code>)</li> <li>set_dissolve(entity: <code>Entity</code>, enabled: <code>Bool</code>, image: <code>Image</code>, uv: <code>List</code>, value: <code>Num</code>)</li> <li>set_effect_dissolve_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>)</li> <li>get_effect_dissolve_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>)</li> <li>set_effect_dissolve_image(entity: <code>Entity</code>, image: <code>Image</code>)</li> <li>get_effect_dissolve_image(entity: <code>Entity</code>, image: <code>Image</code>)</li> <li>set_effect_dissolve_uv(entity: <code>Entity</code>, uv: <code>Vector4</code>)</li> <li>get_effect_dissolve_uv(entity: <code>Entity</code>, uv: <code>Vector4</code>)</li> <li>set_effect_dissolve_value(entity: <code>Entity</code>, value: <code>Num</code>)</li> <li>get_effect_dissolve_value(entity: <code>Entity</code>, value: <code>Num</code>)</li> <li>get_shine(entity: <code>Entity</code>)</li> <li>set_shine(entity: <code>Entity</code>, enabled: <code>Bool</code>, color: <code>Num</code>, direction: <code>Vector2</code>, width: <code>Num</code>, speed: <code>Num</code>, spacing: <code>Num</code>)</li> <li>set_effect_shine_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>)</li> <li>get_effect_shine_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>)</li> <li>set_effect_shine_color(entity: <code>Entity</code>, color: <code>Color</code>)</li> <li>get_effect_shine_color(entity: <code>Entity</code>, color: <code>Color</code>)</li> <li>set_effect_shine_direction(entity: <code>Entity</code>, direction: <code>Vector2</code>)</li> <li>get_effect_shine_direction(entity: <code>Entity</code>, direction: <code>Vector2</code>)</li> <li>set_effect_shine_width(entity: <code>Entity</code>, width: <code>Num</code>)</li> <li>get_effect_shine_width(entity: <code>Entity</code>, width: <code>Num</code>)</li> <li>set_effect_shine_speed(entity: <code>Entity</code>, speed: <code>Num</code>)</li> <li>get_effect_shine_speed(entity: <code>Entity</code>, speed: <code>Num</code>)</li> <li>set_effect_shine_spacing(entity: <code>Entity</code>, spacing: <code>Num</code>)</li> <li>get_effect_shine_spacing(entity: <code>Entity</code>, spacing: <code>Num</code>)</li> </ul> <p> Sprite.create(entity: <code>Entity</code>, image: <code>Image</code>, width: <code>Num</code>, height: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Attach a <code>Sprite</code> modifier to <code>entity</code>, drawn using <code>image</code>, with a given size of <code>width</code>x<code>height</code>.</p> <pre><code>var entity = Entity.create(world)\nvar image = Assets.image(\"luxe: image/logo\")\nSprite.create(entity, material, 128, 128)\n</code></pre> <p> Sprite.create(entity: <code>Entity</code>, image: <code>Image</code>) \u00b6 returns <code>None</code></p> <p>Attach a <code>Sprite</code> modifier to <code>entity</code>, drawn using <code>image</code>. The size of the sprite will be determined by the size of the image.</p> <pre><code>var entity = Entity.create(world)\nvar image = Assets.image(\"luxe: image/logo\")\nSprite.create(entity, image)\n</code></pre> <p> Sprite.create(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Attach a <code>Sprite</code> modifier to <code>entity</code>, drawn using a default <code>image</code>. Use <code>Sprite.set_image</code> or <code>Sprite.set_material</code> to change it later.</p> <pre><code>var entity = Entity.create(world)\nSprite.create(entity)\n</code></pre> <p> Sprite.create_with(entity: <code>Entity</code>, material: <code>Material</code>, width: <code>Num</code>, height: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Attach a <code>Sprite</code> modifier to <code>entity</code>, drawn using <code>material</code>, with a size of <code>width</code>x<code>height</code>.</p> <pre><code>var entity = Entity.create(world)\nvar material = Assets.material(\"luxe: material/logo\")\nSprite.create_with(entity, material, 128, 128)\n</code></pre> <p> Sprite.create_with(entity: <code>Entity</code>, material: <code>Material</code>) \u00b6 returns <code>None</code></p> <p>Attach a <code>Sprite</code> modifier to <code>entity</code>, drawn using <code>material</code>. The size of the sprite will be determined by the <code>sprite.image</code> slot in the material.</p> <pre><code>var entity = Entity.create(world)\nvar material = Assets.material(\"luxe: material/logo\")\nSprite.create(entity, material)\n</code></pre> <p> Sprite.create(entity: <code>Entity</code>, atlas: <code>Atlas</code>, atlas_image: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Attach a <code>Sprite</code> modifier to <code>entity</code>, drawn using the <code>atlas</code>,  using the image name in the atlas as <code>atlas_image</code>, with a size defined by the image in the atlas.</p> <pre><code>var entity = Entity.create(world)\nvar atlas = Assets.atlas(\"atlas/example\")\nvar image_name = \"images/atlas/example/tree\"\nSprite.create(entity, atlas, image_name)\n</code></pre> <p> Sprite.destroy(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Detach and destroy the <code>Sprite</code> attached to <code>entity</code></p> <pre><code>Sprite.destroy(entity)\n</code></pre> <p> Sprite.has(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if <code>entity</code> has a <code>Sprite</code> modifier attached.</p> <pre><code>if(Sprite.has(entity)) {\n  Log.print(\"found sprite\")\n}\n</code></pre> <p> Sprite.contains(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if the <code>Sprite</code> attached to <code>entity</code> contains the point at <code>x</code>,<code>y</code> (in world units). Note that the function is based on the sprite <code>width</code> and <code>height</code>, it is not pixel perfect.</p> <pre><code>//Convert mouse coords to world units\nvar pos = Camera.screen_point_to_world(\n    app.camera,\n    Input.mouse_x(),\n    Input.mouse_y())\n//Check if point is inside the sprite\nif(Sprite.contains(entity, pos.x, pos.y)) {\n  Log.print(\"mouse inside sprite!\")\n}\n</code></pre> <p> Sprite.set_material(entity: <code>Entity</code>, material: <code>Material</code>) \u00b6 returns <code>None</code></p> <p>Change the material that the <code>Sprite</code> attached to <code>entity</code> is drawn with, so it will draw with <code>material</code> instead.</p> <pre><code>var material = Assets.material(\"luxe: material/logo.sprite\")\nSprite.set_material(entity, material)\n</code></pre> <p> Sprite.get_material(entity: <code>Entity</code>) \u00b6 returns <code>Material</code></p> <p>Returns the current material that the <code>Sprite</code> attached to <code>entity</code> is drawn with.</p> <pre><code>var material = Sprite.get_material(entity)\n</code></pre> <p> Sprite.set_image(entity: <code>Entity</code>, image: <code>Image</code>) \u00b6 returns <code>None</code></p> <p>Change the image that the <code>Sprite</code> attached to <code>entity</code> is drawn with.</p> <pre><code>var image = Assets.image(\"luxe: image/logo.sprite\")\nSprite.set_image(entity, image)\n</code></pre> <p> Sprite.get_image(entity: <code>Entity</code>) \u00b6 returns <code>Image</code></p> <p>Returns the current image that the <code>Sprite</code> attached to <code>entity</code> is drawn with.</p> <pre><code>var image = Sprite.get_image(entity)\n</code></pre> <p> Sprite.set_origin(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Sets the origin of the sprite in relation to the <code>Transform</code> on <code>entity</code>. The <code>x</code> and <code>y</code> values are <code>0...1</code> range, where <code>0, 0</code> is bottom left, and <code>1, 1</code> is top right. A centered sprite is <code>0.5, 0.5</code>. To set the origin to the center, bottom you'd use <code>0.5, 0</code>.</p> <pre><code>//centered\nSprite.set_origin(entity, 0.5, 0.5)\n//bottom left\nSprite.set_origin(entity, 0, 0)\n//bottom center\nSprite.set_origin(entity, 0.5, 0)\n</code></pre> <p> Sprite.get_origin(entity: <code>Entity</code>) \u00b6 returns <code>Float2</code></p> <p>Returns the current origin for the Sprite attached to <code>entity</code>.</p> <pre><code>var origin = Sprite.get_origin(entity)\nLog.print(origin) //[0.5, 0.5]\n</code></pre> <p> Sprite.set_flip_h(entity: <code>Entity</code>, flipped: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set whether the <code>Sprite</code> attached to <code>entity</code> is <code>flipped</code> horizontally.</p> <pre><code>Sprite.set_flip_h(entity, true)\n</code></pre> <p> Sprite.get_flip_h(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if the <code>Sprite</code> attached to <code>entity</code> is flipped horizontally.</p> <pre><code>var flipped = Sprite.get_flip_h(entity)\n</code></pre> <p> Sprite.set_flip_v(entity: <code>Entity</code>, flipped: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set whether the <code>Sprite</code> attached to <code>entity</code> is <code>flipped</code> vertically.</p> <pre><code>Sprite.set_flip_v(entity, true)\n</code></pre> <p> Sprite.get_flip_v(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if the <code>Sprite</code> attached to <code>entity</code> is flipped vertically.</p> <pre><code>var flipped = Sprite.get_flip_v(entity)\n</code></pre> <p> Sprite.set_billboard(entity: <code>Entity</code>, kind: <code>SpriteBillboard</code>, lock: <code>Float3</code>) \u00b6 returns <code>None</code></p> <p>Set how the <code>Sprite</code> attached to <code>entity</code> behaves as a <code>billboard</code> sprite. The lock field is 0 for unlocked rotation, 1 for locked rotation on that axis.</p> <pre><code>Sprite.set_billboard(entity, SpriteBillboard.fixed_scale, [0,1,0])\n</code></pre> <p> Sprite.get_billboard(entity: <code>Entity</code>) \u00b6 returns <code>SpriteBillboard</code></p> <p>Get how the <code>Sprite</code> attached to <code>entity</code> behaves as a <code>billboard</code> sprite.</p> <pre><code>var kind = Sprite.get_billboard(entity)\nif(kind == SpriteBillboard.fixed_scale) { ... }\n</code></pre> <p> Sprite.set_size(entity: <code>Entity</code>, width: <code>Num</code>, height: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Resize the <code>Sprite</code> attached to <code>entity</code> to be <code>width</code>x<code>height</code>.</p> <pre><code>Sprite.set_size(entity, 256, 256)\n</code></pre> <p> Sprite.set_width(entity: <code>Entity</code>, width: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Resize the <code>Sprite</code> attached to <code>entity</code> to have a new <code>width</code>.</p> <pre><code>Sprite.set_width(entity, 64)\n</code></pre> <p> Sprite.get_width(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>Returns the width of the <code>Sprite</code> attached to <code>entity</code>.</p> <pre><code>var width = Sprite.get_width(entity)\n</code></pre> <p> Sprite.set_height(entity: <code>Entity</code>, height: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Resize the <code>Sprite</code> attached to <code>entity</code> to have a new <code>height</code>.</p> <pre><code>Sprite.set_height(entity, 64)\n</code></pre> <p> Sprite.get_height(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>Returns the height of the <code>Sprite</code> attached to <code>entity</code>.</p> <pre><code>var height = Sprite.get_height(entity)\n</code></pre> <p> Sprite.set_alpha(entity: <code>Entity</code>, alpha: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Change the alpha (transparency) of the <code>Sprite</code> attached to <code>entity</code> to be <code>alpha</code>. Modifies the color.</p> <pre><code>Sprite.set_alpha(entity, 0.5)\n</code></pre> <p> Sprite.get_alpha(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>Returns the current alpha of the <code>Sprite</code> attached to <code>entity</code>.</p> <pre><code>var a = Sprite.get_alpha(entity)\n</code></pre> <p> Sprite.set_color(entity: <code>Entity</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>Set the color of the <code>Sprite</code> attached to <code>entity</code> to be a color.  The default color is white, <code>[1, 1, 1, 1]</code>, so to undo a color change, set it to that.</p> <pre><code>var color = Color.hex(0xf6007c)\nSprite.set_color(entity, color)\n</code></pre> <p> Sprite.set_color(entity: <code>Entity</code>, r: <code>Num</code>, g: <code>Num</code>, b: <code>Num</code>, a: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the color of the <code>Sprite</code> attached to <code>entity</code> to be a color of <code>r</code>,<code>g</code>,<code>b</code>,<code>a</code>.  The default color is white, <code>[1, 1, 1, 1]</code>, so to undo a color change, set it to that.</p> <pre><code>Sprite.set_color(entity, r, g, b, a)\n</code></pre> <p> Sprite.get_color(entity: <code>Entity</code>) \u00b6 returns <code>Color</code></p> <p>Returns the current color of the <code>Sprite</code> attached to <code>entity</code>.</p> <pre><code>var color = Sprite.get_color(entity)\n</code></pre> <p> Sprite.set_uv(entity: <code>Entity</code>, x0: <code>Num</code>, y0: <code>Num</code>, x1: <code>Num</code>, y1: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the UV coordinates for the <code>Sprite</code> attached to <code>entity</code> with top left at <code>x0</code>,<code>y0</code> and bottom right <code>x1</code>,<code>y1</code>. The default is <code>0, 0, 1, 1</code>, a full rectangle in UV coordinate space. If you want to tile the image on a sprite, set it to values &gt; 1.</p> <pre><code>//tile 4 times on both x and y\nSprite.set_uv(entity, 0, 0, 4, 4)\n</code></pre> <p> Sprite.get_uv(entity: <code>Entity</code>) \u00b6 returns <code>Float4</code></p> <p>Returns the current uv of the <code>Sprite</code> attached to <code>entity</code>.</p> <pre><code>var uv = Sprite.get_uv(entity)\n</code></pre> <p> Sprite.set_skew(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the skew amounts for the <code>Sprite</code> attached to <code>entity</code>. The values of <code>x</code> and <code>y</code> are between <code>0 ... 1</code>, where 1 is the most skew and 0 is none.</p> <pre><code>Sprite.set_skew(entity, 0, 0.25)\n</code></pre> <p> Sprite.get_skew(entity: <code>Entity</code>) \u00b6 returns <code>Float2</code></p> <p>Return the skew for the <code>Sprite</code> attached to <code>entity</code>.</p> <pre><code>var skew = Sprite.get_skew(entity)\n</code></pre> <p> Sprite.get_geometry(entity: <code>Entity</code>) \u00b6 returns <code>Geometry</code></p> <p>Returns the render Geometry for the <code>Sprite</code> attached to <code>entity</code>. The geometry is owned by the sprite, so be aware when modifying it.</p> <pre><code>var geometry = Sprite.get_geometry(entity)\n</code></pre> <p> Sprite.set_geometry(entity: <code>Entity</code>, geo: <code>Geometry</code>) \u00b6 returns <code>unknown</code></p> <p>Sets the render Geometry for the <code>Sprite</code> attached to <code>entity</code>.</p> <pre><code>Sprite.set_geometry(entity, geo)\n</code></pre> <p> Sprite.get_auto_size(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Sprite.set_auto_size(entity: <code>Entity</code>, value: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>When setting an image or material, resize the sprite to the image size   </p> <p> Sprite.get_material_input(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Sprite.set_material_input(entity: <code>Entity</code>, value: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>For custom materials, the material input ID for the image.   </p> <p> Sprite.get_hsv_adjust(entity: <code>Entity</code>) \u00b6 returns <code>HSV</code></p> <p>no docs found   </p> <p> Sprite.set_hsv_adjust(entity: <code>Entity</code>, enabled: <code>Bool</code>, hue_change: <code>Num</code>, saturation: <code>Num</code>, value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the values for the hsv adjustment effect. The effect applies several operations on the colors of the sprite in sRGB HSV space. Saturation and Value changes are applied with exponents as <code>value ^ adjustment</code>.   </p> <p> Sprite.set_effect_HSV_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_HSV_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_HSV_hue_change(entity: <code>Entity</code>, hue_change: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_HSV_hue_change(entity: <code>Entity</code>, hue_change: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_HSV_saturation(entity: <code>Entity</code>, saturation: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_HSV_saturation(entity: <code>Entity</code>, saturation: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_HSV_value(entity: <code>Entity</code>, value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_HSV_value(entity: <code>Entity</code>, value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_outline(entity: <code>Entity</code>) \u00b6 returns <code>Outline</code></p> <p>no docs found   </p> <p> Sprite.set_outline(entity: <code>Entity</code>, enabled: <code>Bool</code>, color: <code>Color</code>, thickness: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the values of the outline effect.   </p> <p> Sprite.set_effect_outline_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_outline_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_outline_color(entity: <code>Entity</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_outline_color(entity: <code>Entity</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_outline_thickness(entity: <code>Entity</code>, thickness: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_outline_thickness(entity: <code>Entity</code>, thickness: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_shadow(entity: <code>Entity</code>) \u00b6 returns <code>Shadow</code></p> <p>no docs found   </p> <p> Sprite.set_shadow(entity: <code>Entity</code>, enabled: <code>Bool</code>, offset: <code>Num</code>, color: <code>Color</code>, softness: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the values for the shadow effect. Shadows are the same color as the base sprite image, but only have a single color.   </p> <p> Sprite.set_effect_shadow_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_shadow_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_shadow_offset(entity: <code>Entity</code>, offset: <code>Vector2</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_shadow_offset(entity: <code>Entity</code>, offset: <code>Vector2</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_shadow_color(entity: <code>Entity</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_shadow_color(entity: <code>Entity</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_dissolve(entity: <code>Entity</code>) \u00b6 returns <code>Dissolve</code></p> <p>no docs found   </p> <p> Sprite.set_dissolve(entity: <code>Entity</code>, enabled: <code>Bool</code>, image: <code>Image</code>, uv: <code>List</code>, value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the values for the hsv adjustment effect. The effect applies several operations on the colors of the sprite in sRGB HSV space. Saturation and Value changes are applied with exponents as <code>value ^ adjustment</code>.   </p> <p> Sprite.set_effect_dissolve_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_dissolve_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_dissolve_image(entity: <code>Entity</code>, image: <code>Image</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_dissolve_image(entity: <code>Entity</code>, image: <code>Image</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_dissolve_uv(entity: <code>Entity</code>, uv: <code>Vector4</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_dissolve_uv(entity: <code>Entity</code>, uv: <code>Vector4</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_dissolve_value(entity: <code>Entity</code>, value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_dissolve_value(entity: <code>Entity</code>, value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_shine(entity: <code>Entity</code>) \u00b6 returns <code>Shine</code></p> <p>no docs found   </p> <p> Sprite.set_shine(entity: <code>Entity</code>, enabled: <code>Bool</code>, color: <code>Num</code>, direction: <code>Vector2</code>, width: <code>Num</code>, speed: <code>Num</code>, spacing: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the values for the hsv adjustment effect. The effect applies several operations on the colors of the sprite in sRGB HSV space. Saturation and Value changes are applied with exponents as <code>value ^ adjustment</code>.   </p> <p> Sprite.set_effect_shine_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_shine_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_shine_color(entity: <code>Entity</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_shine_color(entity: <code>Entity</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_shine_direction(entity: <code>Entity</code>, direction: <code>Vector2</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_shine_direction(entity: <code>Entity</code>, direction: <code>Vector2</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_shine_width(entity: <code>Entity</code>, width: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_shine_width(entity: <code>Entity</code>, width: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_shine_speed(entity: <code>Entity</code>, speed: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_shine_speed(entity: <code>Entity</code>, speed: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_shine_spacing(entity: <code>Entity</code>, spacing: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_shine_spacing(entity: <code>Entity</code>, spacing: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/sprite.modifier/#spritebillboard","title":"SpriteBillboard","text":"<p><code>import \"luxe: system/sprite.modifier\" for SpriteBillboard</code></p> <p>no docs found</p> <ul> <li>none</li> <li>billboard</li> <li>fixed_scale</li> <li>fixed_screen_scale</li> </ul> <p> SpriteBillboard.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SpriteBillboard.billboard \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SpriteBillboard.fixed_scale \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SpriteBillboard.fixed_screen_scale \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/sprite.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/sprite.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/tags.modifier/","title":"Tags.modifier","text":""},{"location":"api/v/2025.1.1/system/tags.modifier/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/system/tags.modifier/#luxe-systemtagsmodifier-module","title":"<code>luxe: system/tags.modifier</code> module","text":"<ul> <li>Data </li> <li>System </li> <li>Tags </li> </ul>"},{"location":"api/v/2025.1.1/system/tags.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/tags.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var tags : List = []</code></li> </ul>"},{"location":"api/v/2025.1.1/system/tags.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/tags.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/tags.modifier/#tags","title":"Tags","text":"<p><code>import \"luxe: system/tags.modifier\" for Tags</code></p> <p>no docs found</p> <ul> <li>create(entity: <code>Any</code>)</li> <li>destroy(entity: <code>Any</code>)</li> <li>has(entity: <code>Any</code>)</li> <li>add(entity: <code>Any</code>, tag: <code>Any</code>)</li> <li>remove(entity: <code>Any</code>, tag: <code>Any</code>)</li> <li>list(world: <code>Any</code>, tag: <code>Any</code>)</li> <li>list(entity: <code>Any</code>)</li> <li>has_tag(entity: <code>Any</code>, tag: <code>Any</code>)</li> </ul> <p> Tags.create(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tags.destroy(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tags.has(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tags.add(entity: <code>Any</code>, tag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tags.remove(entity: <code>Any</code>, tag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tags.list(world: <code>Any</code>, tag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tags.list(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tags.has_tag(entity: <code>Any</code>, tag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/text.modifier/","title":"Text.modifier","text":""},{"location":"api/v/2025.1.1/system/text.modifier/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/system/text.modifier/#luxe-systemtextmodifier-module","title":"<code>luxe: system/text.modifier</code> module","text":"<ul> <li>Data </li> <li>System </li> <li>Text </li> <li>TextAlignH </li> <li>TextAlignV </li> </ul>"},{"location":"api/v/2025.1.1/system/text.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/text.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var text : String = \"hello\"</code></li> <li><code>var size : Num = 16</code></li> <li><code>var align : TextAlignH = TextAlignH.center</code></li> <li><code>var vertical : TextAlignV = TextAlignV.center</code></li> <li><code>var color : Color = [1, 1, 1, 1]</code></li> <li><code>var bounds : Float4 = [0, 0, 0, 0]</code></li> <li><code>var font : Asset = \"luxe: font/lato\"</code></li> <li><code>var material : Asset = \"luxe: material/font\"</code></li> </ul>"},{"location":"api/v/2025.1.1/system/text.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/text.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/text.modifier/#text","title":"Text","text":"<p><code>import \"luxe: system/text.modifier\" for Text</code></p> <p>no docs found</p> <ul> <li>create(entity: <code>Any</code>, material: <code>Any</code>, default_size: <code>Any</code>, default_font: <code>Any</code>, default_color: <code>Any</code>)</li> <li>destroy(entity: <code>Any</code>)</li> <li>set_size(entity: <code>Any</code>, default_size: <code>Any</code>)</li> <li>get_size(entity: <code>Any</code>)</li> <li>set_font(entity: <code>Any</code>, default_font: <code>Any</code>)</li> <li>get_font(entity: <code>Any</code>)</li> <li>set_style(entity: <code>Entity</code>, style: <code>TextStyle</code>)</li> <li>get_style(entity: <code>Entity</code>)</li> <li>set_outline(entity: <code>Entity</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>)</li> <li>set_shadow(entity: <code>Entity</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>)</li> <li>set_max_visible(entity: <code>Entity</code>, max_visible: <code>Num</code>)</li> <li>get_max_visible(entity: <code>Entity</code>)</li> <li>set_color(entity: <code>Any</code>, default_color: <code>Any</code>)</li> <li>get_color(entity: <code>Any</code>)</li> <li>set_align(entity: <code>Any</code>, align: <code>Any</code>, align_vertical: <code>Any</code>)</li> <li>set_align(entity: <code>Any</code>, align: <code>Any</code>)</li> <li>get_align(entity: <code>Any</code>)</li> <li>set_align_vertical(entity: <code>Any</code>, align_vertical: <code>Any</code>)</li> <li>get_align_vertical(entity: <code>Any</code>)</li> <li>set_bounds(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>)</li> <li>get_bounds(entity: <code>Any</code>)</li> <li>set_attr(entity: <code>Entity</code>, start: <code>Num</code>, length: <code>Num</code>, type: <code>TextAttrType</code>, key: <code>String</code>, value: <code>Any</code>)</li> <li>attr_clear(entity: <code>Any</code>)</li> <li>commit(entity: <code>Any</code>)</li> <li>get_render_text(entity: <code>Any</code>)</li> <li>get_geometry(entity: <code>Any</code>)</li> <li>get_extents(entity: <code>Any</code>, offset: <code>Any</code>, count: <code>Any</code>)</li> <li>get_extents(entity: <code>Any</code>)</li> <li>contains(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>)</li> <li>has(entity: <code>Any</code>)</li> <li>set_loc(entity: <code>Entity</code>, space: <code>String</code>, key: <code>String</code>)</li> <li>set_loc(entity: <code>Entity</code>, key: <code>String</code>)</li> <li>set_loc_with_args(entity: <code>Entity</code>, space: <code>String</code>, key: <code>String</code>, args: <code>List</code>)</li> <li>set_loc_with_args(entity: <code>Entity</code>, key: <code>String</code>, args: <code>List</code>)</li> <li>get_text(entity: <code>Any</code>)</li> <li>set_text_buffer(entity: <code>Any</code>, string: <code>Any</code>)</li> <li>set_text(entity: <code>Any</code>, string: <code>Any</code>)</li> </ul> <p> Text.create(entity: <code>Any</code>, material: <code>Any</code>, default_size: <code>Any</code>, default_font: <code>Any</code>, default_color: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.destroy(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_size(entity: <code>Any</code>, default_size: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.get_size(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_font(entity: <code>Any</code>, default_font: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.get_font(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_style(entity: <code>Entity</code>, style: <code>TextStyle</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Text.get_style(entity: <code>Entity</code>) \u00b6 returns <code>TextStyle</code></p> <p>no docs found   </p> <p> Text.set_outline(entity: <code>Entity</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_shadow(entity: <code>Entity</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_max_visible(entity: <code>Entity</code>, max_visible: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Text.get_max_visible(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Text.set_color(entity: <code>Any</code>, default_color: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.get_color(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_align(entity: <code>Any</code>, align: <code>Any</code>, align_vertical: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_align(entity: <code>Any</code>, align: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.get_align(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_align_vertical(entity: <code>Any</code>, align_vertical: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.get_align_vertical(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_bounds(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.get_bounds(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_attr(entity: <code>Entity</code>, start: <code>Num</code>, length: <code>Num</code>, type: <code>TextAttrType</code>, key: <code>String</code>, value: <code>Any</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Text.attr_clear(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.commit(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.get_render_text(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.get_geometry(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.get_extents(entity: <code>Any</code>, offset: <code>Any</code>, count: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.get_extents(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.contains(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.has(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_loc(entity: <code>Entity</code>, space: <code>String</code>, key: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_loc(entity: <code>Entity</code>, key: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_loc_with_args(entity: <code>Entity</code>, space: <code>String</code>, key: <code>String</code>, args: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_loc_with_args(entity: <code>Entity</code>, key: <code>String</code>, args: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.get_text(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_text_buffer(entity: <code>Any</code>, string: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_text(entity: <code>Any</code>, string: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/text.modifier/#textalignh","title":"TextAlignH","text":"<p><code>import \"luxe: system/text.modifier\" for TextAlignH</code></p> <p>no docs found</p> <ul> <li>left</li> <li>center</li> <li>right</li> </ul> <p> TextAlignH.left \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAlignH.center \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAlignH.right \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/text.modifier/#textalignv","title":"TextAlignV","text":"<p><code>import \"luxe: system/text.modifier\" for TextAlignV</code></p> <p>no docs found</p> <ul> <li>top</li> <li>center</li> <li>bottom</li> </ul> <p> TextAlignV.top \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAlignV.center \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAlignV.bottom \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/tiles.modifier/","title":"Tiles.modifier","text":""},{"location":"api/v/2025.1.1/system/tiles.modifier/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/system/tiles.modifier/#luxe-systemtilesmodifier-module","title":"<code>luxe: system/tiles.modifier</code> module","text":"<ul> <li>Data </li> <li>System </li> <li>Tile </li> <li>Tiles </li> </ul>"},{"location":"api/v/2025.1.1/system/tiles.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/tiles.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var tiles : Asset = null</code></li> </ul>"},{"location":"api/v/2025.1.1/system/tiles.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/tiles.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/tiles.modifier/#tile","title":"Tile","text":"<p><code>import \"luxe: system/tiles.modifier\" for Tile</code></p> <p>no docs found</p> <ul> <li>create(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, depth: <code>Any</code>, visual_id: <code>Any</code>)</li> <li>destroy(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>destroy_at(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, depth: <code>Any</code>)</li> <li>exists_at(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, depth: <code>Any</code>)</li> <li>get_at(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, depth: <code>Any</code>)</li> <li>get_all(entity: <code>Any</code>, into: <code>Any</code>)</li> <li>get_all_at(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, into: <code>Any</code>)</li> <li>get_all_at_depth(entity: <code>Any</code>, depth: <code>Any</code>, into: <code>Any</code>)</li> <li>get_all_with_tag(entity: <code>Any</code>, tag: <code>Any</code>, into: <code>Any</code>)</li> <li>get_all_with_visual(entity: <code>Any</code>, visual: <code>Any</code>, into: <code>Any</code>)</li> <li>add_tag(entity: <code>Any</code>, tile: <code>Any</code>, tag: <code>Any</code>)</li> <li>remove_tag(entity: <code>Any</code>, tile: <code>Any</code>, tag: <code>Any</code>)</li> <li>has_tag(entity: <code>Any</code>, tile: <code>Any</code>, tag: <code>Any</code>)</li> <li>get_tags(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>clear_tags(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>set(entity: <code>Any</code>, tile: <code>Any</code>, key: <code>Any</code>, value: <code>Any</code>)</li> <li>get(entity: <code>Any</code>, tile: <code>Any</code>, key: <code>Any</code>, default: <code>Any</code>)</li> <li>set_coord(entity: <code>Any</code>, tile: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>)</li> <li>get_coord_x(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>get_coord_y(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>set_depth(entity: <code>Any</code>, tile: <code>Any</code>, depth: <code>Any</code>)</li> <li>get_depth(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>set_offset(entity: <code>Any</code>, tile: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>)</li> <li>set_offset_x(entity: <code>Any</code>, tile: <code>Any</code>, x: <code>Any</code>)</li> <li>set_offset_y(entity: <code>Any</code>, tile: <code>Any</code>, y: <code>Any</code>)</li> <li>get_offset_x(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>get_offset_y(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>reset_size(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>set_size(entity: <code>Any</code>, tile: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>)</li> <li>set_size_x(entity: <code>Any</code>, tile: <code>Any</code>, x: <code>Any</code>)</li> <li>set_size_y(entity: <code>Any</code>, tile: <code>Any</code>, y: <code>Any</code>)</li> <li>get_size_x(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>get_size_y(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>set_flip(entity: <code>Any</code>, tile: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>)</li> <li>set_flip_x(entity: <code>Any</code>, tile: <code>Any</code>, flip: <code>Any</code>)</li> <li>set_flip_y(entity: <code>Any</code>, tile: <code>Any</code>, flip: <code>Any</code>)</li> <li>get_flip_x(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>get_flip_y(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>set_visual(entity: <code>Any</code>, tile: <code>Any</code>, visual: <code>Any</code>)</li> <li>get_visual(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>set_angle(entity: <code>Any</code>, tile: <code>Any</code>, angle: <code>Any</code>)</li> <li>get_angle(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>set_color(entity: <code>Any</code>, tile: <code>Any</code>, color: <code>Any</code>)</li> <li>get_color(entity: <code>Any</code>, tile: <code>Any</code>)</li> </ul> <p> Tile.create(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, depth: <code>Any</code>, visual_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.destroy(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.destroy_at(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, depth: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.exists_at(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, depth: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_at(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, depth: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_all(entity: <code>Any</code>, into: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_all_at(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, into: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_all_at_depth(entity: <code>Any</code>, depth: <code>Any</code>, into: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_all_with_tag(entity: <code>Any</code>, tag: <code>Any</code>, into: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_all_with_visual(entity: <code>Any</code>, visual: <code>Any</code>, into: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.add_tag(entity: <code>Any</code>, tile: <code>Any</code>, tag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.remove_tag(entity: <code>Any</code>, tile: <code>Any</code>, tag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.has_tag(entity: <code>Any</code>, tile: <code>Any</code>, tag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_tags(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.clear_tags(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set(entity: <code>Any</code>, tile: <code>Any</code>, key: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get(entity: <code>Any</code>, tile: <code>Any</code>, key: <code>Any</code>, default: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_coord(entity: <code>Any</code>, tile: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_coord_x(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_coord_y(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_depth(entity: <code>Any</code>, tile: <code>Any</code>, depth: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_depth(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_offset(entity: <code>Any</code>, tile: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_offset_x(entity: <code>Any</code>, tile: <code>Any</code>, x: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_offset_y(entity: <code>Any</code>, tile: <code>Any</code>, y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_offset_x(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_offset_y(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.reset_size(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_size(entity: <code>Any</code>, tile: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_size_x(entity: <code>Any</code>, tile: <code>Any</code>, x: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_size_y(entity: <code>Any</code>, tile: <code>Any</code>, y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_size_x(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_size_y(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_flip(entity: <code>Any</code>, tile: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_flip_x(entity: <code>Any</code>, tile: <code>Any</code>, flip: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_flip_y(entity: <code>Any</code>, tile: <code>Any</code>, flip: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_flip_x(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_flip_y(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_visual(entity: <code>Any</code>, tile: <code>Any</code>, visual: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_visual(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_angle(entity: <code>Any</code>, tile: <code>Any</code>, angle: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_angle(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_color(entity: <code>Any</code>, tile: <code>Any</code>, color: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_color(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/tiles.modifier/#tiles","title":"Tiles","text":"<p><code>import \"luxe: system/tiles.modifier\" for Tiles</code></p> <p>no docs found</p> <ul> <li>create(entity: <code>Any</code>, grid_size_x: <code>Any</code>, grid_size_y: <code>Any</code>)</li> <li>create(entity: <code>Any</code>, asset: <code>Any</code>)</li> <li>destroy(entity: <code>Any</code>)</li> <li>clear(entity: <code>Any</code>)</li> <li>has(entity: <code>Any</code>)</li> <li>commit(entity: <code>Any</code>)</li> <li>set_grid_size(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>)</li> <li>get_grid_size(entity: <code>Any</code>)</li> <li>set_asset(entity: <code>Any</code>, asset_id: <code>Any</code>)</li> <li>get_asset_id(entity: <code>Any</code>)</li> <li>set_asset_id(entity: <code>Any</code>, asset_id: <code>Any</code>)</li> <li>define_source(entity: <code>Any</code>, source_id: <code>Any</code>, material: <code>Any</code>)</li> <li>undefine_source(entity: <code>Any</code>, source_id: <code>Any</code>)</li> <li>has_source(entity: <code>Any</code>, source_id: <code>Any</code>)</li> <li>define_visual(entity: <code>Any</code>, source_id: <code>Any</code>, visual_id: <code>Any</code>, options: <code>Any</code>)</li> <li>undefine_visual(entity: <code>Any</code>, source_id: <code>Any</code>, visual_id: <code>Any</code>)</li> <li>has_visual(entity: <code>Any</code>, visual_id: <code>Any</code>)</li> <li>get_bounds_rects(entity: <code>Any</code>, tiles: <code>Any</code>, into: <code>Any</code>)</li> </ul> <p> Tiles.create(entity: <code>Any</code>, grid_size_x: <code>Any</code>, grid_size_y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.create(entity: <code>Any</code>, asset: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.destroy(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.clear(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.has(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.commit(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.set_grid_size(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.get_grid_size(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.set_asset(entity: <code>Any</code>, asset_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.get_asset_id(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.set_asset_id(entity: <code>Any</code>, asset_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.define_source(entity: <code>Any</code>, source_id: <code>Any</code>, material: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.undefine_source(entity: <code>Any</code>, source_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.has_source(entity: <code>Any</code>, source_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.define_visual(entity: <code>Any</code>, source_id: <code>Any</code>, visual_id: <code>Any</code>, options: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.undefine_visual(entity: <code>Any</code>, source_id: <code>Any</code>, visual_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.has_visual(entity: <code>Any</code>, visual_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.get_bounds_rects(entity: <code>Any</code>, tiles: <code>Any</code>, into: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/transform.change.block/","title":"Transform.change.block","text":""},{"location":"api/v/2025.1.1/system/transform.change.block/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/system/transform.change.block/#luxe-systemtransformchangeblock-module","title":"<code>luxe: system/transform.change.block</code> module","text":"<ul> <li>TransformChange </li> </ul>"},{"location":"api/v/2025.1.1/system/transform.change.block/#transformchange","title":"TransformChange","text":"<p><code>import \"luxe: system/transform.change.block\" for TransformChange</code></p> <p>no docs found</p> <ul> <li><code>var entity : Num = 0</code></li> <li><code>var pos : Float3 = [0, 0, 0]</code></li> <li><code>var rotation : Float4 = [0, 0, 0, 1]</code></li> <li><code>var scale : Float3 = [1, 1, 1]</code></li> <li><code>var tag : String = \"unknown\"</code></li> </ul>"},{"location":"api/v/2025.1.1/system/transform.modifier/","title":"Transform.modifier","text":""},{"location":"api/v/2025.1.1/system/transform.modifier/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/system/transform.modifier/#luxe-systemtransformmodifier-module","title":"<code>luxe: system/transform.modifier</code> module","text":"<ul> <li>Data </li> <li>System </li> <li>Transform </li> <li>TransformApplyMask </li> </ul>"},{"location":"api/v/2025.1.1/system/transform.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/transform.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var pos : Double3 = [0, 0, 0]</code></li> <li><code>var rotation : Float3 = [0, 0, 0]</code></li> <li><code>var scale : Float3 = [1, 1, 1]</code></li> <li><code>var link : Link = null</code></li> </ul>"},{"location":"api/v/2025.1.1/system/transform.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/transform.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/transform.modifier/#transform","title":"Transform","text":"<p><code>import \"luxe: system/transform.modifier\" for Transform</code></p> <p>A transform modifier defines where a entity is. That includes position, rotation and scale. A <code>Transform</code> can also be linked to another <code>Transform</code>, in which case its values are relative to their link target.</p> <p>While not all entities need to be \"somewhere\" locally, a lot of them do, which is when this modifier is used. Other modifiers on the same entity aren't required to read and react to the <code>Transform</code>, but most do, allowing you to use this to move things (like Sprites, Meshes, Physics shapes, etc...).</p> <ul> <li>id</li> <li>create(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>create(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>create(entity: <code>Entity</code>)</li> <li>destroy(entity: <code>Entity</code>)</li> <li>has(entity: <code>Entity</code>)</li> <li>get_link(entity: <code>Entity</code>)</li> <li>get_linked(entity: <code>Entity</code>)</li> <li>link(entity: <code>Entity</code>, target_entity: <code>Entity</code>, reset_local: <code>Bool</code>)</li> <li>link(entity: <code>Entity</code>, target_entity: <code>Entity</code>)</li> <li>unlink(entity: <code>Entity</code>, reset_local: <code>Bool</code>)</li> <li>unlink(entity: <code>Entity</code>)</li> <li>look_at_and_move(entity: <code>Entity</code>, pos: <code>Vec</code>, target: <code>Vec</code>, up: <code>Vec</code>, invert: <code>Bool</code>)</li> <li>look_at_and_move(entity: <code>Entity</code>, pos: <code>Vec</code>, target: <code>Vec</code>, up: <code>Vec</code>)</li> <li>look_at_and_move(entity: <code>Entity</code>, pos: <code>Vec</code>, target: <code>Vec</code>)</li> <li>look_at(entity: <code>Entity</code>, target: <code>Vec</code>, up: <code>Vec</code>, invert: <code>Bool</code>)</li> <li>look_at(entity: <code>Entity</code>, target: <code>Vec</code>, up: <code>Vec</code>)</li> <li>look_at(entity: <code>Entity</code>, target: <code>Vec</code>)</li> <li>set_snap(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>set_snap(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>set_pos(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>set_pos(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>set_pos_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>set_pos_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>set_pos_x(entity: <code>Entity</code>, x: <code>Num</code>)</li> <li>set_pos_y(entity: <code>Entity</code>, y: <code>Num</code>)</li> <li>set_pos_z(entity: <code>Entity</code>, z: <code>Num</code>)</li> <li>set_pos_x_world(entity: <code>Entity</code>, x: <code>Num</code>)</li> <li>set_pos_y_world(entity: <code>Entity</code>, y: <code>Num</code>)</li> <li>set_pos_z_world(entity: <code>Entity</code>, z: <code>Num</code>)</li> <li>set_scale(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>set_scale(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>set_rotation_slerp_angle_axis(entity: <code>Entity</code>, axis: <code>Vec</code>, from: <code>Num</code>, to: <code>Num</code>, t: <code>Num</code>)</li> <li>set_rotation_slerp_angle_axis_world(entity: <code>Entity</code>, axis: <code>Vec</code>, from: <code>Num</code>, to: <code>Num</code>, t: <code>Num</code>)</li> <li>set_rotation_slerp(entity: <code>Entity</code>, from: <code>Vec</code>, to: <code>Vec</code>, t: <code>Num</code>)</li> <li>set_rotation_slerp_world(entity: <code>Entity</code>, from: <code>Vec</code>, to: <code>Vec</code>, t: <code>Num</code>)</li> <li>set_rotation(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>)</li> <li>set_rotation_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>)</li> <li>set_angle_axis(entity: <code>Entity</code>, degrees: <code>Any</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>set_angle_axis_world(entity: <code>Entity</code>, degrees: <code>Any</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>set_euler(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>set_euler_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>set_euler_x(entity: <code>Entity</code>, x: <code>Num</code>)</li> <li>set_euler_y(entity: <code>Entity</code>, y: <code>Num</code>)</li> <li>set_euler_z(entity: <code>Entity</code>, z: <code>Num</code>)</li> <li>set_euler_x_world(entity: <code>Entity</code>, x: <code>Num</code>)</li> <li>set_euler_y_world(entity: <code>Entity</code>, y: <code>Num</code>)</li> <li>set_euler_z_world(entity: <code>Entity</code>, z: <code>Num</code>)</li> <li>rotate_angle_axis_slerp(entity: <code>Entity</code>, axis: <code>Vec</code>, angle_amount: <code>Num</code>)</li> <li>rotate_angle_axis_slerp_world(entity: <code>Entity</code>, axis: <code>Vec</code>, angle_amount: <code>Num</code>)</li> <li>rotate_around_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, axis_x: <code>Num</code>, axis_y: <code>Num</code>, axis_z: <code>Num</code>, degrees: <code>Num</code>)</li> <li>rotate_around(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, axis_x: <code>Num</code>, axis_y: <code>Num</code>, axis_z: <code>Num</code>, degrees: <code>Num</code>)</li> <li>rotate_angle_axis(entity: <code>Entity</code>, degrees: <code>Any</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>rotate_angle_axis_world(entity: <code>Entity</code>, degrees: <code>Any</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>rotate_euler(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>rotate_euler_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>translate(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>translate(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>get_pos(entity: <code>Entity</code>)</li> <li>get_pos_x(entity: <code>Entity</code>)</li> <li>get_pos_y(entity: <code>Entity</code>)</li> <li>get_pos_z(entity: <code>Entity</code>)</li> <li>get_pos_world(entity: <code>Entity</code>)</li> <li>get_pos_world_unsnapped(entity: <code>Entity</code>)</li> <li>get_pos_x_world(entity: <code>Entity</code>)</li> <li>get_pos_y_world(entity: <code>Entity</code>)</li> <li>get_pos_z_world(entity: <code>Entity</code>)</li> <li>rotate2D(entity: <code>Entity</code>, degrees: <code>Num</code>)</li> <li>set_angle2D(entity: <code>Entity</code>, degrees: <code>Num</code>)</li> <li>set_angle2D_world(entity: <code>Entity</code>, degrees: <code>Num</code>)</li> <li>get_angle2D(entity: <code>Entity</code>)</li> <li>get_angle2D_world(entity: <code>Entity</code>)</li> <li>set_depth2D(entity: <code>Entity</code>, depth: <code>Num</code>)</li> <li>get_depth2D(entity: <code>Entity</code>)</li> <li>set_depth2D_world(entity: <code>Entity</code>, depth: <code>Num</code>)</li> <li>get_depth2D_world(entity: <code>Entity</code>)</li> <li>get_world_matrix(entity: <code>Entity</code>, into_matrix: <code>Floats</code>)</li> <li>get_rotation(entity: <code>Entity</code>)</li> <li>get_rotation_world(entity: <code>Entity</code>)</li> <li>get_rotation_matrix(entity: <code>Entity</code>, into_matrix: <code>Floats</code>)</li> <li>get_euler(entity: <code>Entity</code>)</li> <li>get_euler_x(entity: <code>Entity</code>)</li> <li>get_euler_y(entity: <code>Entity</code>)</li> <li>get_euler_z(entity: <code>Entity</code>)</li> <li>get_euler_world(entity: <code>Entity</code>)</li> <li>get_euler_x_world(entity: <code>Entity</code>)</li> <li>get_euler_y_world(entity: <code>Entity</code>)</li> <li>get_euler_z_world(entity: <code>Entity</code>)</li> <li>get_scale(entity: <code>Entity</code>)</li> <li>get_scale_x(entity: <code>Entity</code>)</li> <li>get_scale_y(entity: <code>Entity</code>)</li> <li>get_scale_z(entity: <code>Entity</code>)</li> <li>get_scale_world(entity: <code>Entity</code>)</li> <li>get_scale_x_world(entity: <code>Entity</code>)</li> <li>get_scale_y_world(entity: <code>Entity</code>)</li> <li>get_scale_z_world(entity: <code>Entity</code>)</li> <li>get_right(entity: <code>Entity</code>)</li> <li>get_forward(entity: <code>Entity</code>)</li> <li>get_up(entity: <code>Entity</code>)</li> <li>sync(entity: <code>Entity</code>)</li> <li>sync_block(entity: <code>Entity</code>, mask: <code>TransformApplyMask</code>)</li> <li>sync_world(world: <code>World</code>)</li> <li>transform_by(entity: <code>Entity</code>, other: <code>Entity</code>)</li> <li>scale_by(entity: <code>Entity</code>, scale: <code>Float3</code>, origin: <code>Float3</code>)</li> <li>rotate_euler_by(entity: <code>Entity</code>, euler: <code>Float3</code>, origin: <code>Float3</code>)</li> <li>local_vector_to_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>world_vector_to_local(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>local_dir_to_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>world_dir_to_local(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>local_point_to_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>local_point_to_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, scaled: <code>Bool</code>)</li> <li>world_point_to_local(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>world_point_to_local(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, scaled: <code>Bool</code>)</li> <li>listen_all(world: <code>World</code>, fn: <code>Fn</code>)</li> <li>unlisten_all(world: <code>World</code>, handle: <code>Handle</code>)</li> <li>listen(entity: <code>Entity</code>, fn: <code>Fn</code>)</li> <li>unlisten(entity: <code>Entity</code>, handle: <code>Handle</code>)</li> </ul> <p> Transform.id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Transform.create(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Attach a <code>Transform</code> modifier to an entity with the given <code>x</code> and <code>y</code> position (with a z of 0)   </p> <p> Transform.create(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Attach a <code>Transform</code> modifier to an entity with the given <code>x</code>, <code>y</code> and <code>z</code> position   </p> <p> Transform.create(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Attach a <code>Transform</code> modifier to an entity.   </p> <p> Transform.destroy(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Detatch a <code>Transform</code> modifier from an entity.   </p> <p> Transform.has(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>get whether an entity has an attached <code>Transform</code>.   </p> <p> Transform.get_link(entity: <code>Entity</code>) \u00b6 returns <code>Entity</code></p> <p>Get what entity this entity is linked to. So what entity the position/rotation/scale of this transform are relative to. Linked to entity always has a <code>Transform</code> of its own. In case <code>Transform</code> isn't linked to anything, returns <code>null</code> and transformations are global.   </p> <p> Transform.get_linked(entity: <code>Entity</code>) \u00b6 returns <code>List</code></p> <p>Get what entities are linked to this entity (opposite relationship as <code>get_link</code>). Transformation values of linked entities are relative to this entity.   </p> <p> Transform.link(entity: <code>Entity</code>, target_entity: <code>Entity</code>, reset_local: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Link one <code>Transform</code> to another. The <code>Transform</code> values will now be be relative to the link target, meaning the link target <code>Transform</code> position, rotation and scale all apply to the local position, rotation, scale of this <code>Transform</code>. When using non-uniform scales somewhere in your transform link hierarchy you can get transform deformations that would not be possible with just a single transform.</p> <p>In other environments, this transform link is often part of the object hierarchy, but here it's specific to transforms and other hierarchies aren't bound to follow the same links.   </p> <p> Transform.link(entity: <code>Entity</code>, target_entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Link one <code>Transform</code> to another. The <code>Transform</code> values will now be be relative to the link target, meaning the link target <code>Transform</code> position, rotation and scale all apply to the local position, rotation, scale of this <code>Transform</code>. When using non-uniform scales somewhere in your transform link hierarchy you can get transform deformations that would not be possible with just a single transform.</p> <p>In other environments, this transform link is often part of the object hierarchy, but here it's specific to transforms and other hierarchies aren't bound to follow the same links.   </p> <p> Transform.unlink(entity: <code>Entity</code>, reset_local: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Unlink a <code>Transform</code>. Local position will be kept (unless reset), so if your parent isnt at the origin, expect the transform to move, or save and reapply the world position.   </p> <p> Transform.unlink(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Unlink a <code>Transform</code>. Local position will be kept, so if your parent isnt at the origin, expect the transform to move, or save and reapply the world position.</p> <pre><code>  //get the current jar position\n  var pos = Transform.get_pos_world(_jar)\n  //unlink the jar from the player first\n  Transform.unlink(_jar)\n  //set the position for the jar, which now refers \n  //to world space since the jar has no parent\n  //this makes the jar stay in the same place\n  Transform.set_pos(_jar, pos.x, pos.y, pos.z)\n</code></pre> <p> Transform.look_at_and_move(entity: <code>Entity</code>, pos: <code>Vec</code>, target: <code>Vec</code>, up: <code>Vec</code>, invert: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Move <code>Transform</code> somewhere else, then look towards target position.   </p> <p> Transform.look_at_and_move(entity: <code>Entity</code>, pos: <code>Vec</code>, target: <code>Vec</code>, up: <code>Vec</code>) \u00b6 returns <code>None</code></p> <p>Move <code>Transform</code> somewhere else, then look towards target position.   </p> <p> Transform.look_at_and_move(entity: <code>Entity</code>, pos: <code>Vec</code>, target: <code>Vec</code>) \u00b6 returns <code>None</code></p> <p>Move <code>Transform</code> somewhere else, then look towards target position.   </p> <p> Transform.look_at(entity: <code>Entity</code>, target: <code>Vec</code>, up: <code>Vec</code>, invert: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Rotate <code>Transform</code> to look at a position in worldspace,        rotated around that new view axis so the <code>Transform</code> 'up' aligns with the <code>up</code> input as closely as possible.   </p> <p> Transform.look_at(entity: <code>Entity</code>, target: <code>Vec</code>, up: <code>Vec</code>) \u00b6 returns <code>None</code></p> <p>Rotate <code>Transform</code> to look at a position in worldspace,        rotated around that new view axis so the <code>Transform</code> 'up' aligns with the <code>up</code> input as closely as possible.   </p> <p> Transform.look_at(entity: <code>Entity</code>, target: <code>Vec</code>) \u00b6 returns <code>None</code></p> <p>Rotate <code>Transform</code> to look at a position in worldspace.   </p> <p> Transform.set_snap(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set <code>Transform</code> position to snap at specific intervals. (midpoints round away from 0)</p> <pre><code>  var entity = Entity.create(world)\n  Transform.create(entity)\n  Transform.set_snap(entity, 2, 2, 2)\n  Transform.set_pos(entity, 0.5, 1.5, -3)\n  Log.print(Transform.get_pos(entity)) //[0, 2, -4]\n</code></pre> <p> Transform.set_snap(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set <code>Transform</code> position to snap at specific intervals.   </p> <p> Transform.set_pos(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set local position of a <code>Transform</code>.   </p> <p> Transform.set_pos(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set local position of a <code>Transform</code>.   </p> <p> Transform.set_pos_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set global position of a <code>Transform</code>.   </p> <p> Transform.set_pos_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set global position of a <code>Transform</code>.   </p> <p> Transform.set_pos_x(entity: <code>Entity</code>, x: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set <code>x</code> component of local <code>Transform</code> pos.   </p> <p> Transform.set_pos_y(entity: <code>Entity</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set <code>y</code> component of local <code>Transform</code> pos.   </p> <p> Transform.set_pos_z(entity: <code>Entity</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set <code>z</code> component of local <code>Transform</code> pos.   </p> <p> Transform.set_pos_x_world(entity: <code>Entity</code>, x: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set <code>x</code> component of global <code>Transform</code> pos.   </p> <p> Transform.set_pos_y_world(entity: <code>Entity</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set <code>y</code> component of global <code>Transform</code> pos.   </p> <p> Transform.set_pos_z_world(entity: <code>Entity</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set <code>z</code> component of global <code>Transform</code> pos.   </p> <p> Transform.set_scale(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set x and y scale of a <code>Transform</code>, keeping z scale unchanged.   </p> <p> Transform.set_scale(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set local scale of a <code>Transform</code>. Setting the scale in a global context isnt available, as link hierarchies with rotations and nonuniform scalings can lead to weird and hard to predict states for that.   </p> <p> Transform.set_rotation_slerp_angle_axis(entity: <code>Entity</code>, axis: <code>Vec</code>, from: <code>Num</code>, to: <code>Num</code>, t: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.set_rotation_slerp_angle_axis_world(entity: <code>Entity</code>, axis: <code>Vec</code>, from: <code>Num</code>, to: <code>Num</code>, t: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.set_rotation_slerp(entity: <code>Entity</code>, from: <code>Vec</code>, to: <code>Vec</code>, t: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.set_rotation_slerp_world(entity: <code>Entity</code>, from: <code>Vec</code>, to: <code>Vec</code>, t: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.set_rotation(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set local rotation in quaternions.</p> <p>(Quaternions are how rotations are handled by the engine internally, though it can be hard to understand how to manipulate them, so feel free to stick to euler angles using <code>set_euler(entity, x, y, z)</code>.)   </p> <p> Transform.set_rotation_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set global rotation in quaternions.</p> <p>(Quaternions are how rotations are handled by the engine internally, though it can be hard to understand how to manipulate them, so feel free to stick to euler angles using <code>set_euler_world(entity, x, y, z)</code>.)   </p> <p> Transform.set_angle_axis(entity: <code>Entity</code>, degrees: <code>Any</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set local rotation as a rotation around an axis.</p> <p>Rotation direction is left-handed (counter-clockwise when looking in the direction of the axis.)   </p> <p> Transform.set_angle_axis_world(entity: <code>Entity</code>, degrees: <code>Any</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set global rotation as a rotation around an axis.</p> <p>Rotation direction is left-handed (counter-clockwise when looking in the direction of the axis.)   </p> <p> Transform.set_euler(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set local rotation as xyz euler angles.   </p> <p> Transform.set_euler_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set global rotation as xyz euler angles.   </p> <p> Transform.set_euler_x(entity: <code>Entity</code>, x: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.set_euler_y(entity: <code>Entity</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.set_euler_z(entity: <code>Entity</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.set_euler_x_world(entity: <code>Entity</code>, x: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.set_euler_y_world(entity: <code>Entity</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.set_euler_z_world(entity: <code>Entity</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.rotate_angle_axis_slerp(entity: <code>Entity</code>, axis: <code>Vec</code>, angle_amount: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.rotate_angle_axis_slerp_world(entity: <code>Entity</code>, axis: <code>Vec</code>, angle_amount: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.rotate_around_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, axis_x: <code>Num</code>, axis_y: <code>Num</code>, axis_z: <code>Num</code>, degrees: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Rotate around an axis in world space.   </p> <p> Transform.rotate_around(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, axis_x: <code>Num</code>, axis_y: <code>Num</code>, axis_z: <code>Num</code>, degrees: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Rotate around an axis in local space.   </p> <p> Transform.rotate_angle_axis(entity: <code>Entity</code>, degrees: <code>Any</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Rotate on the spot around an axis in local coordinates.   </p> <p> Transform.rotate_angle_axis_world(entity: <code>Entity</code>, degrees: <code>Any</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Rotate on the spot around an axis in global coordinates.   </p> <p> Transform.rotate_euler(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Rotate by euler angles in local space.   </p> <p> Transform.rotate_euler_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Rotate by euler angles in global space.   </p> <p> Transform.translate(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Move <code>Transform</code> in local space.   </p> <p> Transform.translate(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Move <code>Transform</code> in local space.   </p> <p> Transform.get_pos(entity: <code>Entity</code>) \u00b6 returns <code>Vec</code></p> <p>Get position local space (relative to link <code>Transform</code>).   </p> <p> Transform.get_pos_x(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_pos_y(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_pos_z(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_pos_world(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>Get position global space.   </p> <p> Transform.get_pos_world_unsnapped(entity: <code>Entity</code>) \u00b6 returns <code>Vec</code></p> <p>Get position global space independently of <code>set_snap</code> settings.   </p> <p> Transform.get_pos_x_world(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_pos_y_world(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_pos_z_world(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.rotate2D(entity: <code>Entity</code>, degrees: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Rotate the <code>Transform</code> in local space.</p> <p>This technically rotates around the z axis, since thats the only axis we care about in 2d contexts.   </p> <p> Transform.set_angle2D(entity: <code>Entity</code>, degrees: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the 2d angle in local space.</p> <p>This is technically the same as <code>set_euler_z</code>(doesnt touch x or y), since thats the only axis we care about in 2d contexts.   </p> <p> Transform.set_angle2D_world(entity: <code>Entity</code>, degrees: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the 2d angle in global space.</p> <p>This is technically the same as <code>set_euler_z</code>(doesnt touch x or y), since thats the only axis we care about in 2d contexts.   </p> <p> Transform.get_angle2D(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>Get the 2d angle in local space.</p> <p>This is technically the same as <code>get_euler_z</code>, since thats the only axis we care about in 2d contexts.   </p> <p> Transform.get_angle2D_world(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>Get the 2d angle in global space.</p> <p>This is technically the same as <code>get_euler_z_world</code>, since thats the only axis we care about in 2d contexts.   </p> <p> Transform.set_depth2D(entity: <code>Entity</code>, depth: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the local depth (relative to link <code>Transform</code>).</p> <p>This is technically the same as <code>set_pos_z</code>.   </p> <p> Transform.get_depth2D(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>Get the local depth (relative to link <code>Transform</code>).</p> <p>This is technically the same as <code>get_pos_z</code>.   </p> <p> Transform.set_depth2D_world(entity: <code>Entity</code>, depth: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the global depth.</p> <p>This is technically the same as <code>set_pos_z_world</code>.   </p> <p> Transform.get_depth2D_world(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>Get the global depth.</p> <p>This is technically the same as <code>get_pos_z_world</code>.   </p> <p> Transform.get_world_matrix(entity: <code>Entity</code>, into_matrix: <code>Floats</code>) \u00b6 returns <code>None</code></p> <p>Get 4x4 world transform matrix (column major array).</p> <pre><code>  var ent = Entity.create(app.world)\n  Transform.create(ent)\n  Transform.set_pos(ent, 2, 3, 4)\n  var matrix = Floats.new(16)\n  Transform.get_world_matrix(ent, matrix)\n  //matrix is now [1,0,0,0, 0,1,0,0, 0,0,1,0, 2,3,4,1]\n</code></pre> <p> Transform.get_rotation(entity: <code>Entity</code>) \u00b6 returns <code>Quat</code></p> <p>Get local quaternion rotation.</p> <p>(Note that quaternions can be unfamiliar and hard to manipulate, so if you're not familiar with them you might want to use <code>get_euler</code> instead)   </p> <p> Transform.get_rotation_world(entity: <code>Entity</code>) \u00b6 returns <code>Quat</code></p> <p>Get global quaternion rotation.</p> <p>(Note that quaternions can be unfamiliar and hard to manipulate, so if you're not familiar with them you might want to use <code>get_euler_world</code> instead)   </p> <p> Transform.get_rotation_matrix(entity: <code>Entity</code>, into_matrix: <code>Floats</code>) \u00b6 returns <code>None</code></p> <p>Get 4x4 world rotation matrix (column major array).   </p> <p> Transform.get_euler(entity: <code>Entity</code>) \u00b6 returns <code>Vec</code></p> <p>Get local euler angles.   </p> <p> Transform.get_euler_x(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_euler_y(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_euler_z(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_euler_world(entity: <code>Entity</code>) \u00b6 returns <code>Vec</code></p> <p>Get global euler angles.   </p> <p> Transform.get_euler_x_world(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_euler_y_world(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_euler_z_world(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_scale(entity: <code>Entity</code>) \u00b6 returns <code>Vec</code></p> <p>Get local scale.   </p> <p> Transform.get_scale_x(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_scale_y(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_scale_z(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_scale_world(entity: <code>Entity</code>) \u00b6 returns <code>Vec</code></p> <p>Get global scale. Note that through rotations and non-uniform scale in the transform link hierarchy, getting an accurate world scale might be impossible, making this lossy.   </p> <p> Transform.get_scale_x_world(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_scale_y_world(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_scale_z_world(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_right(entity: <code>Entity</code>) \u00b6 returns <code>Vec</code></p> <p>Get the \"right\" direction of the <code>Transform</code>. Same direction as the red arrow in the translation gizmo in the editor.   </p> <p> Transform.get_forward(entity: <code>Entity</code>) \u00b6 returns <code>Vec</code></p> <p>Get the \"forward\" direction of the <code>Transform</code>. Same direction as the green arrow in the translation gizmo in the editor.   </p> <p> Transform.get_up(entity: <code>Entity</code>) \u00b6 returns <code>Vec</code></p> <p>Get the \"up\" direction of the <code>Transform</code>. Same direction as the blue arrow in the translation gizmo in the editor.   </p> <p> Transform.sync(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Forces a sync of the <code>Transform</code>. Will trigger listen functions. This usually shouldn't be needed as <code>Transform</code> sync automatically when updated.   </p> <p> Transform.sync_block(entity: <code>Entity</code>, mask: <code>TransformApplyMask</code>) \u00b6 returns <code>None</code></p> <p>Forces a sync of the <code>Transform</code> block data. Will trigger block listener functions. This usually shouldn't be needed as <code>Transform</code> sync automatically when updated.   </p> <p> Transform.sync_world(world: <code>World</code>) \u00b6 returns <code>None</code></p> <p>Forces a sync of all <code>Transform</code> in a world. Will trigger listen functions. This usually shouldn't be needed as <code>Transform</code> sync automatically when updated.   </p> <p> Transform.transform_by(entity: <code>Entity</code>, other: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Transform the given entity by another entities transform. e.g set world using the other as a parent   </p> <p> Transform.scale_by(entity: <code>Entity</code>, scale: <code>Float3</code>, origin: <code>Float3</code>) \u00b6 returns <code>None</code></p> <p>Transform the given entity scale by the value around the given origin   </p> <p> Transform.rotate_euler_by(entity: <code>Entity</code>, euler: <code>Float3</code>, origin: <code>Float3</code>) \u00b6 returns <code>None</code></p> <p>Transform the given entity rotation around the origin, by euler amount (radians)   </p> <p> Transform.local_vector_to_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>Vec</code></p> <p>Convert a vector from local space to world space. (applies scale and rotation, but not translation)   </p> <p> Transform.world_vector_to_local(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>Vec</code></p> <p>Convert a vector from world space to local space. (applies scale and rotation, but not translation)   </p> <p> Transform.local_dir_to_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>Vec</code></p> <p>Convert a direction from local space to world space. (applies only rotation, not rotation or translation)   </p> <p> Transform.world_dir_to_local(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>Vec</code></p> <p>Convert a direction from world space to local space. (applies only rotation, not rotation or translation)   </p> <p> Transform.local_point_to_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>Vec</code></p> <p>Convert a point from local space to world space. (applies translation, rotation and scale)   </p> <p> Transform.local_point_to_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, scaled: <code>Bool</code>) \u00b6 returns <code>Vec</code></p> <p>Convert a point from local space to world space. (applies translation, rotation and optionally, scale)   </p> <p> Transform.world_point_to_local(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>Vec</code></p> <p>Convert a point from world space to local space. (applies translation, rotation and scale)   </p> <p> Transform.world_point_to_local(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, scaled: <code>Bool</code>) \u00b6 returns <code>Vec</code></p> <p>Convert a point from world space to local space. (applies translation, rotation and optionally, scale)   </p> <p> Transform.listen_all(world: <code>World</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>no docs found   </p> <p> Transform.unlisten_all(world: <code>World</code>, handle: <code>Handle</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.listen(entity: <code>Entity</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>no docs found   </p> <p> Transform.unlisten(entity: <code>Entity</code>, handle: <code>Handle</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/transform.modifier/#transformapplymask","title":"TransformApplyMask","text":"<p><code>import \"luxe: system/transform.modifier\" for TransformApplyMask</code></p> <p>no docs found</p> <ul> <li>pos</li> <li>scale</li> <li>rotation</li> <li>modified</li> <li>all_modified</li> </ul> <p> TransformApplyMask.pos \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TransformApplyMask.scale \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TransformApplyMask.rotation \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TransformApplyMask.modified \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TransformApplyMask.all_modified \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/values.modifier/","title":"Values.modifier","text":""},{"location":"api/v/2025.1.1/system/values.modifier/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/system/values.modifier/#luxe-systemvaluesmodifier-module","title":"<code>luxe: system/values.modifier</code> module","text":"<ul> <li>Data </li> <li>Value </li> <li>Values </li> <li>ValuesKind </li> <li>ValuesType </li> </ul>"},{"location":"api/v/2025.1.1/system/values.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/values.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var values : List = []</code></li> </ul>"},{"location":"api/v/2025.1.1/system/values.modifier/#value","title":"Value","text":"<p><code>import \"luxe: system/values.modifier\" for Value</code></p> <p>no docs found</p> <ul> <li><code>var kind : ValuesKind = ValuesKind.number</code></li> <li><code>var name : String = \"value\"</code></li> <li><code>var number : Num = 0</code></li> <li><code>var string : String = \"\"</code></li> <li><code>var boolean : Bool = false</code></li> <li><code>var float2 : Float2 = [0, 0]</code></li> <li><code>var float3 : Float3 = [0, 0, 0]</code></li> <li><code>var float4 : Float4 = [0, 0, 0, 0]</code></li> <li><code>var color : Color = [1, 1, 1, 1]</code></li> </ul>"},{"location":"api/v/2025.1.1/system/values.modifier/#values","title":"Values","text":"<p><code>import \"luxe: system/values.modifier\" for Values</code></p> <p>Values is a modifier that lets you store Key -&gt; Value pairs. Store values like numbers,  strings, and colors on an entity, which can then be accessed by name (a Key).</p> <pre><code>//we can use an enum for keys\nclass Keys {\n  static watered { \"watered\" }\n  static apples { \"apples\" }\n}\nvar tree = Entity.create(world)\nValues.create(tree)\nValues.set(tree, Keys.watered, true)\nValues.set(tree, Keys.apples, 10)\nValues.set(tree, \"keys are strings\", true)\n\nvar watered = Values.get(tree, Keys.watered, false)\nvar apples = Values.get(tree, Keys.apples, -1)\nLog.print(\"The tree is %(watered ? \"watered\" : \"thirsty\") and has %(apples) apples!\")\n</code></pre> <ul> <li>create(entity: <code>Entity</code>)</li> <li>destroy(entity: <code>Entity</code>)</li> <li>has(entity: <code>Entity</code>)</li> <li>has_key(entity: <code>Entity</code>, key: <code>String</code>)</li> <li>remove_key(entity: <code>Entity</code>, key: <code>String</code>)</li> <li>get_keys(entity: <code>Entity</code>)</li> <li>get(entity: <code>Entity</code>, key: <code>String</code>, default: <code>Any</code>)</li> <li>set(entity: <code>Entity</code>, key: <code>String</code>, value: <code>Any</code>)</li> </ul> <p> Values.create(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Attach a <code>Values</code> modifier to <code>entity</code>.</p> <pre><code>var entity = Entity.create(world)\nValues.create(entity)\n</code></pre> <p> Values.destroy(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Detach and destroy the <code>Values</code> attached to <code>entity</code></p> <pre><code>Values.destroy(entity)\n</code></pre> <p> Values.has(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if <code>entity</code> has a <code>Values</code> modifier attached.</p> <pre><code>if(Values.has(entity)) {\n  Log.print(\"Has a Values modifier!\")\n}\n</code></pre> <p> Values.has_key(entity: <code>Entity</code>, key: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true the entity's Values modifier has a value with the given 'key'</p> <pre><code>if(Values.has_key(entity, \"apples\")) {\n  Log.print(\"The tree has some apples!\")\n}\n</code></pre> <p> Values.remove_key(entity: <code>Entity</code>, key: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Removes a value by key from 'entity's Values modifier, if it exists</p> <pre><code>Values.remove_key(tree, \"apples\")\n</code></pre> <p> Values.get_keys(entity: <code>Entity</code>) \u00b6 returns <code>List</code></p> <p>Get a List of all the String keys for values on 'entity's Values modifier</p> <pre><code>var keys = Values.get_keys(grass)\nfor (key in keys) {\n  Log.print(\"Has Value Key: %(key)\")\n}\n</code></pre> <p> Values.get(entity: <code>Entity</code>, key: <code>String</code>, default: <code>Any</code>) \u00b6 returns <code>Any</code></p> <p>Get the current value stored with <code>key</code> on the Values modifier on <code>entity</code>, with a default value which is returned if the key isn't found.</p> <pre><code>var seeds = Values.get(watermelon, \"seeds\", 0)\nLog.print(\"The watermelon has %(seeds) seeds!\")\n</code></pre> <p> Values.set(entity: <code>Entity</code>, key: <code>String</code>, value: <code>Any</code>) \u00b6 returns <code>None</code></p> <p>Set the value stored at the 'key' on the Values modifier on 'entity'.</p> <pre><code>if(Values.has(seed)) {\n  Values.set(seed, \"planted\", true)\n}\n</code></pre>"},{"location":"api/v/2025.1.1/system/values.modifier/#valueskind","title":"ValuesKind","text":"<p><code>import \"luxe: system/values.modifier\" for ValuesKind</code></p> <p>no docs found</p> <ul> <li>number</li> <li>string</li> <li>boolean</li> <li>float2</li> <li>float3</li> <li>float4</li> <li>color</li> </ul> <p> ValuesKind.number \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesKind.string \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesKind.boolean \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesKind.float2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesKind.float3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesKind.float4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesKind.color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/values.modifier/#valuestype","title":"ValuesType","text":"<p><code>import \"luxe: system/values.modifier\" for ValuesType</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>bool</li> <li>number</li> <li>string</li> <li>float2</li> <li>float3</li> <li>float4</li> <li>name(value: <code>Any</code>)</li> </ul> <p> ValuesType.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesType.bool \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesType.number \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesType.string \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesType.float2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesType.float3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesType.float4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesType.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/vfx.modifier/","title":"Vfx.modifier","text":""},{"location":"api/v/2025.1.1/system/vfx.modifier/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/system/vfx.modifier/#luxe-systemvfxmodifier-module","title":"<code>luxe: system/vfx.modifier</code> module","text":"<ul> <li>Data </li> <li>System </li> <li>Vfx </li> </ul>"},{"location":"api/v/2025.1.1/system/vfx.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/vfx.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var asset : Asset = null</code></li> </ul>"},{"location":"api/v/2025.1.1/system/vfx.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/vfx.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/vfx.modifier/#vfx","title":"Vfx","text":"<p><code>import \"luxe: system/vfx.modifier\" for Vfx</code></p> <p>no docs found</p>"},{"location":"api/v/2025.1.1/system/wires.modifier/","title":"Wires.modifier","text":""},{"location":"api/v/2025.1.1/system/wires.modifier/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/system/wires.modifier/#luxe-systemwiresmodifier-module","title":"<code>luxe: system/wires.modifier</code> module","text":"<ul> <li>Connection </li> <li>Data </li> <li>System </li> <li>WireNode </li> <li>WireTarget </li> <li>Wires </li> </ul>"},{"location":"api/v/2025.1.1/system/wires.modifier/#connection","title":"Connection","text":"<p><code>import \"luxe: system/wires.modifier\" for Connection</code></p> <p>no docs found</p> <ul> <li><code>var from : WireTarget = Object</code></li> <li><code>var to : WireTarget = Object</code></li> </ul>"},{"location":"api/v/2025.1.1/system/wires.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/wires.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var connections : List = []</code></li> </ul>"},{"location":"api/v/2025.1.1/system/wires.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/wires.modifier\" for System</code></p> <p>no docs found</p> <ul> <li><code>var nodes : Map = {}</code></li> <li><code>var nodes_from_panel : Map = {}</code></li> <li><code>var right_panel : Control = 0</code></li> <li><code>var left_panel : Control = 0</code></li> <li><code>var world_editor : Any = null</code></li> <li>new(world: <code>World</code>)</li> <li>init(world: <code>World</code>)</li> <li>copy_target(src: <code>WireTarget</code>, to: <code>WireTarget</code>)</li> <li>refresh_entity(node: <code>WireNode</code>)</li> <li>get_drop_node(x: <code>Num</code>, y: <code>Num</code>)</li> <li>remove_block_connection(entity: <code>Entity</code>, target: <code>WireTarget</code>)</li> <li>find_connection_index(entity: <code>Entity</code>, target: <code>WireTarget</code>)</li> <li>find_wire_in_list(wires: <code>List</code>, wire_id: <code>Num</code>)</li> <li>find_wire(target: <code>WireTarget</code>)</li> <li>make_placeholder_wire(entity: <code>Entity</code>, do_doc: <code>Bool</code>)</li> <li>make_node(out: <code>Bool</code>, entity: <code>Entity</code>, from: <code>WireTarget</code>, to: <code>WireTarget</code>)</li> <li>refresh_wires(window: <code>UIPanel</code>, window_w: <code>Num</code>, but: <code>UIButton</code>)</li> <li>editor_init(world: <code>World</code>)</li> <li>editor_attach(entity: <code>Entity</code>, wires: <code>Data</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p> <p> System.init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.copy_target(src: <code>WireTarget</code>, to: <code>WireTarget</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.refresh_entity(node: <code>WireNode</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.get_drop_node(x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>WireNode</code></p> <p>no docs found   </p> <p> System.remove_block_connection(entity: <code>Entity</code>, target: <code>WireTarget</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.find_connection_index(entity: <code>Entity</code>, target: <code>WireTarget</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.find_wire_in_list(wires: <code>List</code>, wire_id: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.find_wire(target: <code>WireTarget</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.make_placeholder_wire(entity: <code>Entity</code>, do_doc: <code>Bool</code>) \u00b6 returns <code>Connection</code></p> <p>no docs found   </p> <p> System.make_node(out: <code>Bool</code>, entity: <code>Entity</code>, from: <code>WireTarget</code>, to: <code>WireTarget</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.refresh_wires(window: <code>UIPanel</code>, window_w: <code>Num</code>, but: <code>UIButton</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.editor_init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.editor_attach(entity: <code>Entity</code>, wires: <code>Data</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/wires.modifier/#wirenode","title":"WireNode","text":"<p><code>import \"luxe: system/wires.modifier\" for WireNode</code></p> <p>no docs found</p> <ul> <li><code>var uuid : String = ID.uuid</code></li> <li><code>var panel : UIPanel = null</code></li> <li><code>var entity : Entity = Entity.none</code></li> <li><code>var out : Bool = true</code></li> <li><code>var from : WireTarget = null</code></li> <li><code>var to : WireTarget = null</code></li> <li><code>var other_uuid : String = null</code></li> <li><code>var label : UILabel = null</code></li> <li><code>var change : UILabel = null</code></li> <li><code>var icon : UIImage = null</code></li> <li><code>var endpoint : Control = null</code></li> <li><code>var cable_control : Control = null</code></li> <li><code>var draw_control : Control = null</code></li> <li><code>var resolve_node : Fn = null</code></li> <li><code>var resolve_wire : Fn = null</code></li> <li><code>var cable : Cable = Cable.new</code></li> <li><code>var style : PathStyle = PathStyle.new</code></li> <li><code>var cable_phase : Num = 0</code></li> <li><code>var cable_drag : Bool = false</code></li> <li>valid_wire</li> <li>wire</li> <li>draw_depth</li> <li>order</li> <li>disconnect()</li> <li>new()</li> <li>destroy()</li> <li>highlight(state: <code>Bool</code>)</li> <li>from_entity</li> <li>to_entity</li> <li>from_node</li> <li>to_node</li> <li>make_cable()</li> </ul> <p> WireNode.valid_wire \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> WireNode.wire \u00b6 returns <code>WireData</code></p> <p>no docs found   </p> <p> WireNode.draw_depth \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> WireNode.order \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> WireNode.disconnect() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WireNode.new() \u00b6 returns <code>WireNode</code></p> <p>no docs found   </p> <p> WireNode.destroy() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WireNode.highlight(state: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WireNode.from_entity \u00b6 returns <code>Entity</code></p> <p>no docs found   </p> <p> WireNode.to_entity \u00b6 returns <code>Entity</code></p> <p>no docs found   </p> <p> WireNode.from_node \u00b6 returns <code>WireNode</code></p> <p>no docs found   </p> <p> WireNode.to_node \u00b6 returns <code>WireNode</code></p> <p>no docs found   </p> <p> WireNode.make_cable() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/wires.modifier/#wiretarget","title":"WireTarget","text":"<p><code>import \"luxe: system/wires.modifier\" for WireTarget</code></p> <p>no docs found</p> <ul> <li><code>var wire : Num = 0</code></li> <li><code>var link : Link = null</code></li> <li><code>var context : Asset = null</code></li> <li><code>var order : Num = 0</code></li> <li><code>var split : Bool = false</code></li> </ul>"},{"location":"api/v/2025.1.1/system/wires.modifier/#wires","title":"Wires","text":"<p><code>import \"luxe: system/wires.modifier\" for Wires</code></p> <p>no docs found</p>"},{"location":"api/v/2025.1.1/system/physics/body3D.modifier/","title":"body3D.modifier","text":""},{"location":"api/v/2025.1.1/system/physics/body3D.modifier/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/system/physics/body3D.modifier/#luxe-systemphysicsbody3dmodifier-module","title":"<code>luxe: system/physics/body3D.modifier</code> module","text":"<ul> <li>Body3D </li> <li>Data </li> <li>MotionQuality </li> <li>MotionType </li> <li>System </li> </ul>"},{"location":"api/v/2025.1.1/system/physics/body3D.modifier/#body3d","title":"Body3D","text":"<p><code>import \"luxe: system/physics/body3D.modifier\" for Body3D</code></p> <p>no docs found</p> <ul> <li>unlisten(entity: <code>Entity</code>, handle: <code>Handle</code>)</li> <li>listen(entity: <code>Entity</code>, fn: <code>Fn</code>)</li> </ul> <p> Body3D.unlisten(entity: <code>Entity</code>, handle: <code>Handle</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Body3D.listen(entity: <code>Entity</code>, fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/physics/body3D.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/physics/body3D.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var motion_type : MotionType = MotionType.is_static</code></li> <li><code>var motion_quality : MotionQuality = MotionQuality.discrete</code></li> <li><code>var is_sensor : Bool = false</code></li> <li><code>var allow_sleeping : Bool = true</code></li> <li><code>var friction : Num = 0.2</code></li> <li><code>var restitution : Num = 0.0</code></li> <li><code>var linear_damping : Num = 0.05</code></li> <li><code>var angular_damping : Num = 0.05</code></li> <li><code>var max_linear_velocity : Num = 500.0</code></li> <li><code>var max_angular_velocity : Num = 2700</code></li> <li><code>var gravity_factor : Num = 1</code></li> <li><code>var mass : Num = 1</code></li> <li><code>var lock_movement : Float3 = [0, 0, 0]</code></li> <li><code>var lock_rotation : Float3 = [0, 0, 0]</code></li> <li><code>var use_manifold_reduction : Bool = true</code></li> <li><code>var allow_dynamic_or_kinematic : Bool = false</code></li> <li><code>var collide_kinematic_vs_non_dynamic : Bool = false</code></li> <li><code>var apply_gyroscopic_force : Bool = false</code></li> <li><code>var enhanced_internal_edge_removal : Bool = false</code></li> <li><code>var velocity_steps_override : Num = 0</code></li> <li><code>var position_steps_override : Num = 0</code></li> </ul>"},{"location":"api/v/2025.1.1/system/physics/body3D.modifier/#motionquality","title":"MotionQuality","text":"<p><code>import \"luxe: system/physics/body3D.modifier\" for MotionQuality</code></p> <p>no docs found</p> <ul> <li>discrete</li> <li>linear_cast</li> </ul> <p> MotionQuality.discrete \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MotionQuality.linear_cast \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/physics/body3D.modifier/#motiontype","title":"MotionType","text":"<p><code>import \"luxe: system/physics/body3D.modifier\" for MotionType</code></p> <p>no docs found</p> <ul> <li>is_static</li> <li>is_dynamic</li> <li>is_kinematic</li> </ul> <p> MotionType.is_static \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MotionType.is_dynamic \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MotionType.is_kinematic \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/physics/body3D.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/physics/body3D.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> <li>init(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p> <p> System.init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/physics/box_collider3D.modifier/","title":"box collider3D.modifier","text":""},{"location":"api/v/2025.1.1/system/physics/box_collider3D.modifier/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/system/physics/box_collider3D.modifier/#luxe-systemphysicsbox_collider3dmodifier-module","title":"<code>luxe: system/physics/box_collider3D.modifier</code> module","text":"<ul> <li>BoxCollider3D </li> <li>Data </li> <li>System </li> </ul>"},{"location":"api/v/2025.1.1/system/physics/box_collider3D.modifier/#boxcollider3d","title":"BoxCollider3D","text":"<p><code>import \"luxe: system/physics/box_collider3D.modifier\" for BoxCollider3D</code></p> <p>no docs found</p>"},{"location":"api/v/2025.1.1/system/physics/box_collider3D.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/physics/box_collider3D.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var body : Link = null</code></li> <li><code>var density : Num = 1000</code></li> <li><code>var size : Float3 = [1, 1, 1]</code></li> </ul>"},{"location":"api/v/2025.1.1/system/physics/box_collider3D.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/physics/box_collider3D.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> <li>init(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p> <p> System.init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/physics/capsule_collider3D.modifier/","title":"capsule collider3D.modifier","text":""},{"location":"api/v/2025.1.1/system/physics/capsule_collider3D.modifier/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/system/physics/capsule_collider3D.modifier/#luxe-systemphysicscapsule_collider3dmodifier-module","title":"<code>luxe: system/physics/capsule_collider3D.modifier</code> module","text":"<ul> <li>CapsuleCollider3D </li> <li>Data </li> <li>System </li> </ul>"},{"location":"api/v/2025.1.1/system/physics/capsule_collider3D.modifier/#capsulecollider3d","title":"CapsuleCollider3D","text":"<p><code>import \"luxe: system/physics/capsule_collider3D.modifier\" for CapsuleCollider3D</code></p> <p>no docs found</p>"},{"location":"api/v/2025.1.1/system/physics/capsule_collider3D.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/physics/capsule_collider3D.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var body : Link = null</code></li> <li><code>var density : Num = 1000</code></li> <li><code>var height : Num = 2</code></li> <li><code>var width : Num = 1</code></li> </ul>"},{"location":"api/v/2025.1.1/system/physics/capsule_collider3D.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/physics/capsule_collider3D.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> <li>init(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p> <p> System.init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/physics/cast_ray.block/","title":"Cast ray.block","text":""},{"location":"api/v/2025.1.1/system/physics/cast_ray.block/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/system/physics/cast_ray.block/#luxe-systemphysicscast_rayblock-module","title":"<code>luxe: system/physics/cast_ray.block</code> module","text":"<ul> <li>CastRayResult </li> </ul>"},{"location":"api/v/2025.1.1/system/physics/cast_ray.block/#castrayresult","title":"CastRayResult","text":"<p><code>import \"luxe: system/physics/cast_ray.block\" for CastRayResult</code></p> <p>no docs found</p> <ul> <li><code>var body_entity : Num = 0</code></li> <li><code>var collider_entity : Num = 0</code></li> <li><code>var pos : Double3 = [0, 0, 0]</code></li> <li><code>var normal : Float3 = [0, 1, 0]</code></li> <li><code>var distance : Num = 0</code></li> </ul>"},{"location":"api/v/2025.1.1/system/physics/character3D.modifier/","title":"character3D.modifier","text":""},{"location":"api/v/2025.1.1/system/physics/character3D.modifier/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/system/physics/character3D.modifier/#luxe-systemphysicscharacter3dmodifier-module","title":"<code>luxe: system/physics/character3D.modifier</code> module","text":"<ul> <li>BackFaceMode </li> <li>Character3D </li> <li>Data </li> <li>System </li> </ul>"},{"location":"api/v/2025.1.1/system/physics/character3D.modifier/#backfacemode","title":"BackFaceMode","text":"<p><code>import \"luxe: system/physics/character3D.modifier\" for BackFaceMode</code></p> <p>no docs found</p> <ul> <li>ignore</li> <li>collide</li> </ul> <p> BackFaceMode.ignore \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BackFaceMode.collide \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/physics/character3D.modifier/#character3d","title":"Character3D","text":"<p><code>import \"luxe: system/physics/character3D.modifier\" for Character3D</code></p> <p>no docs found</p>"},{"location":"api/v/2025.1.1/system/physics/character3D.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/physics/character3D.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var target : Link = null</code></li> <li><code>var height : Num = 2</code></li> <li><code>var width : Num = 1</code></li> <li><code>var input : Float3 = [0, 0, 0]</code></li> <li><code>var speed : Num = 1</code></li> <li><code>var velocity : Float3 = [0, 0, 0]</code></li> <li><code>var mass : Num = 70</code></li> <li><code>var max_strength : Num = 100</code></li> <li><code>var shape_offset : Float3 = [0, 0, 0]</code></li> <li><code>var backface_mode : BackFaceMode = BackFaceMode.collide</code></li> <li><code>var predictive_contact_distance : Num = 0.1</code></li> <li><code>var max_collision_iterations : Num = 5</code></li> <li><code>var max_constraint_iterations : Num = 5</code></li> <li><code>var min_time_remaining : Num = 0.0001</code></li> <li><code>var collision_tolerance : Num = 0.001</code></li> <li><code>var character_padding : Num = 0.02</code></li> <li><code>var max_hits : Num = 256</code></li> <li><code>var hit_reduction_cos_max_angle : Num = 0.999</code></li> <li><code>var penetration_recovery_speed : Num = 1</code></li> </ul>"},{"location":"api/v/2025.1.1/system/physics/character3D.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/physics/character3D.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> <li>init(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p> <p> System.init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/physics/contact.block/","title":"Contact.block","text":""},{"location":"api/v/2025.1.1/system/physics/contact.block/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/system/physics/contact.block/#luxe-systemphysicscontactblock-module","title":"<code>luxe: system/physics/contact.block</code> module","text":"<ul> <li>Contact </li> <li>ContactHelper </li> <li>ContactKind </li> </ul>"},{"location":"api/v/2025.1.1/system/physics/contact.block/#contact","title":"Contact","text":"<p><code>import \"luxe: system/physics/contact.block\" for Contact</code></p> <p>no docs found</p> <ul> <li><code>var kind : ContactKind = ContactKind.none</code></li> <li><code>var body : Num = 0</code></li> <li><code>var collider : Num = 0</code></li> <li><code>var contacts : List = []</code></li> <li><code>var other_body : Num = 0</code></li> <li><code>var other_collider : Num = 0</code></li> <li><code>var other_contacts : List = []</code></li> <li><code>var normal : Float3 = [0, 0, 0]</code></li> <li><code>var overlap : Num = 0</code></li> </ul>"},{"location":"api/v/2025.1.1/system/physics/contact.block/#contacthelper","title":"ContactHelper","text":"<p><code>import \"luxe: system/physics/contact.block\" for ContactHelper</code></p> <p>no docs found</p> <ul> <li>get_other(body: <code>Entity</code>, contact: <code>Contact</code>)</li> <li>get_other_collider(collider: <code>Entity</code>, contact: <code>Contact</code>)</li> </ul> <p> ContactHelper.get_other(body: <code>Entity</code>, contact: <code>Contact</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ContactHelper.get_other_collider(collider: <code>Entity</code>, contact: <code>Contact</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/physics/contact.block/#contactkind","title":"ContactKind","text":"<p><code>import \"luxe: system/physics/contact.block\" for ContactKind</code></p> <p>no docs found</p> <ul> <li>none</li> <li>begin</li> <li>end</li> <li>active</li> </ul> <p> ContactKind.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ContactKind.begin \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ContactKind.end \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ContactKind.active \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/physics/mesh_collider3D.modifier/","title":"mesh collider3D.modifier","text":""},{"location":"api/v/2025.1.1/system/physics/mesh_collider3D.modifier/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/system/physics/mesh_collider3D.modifier/#luxe-systemphysicsmesh_collider3dmodifier-module","title":"<code>luxe: system/physics/mesh_collider3D.modifier</code> module","text":"<ul> <li>Data </li> <li>MeshCollider3D </li> <li>System </li> </ul>"},{"location":"api/v/2025.1.1/system/physics/mesh_collider3D.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/physics/mesh_collider3D.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var body : Link = null</code></li> <li><code>var mesh : Asset = null</code></li> <li><code>var level : Num = 0</code></li> </ul>"},{"location":"api/v/2025.1.1/system/physics/mesh_collider3D.modifier/#meshcollider3d","title":"MeshCollider3D","text":"<p><code>import \"luxe: system/physics/mesh_collider3D.modifier\" for MeshCollider3D</code></p> <p>no docs found</p>"},{"location":"api/v/2025.1.1/system/physics/mesh_collider3D.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/physics/mesh_collider3D.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> <li>init(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p> <p> System.init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/physics/physics3D.modifier/","title":"physics3D.modifier","text":""},{"location":"api/v/2025.1.1/system/physics/physics3D.modifier/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/system/physics/physics3D.modifier/#luxe-systemphysicsphysics3dmodifier-module","title":"<code>luxe: system/physics/physics3D.modifier</code> module","text":"<ul> <li>Data </li> <li>Physics3D </li> <li>System </li> </ul>"},{"location":"api/v/2025.1.1/system/physics/physics3D.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/physics/physics3D.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var gravity : Float3 = [0, -9.8, 0]</code></li> </ul>"},{"location":"api/v/2025.1.1/system/physics/physics3D.modifier/#physics3d","title":"Physics3D","text":"<p><code>import \"luxe: system/physics/physics3D.modifier\" for Physics3D</code></p> <p>no docs found</p> <ul> <li>create_in(world: <code>World</code>)</li> <li>cast_ray_closest(world: <code>World</code>, origin: <code>Float3</code>, dir: <code>Float3</code>, distance: <code>Num</code>)</li> <li>cast_ray(world: <code>World</code>, origin: <code>Float3</code>, dir: <code>Float3</code>, distance: <code>Num</code>)</li> <li>set_debug_draw(world: <code>World</code>, state: <code>Bool</code>)</li> <li>unlisten(world: <code>World</code>, handle: <code>Handle</code>)</li> <li>listen(world: <code>World</code>, fn: <code>Fn</code>)</li> </ul> <p> Physics3D.create_in(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Physics3D.cast_ray_closest(world: <code>World</code>, origin: <code>Float3</code>, dir: <code>Float3</code>, distance: <code>Num</code>) \u00b6 returns <code>CastRayResult</code></p> <p>no docs found   </p> <p> Physics3D.cast_ray(world: <code>World</code>, origin: <code>Float3</code>, dir: <code>Float3</code>, distance: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Cast a ray into the world and return all hits, sorted by closest first   </p> <p> Physics3D.set_debug_draw(world: <code>World</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Physics3D.unlisten(world: <code>World</code>, handle: <code>Handle</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Physics3D.listen(world: <code>World</code>, fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/physics/physics3D.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/physics/physics3D.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> <li>init(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p> <p> System.init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/system/physics/sphere_collider3D.modifier/","title":"sphere collider3D.modifier","text":""},{"location":"api/v/2025.1.1/system/physics/sphere_collider3D.modifier/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/system/physics/sphere_collider3D.modifier/#luxe-systemphysicssphere_collider3dmodifier-module","title":"<code>luxe: system/physics/sphere_collider3D.modifier</code> module","text":"<ul> <li>Data </li> <li>SphereCollider3D </li> <li>System </li> </ul>"},{"location":"api/v/2025.1.1/system/physics/sphere_collider3D.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/physics/sphere_collider3D.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var body : Link = null</code></li> <li><code>var density : Num = 1000</code></li> <li><code>var radius : Num = 1</code></li> </ul>"},{"location":"api/v/2025.1.1/system/physics/sphere_collider3D.modifier/#spherecollider3d","title":"SphereCollider3D","text":"<p><code>import \"luxe: system/physics/sphere_collider3D.modifier\" for SphereCollider3D</code></p> <p>no docs found</p>"},{"location":"api/v/2025.1.1/system/physics/sphere_collider3D.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/physics/sphere_collider3D.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> <li>init(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p> <p> System.init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/block/","title":"Block","text":""},{"location":"api/v/2025.1.1/ui/block/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/ui/block/#luxe-uiblock-module","title":"<code>luxe: ui/block</code> module","text":"<ul> <li>BlockListener </li> <li>ModifiedPip </li> <li>UIBlock </li> <li>UIBlockAssetEvent </li> <li>UIBlockChange </li> <li>UIBlockChangeType </li> <li>UIBlockEventType </li> <li>UIBlockLinkEvent </li> <li>UIBlockState </li> </ul>"},{"location":"api/v/2025.1.1/ui/block/#blocklistener","title":"BlockListener","text":"<p><code>import \"luxe: ui/block\" for BlockListener</code></p> <p>no docs found</p> <ul> <li>block</li> <li>handle</li> <li>new(block: <code>Block</code>, handle: <code>Handle</code>)</li> </ul> <p> BlockListener.block \u00b6 returns <code>Block</code></p> <p>no docs found   </p> <p> BlockListener.handle \u00b6 returns <code>Handle</code></p> <p>no docs found   </p> <p> BlockListener.new(block: <code>Block</code>, handle: <code>Handle</code>) \u00b6 returns <code>BlockListener</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/block/#modifiedpip","title":"ModifiedPip","text":"<p><code>import \"luxe: ui/block\" for ModifiedPip</code></p> <p>no docs found</p> <ul> <li>control</li> <li>kind</li> <li>kind=(value : BlockFieldModified)</li> <li>color</li> <li>new(ui: <code>UI</code>, kind: <code>BlockFieldModified</code>)</li> </ul> <p> ModifiedPip.control \u00b6 returns <code>Control</code></p> <p>no docs found   </p> <p> ModifiedPip.kind \u00b6 returns <code>BlockFieldModified</code></p> <p>no docs found   </p> <p> ModifiedPip.kind=(value : BlockFieldModified) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifiedPip.color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifiedPip.new(ui: <code>UI</code>, kind: <code>BlockFieldModified</code>) \u00b6 returns <code>ModifiedPip</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/block/#uiblock","title":"UIBlock","text":"<p><code>import \"luxe: ui/block\" for UIBlock</code></p> <p>no docs found</p> <ul> <li>create(ui: <code>Entity</code>)</li> <li>set_block_instance(control: <code>Control</code>, block: <code>Block</code>, instance: <code>BlockInstance</code>)</li> <li>set_block_instances(control: <code>Control</code>, block: <code>Block</code>, instances: <code>List</code>)</li> <li>set_blocks_instances(control: <code>Control</code>, blocks: <code>List</code>, instances: <code>List</code>)</li> <li>set_sizes(control: <code>Control</code>, label_width: <code>Num</code>, label_size: <code>Num</code>, field_height: <code>Num</code>)</li> <li>refresh(control: <code>Control</code>)</li> <li>get_handle_assets(control: <code>Control</code>)</li> <li>set_handle_assets(control: <code>Control</code>, yes: <code>Bool</code>)</li> <li>set_show_defaults(control: <code>Control</code>, yes: <code>Bool</code>)</li> <li>get_block_fields(control: <code>Any</code>)</li> </ul> <p> UIBlock.create(ui: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlock.set_block_instance(control: <code>Control</code>, block: <code>Block</code>, instance: <code>BlockInstance</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlock.set_block_instances(control: <code>Control</code>, block: <code>Block</code>, instances: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlock.set_blocks_instances(control: <code>Control</code>, blocks: <code>List</code>, instances: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlock.set_sizes(control: <code>Control</code>, label_width: <code>Num</code>, label_size: <code>Num</code>, field_height: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlock.refresh(control: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlock.get_handle_assets(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> UIBlock.set_handle_assets(control: <code>Control</code>, yes: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UIBlock.set_show_defaults(control: <code>Control</code>, yes: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlock.get_block_fields(control: <code>Any</code>) \u00b6 returns <code>Map</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/block/#uiblockassetevent","title":"UIBlockAssetEvent","text":"<p><code>import \"luxe: ui/block\" for UIBlockAssetEvent</code></p> <p>no docs found</p> <ul> <li>tags</li> <li>original</li> <li>new(tags_in: <code>List</code>, original_in: <code>String</code>, fn: <code>Fn</code>)</li> <li>done(value: <code>String</code>)</li> </ul> <p> UIBlockAssetEvent.tags \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> UIBlockAssetEvent.original \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> UIBlockAssetEvent.new(tags_in: <code>List</code>, original_in: <code>String</code>, fn: <code>Fn</code>) \u00b6 returns <code>UIBlockAssetEvent</code></p> <p>no docs found   </p> <p> UIBlockAssetEvent.done(value: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/block/#uiblockchange","title":"UIBlockChange","text":"<p><code>import \"luxe: ui/block\" for UIBlockChange</code></p> <p>A change in the block ui can inside a nested block, each with it's own individual instance, list of nested fields, and list of  nested array index values each step down. This tracks that for changes.</p> <ul> <li><code>var change_id : Any = null</code></li> <li>new(kind: <code>UIBlockChangeType</code>, root: <code>Block</code>, root_instance: <code>BlockInstance</code>, blocks: <code>List</code>, instances: <code>List</code>, fields: <code>List</code>, indices: <code>List</code>, edit_value: <code>Any</code>)</li> <li>refresh()</li> <li>handle()</li> <li>set_refresh(fn: <code>Fn</code>)</li> <li>set_handler(fn: <code>Fn</code>)</li> <li>kind</li> <li>block</li> <li>instance</li> <li>blocks</li> <li>instances</li> <li>field</li> <li>array_indices</li> <li>field_index(idx: <code>Num</code>)</li> <li>default</li> <li>get_field_value()</li> <li>get_leaf_value()</li> <li>leaf_block</li> <li>leaf_instance</li> <li>leaf_field_index</li> <li>leaf_array_index</li> <li>get_change_value()</li> <li>field_is_array()</li> <li>field_is_object()</li> <li>value</li> <li>edit_value</li> </ul> <p> UIBlockChange.new(kind: <code>UIBlockChangeType</code>, root: <code>Block</code>, root_instance: <code>BlockInstance</code>, blocks: <code>List</code>, instances: <code>List</code>, fields: <code>List</code>, indices: <code>List</code>, edit_value: <code>Any</code>) \u00b6 returns <code>UIBlockChange</code></p> <p>no docs found   </p> <p> UIBlockChange.refresh() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockChange.handle() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockChange.set_refresh(fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockChange.set_handler(fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockChange.kind \u00b6 returns <code>UIBlockChangeType</code></p> <p>The type of change event   </p> <p> UIBlockChange.block \u00b6 returns <code>Block</code></p> <p>The root block in which the change occurred   </p> <p> UIBlockChange.instance \u00b6 returns <code>Num</code></p> <p>The instance of the root block   </p> <p> UIBlockChange.blocks \u00b6 returns <code>List</code></p> <p>The list of blocks down the chain e.g some.nested.field   </p> <p> UIBlockChange.instances \u00b6 returns <code>List</code></p> <p>The list of instances for each block down the chain e.g some.nested.field   </p> <p> UIBlockChange.field \u00b6 returns <code>List</code></p> <p>The list of nested fields for each block, e.g some.nested.field -&gt; [\"some\", \"nested\", \"field\"]   </p> <p> UIBlockChange.array_indices \u00b6 returns <code>Num</code></p> <p>The array index for each nested block. e.g some.nested[2].block[3] is [0, 2, 3]   </p> <p> UIBlockChange.field_index(idx: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>The field index for the field in the fields list.    e.g [\"some\", \"nested\", \"field\"] -&gt; field_index[1] returns the field index of nested in the second block down   </p> <p> UIBlockChange.default \u00b6 returns <code>Any</code></p> <p>The default value in the leaf block for this field   </p> <p> UIBlockChange.get_field_value() \u00b6 returns <code>Any</code></p> <p>The current value in the leaf block for this field (e.g for an array, returns the contents of the array)   </p> <p> UIBlockChange.get_leaf_value() \u00b6 returns <code>Any</code></p> <p>The current value in the leaf for this block/field/array?   </p> <p> UIBlockChange.leaf_block \u00b6 returns <code>Block</code></p> <p>no docs found   </p> <p> UIBlockChange.leaf_instance \u00b6 returns <code>BlockInstance</code></p> <p>no docs found   </p> <p> UIBlockChange.leaf_field_index \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> UIBlockChange.leaf_array_index \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> UIBlockChange.get_change_value() \u00b6 returns <code>Any</code></p> <p>no docs found   </p> <p> UIBlockChange.field_is_array() \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> UIBlockChange.field_is_object() \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> UIBlockChange.value \u00b6 returns <code>Any</code></p> <p>The intended change value based on type   </p> <p> UIBlockChange.edit_value \u00b6 returns <code>Any</code></p> <p>The value from the ui at the time of the change   </p>"},{"location":"api/v/2025.1.1/ui/block/#uiblockchangetype","title":"UIBlockChangeType","text":"<p><code>import \"luxe: ui/block\" for UIBlockChangeType</code></p> <p>no docs found</p> <ul> <li>NORMAL</li> <li>RESET</li> <li>ARRAY_ADD</li> <li>ARRAY_REMOVE</li> <li>ARRAY_CLEAR</li> <li>ARRAY_RESET</li> <li>ARRAY_ELEMENT_RESET</li> <li>ARRAY_REORDER</li> <li>BLOCK</li> </ul> <p> UIBlockChangeType.NORMAL \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockChangeType.RESET \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockChangeType.ARRAY_ADD \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockChangeType.ARRAY_REMOVE \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockChangeType.ARRAY_CLEAR \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockChangeType.ARRAY_RESET \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockChangeType.ARRAY_ELEMENT_RESET \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockChangeType.ARRAY_REORDER \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockChangeType.BLOCK \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/block/#uiblockeventtype","title":"UIBlockEventType","text":"<p><code>import \"luxe: ui/block\" for UIBlockEventType</code></p> <p>no docs found</p> <ul> <li>asset</li> <li>link</li> </ul> <p> UIBlockEventType.asset \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockEventType.link \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/block/#uiblocklinkevent","title":"UIBlockLinkEvent","text":"<p><code>import \"luxe: ui/block\" for UIBlockLinkEvent</code></p> <p>no docs found</p> <ul> <li>original</li> <li>tag</li> <li>from_drop</li> <li>drop_payload</li> <li>new(original_in: <code>List</code>, tag: <code>ID32</code>, fn: <code>Fn</code>)</li> <li>new(original_in: <code>List</code>, tag: <code>ID32</code>, drop_payload: <code>Handle</code>, fn: <code>Fn</code>)</li> <li>done(value: <code>List</code>)</li> </ul> <p> UIBlockLinkEvent.original \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> UIBlockLinkEvent.tag \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> UIBlockLinkEvent.from_drop \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> UIBlockLinkEvent.drop_payload \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> UIBlockLinkEvent.new(original_in: <code>List</code>, tag: <code>ID32</code>, fn: <code>Fn</code>) \u00b6 returns <code>UIBlockLinkEvent</code></p> <p>no docs found   </p> <p> UIBlockLinkEvent.new(original_in: <code>List</code>, tag: <code>ID32</code>, drop_payload: <code>Handle</code>, fn: <code>Fn</code>) \u00b6 returns <code>UIBlockLinkEvent</code></p> <p>no docs found   </p> <p> UIBlockLinkEvent.done(value: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/block/#uiblockstate","title":"UIBlockState","text":"<p><code>import \"luxe: ui/block\" for UIBlockState</code></p> <p>no docs found</p> <ul> <li>new(ui: <code>Entity</code>, control: <code>Control</code>)</li> <li>get_block_fields()</li> <li>set_show_defaults(show_defaults: <code>Any</code>)</li> <li>clear_listeners()</li> <li>handle_assets</li> <li>handle_assets=(v : Bool)</li> <li>field_h</li> <li>label_w</li> <li>set_sizes(label_width: <code>Num</code>, label_size: <code>Num</code>, field_height: <code>Num</code>)</li> <li>set_instance(block: <code>Block</code>, instance: <code>BlockInstance</code>)</li> <li>set_instances(block: <code>Block</code>, instances: <code>List</code>)</li> <li>set_blocks_instances(blocks: <code>List</code>, instances: <code>List</code>)</li> <li>do_refresh()</li> <li>refresh()</li> <li>make_vec(view: <code>ValueView</code>)</li> <li>make_color(view: <code>ValueView</code>)</li> <li>make_num(view: <code>ValueView</code>)</li> <li>make_text(view: <code>ValueView</code>)</li> <li>get_asset_picks(types: <code>Any</code>)</li> <li>make_asset(view: <code>ValueView</code>)</li> <li>make_link(view: <code>ValueView</code>)</li> <li>make_path(view: <code>ValueView</code>, tag: <code>Num</code>)</li> <li>make_empty_object(name: <code>String</code>)</li> <li>make_empty_object(name: <code>String</code>, display: <code>String</code>)</li> <li>make_multiple_message()</li> <li>make_message(display: <code>String</code>)</li> <li>make_bool(default: <code>Bool</code>)</li> <li>make_options(options: <code>List</code>, default: <code>String</code>)</li> <li>make_object_field(name: <code>String</code>, view: <code>ValueView</code>)</li> <li>make_options_field(view: <code>ValueView</code>)</li> <li>make_field(name: <code>String</code>, type: <code>BlockFieldType</code>, view: <code>ValueView</code>)</li> <li>make_object(name: <code>String</code>)</li> <li>make_object(name: <code>String</code>, title_color: <code>Color</code>)</li> <li>make_object(name: <code>String</code>, details: <code>String</code>, title_color: <code>Color</code>)</li> <li>make_label(name: <code>String</code>, width: <code>Num</code>)</li> <li>p(depth: <code>Any</code>, value: <code>Any</code>)</li> <li>dump_info(control: <code>Control</code>, d: <code>Num</code>)</li> <li>make_mod_pip(kind: <code>BlockFieldModified</code>)</li> <li>get_changes(kind: <code>UIBlockChange</code>, value: <code>ValueView</code>, edit_value: <code>Any</code>)</li> <li>get_changes(kind: <code>UIBlockChange</code>, value: <code>ValueView</code>, edit_value: <code>Any</code>, edit_value_fn: <code>Fn</code>)</li> <li>get_changes(kind: <code>UIBlockChange</code>, value: <code>ValueView</code>, change_id: <code>String</code>, edit_value: <code>Any</code>, edit_value_fn: <code>Fn</code>)</li> <li>make_block(instance_view: <code>InstanceView</code>, into: <code>Control</code>)</li> <li>make_block(instance_view: <code>InstanceView</code>, into: <code>Control</code>, indent: <code>Num</code>)</li> <li>hide_tip(from: <code>Control</code>)</li> <li>show_tip(tooltip: <code>String</code>, control: <code>Control</code>)</li> <li>make_group(name: <code>Any</code>)</li> </ul> <p> UIBlockState.new(ui: <code>Entity</code>, control: <code>Control</code>) \u00b6 returns <code>UIBlockState</code></p> <p>no docs found   </p> <p> UIBlockState.get_block_fields() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.set_show_defaults(show_defaults: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.clear_listeners() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.handle_assets \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> UIBlockState.handle_assets=(v : Bool) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.field_h \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.label_w \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.set_sizes(label_width: <code>Num</code>, label_size: <code>Num</code>, field_height: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.set_instance(block: <code>Block</code>, instance: <code>BlockInstance</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.set_instances(block: <code>Block</code>, instances: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.set_blocks_instances(blocks: <code>List</code>, instances: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.do_refresh() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.refresh() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.make_vec(view: <code>ValueView</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.make_color(view: <code>ValueView</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.make_num(view: <code>ValueView</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.make_text(view: <code>ValueView</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.get_asset_picks(types: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.make_asset(view: <code>ValueView</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.make_link(view: <code>ValueView</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.make_path(view: <code>ValueView</code>, tag: <code>Num</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.make_empty_object(name: <code>String</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.make_empty_object(name: <code>String</code>, display: <code>String</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.make_multiple_message() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.make_message(display: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.make_bool(default: <code>Bool</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.make_options(options: <code>List</code>, default: <code>String</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.make_object_field(name: <code>String</code>, view: <code>ValueView</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.make_options_field(view: <code>ValueView</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.make_field(name: <code>String</code>, type: <code>BlockFieldType</code>, view: <code>ValueView</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.make_object(name: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.make_object(name: <code>String</code>, title_color: <code>Color</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.make_object(name: <code>String</code>, details: <code>String</code>, title_color: <code>Color</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.make_label(name: <code>String</code>, width: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.p(depth: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.dump_info(control: <code>Control</code>, d: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.make_mod_pip(kind: <code>BlockFieldModified</code>) \u00b6 returns <code>ModifiedPip</code></p> <p>no docs found   </p> <p> UIBlockState.get_changes(kind: <code>UIBlockChange</code>, value: <code>ValueView</code>, edit_value: <code>Any</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> UIBlockState.get_changes(kind: <code>UIBlockChange</code>, value: <code>ValueView</code>, edit_value: <code>Any</code>, edit_value_fn: <code>Fn</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> UIBlockState.get_changes(kind: <code>UIBlockChange</code>, value: <code>ValueView</code>, change_id: <code>String</code>, edit_value: <code>Any</code>, edit_value_fn: <code>Fn</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> UIBlockState.make_block(instance_view: <code>InstanceView</code>, into: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.make_block(instance_view: <code>InstanceView</code>, into: <code>Control</code>, indent: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.hide_tip(from: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.show_tip(tooltip: <code>String</code>, control: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.make_group(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/button/","title":"Button","text":""},{"location":"api/v/2025.1.1/ui/button/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/ui/button/#luxe-uibutton-module","title":"<code>luxe: ui/button</code> module","text":"<ul> <li>UIButton </li> </ul>"},{"location":"api/v/2025.1.1/ui/button/#uibutton","title":"UIButton","text":"<p><code>import \"luxe: ui/button\" for UIButton</code></p> <p><code>UIButton</code> is a <code>Control</code> that represents a clickable button with optional text content.</p> <pre><code>var btn = UIButton.create(ui)\nUIButton.set_text(btn, \"click me!\")\nControl.set_events(btn) {|event|\n  if(event.type == UIEvent.release) {\n    Log.print(\"clicked button\")\n  }\n}\n</code></pre> <ul> <li>create(ui_entity: <code>Entity</code>)</li> <li>set_text(control: <code>UIButton</code>, text: <code>String</code>)</li> <li>set_outline(control: <code>UIButton</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>)</li> <li>set_shadow(control: <code>UIButton</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>)</li> <li>get_text(control: <code>UIButton</code>)</li> <li>set_font(control: <code>UIButton</code>, font: <code>String</code>)</li> <li>get_font(control: <code>UIButton</code>)</li> <li>set_color(control: <code>UIButton</code>, color: <code>Color</code>)</li> <li>get_color(control: <code>UIButton</code>)</li> <li>set_text_size(control: <code>UIButton</code>, size: <code>Num</code>)</li> <li>get_text_size(control: <code>UIButton</code>)</li> <li>set_align(control: <code>UIButton</code>, align: <code>TextAlign</code>)</li> <li>get_align(control: <code>UIButton</code>)</li> <li>set_align_vertical(control: <code>UIButton</code>, align: <code>TextAlign</code>)</li> <li>get_align_vertical(control: <code>UIButton</code>)</li> <li>get_render_text(control: <code>UIButton</code>)</li> <li>set_colors(control: <code>UIButton</code>, bg: <code>Color</code>, bg_hover: <code>Color</code>, border: <code>Color</code>, border_hover: <code>Color</code>)</li> </ul> <p> UIButton.create(ui_entity: <code>Entity</code>) \u00b6 returns <code>UIButton</code></p> <p>Create a new button control.   </p> <p> UIButton.set_text(control: <code>UIButton</code>, text: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Set the text displayed on a button.   </p> <p> UIButton.set_outline(control: <code>UIButton</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>) \u00b6 returns <code>None</code></p> <p>Set the text outline parameters.   </p> <p> UIButton.set_shadow(control: <code>UIButton</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>) \u00b6 returns <code>None</code></p> <p>Set the text shadow parameters.   </p> <p> UIButton.get_text(control: <code>UIButton</code>) \u00b6 returns <code>String</code></p> <p>Get the text displayed on a button.   </p> <p> UIButton.set_font(control: <code>UIButton</code>, font: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Set the font of the text on a button.   </p> <p> UIButton.get_font(control: <code>UIButton</code>) \u00b6 returns <code>Id32</code></p> <p>Get the font asset id of the text on the button. The asset id is returned as the string hash, to get the string use <code>Strings.get</code>.   </p> <p> UIButton.set_color(control: <code>UIButton</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>Set the color of a button.   </p> <p> UIButton.get_color(control: <code>UIButton</code>) \u00b6 returns <code>Color</code></p> <p>Get the color of a button.   </p> <p> UIButton.set_text_size(control: <code>UIButton</code>, size: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the size of the text on a button.   </p> <p> UIButton.get_text_size(control: <code>UIButton</code>) \u00b6 returns <code>Num</code></p> <p>Get the size of the text on a button.   </p> <p> UIButton.set_align(control: <code>UIButton</code>, align: <code>TextAlign</code>) \u00b6 returns <code>None</code></p> <p>Set the horizontal alignment of the text on a button.   </p> <p> UIButton.get_align(control: <code>UIButton</code>) \u00b6 returns <code>TextAlign</code></p> <p>Get the horizontal alignment of the text on a button.   </p> <p> UIButton.set_align_vertical(control: <code>UIButton</code>, align: <code>TextAlign</code>) \u00b6 returns <code>None</code></p> <p>Set the vertical alignment of the text on a button.   </p> <p> UIButton.get_align_vertical(control: <code>UIButton</code>) \u00b6 returns <code>TextAlign</code></p> <p>Get the vertical alignment of the text on a button.   </p> <p> UIButton.get_render_text(control: <code>UIButton</code>) \u00b6 returns <code>RenderText</code></p> <p>Get the underlying lowlevel text render object. Usable with the <code>Render.text_*</code> API.   </p> <p> UIButton.set_colors(control: <code>UIButton</code>, bg: <code>Color</code>, bg_hover: <code>Color</code>, border: <code>Color</code>, border_hover: <code>Color</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/check/","title":"Check","text":""},{"location":"api/v/2025.1.1/ui/check/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/ui/check/#luxe-uicheck-module","title":"<code>luxe: ui/check</code> module","text":"<ul> <li>UICheck </li> </ul>"},{"location":"api/v/2025.1.1/ui/check/#uicheck","title":"UICheck","text":"<p><code>import \"luxe: ui/check\" for UICheck</code></p> <p><code>UICheck</code> is a <code>Control</code> that represents a boolean toggle.</p> <pre><code>var check = UICheck.create(ui)\nUICheck.set_state(check, true)\nControl.set_events(check) {|event|\n  if(event.type == UIEvent.change) {\n    Log.print(\"Check is toggled %(event.change ? \"on\" : \"off\")\")\n  }\n}\n</code></pre> <ul> <li>create(ui_entity: <code>Entity</code>)</li> <li>set_state(control: <code>UICheck</code>, state: <code>Bool</code>)</li> <li>get_state(control: <code>UICheck</code>)</li> </ul> <p> UICheck.create(ui_entity: <code>Entity</code>) \u00b6 returns <code>UICheck</code></p> <p>Create a new check control.   </p> <p> UICheck.set_state(control: <code>UICheck</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set the current state of a check.   </p> <p> UICheck.get_state(control: <code>UICheck</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether a check is toggled on or off.   </p>"},{"location":"api/v/2025.1.1/ui/color_picker/","title":"Color picker","text":""},{"location":"api/v/2025.1.1/ui/color_picker/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/ui/color_picker/#luxe-uicolor_picker-module","title":"<code>luxe: ui/color_picker</code> module","text":"<ul> <li>ColorPicker </li> <li>ColorPickerData </li> </ul>"},{"location":"api/v/2025.1.1/ui/color_picker/#colorpicker","title":"ColorPicker","text":"<p><code>import \"luxe: ui/color_picker\" for ColorPicker</code></p> <p>no docs found</p> <ul> <li>create(ui: <code>Entity</code>)</li> <li>set_color(control: <code>Control</code>, color: <code>Color</code>)</li> <li>get_color(control: <code>Control</code>)</li> <li>set_allow_hdr(control: <code>Control</code>, allow: <code>Bool</code>)</li> </ul> <p> ColorPicker.create(ui: <code>Entity</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p> <p> ColorPicker.set_color(control: <code>Control</code>, color: <code>Color</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPicker.get_color(control: <code>Control</code>) \u00b6 returns <code>Color</code></p> <p>no docs found   </p> <p> ColorPicker.set_allow_hdr(control: <code>Control</code>, allow: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/color_picker/#colorpickerdata","title":"ColorPickerData","text":"<p><code>import \"luxe: ui/color_picker\" for ColorPickerData</code></p> <p>no docs found</p> <ul> <li>triangle_size</li> <li>outer_ring_size</li> <li>inner_ring_size</li> <li>r</li> <li>g</li> <li>b</li> <li>h</li> <li>s</li> <li>v</li> <li>a</li> <li>color_ldr</li> <li>color_hdr</li> <li>srgb</li> <li>srgb=(value : Bool)</li> <li>hdr_multiplier</li> <li>hdr_multiplier=(value : Num)</li> <li>allow_hdr</li> <li>allow_hdr=(v : Bool)</li> <li>show_hdr</li> <li>show_hdr=(v : Bool)</li> <li>show_components</li> <li>show_components(v: <code>String</code>)</li> <li>debug=(v : Any)</li> <li>new(ui: <code>Control</code>, root: <code>Control</code>)</li> <li>set_allow_hdr(allow: <code>Bool</code>)</li> <li>set_color(color: <code>Color</code>)</li> <li>get_rgba()</li> <li>get_rgba(srgb: <code>Bool</code>, hdr: <code>Bool</code>)</li> <li>get_hsva_component()</li> <li>get_hsva(srgb: <code>Bool</code>)</li> <li>set_rgba(col: <code>Color</code>)</li> <li>set_rgba(col: <code>Color</code>, srgb: <code>Bool</code>)</li> <li>set_rgba(col: <code>Color</code>, srgb: <code>Bool</code>, update_spaces: <code>Bool</code>)</li> <li>set_hsva(col: <code>Any</code>)</li> <li>set_hsva(col: <code>Color</code>, srgb: <code>Bool</code>)</li> <li>set_hsva(col: <code>Color</code>, srgb: <code>Bool</code>, update_spaces: <code>Bool</code>)</li> <li>set_rgba_component(index: <code>Num</code>, value: <code>Num</code>)</li> <li>set_rgba_component(index: <code>Num</code>, value: <code>Num</code>, srgb: <code>Bool</code>)</li> <li>get_rgba_component(index: <code>Num</code>)</li> <li>get_rgba_component(index: <code>Num</code>, srgb: <code>Bool</code>)</li> <li>get_rgba_component(index: <code>Num</code>, srgb: <code>Bool</code>, hdr: <code>Bool</code>)</li> <li>set_hsva_component(index: <code>Num</code>, value: <code>Num</code>)</li> <li>set_hsva_component(index: <code>Num</code>, value: <code>Num</code>, srgb: <code>Bool</code>)</li> <li>get_hsva_component(index: <code>Num</code>)</li> <li>get_hsva_component(index: <code>Num</code>, srgb: <code>Bool</code>)</li> <li>create_colorpicker(ui: <code>Entity</code>, color_view: <code>Control</code>)</li> <li>hdr_settings(ui: <code>UI</code>, data_control: <code>Control</code>)</li> <li>color_display(ui: <code>UI</code>, data_control: <code>Control</code>)</li> <li>colorspace_choice(ui: <code>Any</code>, data_control: <code>Any</code>)</li> <li>hex_input(ui: <code>UI</code>, data_control: <code>Control</code>)</li> <li>rgba_values(ui: <code>UI</code>, color_view: <code>Control</code>)</li> <li>hsva_values(ui: <code>UI</code>, color_view: <code>Control</code>)</li> <li>color_component(ui: <code>Entity</code>, name: <code>String</code>, index: <code>Num</code>, color_view: <code>Control</code>, space: <code>String</code>)</li> <li>create_hsv_wheel(ui: <code>Entity</code>, data_root: <code>Control</code>)</li> </ul> <p> ColorPickerData.triangle_size \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ColorPickerData.outer_ring_size \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ColorPickerData.inner_ring_size \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ColorPickerData.r \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ColorPickerData.g \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ColorPickerData.b \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ColorPickerData.h \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ColorPickerData.s \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ColorPickerData.v \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ColorPickerData.a \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ColorPickerData.color_ldr \u00b6 returns <code>Color</code></p> <p>no docs found   </p> <p> ColorPickerData.color_hdr \u00b6 returns <code>Color</code></p> <p>no docs found   </p> <p> ColorPickerData.srgb \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> ColorPickerData.srgb=(value : Bool) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.hdr_multiplier \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ColorPickerData.hdr_multiplier=(value : Num) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.allow_hdr \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> ColorPickerData.allow_hdr=(v : Bool) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.show_hdr \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> ColorPickerData.show_hdr=(v : Bool) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.show_components \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> ColorPickerData.show_components(v: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.debug=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.new(ui: <code>Control</code>, root: <code>Control</code>) \u00b6 returns <code>ColorPickerData</code></p> <p>no docs found   </p> <p> ColorPickerData.set_allow_hdr(allow: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.set_color(color: <code>Color</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.get_rgba() \u00b6 returns <code>Color</code></p> <p>no docs found   </p> <p> ColorPickerData.get_rgba(srgb: <code>Bool</code>, hdr: <code>Bool</code>) \u00b6 returns <code>Color</code></p> <p>no docs found   </p> <p> ColorPickerData.get_hsva_component() \u00b6 returns <code>Color</code></p> <p>no docs found   </p> <p> ColorPickerData.get_hsva(srgb: <code>Bool</code>) \u00b6 returns <code>Color</code></p> <p>no docs found   </p> <p> ColorPickerData.set_rgba(col: <code>Color</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.set_rgba(col: <code>Color</code>, srgb: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.set_rgba(col: <code>Color</code>, srgb: <code>Bool</code>, update_spaces: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.set_hsva(col: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.set_hsva(col: <code>Color</code>, srgb: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.set_hsva(col: <code>Color</code>, srgb: <code>Bool</code>, update_spaces: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.set_rgba_component(index: <code>Num</code>, value: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.set_rgba_component(index: <code>Num</code>, value: <code>Num</code>, srgb: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.get_rgba_component(index: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.get_rgba_component(index: <code>Num</code>, srgb: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.get_rgba_component(index: <code>Num</code>, srgb: <code>Bool</code>, hdr: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.set_hsva_component(index: <code>Num</code>, value: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.set_hsva_component(index: <code>Num</code>, value: <code>Num</code>, srgb: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.get_hsva_component(index: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.get_hsva_component(index: <code>Num</code>, srgb: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.create_colorpicker(ui: <code>Entity</code>, color_view: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.hdr_settings(ui: <code>UI</code>, data_control: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.color_display(ui: <code>UI</code>, data_control: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.colorspace_choice(ui: <code>Any</code>, data_control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.hex_input(ui: <code>UI</code>, data_control: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.rgba_values(ui: <code>UI</code>, color_view: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.hsva_values(ui: <code>UI</code>, color_view: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.color_component(ui: <code>Entity</code>, name: <code>String</code>, index: <code>Num</code>, color_view: <code>Control</code>, space: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.create_hsv_wheel(ui: <code>Entity</code>, data_root: <code>Control</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/control/","title":"Control","text":""},{"location":"api/v/2025.1.1/ui/control/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/ui/control/#luxe-uicontrol-module","title":"<code>luxe: ui/control</code> module","text":"<ul> <li>Control </li> </ul>"},{"location":"api/v/2025.1.1/ui/control/#control","title":"Control","text":"<p><code>import \"luxe: ui/control\" for Control</code></p> <p>Class for managing controls on UI modifiers. Note that all UI elements are controls, including UIImage, UILabel, UIButton, etc...</p> <pre><code>  _ui = Entity.create(app.ui)\n  UI.create(_ui, 0, 0, app.width, app.height, 0, app.ui_camera)\n\n  var control = Control.create(_ui)\n</code></pre> <ul> <li>create(ui_entity: <code>Entity</code>)</li> <li>destroy(control: <code>Control</code>)</li> <li>destroy_children(control: <code>Control</code>)</li> <li>valid(control: <code>Control</code>)</li> <li>get_ui(control: <code>Control</code>)</li> <li>get(id: <code>String</code>)</li> <li>exists(id: <code>String</code>)</li> <li>clear(control: <code>Control</code>, uiclear_action: <code>UIClear</code>)</li> <li>press(control: <code>Control</code>, state: <code>Bool</code>)</li> <li>enter(control: <code>Control</code>, state: <code>Bool</code>)</li> <li>can_see(control: <code>Control</code>)</li> <li>can_see_area(control: <code>Control</code>, area: <code>Rect</code>)</li> <li>can_see_point(control: <code>Control</code>, point: <code>Vec</code>)</li> <li>set_type(control: <code>Control</code>, type: <code>String</code>)</li> <li>get_type(control: <code>Control</code>)</li> <li>set_id(control: <code>Control</code>, id: <code>String</code>)</li> <li>get_id(control: <code>Control</code>)</li> <li>get_bounds_abs(control: <code>Control</code>, into: <code>List</code>)</li> <li>get_bounds(control: <code>Control</code>, into: <code>List</code>)</li> <li>set_allow_bounds_event(control: <code>Control</code>, state: <code>Bool</code>)</li> <li>get_allow_bounds_event(control: <code>Control</code>)</li> <li>set_bounds_abs(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>)</li> <li>set_bounds(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>)</li> <li>set_pos_abs(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>set_pos(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>set_system_cursor(control: <code>Control</code>, cursor: <code>SystemCursor</code>)</li> <li>set_size(control: <code>Control</code>, w: <code>Num</code>, h: <code>Num</code>)</li> <li>get_pos_x(control: <code>Control</code>)</li> <li>get_pos_x_abs(control: <code>Control</code>)</li> <li>get_pos_y(control: <code>Control</code>)</li> <li>get_pos_y_abs(control: <code>Control</code>)</li> <li>get_width(control: <code>Control</code>)</li> <li>get_height(control: <code>Control</code>)</li> <li>contains(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>get_entity(control: <code>Control</code>)</li> <li>get_parent(control: <code>Control</code>)</li> <li>get_allow_input(control: <code>Control</code>)</li> <li>set_allow_input(control: <code>Control</code>, allow: <code>Bool</code>)</li> <li>set_allow_drag(control: <code>Control</code>, allow: <code>Bool</code>, tag: <code>String</code>)</li> <li>set_droppable_payload(control: <code>Control</code>, value: <code>Handle</code>)</li> <li>get_droppable_payload(control: <code>Control</code>)</li> <li>set_droppable_tags(control: <code>Control</code>, tags: <code>List</code>)</li> <li>get_droppable_tags(control: <code>Control</code>)</li> <li>get_allow_keys(control: <code>Control</code>)</li> <li>set_allow_keys(control: <code>Control</code>, allow: <code>Bool</code>)</li> <li>get_allow_tab(control: <code>Control</code>)</li> <li>set_allow_tab(control: <code>Control</code>, allow: <code>Bool</code>)</li> <li>get_visible(control: <code>Control</code>)</li> <li>set_visible(control: <code>Control</code>, visible: <code>Bool</code>)</li> <li>get_opacity(control: <code>Control</code>)</li> <li>set_opacity(control: <code>Control</code>, opacity: <code>Num</code>)</li> <li>get_disabled(control: <code>Control</code>)</li> <li>set_disabled(control: <code>Control</code>, disabled: <code>Bool</code>)</li> <li>get_enabled(control: <code>Control</code>)</li> <li>set_enabled(control: <code>Control</code>, enabled: <code>Bool</code>)</li> <li>get_clip(control: <code>Control</code>)</li> <li>set_clip(control: <code>Control</code>, clip: <code>Bool</code>)</li> <li>get_nodes(control: <code>Control</code>)</li> <li>get_depth(control: <code>Control</code>)</li> <li>get_depth_offset(control: <code>Control</code>)</li> <li>set_depth_offset(control: <code>Control</code>, depth_offset: <code>Num</code>)</li> <li>get_input_inside(control: <code>Control</code>)</li> <li>get_input_pressed(control: <code>Control</code>)</li> <li>child_at_point(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>child_count(control: <code>Control</code>)</li> <li>child_index(control: <code>Control</code>, child: <code>Control</code>)</li> <li>child_get(control: <code>Control</code>, index: <code>Num</code>)</li> <li>child_add(control: <code>Control</code>, child: <code>Control</code>, internal: <code>Bool</code>)</li> <li>child_add(control: <code>Control</code>, child: <code>Control</code>)</li> <li>child_remove(control: <code>Control</code>, child: <code>Control</code>)</li> <li>children_bounds(control: <code>Control</code>, into: <code>List</code>)</li> <li>set_behave(control: <code>Control</code>, behave: <code>UIBehave</code>)</li> <li>get_behave(control: <code>Control</code>)</li> <li>set_contain(control: <code>Control</code>, contain: <code>UIContain</code>)</li> <li>get_contain(control: <code>Control</code>)</li> <li>set_margin(control: <code>Control</code>, left: <code>Num</code>, top: <code>Num</code>, right: <code>Num</code>, bottom: <code>Num</code>)</li> <li>set_limits(control: <code>Control</code>, min_x: <code>Num</code>, min_y: <code>Num</code>, max_x: <code>Num</code>, max_y: <code>Num</code>)</li> <li>get_margin(control: <code>Control</code>)</li> <li>set_render(control: <code>Control</code>, fn: <code>Fn</code>)</li> <li>set_events(control: <code>Control</code>, fn: <code>Fn</code>)</li> <li>unset_events(control: <code>Control</code>, id: <code>String</code>)</li> <li>set_process(control: <code>Control</code>, fn: <code>Fn</code>)</li> <li>get_state_data(control: <code>Control</code>)</li> <li>set_state_data(control: <code>Control</code>, data: <code>Any</code>)</li> </ul> <p> Control.create(ui_entity: <code>Entity</code>) \u00b6 returns <code>Control</code></p> <p>Create a \"blank\" control for layout or custom input/drawing. Returns the new Control.   </p> <p> Control.destroy(control: <code>Control</code>) \u00b6 returns <code>None</code></p> <p>Destroy an existing control.</p> <pre><code>  var control = Control.create(_ui)\n  //do stuff and then later...\n  Control.destroy(control)\n</code></pre> <p> Control.destroy_children(control: <code>Control</code>) \u00b6 returns <code>None</code></p> <p>Destroy the children of a control.   </p> <p> Control.valid(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>Check if a control exists and has not been destroyed.</p> <pre><code>  var control = Control.create(_ui)\n  Log.print(Control.valid(control)) //true\n  Control.destroy(control)\n  Log.print(Control.valid(control)) //false\n</code></pre> <p> Control.get_ui(control: <code>Control</code>) \u00b6 returns <code>Entity</code></p> <p>Get UI entity a control is part of.</p> <pre><code>  var control = Control.create(_ui)\n  var control_ui = Control.get_ui(control)\n  Log.print(control_ui == _ui) //true\n</code></pre> <p> Control.get(id: <code>String</code>) \u00b6 returns <code>Control</code></p> <p>Get a control by its id.</p> <pre><code>  var control = Control.create(_ui)\n  Control.set_id(control, \"test_id\")\n  var control_by_id = Control.get(\"test_id\")\n  Log.print(control == control_by_id) //true\n</code></pre> <p> Control.exists(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Check if a control with a specific id exists.   </p> <p> Control.clear(control: <code>Control</code>, uiclear_action: <code>UIClear</code>) \u00b6 returns <code>None</code></p> <p>Clear the children of a control in a specific manner.   </p> <p> Control.press(control: <code>Control</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Send a press or release event to the control (in the center of the control)   </p> <p> Control.enter(control: <code>Control</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Send a enter or exit event to the control   </p> <p> Control.can_see(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if this control can be seen, or false if clipped.   </p> <p> Control.can_see_area(control: <code>Control</code>, area: <code>Rect</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if the area at this control can be seen or false if clipped.   </p> <p> Control.can_see_point(control: <code>Control</code>, point: <code>Vec</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if the point at this control can be seen or false if clipped.   </p> <p> Control.set_type(control: <code>Control</code>, type: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Control.get_type(control: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Control.set_id(control: <code>Control</code>, id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Set the id of a control. Good for debugging and retrieving controls by their id. Must be unique, so adding <code>ID.unique()</code> to the id can be useful.</p> <pre><code>  var control = Control.create(_ui)\n  Control.set_id(control, \"good_recognizable_control_name_%(ID.unique())\")\n</code></pre> <p> Control.get_id(control: <code>Control</code>) \u00b6 returns <code>String</code></p> <p>Retrieve the id of a control.   </p> <p> Control.get_bounds_abs(control: <code>Control</code>, into: <code>List</code>) \u00b6 returns <code>None</code></p> <p>Retrieve the bounds(position and size) of a control (relative to the UI modifier) into a list <code>[x, y, width, height]</code>. The passed list must have at least 4 elements and the function will write into the first 4. Passing a list into the function instead of returning a value is to avoid allocating memory where not needed.</p> <pre><code>  var parent = Control.create(_ui)\n  Control.set_pos(parent, 50, 50)\n  var child = Control.create(_ui)\n  Control.child_add(parent, child)\n  Control.set_pos(child, 100, 100)\n  Control.set_size(child, 20, 20)\n  var bounds = [0,0,0,0]\n  Control.get_bounds_abs(child, bounds)\n  Log.print(bounds) // [150, 150, 20, 20]\n</code></pre> <p> Control.get_bounds(control: <code>Control</code>, into: <code>List</code>) \u00b6 returns <code>None</code></p> <p>Retrieve the bounds(position and size) of a control (relative to their parent control or ui modifier if there is none) into a list <code>[x, y, width, height]</code>. The passed list must have at least 4 elements and the function will write into the first 4. Passing a list into the function instead of returning a value is to avoid allocating memory where not needed.</p> <pre><code>  var parent = Control.create(_ui)\n  Control.set_pos(parent, 50, 50)\n  var child = Control.create(_ui)\n  Control.child_add(parent, child)\n  Control.set_pos(child, 100, 100)\n  Control.set_size(child, 20, 20)\n  var bounds = [0,0,0,0]\n  Control.get_bounds(child, bounds)\n  Log.print(bounds) // [100, 100, 20, 20]\n</code></pre> <p> Control.set_allow_bounds_event(control: <code>Control</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Enables bounds events for the control. Since there are many controls that may be resized during layout events, only ones that ask for the event  will receive it to save time.   </p> <p> Control.get_allow_bounds_event(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if this control sends bounds events.   </p> <p> Control.set_bounds_abs(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the control bounds(position and size) relative to the UI modifier.   </p> <p> Control.set_bounds(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the control bounds(position and size) relative to the parent control.   </p> <p> Control.set_pos_abs(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the control position relative to the UI modifier.   </p> <p> Control.set_pos(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the control position relative to the parent control, or UI modifier if no parent exists.   </p> <p> Control.set_system_cursor(control: <code>Control</code>, cursor: <code>SystemCursor</code>) \u00b6 returns <code>None</code></p> <p>If the control has input enabled, when entered it will set the system cursor to the given type.   </p> <p> Control.set_size(control: <code>Control</code>, w: <code>Num</code>, h: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the control size.   </p> <p> Control.get_pos_x(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>Get the control position x component relative to its parent control.   </p> <p> Control.get_pos_x_abs(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>Get the control position x component.   </p> <p> Control.get_pos_y(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>Get the control position y component relative to its parent control.   </p> <p> Control.get_pos_y_abs(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>Get the control position y component.   </p> <p> Control.get_width(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>Get the control width.   </p> <p> Control.get_height(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>Get the control height.   </p> <p> Control.contains(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>Bool</code></p> <p>Check whether the a point is within the control bounds   </p> <p> Control.get_entity(control: <code>Control</code>) \u00b6 returns <code>Entity</code></p> <p>Get the entity that has the UI modifier the control in.   </p> <p> Control.get_parent(control: <code>Control</code>) \u00b6 returns <code>Control</code></p> <p>Get the entity this entity is a child of or <code>null</code> if there isnt any.   </p> <p> Control.get_allow_input(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether the control recieves input events in its <code>set_process</code> function.   </p> <p> Control.set_allow_input(control: <code>Control</code>, allow: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set whether the control recieves input events in its <code>set_process</code> function.   </p> <p> Control.set_allow_drag(control: <code>Control</code>, allow: <code>Bool</code>, tag: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Set whether the control recieves drag events   </p> <p> Control.set_droppable_payload(control: <code>Control</code>, value: <code>Handle</code>) \u00b6 returns <code>None</code></p> <p>Set a value that will be passed through the drag event to the drop event on the other side.            This value is a handle/number, so you can pass api handles, a number, a hashed string, or a block instance   </p> <p> Control.get_droppable_payload(control: <code>Control</code>) \u00b6 returns <code>Handle</code></p> <p>Get the drop payload for this control   </p> <p> Control.set_droppable_tags(control: <code>Control</code>, tags: <code>List</code>) \u00b6 returns <code>None</code></p> <p>Set the droppable tags that are allowed for this control, as an array of strings   </p> <p> Control.get_droppable_tags(control: <code>Control</code>) \u00b6 returns <code>List</code></p> <p>Get the droppable tags that are allowed for this control, as an array of strings   </p> <p> Control.get_allow_keys(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether the control recieves key events in its <code>set_process</code> function.   </p> <p> Control.set_allow_keys(control: <code>Control</code>, allow: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set whether the control recieves key events in its <code>set_process</code> function.   </p> <p> Control.get_allow_tab(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether the control can be \"tabbed\" to.   </p> <p> Control.set_allow_tab(control: <code>Control</code>, allow: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set whether the control can be \"tabbed\" to.   </p> <p> Control.get_visible(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether a control is visible.   </p> <p> Control.set_visible(control: <code>Control</code>, visible: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set whether a control (or its children) is visible. Note that when a control is not visible, it also doesnt contribute to the layout.   </p> <p> Control.get_opacity(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>Get a control opacity value.   </p> <p> Control.set_opacity(control: <code>Control</code>, opacity: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set a control opacity value. Affects children opacity as well.   </p> <p> Control.get_disabled(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether a control is disabled. This refers to the \"inputable\" state of inputs like buttons or text fields.   </p> <p> Control.set_disabled(control: <code>Control</code>, disabled: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set whether a control is disabled. This refers to the \"inputable\" state of inputs like buttons or text fields.   </p> <p> Control.get_enabled(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether a control is enabled. This refers to the \"inputable\" state of inputs like buttons or text fields.   </p> <p> Control.set_enabled(control: <code>Control</code>, enabled: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set whether a control is enabled. This refers to the \"inputable\" state of inputs like buttons or text fields.   </p> <p> Control.get_clip(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether a control should clip its contents.   </p> <p> Control.set_clip(control: <code>Control</code>, clip: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set whether a control should clip its contents.   </p> <p> Control.get_nodes(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>Get how many child controls this control has recursively. So 1 if it doesnt have any children, 2 if it has 1 child, 3 if it has 2 children or if it has 1 child which itself has a child, etc... Only valid after <code>UI.commit</code>.   </p> <p> Control.get_depth(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>Get the depth generated for a control, not including the depth offset.   </p> <p> Control.get_depth_offset(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>Get the depth offset of a control.   </p> <p> Control.set_depth_offset(control: <code>Control</code>, depth_offset: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the depth offset for a control, allowing you to move it in front or behind other controls if the generated depth doesnt work for you   </p> <p> Control.get_input_inside(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>Check whether the input (usually mouse cursor) is currently in a control. (In sync with <code>UIEvent.enter</code> and <code>UIEvent.exit</code>)   </p> <p> Control.get_input_pressed(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>Check whether the input (usually mouse cursor) is currently in a control and any of its buttons are pressed.   </p> <p> Control.child_at_point(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>Control</code></p> <p>Get the top child control at a specific (absolute) point.   </p> <p> Control.child_count(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>Get the amount of children a control has.   </p> <p> Control.child_index(control: <code>Control</code>, child: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>Get the index of a child control.   </p> <p> Control.child_get(control: <code>Control</code>, index: <code>Num</code>) \u00b6 returns <code>Child</code></p> <p>Get a child control by its index.   </p> <p> Control.child_add(control: <code>Control</code>, child: <code>Control</code>, internal: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Make a control the child control of another control. If you mark the child as internal, it wont be queried by other methods affecting children.   </p> <p> Control.child_add(control: <code>Control</code>, child: <code>Control</code>) \u00b6 returns <code>None</code></p> <p>Make a control the child control of another control. This means the childs position will be relative to its parent, layout depends a lot on those relationships and its used by functions like destroy_children.</p> <pre><code>  //create parent\n  var parent = Control.create(_ui)\n  Control.set_bounds(parent, 200, 200, 100, 100)\n  //create child\n  var child = Control.create(_ui)\n  Control.set_bounds(child, 25, 25, 50, 50)\n\n  //parent child to parent\n  Control.child_add(parent, child)\n\n  var bounds = [0,0,0,0]\n  Control.get_bounds_abs(child, bounds)\n  Log.print(bounds) //[225, 225, 50, 50]\n\n  Control.clear(parent, UIClear.destroy)\n  Log.print(Control.child_count(parent)) //0\n  Log.print(Control.valid(child)) //false\n\n  UI.commit(_ui)\n</code></pre> <p> Control.child_remove(control: <code>Control</code>, child: <code>Control</code>) \u00b6 returns <code>None</code></p> <p>Remove a child from a control, unparenting it.   </p> <p> Control.children_bounds(control: <code>Control</code>, into: <code>List</code>) \u00b6 returns <code>None</code></p> <p>Get the combined bounds of all children of a control into a list <code>[x, y, width, height]</code>. The passed list must have at least 4 elements and the function will write into the first 4. Passing a list into the function instead of returning a value is to avoid allocating memory where not needed.   </p> <p> Control.set_behave(control: <code>Control</code>, behave: <code>UIBehave</code>) \u00b6 returns <code>None</code></p> <p>Set how the control behaves in the layout as a child of its container. You can combine characteristics with a bit or operator (<code>|</code>).   </p> <p> Control.get_behave(control: <code>Control</code>) \u00b6 returns <code>UIBehave</code></p> <p>Returns the behave bitflags for the control   </p> <p> Control.set_contain(control: <code>Control</code>, contain: <code>UIContain</code>) \u00b6 returns <code>None</code></p> <p>Set how the control behaves in the layout as a container of its children. You can combine characteristics with a bit or operator (<code>|</code>).   </p> <p> Control.get_contain(control: <code>Control</code>) \u00b6 returns <code>UIContain</code></p> <p>Returns the contain bitflags for the control   </p> <p> Control.set_margin(control: <code>Control</code>, left: <code>Num</code>, top: <code>Num</code>, right: <code>Num</code>, bottom: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the margins of a control. Only the margins set in <code>set_behave</code> are actually observed.   </p> <p> Control.set_limits(control: <code>Control</code>, min_x: <code>Num</code>, min_y: <code>Num</code>, max_x: <code>Num</code>, max_y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the min and max size of a control when using layout.   </p> <p> Control.get_margin(control: <code>Control</code>) \u00b6 returns <code>List</code></p> <p>Get the margins of a control.   </p> <p> Control.set_render(control: <code>Control</code>, fn: <code>Fn</code>) \u00b6 returns <code>None</code></p> <p>Set a custom render function with the arguments <code>|control, state, x, y, w, h|</code>.  Useful for making your own controls.   </p> <p> Control.set_events(control: <code>Control</code>, fn: <code>Fn</code>) \u00b6 returns <code>String</code></p> <p>Add a function to handle events on a control. Returns an <code>id</code> for the newly added event that can be used to remove it.</p> <pre><code>  var btn = UIButton.create(ui)\n  UIButton.set_text(btn, \"click me!\")\n  Control.set_events(btn) {|event|\n    if(event.type == UIEvent.release) {\n      Log.print(\"clicked button\")\n    }\n  }\n</code></pre> <p> Control.unset_events(control: <code>Control</code>, id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Remove an event handling function from a control. Takes in the id that was returned upon registering the function.   </p> <p> Control.set_process(control: <code>Control</code>, fn: <code>Fn</code>) \u00b6 returns <code>None</code></p> <p>Set a custom process function with the arguments <code>|control, state, event, x, y, w, h|</code>.  Useful for making your own controls.   </p> <p> Control.get_state_data(control: <code>Control</code>) \u00b6 returns <code>Any</code></p> <p>Get the state data associated with this control.   </p> <p> Control.set_state_data(control: <code>Control</code>, data: <code>Any</code>) \u00b6 returns <code>None</code></p> <p>Set state data associated with this control. Can be any wren object.   </p>"},{"location":"api/v/2025.1.1/ui/image/","title":"Image","text":""},{"location":"api/v/2025.1.1/ui/image/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/ui/image/#luxe-uiimage-module","title":"<code>luxe: ui/image</code> module","text":"<ul> <li>UIImage </li> </ul>"},{"location":"api/v/2025.1.1/ui/image/#uiimage","title":"UIImage","text":"<p><code>import \"luxe: ui/image\" for UIImage</code></p> <p><code>UIImage</code> is a type of <code>Control</code> made to display images.</p> <pre><code>  var image = UIImage.create(ui)\n  UIImage.set_image(image, Assets.image(\"path/to/image\"))\n  //setup positioning etc with `Control.___`\n</code></pre> <ul> <li>create(ui_entity: <code>Entity</code>)</li> <li>set_image(control: <code>UIImage</code>, image: <code>Image</code>)</li> <li>set_image(control: <code>UIImage</code>, image: <code>Image</code>, flags: <code>UIImageFlags</code>)</li> <li>get_image(control: <code>UIImage</code>)</li> <li>set_material(control: <code>UIImage</code>, material: <code>Material</code>)</li> <li>set_uv(control: <code>UIImage</code>, left: <code>Num</code>, top: <code>Num</code>, right: <code>Num</code>, bottom: <code>Num</code>)</li> <li>set_color(control: <code>UIImage</code>, color: <code>Color</code>)</li> <li>get_color(control: <code>UIImage</code>)</li> <li>set_angle(control: <code>UIImage</code>, degrees: <code>Num</code>)</li> <li>set_fit(control: <code>UIImage</code>, fit: <code>UIImageFit</code>)</li> <li>get_fit(control: <code>UIImage</code>)</li> </ul> <p> UIImage.create(ui_entity: <code>Entity</code>) \u00b6 returns <code>UIImage</code></p> <p>Create a new UIImage control.   </p> <p> UIImage.set_image(control: <code>UIImage</code>, image: <code>Image</code>) \u00b6 returns <code>None</code></p> <p>Set image of <code>UIImage</code> control (uses <code>UIImageFlags.none</code> with linear interpolation). Setting an image will reset any set custom material and use an internal material created from the <code>luxe: material_basis/ui_solid</code> basis instead.   </p> <p> UIImage.set_image(control: <code>UIImage</code>, image: <code>Image</code>, flags: <code>UIImageFlags</code>) \u00b6 returns <code>None</code></p> <p>Set displayed image of <code>UIImage</code> control. The flags determine what sampler is used to read the image. Setting an image will reset any set custom material and use an internal material created from the <code>luxe: material_basis/ui_solid</code> basis instead. <pre><code>  var image = UIImage.create(ui)\n  UIImage.set_image(image, Assets.image(\"path/to/image\"), UIImageFlags.pixelated)\n</code></pre></p> <p> UIImage.get_image(control: <code>UIImage</code>) \u00b6 returns <code>Image</code></p> <p>Get currently displayed image of <code>UIImage</code>.   </p> <p> UIImage.set_material(control: <code>UIImage</code>, material: <code>Material</code>) \u00b6 returns <code>None</code></p> <p>Set the material used to render the <code>UIImage</code>. Setting a custom material will reset the controls image, so you need to author that via the inputs on your material.   </p> <p> UIImage.set_uv(control: <code>UIImage</code>, left: <code>Num</code>, top: <code>Num</code>, right: <code>Num</code>, bottom: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the uv bounds, default is (0, 0, 1, 1). Drawing only top left of the image would be (0.5, 0.5, 1, 1).   </p> <p> UIImage.set_color(control: <code>UIImage</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>Set the tint color of the <code>UIImage</code>. Communicated to the shader via vertex colors.   </p> <p> UIImage.get_color(control: <code>UIImage</code>) \u00b6 returns <code>Color</code></p> <p>Get the current tint color of the <code>UIImage</code>.   </p> <p> UIImage.set_angle(control: <code>UIImage</code>, degrees: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the angle of the <code>UIImage</code> control. Note that this will not affect child controls.   </p> <p> UIImage.set_fit(control: <code>UIImage</code>, fit: <code>UIImageFit</code>) \u00b6 returns <code>None</code></p> <p>Set the fit mode   </p> <p> UIImage.get_fit(control: <code>UIImage</code>) \u00b6 returns <code>UIImageFit</code></p> <p>Get the fit mode   </p>"},{"location":"api/v/2025.1.1/ui/label/","title":"Label","text":""},{"location":"api/v/2025.1.1/ui/label/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/ui/label/#luxe-uilabel-module","title":"<code>luxe: ui/label</code> module","text":"<ul> <li>UIAutoSize </li> <li>UILabel </li> <li>UIOverflowScroll </li> </ul>"},{"location":"api/v/2025.1.1/ui/label/#uiautosize","title":"UIAutoSize","text":"<p><code>import \"luxe: ui/label\" for UIAutoSize</code></p> <p>no docs found</p> <ul> <li>none</li> <li>width</li> <li>height</li> <li>both</li> </ul> <p> UIAutoSize.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIAutoSize.width \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIAutoSize.height \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIAutoSize.both \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/label/#uilabel","title":"UILabel","text":"<p><code>import \"luxe: ui/label\" for UILabel</code></p> <p>no docs found</p> <ul> <li>create(ui_entity: <code>Any</code>)</li> <li>set_text(label: <code>Any</code>, text: <code>Any</code>)</li> <li>get_text(label: <code>Any</code>)</li> <li>get_render_text(label: <code>Any</code>)</li> <li>get_text_extents(label: <code>Any</code>, offset: <code>Any</code>, count: <code>Any</code>)</li> <li>get_text_extents(label: <code>Any</code>)</li> <li>set_font(label: <code>Any</code>, font: <code>Any</code>)</li> <li>get_font(label: <code>Any</code>)</li> <li>set_color(label: <code>Any</code>, color: <code>Any</code>)</li> <li>get_color(label: <code>Any</code>)</li> <li>set_color_hover(label: <code>Any</code>, color: <code>Any</code>)</li> <li>get_color_hover(label: <code>Any</code>)</li> <li>set_text_size(label: <code>Any</code>, size: <code>Any</code>)</li> <li>get_text_size(label: <code>Any</code>)</li> <li>set_align(label: <code>Any</code>, align: <code>Any</code>)</li> <li>get_align(label: <code>Any</code>)</li> <li>set_align_vertical(label: <code>Any</code>, align: <code>Any</code>)</li> <li>get_align_vertical(label: <code>Any</code>)</li> <li>set_text_style(label: <code>Any</code>, style: <code>TextStyle</code>)</li> <li>get_text_style(label: <code>Any</code>)</li> <li>set_max_visible(label: <code>Any</code>, visible_count: <code>Num</code>)</li> <li>get_max_visible(label: <code>Any</code>)</li> <li>set_auto_size(label: <code>Any</code>, state: <code>UIAutoSize</code>)</li> <li>set_overflow_scroll(label: <code>Any</code>, type: <code>UIOverflowScroll</code>, speed: <code>Num</code>, wait: <code>Num</code>, pause: <code>Num</code>)</li> <li>set_overflow_scroll(label: <code>Any</code>, speed: <code>Num</code>, wait: <code>Num</code>, pause: <code>Num</code>)</li> <li>set_loc(label: <code>Any</code>, space: <code>String</code>, key: <code>String</code>)</li> <li>set_loc(label: <code>Any</code>, key: <code>String</code>)</li> <li>set_loc_with_args(label: <code>Any</code>, space: <code>String</code>, key: <code>String</code>, args: <code>List</code>)</li> <li>set_loc_with_args(label: <code>Any</code>, key: <code>String</code>, args: <code>List</code>)</li> <li>set_outline(control: <code>UILabel</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>)</li> <li>set_shadow(control: <code>UILabel</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>)</li> </ul> <p> UILabel.create(ui_entity: <code>Any</code>) \u00b6 returns <code>UILabel</code></p> <p>no docs found   </p> <p> UILabel.set_text(label: <code>Any</code>, text: <code>Any</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UILabel.get_text(label: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> UILabel.get_render_text(label: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.get_text_extents(label: <code>Any</code>, offset: <code>Any</code>, count: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.get_text_extents(label: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.set_font(label: <code>Any</code>, font: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.get_font(label: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.set_color(label: <code>Any</code>, color: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.get_color(label: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.set_color_hover(label: <code>Any</code>, color: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.get_color_hover(label: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.set_text_size(label: <code>Any</code>, size: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.get_text_size(label: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.set_align(label: <code>Any</code>, align: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.get_align(label: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.set_align_vertical(label: <code>Any</code>, align: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.get_align_vertical(label: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.set_text_style(label: <code>Any</code>, style: <code>TextStyle</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UILabel.get_text_style(label: <code>Any</code>) \u00b6 returns <code>TextStyle</code></p> <p>no docs found   </p> <p> UILabel.set_max_visible(label: <code>Any</code>, visible_count: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UILabel.get_max_visible(label: <code>Any</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> UILabel.set_auto_size(label: <code>Any</code>, state: <code>UIAutoSize</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UILabel.set_overflow_scroll(label: <code>Any</code>, type: <code>UIOverflowScroll</code>, speed: <code>Num</code>, wait: <code>Num</code>, pause: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UILabel.set_overflow_scroll(label: <code>Any</code>, speed: <code>Num</code>, wait: <code>Num</code>, pause: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UILabel.set_loc(label: <code>Any</code>, space: <code>String</code>, key: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UILabel.set_loc(label: <code>Any</code>, key: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.set_loc_with_args(label: <code>Any</code>, space: <code>String</code>, key: <code>String</code>, args: <code>List</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UILabel.set_loc_with_args(label: <code>Any</code>, key: <code>String</code>, args: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.set_outline(control: <code>UILabel</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>) \u00b6 returns <code>None</code></p> <p>Set the text outline parameters.   </p> <p> UILabel.set_shadow(control: <code>UILabel</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>) \u00b6 returns <code>None</code></p> <p>Set the text shadow parameters.   </p>"},{"location":"api/v/2025.1.1/ui/label/#uioverflowscroll","title":"UIOverflowScroll","text":"<p><code>import \"luxe: ui/label\" for UIOverflowScroll</code></p> <p>no docs found</p> <ul> <li>none</li> <li>always</li> <li>width_overflow</li> </ul> <p> UIOverflowScroll.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIOverflowScroll.always \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIOverflowScroll.width_overflow \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/list/","title":"List","text":""},{"location":"api/v/2025.1.1/ui/list/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/ui/list/#luxe-uilist-module","title":"<code>luxe: ui/list</code> module","text":"<ul> <li>UIList </li> </ul>"},{"location":"api/v/2025.1.1/ui/list/#uilist","title":"UIList","text":"<p><code>import \"luxe: ui/list\" for UIList</code></p> <p>no docs found</p> <ul> <li>create(ui_entity: <code>Any</code>)</li> <li>add(list: <code>Any</code>, control: <code>Any</code>)</li> <li>remove(list: <code>Any</code>, control: <code>Any</code>)</li> <li>clear(list: <code>Any</code>, uiclear_action: <code>Any</code>)</li> <li>refresh(list: <code>Any</code>)</li> <li>set_flex_width(list: <code>Any</code>, state: <code>Any</code>)</li> <li>set_percent(list: <code>Any</code>, vertical: <code>Any</code>, horizontal: <code>Any</code>)</li> <li>set_percent_v(list: <code>Any</code>, vertical: <code>Any</code>)</li> <li>set_percent_h(list: <code>Any</code>, horizontal: <code>Any</code>)</li> <li>get_percent_v(list: <code>Any</code>)</li> <li>get_percent_h(list: <code>Any</code>)</li> <li>set_scroll(list: <code>Any</code>, vertical: <code>Any</code>, horizontal: <code>Any</code>)</li> <li>set_scroll_v(list: <code>Any</code>, vertical: <code>Any</code>)</li> <li>set_scroll_h(list: <code>Any</code>, horizontal: <code>Any</code>)</li> <li>get_scroll_v(list: <code>Any</code>)</li> <li>get_scroll_h(list: <code>Any</code>)</li> <li>can_scroll_v(list: <code>Any</code>)</li> <li>can_scroll_h(list: <code>Any</code>)</li> <li>count(list: <code>Any</code>)</li> <li>get(list: <code>Any</code>, index: <code>Any</code>)</li> <li>index(list: <code>Any</code>, control: <code>Any</code>)</li> </ul> <p> UIList.create(ui_entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.add(list: <code>Any</code>, control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.remove(list: <code>Any</code>, control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.clear(list: <code>Any</code>, uiclear_action: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.refresh(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.set_flex_width(list: <code>Any</code>, state: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.set_percent(list: <code>Any</code>, vertical: <code>Any</code>, horizontal: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.set_percent_v(list: <code>Any</code>, vertical: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.set_percent_h(list: <code>Any</code>, horizontal: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.get_percent_v(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.get_percent_h(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.set_scroll(list: <code>Any</code>, vertical: <code>Any</code>, horizontal: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.set_scroll_v(list: <code>Any</code>, vertical: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.set_scroll_h(list: <code>Any</code>, horizontal: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.get_scroll_v(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.get_scroll_h(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.can_scroll_v(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.can_scroll_h(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.count(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.get(list: <code>Any</code>, index: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.index(list: <code>Any</code>, control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/list_filtered/","title":"List filtered","text":""},{"location":"api/v/2025.1.1/ui/list_filtered/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/ui/list_filtered/#luxe-uilist_filtered-module","title":"<code>luxe: ui/list_filtered</code> module","text":"<ul> <li>State </li> <li>UIListFiltered </li> <li>UIListFilteredItem </li> </ul>"},{"location":"api/v/2025.1.1/ui/list_filtered/#state","title":"State","text":"<p><code>import \"luxe: ui/list_filtered\" for State</code></p> <p>no docs found</p> <ul> <li>list</li> <li>set_filter_sizes(height: <code>Num</code>, text_size: <code>Num</code>)</li> <li>set_filter_string(text: <code>String</code>)</li> <li>add(control: <code>Any</code>, keywords: <code>Any</code>)</li> <li>remove(control: <code>Any</code>)</li> <li>clear(uiclear_action: <code>Any</code>)</li> <li>refresh()</li> <li>focus()</li> <li>placeholder=(v : Any)</li> <li>placeholder</li> <li>events</li> <li>new(ui: <code>Any</code>, control: <code>Any</code>)</li> <li>has_filter</li> <li>get_filter()</li> <li>force_filter(text: <code>Any</code>, focus: <code>Any</code>)</li> <li>cancel_filter()</li> <li>filter(filter: <code>String</code>)</li> <li>filter_and_sort(items: <code>List</code>, filter: <code>String</code>)</li> </ul> <p> State.list \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.set_filter_sizes(height: <code>Num</code>, text_size: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.set_filter_string(text: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.add(control: <code>Any</code>, keywords: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.remove(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.clear(uiclear_action: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.refresh() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.focus() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.placeholder=(v : Any) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> State.placeholder \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> State.events \u00b6 returns <code>Events</code></p> <p>no docs found   </p> <p> State.new(ui: <code>Any</code>, control: <code>Any</code>) \u00b6 returns <code>State</code></p> <p>no docs found   </p> <p> State.has_filter \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.get_filter() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.force_filter(text: <code>Any</code>, focus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.cancel_filter() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.filter(filter: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.filter_and_sort(items: <code>List</code>, filter: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/list_filtered/#uilistfiltered","title":"UIListFiltered","text":"<p><code>import \"luxe: ui/list_filtered\" for UIListFiltered</code></p> <p>no docs found</p> <ul> <li>MATCH</li> <li>create(ui: <code>Any</code>)</li> <li>set_bounds(list: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>)</li> <li>set_size(list: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>)</li> <li>set_filter_sizes(list: <code>Any</code>, height: <code>Num</code>, text_size: <code>Num</code>)</li> <li>on_filter(list: <code>Control</code>, fn: <code>Fn</code>)</li> <li>get_placeholder(list: <code>Any</code>, text: <code>Any</code>)</li> <li>set_placeholder(list: <code>Any</code>, text: <code>Any</code>)</li> <li>set_filter(list: <code>Any</code>, fn: <code>Any</code>)</li> <li>get_filter(list: <code>Any</code>)</li> <li>set_filter_string(list: <code>Any</code>, text: <code>String</code>)</li> <li>get_list_view(list: <code>Any</code>)</li> <li>add(list: <code>Any</code>, control: <code>Any</code>, keywords: <code>Any</code>)</li> <li>remove(list: <code>Any</code>, control: <code>Any</code>)</li> <li>clear(list: <code>Any</code>, uiclear_action: <code>Any</code>)</li> <li>refresh(list: <code>Any</code>)</li> <li>focus(list: <code>Any</code>)</li> </ul> <p> UIListFiltered.MATCH \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.create(ui: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.set_bounds(list: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.set_size(list: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.set_filter_sizes(list: <code>Any</code>, height: <code>Num</code>, text_size: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.on_filter(list: <code>Control</code>, fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.get_placeholder(list: <code>Any</code>, text: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.set_placeholder(list: <code>Any</code>, text: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.set_filter(list: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.get_filter(list: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> UIListFiltered.set_filter_string(list: <code>Any</code>, text: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.get_list_view(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.add(list: <code>Any</code>, control: <code>Any</code>, keywords: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.remove(list: <code>Any</code>, control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.clear(list: <code>Any</code>, uiclear_action: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.refresh(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.focus(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/list_filtered/#uilistfiltereditem","title":"UIListFilteredItem","text":"<p><code>import \"luxe: ui/list_filtered\" for UIListFilteredItem</code></p> <p>no docs found</p> <ul> <li>control</li> <li>keywords</li> <li>result</li> <li>result=(v : FuzzyResult)</li> <li>new(control: <code>Control</code>, keywords: <code>List</code>)</li> </ul> <p> UIListFilteredItem.control \u00b6 returns <code>Control</code></p> <p>no docs found   </p> <p> UIListFilteredItem.keywords \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> UIListFilteredItem.result \u00b6 returns <code>FuzzyResult</code></p> <p>no docs found   </p> <p> UIListFilteredItem.result=(v : FuzzyResult) \u00b6 returns <code>FuzzyResult</code></p> <p>no docs found   </p> <p> UIListFilteredItem.new(control: <code>Control</code>, keywords: <code>List</code>) \u00b6 returns <code>UIListFilteredItem</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/panel/","title":"Panel","text":""},{"location":"api/v/2025.1.1/ui/panel/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/ui/panel/#luxe-uipanel-module","title":"<code>luxe: ui/panel</code> module","text":"<ul> <li>UIPanel </li> </ul>"},{"location":"api/v/2025.1.1/ui/panel/#uipanel","title":"UIPanel","text":"<p><code>import \"luxe: ui/panel\" for UIPanel</code></p> <p>no docs found</p> <ul> <li>create(ui: <code>Entity</code>)</li> <li>set_color(panel: <code>Control</code>, color: <code>Color</code>)</li> <li>get_color(panel: <code>Control</code>)</li> <li>set_border(panel: <code>Control</code>, size: <code>Num</code>, color: <code>Color</code>)</li> <li>set_radius(panel: <code>Control</code>, radius: <code>Float4</code>, smoothness: <code>Float4</code>)</li> </ul> <p> UIPanel.create(ui: <code>Entity</code>) \u00b6 returns <code>UIPanel</code></p> <p>no docs found   </p> <p> UIPanel.set_color(panel: <code>Control</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UIPanel.get_color(panel: <code>Control</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UIPanel.set_border(panel: <code>Control</code>, size: <code>Num</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UIPanel.set_radius(panel: <code>Control</code>, radius: <code>Float4</code>, smoothness: <code>Float4</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/progress/","title":"Progress","text":""},{"location":"api/v/2025.1.1/ui/progress/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/ui/progress/#luxe-uiprogress-module","title":"<code>luxe: ui/progress</code> module","text":"<ul> <li>UIProgress </li> </ul>"},{"location":"api/v/2025.1.1/ui/progress/#uiprogress","title":"UIProgress","text":"<p><code>import \"luxe: ui/progress\" for UIProgress</code></p> <p>no docs found</p> <ul> <li>create(ui_entity: <code>Any</code>)</li> <li>set_progress(control: <code>Any</code>, value: <code>Any</code>)</li> <li>get_progress(control: <code>Any</code>)</li> </ul> <p> UIProgress.create(ui_entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIProgress.set_progress(control: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIProgress.get_progress(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/scroll/","title":"Scroll","text":""},{"location":"api/v/2025.1.1/ui/scroll/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/ui/scroll/#luxe-uiscroll-module","title":"<code>luxe: ui/scroll</code> module","text":"<ul> <li>UIScroll </li> </ul>"},{"location":"api/v/2025.1.1/ui/scroll/#uiscroll","title":"UIScroll","text":"<p><code>import \"luxe: ui/scroll\" for UIScroll</code></p> <p>no docs found</p> <ul> <li>create(ui_entity: <code>Any</code>)</li> <li>add(scroll: <code>Any</code>, control: <code>Any</code>)</li> <li>remove(scroll: <code>Any</code>, control: <code>Any</code>)</li> <li>count(scroll: <code>Any</code>)</li> <li>clear(scroll: <code>Any</code>, uiclear_action: <code>Any</code>)</li> <li>get(scroll: <code>Any</code>, index: <code>Any</code>)</li> <li>index(scroll: <code>Any</code>, control: <code>Any</code>)</li> <li>refresh(scroll: <code>Any</code>)</li> <li>set_percent(scroll: <code>Any</code>, vertical: <code>Any</code>, horizontal: <code>Any</code>)</li> <li>set_scroll(scroll: <code>Any</code>, vertical: <code>Any</code>, horizontal: <code>Any</code>)</li> <li>set_percent_v(scroll: <code>Any</code>, vertical: <code>Any</code>)</li> <li>set_percent_h(scroll: <code>Any</code>, horizontal: <code>Any</code>)</li> <li>set_scroll_v(scroll: <code>Any</code>, vertical: <code>Any</code>)</li> <li>set_scroll_h(scroll: <code>Any</code>, horizontal: <code>Any</code>)</li> <li>get_percent_v(scroll: <code>Any</code>)</li> <li>get_percent_h(scroll: <code>Any</code>)</li> <li>get_scroll_v(scroll: <code>Any</code>)</li> <li>get_scroll_h(scroll: <code>Any</code>)</li> <li>can_scroll_v(scroll: <code>Any</code>)</li> <li>can_scroll_h(scroll: <code>Any</code>)</li> </ul> <p> UIScroll.create(ui_entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.add(scroll: <code>Any</code>, control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.remove(scroll: <code>Any</code>, control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.count(scroll: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.clear(scroll: <code>Any</code>, uiclear_action: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.get(scroll: <code>Any</code>, index: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.index(scroll: <code>Any</code>, control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.refresh(scroll: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.set_percent(scroll: <code>Any</code>, vertical: <code>Any</code>, horizontal: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.set_scroll(scroll: <code>Any</code>, vertical: <code>Any</code>, horizontal: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.set_percent_v(scroll: <code>Any</code>, vertical: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.set_percent_h(scroll: <code>Any</code>, horizontal: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.set_scroll_v(scroll: <code>Any</code>, vertical: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.set_scroll_h(scroll: <code>Any</code>, horizontal: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.get_percent_v(scroll: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.get_percent_h(scroll: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.get_scroll_v(scroll: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.get_scroll_h(scroll: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.can_scroll_v(scroll: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.can_scroll_h(scroll: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/slider/","title":"Slider","text":""},{"location":"api/v/2025.1.1/ui/slider/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/ui/slider/#luxe-uislider-module","title":"<code>luxe: ui/slider</code> module","text":"<ul> <li>UISlider </li> </ul>"},{"location":"api/v/2025.1.1/ui/slider/#uislider","title":"UISlider","text":"<p><code>import \"luxe: ui/slider\" for UISlider</code></p> <p>no docs found</p> <ul> <li>create(ui_entity: <code>Any</code>)</li> <li>set_value(control: <code>Any</code>, value: <code>Any</code>, event_kind: <code>Any</code>)</li> <li>set_value(control: <code>Any</code>, value: <code>Any</code>)</li> <li>get_value(control: <code>Any</code>)</li> <li>set_step(control: <code>Any</code>, value: <code>Any</code>)</li> <li>get_step(control: <code>Any</code>)</li> <li>set_min(control: <code>Any</code>, value: <code>Any</code>)</li> <li>get_min(control: <code>Any</code>)</li> <li>set_max(control: <code>Any</code>, value: <code>Any</code>)</li> <li>get_max(control: <code>Any</code>)</li> <li>set_inverted(control: <code>Any</code>, value: <code>Any</code>)</li> <li>get_inverted(control: <code>Any</code>)</li> </ul> <p> UISlider.create(ui_entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UISlider.set_value(control: <code>Any</code>, value: <code>Any</code>, event_kind: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UISlider.set_value(control: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UISlider.get_value(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UISlider.set_step(control: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UISlider.get_step(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UISlider.set_min(control: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UISlider.get_min(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UISlider.set_max(control: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UISlider.get_max(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UISlider.set_inverted(control: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UISlider.get_inverted(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/tabs/","title":"Tabs","text":""},{"location":"api/v/2025.1.1/ui/tabs/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/ui/tabs/#luxe-uitabs-module","title":"<code>luxe: ui/tabs</code> module","text":"<ul> <li>UITabs </li> </ul>"},{"location":"api/v/2025.1.1/ui/tabs/#uitabs","title":"UITabs","text":"<p><code>import \"luxe: ui/tabs\" for UITabs</code></p> <p>no docs found</p> <ul> <li>create(ui: <code>Any</code>)</li> <li>set_active(control: <code>Control</code>, index: <code>Num</code>)</li> <li>get_active(control: <code>Control</code>)</li> <li>get_count(control: <code>Control</code>)</li> <li>set_colors(control: <code>Control</code>, active: <code>Color</code>, inactive: <code>Color</code>)</li> <li>get_tab_header(control: <code>Control</code>, index: <code>Num</code>)</li> <li>get_tab(control: <code>Control</code>, index: <code>Num</code>)</li> <li>add_tab(control: <code>Control</code>, title: <code>String</code>, title_color: <code>Color</code>)</li> </ul> <p> UITabs.create(ui: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UITabs.set_active(control: <code>Control</code>, index: <code>Num</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> UITabs.get_active(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> UITabs.get_count(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> UITabs.set_colors(control: <code>Control</code>, active: <code>Color</code>, inactive: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UITabs.get_tab_header(control: <code>Control</code>, index: <code>Num</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p> <p> UITabs.get_tab(control: <code>Control</code>, index: <code>Num</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p> <p> UITabs.add_tab(control: <code>Control</code>, title: <code>String</code>, title_color: <code>Color</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/text/","title":"Text","text":""},{"location":"api/v/2025.1.1/ui/text/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/ui/text/#luxe-uitext-module","title":"<code>luxe: ui/text</code> module","text":"<ul> <li>UIText </li> </ul>"},{"location":"api/v/2025.1.1/ui/text/#uitext","title":"UIText","text":"<p><code>import \"luxe: ui/text\" for UIText</code></p> <p>no docs found</p> <ul> <li>create(ui_entity: <code>Any</code>)</li> <li>set_text(control: <code>Any</code>, text: <code>Any</code>)</li> <li>get_text(control: <code>Any</code>)</li> <li>set_font(control: <code>Any</code>, font: <code>Any</code>)</li> <li>get_font(control: <code>Any</code>)</li> <li>set_colors(control: <code>Any</code>, bg: <code>Color</code>, border: <code>Color</code>, border_hover: <code>Color</code>, border_focused: <code>Color</code>)</li> <li>set_radius(control: <code>Control</code>, radius: <code>Float4</code>, smoothness: <code>Float4</code>)</li> <li>set_color(control: <code>Any</code>, color: <code>Any</code>)</li> <li>get_color(control: <code>Any</code>)</li> <li>set_text_size(control: <code>Any</code>, size: <code>Any</code>)</li> <li>get_text_size(control: <code>Any</code>)</li> <li>set_align(control: <code>Any</code>, align: <code>Any</code>)</li> <li>get_align(control: <code>Any</code>)</li> <li>set_align_vertical(control: <code>Any</code>, align: <code>Any</code>)</li> <li>get_align_vertical(control: <code>Any</code>)</li> <li>select_all(control: <code>Any</code>)</li> <li>invalidate(control: <code>Control</code>, change_before: <code>String</code>)</li> <li>set_outline(control: <code>UIText</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>)</li> <li>set_shadow(control: <code>UIText</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>)</li> </ul> <p> UIText.create(ui_entity: <code>Any</code>) \u00b6 returns <code>UIText</code></p> <p>no docs found   </p> <p> UIText.set_text(control: <code>Any</code>, text: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.get_text(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.set_font(control: <code>Any</code>, font: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.get_font(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.set_colors(control: <code>Any</code>, bg: <code>Color</code>, border: <code>Color</code>, border_hover: <code>Color</code>, border_focused: <code>Color</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.set_radius(control: <code>Control</code>, radius: <code>Float4</code>, smoothness: <code>Float4</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UIText.set_color(control: <code>Any</code>, color: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.get_color(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.set_text_size(control: <code>Any</code>, size: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.get_text_size(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.set_align(control: <code>Any</code>, align: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.get_align(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.set_align_vertical(control: <code>Any</code>, align: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.get_align_vertical(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.select_all(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.invalidate(control: <code>Control</code>, change_before: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.set_outline(control: <code>UIText</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>) \u00b6 returns <code>None</code></p> <p>Set the text outline parameters.   </p> <p> UIText.set_shadow(control: <code>UIText</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>) \u00b6 returns <code>None</code></p> <p>Set the text shadow parameters.   </p>"},{"location":"api/v/2025.1.1/ui/window/","title":"Window","text":""},{"location":"api/v/2025.1.1/ui/window/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/ui/window/#luxe-uiwindow-module","title":"<code>luxe: ui/window</code> module","text":"<ul> <li>UIWindow </li> <li>UIWindowChange </li> </ul>"},{"location":"api/v/2025.1.1/ui/window/#uiwindow","title":"UIWindow","text":"<p><code>import \"luxe: ui/window\" for UIWindow</code></p> <p><code>UIWindow</code> is a <code>Control</code> with a title bar, close button, and can be moved around  and resized like a windowed application on a desktop operating system. As you'd expect, you can attach other <code>Controls</code> to it that stay attached as you move it around.</p> <pre><code>  var window = UIWindow.create(ui)\n  UIWindow.set_text(window, \"I'm a window!\")\n  UIWindow.set_title_size(window, 24)\n  UIWindow.set_text_size(window, 14)\n  UIWindow.set_resizable(window, true)\n  Control.set_bounds(window, 64, 64, 680, 360)\n</code></pre> <ul> <li>create(ui_entity: <code>Entity</code>)</li> <li>close(control: <code>UIWindow</code>)</li> <li>set_collapsed(control: <code>UIWindow</code>, state: <code>Bool</code>)</li> <li>get_collapsed(control: <code>UIWindow</code>)</li> <li>set_text(control: <code>UIWindow</code>, text: <code>String</code>)</li> <li>set_text_size(control: <code>UIWindow</code>, size: <code>Num</code>)</li> <li>set_text_color(control: <code>UIWindow</code>, color: <code>Color</code>)</li> <li>set_text_font(control: <code>UIWindow</code>, font: <code>Font</code>)</li> <li>set_title_size(control: <code>UIWindow</code>, size: <code>Num</code>)</li> <li>set_resizable(control: <code>UIWindow</code>, state: <code>Bool</code>)</li> <li>set_bring_to_front(control: <code>UIWindow</code>, state: <code>Bool</code>)</li> <li>set_closable(control: <code>UIWindow</code>, state: <code>Bool</code>)</li> <li>set_collapsible(control: <code>UIWindow</code>, state: <code>Bool</code>)</li> <li>set_draggable(control: <code>UIWindow</code>, state: <code>Bool</code>)</li> <li>get_resizable(control: <code>UIWindow</code>)</li> <li>get_bring_to_front(control: <code>UIWindow</code>)</li> <li>get_closable(control: <code>UIWindow</code>)</li> <li>get_collapsible(control: <code>UIWindow</code>)</li> <li>get_draggable(control: <code>UIWindow</code>)</li> <li>set_outline(control: <code>UIWindow</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>)</li> <li>set_shadow(control: <code>UIWindow</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>)</li> </ul> <p> UIWindow.create(ui_entity: <code>Entity</code>) \u00b6 returns <code>UIWindow</code></p> <p>Create a new <code>UIWindow</code> control for the given UI.   </p> <p> UIWindow.close(control: <code>UIWindow</code>) \u00b6 returns <code>None</code></p> <p>Make the given window disappear.   </p> <p> UIWindow.set_collapsed(control: <code>UIWindow</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set whether the given window's body is drawn (false, uncollapsed) or only the titlebar (true, collapsed).   </p> <p> UIWindow.get_collapsed(control: <code>UIWindow</code>) \u00b6 returns <code>Bool</code></p> <p>Get if the given window is collapsed.   </p> <p> UIWindow.set_text(control: <code>UIWindow</code>, text: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Set the titlebar text of the given window.   </p> <p> UIWindow.set_text_size(control: <code>UIWindow</code>, size: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the size of the titlebar text of the given window.   </p> <p> UIWindow.set_text_color(control: <code>UIWindow</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>Set the color of the titlebar text of the given window.   </p> <p> UIWindow.set_text_font(control: <code>UIWindow</code>, font: <code>Font</code>) \u00b6 returns <code>None</code></p> <p>Set the font of the titlebar text of the given window.   </p> <p> UIWindow.set_title_size(control: <code>UIWindow</code>, size: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the height of the titlebar of the given window.   </p> <p> UIWindow.set_resizable(control: <code>UIWindow</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set if a window can be resized by dragging its bottom right corner.   </p> <p> UIWindow.set_bring_to_front(control: <code>UIWindow</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set if a window will bring itself to the front of the UI when interacted with.   </p> <p> UIWindow.set_closable(control: <code>UIWindow</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set if a window has a Close button the user can press.   </p> <p> UIWindow.set_collapsible(control: <code>UIWindow</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set if a window has a Collapse button the user can press.   </p> <p> UIWindow.set_draggable(control: <code>UIWindow</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set if a window can be dragged around with the mouse.   </p> <p> UIWindow.get_resizable(control: <code>UIWindow</code>) \u00b6 returns <code>Bool</code></p> <p>Get if a window can be resized by the user.   </p> <p> UIWindow.get_bring_to_front(control: <code>UIWindow</code>) \u00b6 returns <code>unknown</code></p> <p>Get if a window will bring itself to the front of the UI when interacted with.   </p> <p> UIWindow.get_closable(control: <code>UIWindow</code>) \u00b6 returns <code>unknown</code></p> <p>Get if a window has its Close button visible.   </p> <p> UIWindow.get_collapsible(control: <code>UIWindow</code>) \u00b6 returns <code>unknown</code></p> <p>Get if a window has its Collapse button visible.   </p> <p> UIWindow.get_draggable(control: <code>UIWindow</code>) \u00b6 returns <code>unknown</code></p> <p>Get if a window can be dragged around with the mouse.   </p> <p> UIWindow.set_outline(control: <code>UIWindow</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>) \u00b6 returns <code>None</code></p> <p>Set the text outline parameters.   </p> <p> UIWindow.set_shadow(control: <code>UIWindow</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>) \u00b6 returns <code>None</code></p> <p>Set the text shadow parameters.   </p>"},{"location":"api/v/2025.1.1/ui/window/#uiwindowchange","title":"UIWindowChange","text":"<p><code>import \"luxe: ui/window\" for UIWindowChange</code></p> <p>no docs found</p> <ul> <li>close</li> <li>open</li> <li>collapse</li> <li>uncollapse</li> <li>move</li> <li>name(value: <code>Any</code>)</li> </ul> <p> UIWindowChange.close \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWindowChange.open \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWindowChange.collapse \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWindowChange.uncollapse \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWindowChange.move \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWindowChange.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/world/","title":"World","text":""},{"location":"api/v/2025.1.1/ui/world/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/ui/world/#luxe-uiworld-module","title":"<code>luxe: ui/world</code> module","text":"<ul> <li>BucketKind </li> <li>TreeNodeIter </li> <li>UIWorld </li> <li>UIWorldEvent </li> <li>UIWorldIcon </li> </ul>"},{"location":"api/v/2025.1.1/ui/world/#bucketkind","title":"BucketKind","text":"<p><code>import \"luxe: ui/world\" for BucketKind</code></p> <p>no docs found</p> <ul> <li>folders</li> <li>contexts</li> <li>entities</li> <li>name(value: <code>Any</code>)</li> </ul> <p> BucketKind.folders \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BucketKind.contexts \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BucketKind.entities \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BucketKind.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/world/#treenodeiter","title":"TreeNodeIter","text":"<p><code>import \"luxe: ui/world\" for TreeNodeIter</code></p> <p>no docs found</p> <ul> <li>node</li> <li>new(node: <code>TreeNode</code>, depth: <code>Num</code>)</li> <li>iteratorValue(index: <code>Num</code>)</li> <li>next_bucket(from_start: <code>Bool</code>)</li> <li>iterate(index: <code>Num</code>)</li> </ul> <p> TreeNodeIter.node \u00b6 returns <code>TreeNode</code></p> <p>no docs found   </p> <p> TreeNodeIter.new(node: <code>TreeNode</code>, depth: <code>Num</code>) \u00b6 returns <code>TreeNodeIter</code></p> <p>no docs found   </p> <p> TreeNodeIter.iteratorValue(index: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TreeNodeIter.next_bucket(from_start: <code>Bool</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> TreeNodeIter.iterate(index: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/world/#uiworld","title":"UIWorld","text":"<p><code>import \"luxe: ui/world\" for UIWorld</code></p> <p>no docs found</p> <ul> <li>create(ui: <code>UI</code>)</li> <li>set_world(control: <code>Control</code>, world: <code>World</code>)</li> <li>set_handle_default_icons(control: <code>Control</code>, enable: <code>Bool</code>)</li> <li>refresh(control: <code>Control</code>)</li> <li>get_view(control: <code>Control</code>)</li> <li>scroll_to(control: <code>Control</code>, entity: <code>Entity</code>)</li> <li>set_selection(control: <code>Control</code>, selection: <code>Selection</code>)</li> <li>get_selection(control: <code>Control</code>)</li> <li>enter_select_mode(control: <code>Control</code>, enter_state: <code>Bool</code>, display: <code>String</code>)</li> <li>show_rename(control: <code>Control</code>)</li> </ul> <p> UIWorld.create(ui: <code>UI</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p> <p> UIWorld.set_world(control: <code>Control</code>, world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorld.set_handle_default_icons(control: <code>Control</code>, enable: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorld.refresh(control: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorld.get_view(control: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorld.scroll_to(control: <code>Control</code>, entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorld.set_selection(control: <code>Control</code>, selection: <code>Selection</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UIWorld.get_selection(control: <code>Control</code>) \u00b6 returns <code>Selection</code></p> <p>no docs found   </p> <p> UIWorld.enter_select_mode(control: <code>Control</code>, enter_state: <code>Bool</code>, display: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UIWorld.show_rename(control: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/world/#uiworldevent","title":"UIWorldEvent","text":"<p><code>import \"luxe: ui/world\" for UIWorldEvent</code></p> <p>no docs found</p> <ul> <li>filter</li> <li>save</li> <li>save_all</li> <li>delete</li> <li>duplicate</li> <li>rename</li> <li>active_context</li> <li>focus</li> <li>close</li> <li>kind</li> <li>items</li> <li>data</li> <li>new(kind: <code>UIWorldEvent</code>, items: <code>List</code>, data: <code>Any</code>)</li> </ul> <p> UIWorldEvent.filter \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldEvent.save \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldEvent.save_all \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldEvent.delete \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldEvent.duplicate \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldEvent.rename \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldEvent.active_context \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldEvent.focus \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldEvent.close \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldEvent.kind \u00b6 returns <code>Any</code></p> <p>no docs found   </p> <p> UIWorldEvent.items \u00b6 returns <code>Any</code></p> <p>no docs found   </p> <p> UIWorldEvent.data \u00b6 returns <code>Any</code></p> <p>no docs found   </p> <p> UIWorldEvent.new(kind: <code>UIWorldEvent</code>, items: <code>List</code>, data: <code>Any</code>) \u00b6 returns <code>UIWorldEvent</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/world/#uiworldicon","title":"UIWorldIcon","text":"<p><code>import \"luxe: ui/world\" for UIWorldIcon</code></p> <p>no docs found</p> <ul> <li>icon</li> <li>enabled</li> <li>enabled(handle: <code>Num</code>)</li> <li>tooltip</li> <li>tooltip=(v : String)</li> <li>selection_based</li> <li>selection_based=(v : String)</li> <li>allow_indirect</li> <li>allow_indirect=(v : String)</li> <li>svg</li> <li>svg=(v : Any)</li> <li>new(world_view: <code>UIWorld</code>)</li> <li>enable()</li> <li>enable(handle: <code>Num</code>)</li> <li>disable()</li> <li>disable(handle: <code>Num</code>)</li> <li>can_do_direct_only_action(list: <code>List</code>)</li> <li>on_selection(fn: <code>Fn</code>)</li> <li>on_release(fn: <code>Fn</code>)</li> <li>on_enter(fn: <code>Fn</code>)</li> <li>on_exit(fn: <code>Fn</code>)</li> </ul> <p> UIWorldIcon.icon \u00b6 returns <code>Control</code></p> <p>no docs found   </p> <p> UIWorldIcon.enabled \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> UIWorldIcon.enabled(handle: <code>Num</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> UIWorldIcon.tooltip \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> UIWorldIcon.tooltip=(v : String) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldIcon.selection_based \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> UIWorldIcon.selection_based=(v : String) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldIcon.allow_indirect \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> UIWorldIcon.allow_indirect=(v : String) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldIcon.svg \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> UIWorldIcon.svg=(v : Any) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> UIWorldIcon.new(world_view: <code>UIWorld</code>) \u00b6 returns <code>UIWorldIcon</code></p> <p>no docs found   </p> <p> UIWorldIcon.enable() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldIcon.enable(handle: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldIcon.disable() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldIcon.disable(handle: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldIcon.can_do_direct_only_action(list: <code>List</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> UIWorldIcon.on_selection(fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldIcon.on_release(fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldIcon.on_enter(fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldIcon.on_exit(fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/field/choice/","title":"Choice","text":""},{"location":"api/v/2025.1.1/ui/field/choice/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/ui/field/choice/#luxe-uifieldchoice-module","title":"<code>luxe: ui/field/choice</code> module","text":"<ul> <li>State </li> <li>UIChoice </li> </ul>"},{"location":"api/v/2025.1.1/ui/field/choice/#state","title":"State","text":"<p><code>import \"luxe: ui/field/choice\" for State</code></p> <p>no docs found</p> <ul> <li>list</li> <li>new(ui: <code>Any</code>, control: <code>Any</code>)</li> <li>resize()</li> <li>add(control: <code>Any</code>, keywords: <code>Any</code>)</li> <li>remove(control: <code>Any</code>)</li> <li>clear(uiclear_action: <code>Any</code>)</li> <li>count()</li> <li>get(index: <code>Num</code>)</li> <li>refresh()</li> <li>focus()</li> <li>placeholder=(v : Any)</li> <li>placeholder</li> <li>fn=(v : Any)</li> <li>fn</li> <li>has_filter</li> <li>force_filter(text: <code>Any</code>, focus: <code>Any</code>)</li> <li>cancel_filter()</li> <li>filter(filter: <code>Any</code>)</li> </ul> <p> State.list \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.new(ui: <code>Any</code>, control: <code>Any</code>) \u00b6 returns <code>State</code></p> <p>no docs found   </p> <p> State.resize() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.add(control: <code>Any</code>, keywords: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.remove(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.clear(uiclear_action: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.count() \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> State.get(index: <code>Num</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p> <p> State.refresh() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.focus() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.placeholder=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.placeholder \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.fn=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.fn \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.has_filter \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.force_filter(text: <code>Any</code>, focus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.cancel_filter() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.filter(filter: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/field/choice/#uichoice","title":"UIChoice","text":"<p><code>import \"luxe: ui/field/choice\" for UIChoice</code></p> <p>no docs found</p> <ul> <li>create(ui: <code>UI</code>)</li> <li>get_placeholder(choice: <code>Control</code>)</li> <li>set_placeholder(choice: <code>Control</code>, text: <code>String</code>)</li> <li>set_filter(choice: <code>Control</code>, fn: <code>Fn</code>)</li> <li>add(choice: <code>Control</code>, control: <code>Control</code>, keywords: <code>List</code>)</li> <li>remove(choice: <code>Control</code>, control: <code>Control</code>)</li> <li>clear(choice: <code>Control</code>, uiclear_action: <code>UIClear</code>)</li> <li>refresh(choice: <code>Control</code>)</li> <li>focus(choice: <code>Control</code>)</li> <li>count(choice: <code>Control</code>)</li> <li>get_choice(choice: <code>Control</code>, index: <code>Num</code>)</li> </ul> <p> UIChoice.create(ui: <code>UI</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p> <p> UIChoice.get_placeholder(choice: <code>Control</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> UIChoice.set_placeholder(choice: <code>Control</code>, text: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIChoice.set_filter(choice: <code>Control</code>, fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIChoice.add(choice: <code>Control</code>, control: <code>Control</code>, keywords: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIChoice.remove(choice: <code>Control</code>, control: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIChoice.clear(choice: <code>Control</code>, uiclear_action: <code>UIClear</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIChoice.refresh(choice: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIChoice.focus(choice: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIChoice.count(choice: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> UIChoice.get_choice(choice: <code>Control</code>, index: <code>Num</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/field/color/","title":"Color","text":""},{"location":"api/v/2025.1.1/ui/field/color/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/ui/field/color/#luxe-uifieldcolor-module","title":"<code>luxe: ui/field/color</code> module","text":"<ul> <li>UIColor </li> <li>UIColorData </li> </ul>"},{"location":"api/v/2025.1.1/ui/field/color/#uicolor","title":"UIColor","text":"<p><code>import \"luxe: ui/field/color\" for UIColor</code></p> <p>no docs found</p> <ul> <li>create(ui: <code>Entity</code>)</li> <li>set_color(control: <code>Control</code>, color: <code>Color</code>)</li> <li>set_colors(control: <code>Control</code>, colors: <code>Color</code>)</li> <li>get_color(control: <code>Control</code>)</li> <li>get_text_field(vec: <code>Control</code>, index: <code>Num</code>)</li> </ul> <p> UIColor.create(ui: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIColor.set_color(control: <code>Control</code>, color: <code>Color</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIColor.set_colors(control: <code>Control</code>, colors: <code>Color</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIColor.get_color(control: <code>Control</code>) \u00b6 returns <code>Color</code></p> <p>no docs found   </p> <p> UIColor.get_text_field(vec: <code>Control</code>, index: <code>Num</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/field/color/#uicolordata","title":"UIColorData","text":"<p><code>import \"luxe: ui/field/color\" for UIColorData</code></p> <p>no docs found</p> <ul> <li>new(ui: <code>Entity</code>, control: <code>Control</code>)</li> <li>create(root: <code>Control</code>)</li> <li>reset_mixed()</li> <li>set_color(color: <code>Color</code>)</li> <li>set_colors(colors: <code>List</code>)</li> <li>colors_similar(colors: <code>List</code>)</li> <li>destroy()</li> <li>get_color()</li> <li>get_text_field(index: <code>Num</code>)</li> </ul> <p> UIColorData.new(ui: <code>Entity</code>, control: <code>Control</code>) \u00b6 returns <code>UIColorData</code></p> <p>no docs found   </p> <p> UIColorData.create(root: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIColorData.reset_mixed() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIColorData.set_color(color: <code>Color</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIColorData.set_colors(colors: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIColorData.colors_similar(colors: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIColorData.destroy() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIColorData.get_color() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIColorData.get_text_field(index: <code>Num</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/field/framemarks/","title":"Framemarks","text":""},{"location":"api/v/2025.1.1/ui/field/framemarks/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/ui/field/framemarks/#luxe-uifieldframemarks-module","title":"<code>luxe: ui/field/framemarks</code> module","text":"<ul> <li>UIFrameMarks </li> <li>UIFrameMarksState </li> </ul>"},{"location":"api/v/2025.1.1/ui/field/framemarks/#uiframemarks","title":"UIFrameMarks","text":"<p><code>import \"luxe: ui/field/framemarks\" for UIFrameMarks</code></p> <p>no docs found</p> <ul> <li>create(ui: <code>Entity</code>)</li> </ul> <p> UIFrameMarks.create(ui: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/field/framemarks/#uiframemarksstate","title":"UIFrameMarksState","text":"<p><code>import \"luxe: ui/field/framemarks\" for UIFrameMarksState</code></p> <p>no docs found</p> <ul> <li><code>var style : null = PathStyle.new</code></li> <li>new(ui: <code>Entity</code>, ctrl: <code>Control</code>)</li> </ul> <p> UIFrameMarksState.new(ui: <code>Entity</code>, ctrl: <code>Control</code>) \u00b6 returns <code>UIFrameMarksState</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/field/number/","title":"Number","text":""},{"location":"api/v/2025.1.1/ui/field/number/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/ui/field/number/#luxe-uifieldnumber-module","title":"<code>luxe: ui/field/number</code> module","text":"<ul> <li>UINumber </li> <li>UINumberState </li> </ul>"},{"location":"api/v/2025.1.1/ui/field/number/#uinumber","title":"UINumber","text":"<p><code>import \"luxe: ui/field/number\" for UINumber</code></p> <p>no docs found</p> <ul> <li>create(ui: <code>Any</code>)</li> <li>get_text_field(num: <code>Control</code>)</li> <li>get_value(num: <code>Control</code>)</li> <li>get_valid(num: <code>Control</code>)</li> <li>set_value(num: <code>Control</code>, value: <code>Num</code>)</li> <li>set_precision(num: <code>Control</code>, value: <code>Num</code>)</li> <li>get_precision(num: <code>Control</code>, value: <code>Num</code>)</li> <li>set_validation(num: <code>Control</code>, fn: <code>Fn</code>)</li> </ul> <p> UINumber.create(ui: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumber.get_text_field(num: <code>Control</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p> <p> UINumber.get_value(num: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> UINumber.get_valid(num: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> UINumber.set_value(num: <code>Control</code>, value: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumber.set_precision(num: <code>Control</code>, value: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumber.get_precision(num: <code>Control</code>, value: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumber.set_validation(num: <code>Control</code>, fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/field/number/#uinumberstate","title":"UINumberState","text":"<p><code>import \"luxe: ui/field/number\" for UINumberState</code></p> <p>no docs found</p> <ul> <li>validation</li> <li>validation=(v : Any)</li> <li>text_control</li> <li>text_value</li> <li>precision</li> <li>precision=(v : Any)</li> <li>value</li> <li>valid</li> <li>new(ui: <code>Any</code>, ctrl: <code>Any</code>)</li> <li>set_value(value: <code>Any</code>)</li> <li>resize(x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>)</li> <li>refresh_radial()</li> <li>expand_radial(state: <code>Any</code>)</li> <li>fix(value: <code>Num</code>)</li> <li>on_radial_event(event: <code>Any</code>)</li> <li>cancel_radial_capture()</li> <li>render_radial(control: <code>Any</code>, state: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>)</li> <li>make_num(string: <code>String</code>)</li> <li>validate(num: <code>Num</code>)</li> <li>try_expression(string: <code>String</code>)</li> <li>on_text_event(event: <code>Any</code>)</li> </ul> <p> UINumberState.validation \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.validation=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.text_control \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.text_value \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.precision \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.precision=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.value \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.valid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.new(ui: <code>Any</code>, ctrl: <code>Any</code>) \u00b6 returns <code>UINumberState</code></p> <p>no docs found   </p> <p> UINumberState.set_value(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.resize(x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.refresh_radial() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.expand_radial(state: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.fix(value: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.on_radial_event(event: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.cancel_radial_capture() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.render_radial(control: <code>Any</code>, state: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.make_num(string: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.validate(num: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.try_expression(string: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.on_text_event(event: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/field/path/","title":"Path","text":""},{"location":"api/v/2025.1.1/ui/field/path/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/ui/field/path/#luxe-uifieldpath-module","title":"<code>luxe: ui/field/path</code> module","text":"<ul> <li>UIPath </li> <li>UIPathState </li> <li>UIPathType </li> </ul>"},{"location":"api/v/2025.1.1/ui/field/path/#uipath","title":"UIPath","text":"<p><code>import \"luxe: ui/field/path\" for UIPath</code></p> <p>no docs found</p> <ul> <li>create(ui: <code>Entity</code>)</li> <li>set_validation(path: <code>Control</code>, fn: <code>Fn</code>)</li> <li>set_defaults(path: <code>Control</code>, default_path: <code>String</code>, filters: <code>String</code>)</li> <li>set_defaults(path: <code>Control</code>, default_path: <code>String</code>)</li> <li>set_type(path: <code>Control</code>, type: <code>UIPathType</code>)</li> <li>get_text_field(path: <code>Control</code>)</li> <li>get_path(path: <code>Control</code>)</li> <li>set_path(path: <code>Control</code>, path_value: <code>String</code>)</li> </ul> <p> UIPath.create(ui: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIPath.set_validation(path: <code>Control</code>, fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>set a validation function to be called which will ensure the path is validated before use   </p> <p> UIPath.set_defaults(path: <code>Control</code>, default_path: <code>String</code>, filters: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>set the default file dialog path and file dialog filters   </p> <p> UIPath.set_defaults(path: <code>Control</code>, default_path: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>set the default file dialog path   </p> <p> UIPath.set_type(path: <code>Control</code>, type: <code>UIPathType</code>) \u00b6 returns <code>unknown</code></p> <p>set the path type, to open/save/folder   </p> <p> UIPath.get_text_field(path: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>return the text field   </p> <p> UIPath.get_path(path: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>return the path stored in the field   </p> <p> UIPath.set_path(path: <code>Control</code>, path_value: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>set the path stored in the field (will be validated)   </p>"},{"location":"api/v/2025.1.1/ui/field/path/#uipathstate","title":"UIPathState","text":"<p><code>import \"luxe: ui/field/path\" for UIPathState</code></p> <p>no docs found</p> <ul> <li>new(ui: <code>Entity</code>, control: <code>Control</code>)</li> <li>get_text_field()</li> <li>get_path()</li> <li>set_path(path: <code>String</code>)</li> <li>set_validation(fn: <code>Fn</code>)</li> <li>set_defaults(default_path: <code>String</code>, filters: <code>String</code>)</li> <li>set_type(type: <code>UIPathType</code>)</li> </ul> <p> UIPathState.new(ui: <code>Entity</code>, control: <code>Control</code>) \u00b6 returns <code>UIPathState</code></p> <p>no docs found   </p> <p> UIPathState.get_text_field() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIPathState.get_path() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIPathState.set_path(path: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIPathState.set_validation(fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIPathState.set_defaults(default_path: <code>String</code>, filters: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIPathState.set_type(type: <code>UIPathType</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/field/path/#uipathtype","title":"UIPathType","text":"<p><code>import \"luxe: ui/field/path\" for UIPathType</code></p> <p>no docs found</p> <ul> <li>open</li> <li>save</li> <li>folder</li> </ul> <p> UIPathType.open \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIPathType.save \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIPathType.folder \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/field/vector/","title":"Vector","text":""},{"location":"api/v/2025.1.1/ui/field/vector/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/ui/field/vector/#luxe-uifieldvector-module","title":"<code>luxe: ui/field/vector</code> module","text":"<ul> <li>UIVector </li> <li>UIVectorState </li> </ul>"},{"location":"api/v/2025.1.1/ui/field/vector/#uivector","title":"UIVector","text":"<p><code>import \"luxe: ui/field/vector\" for UIVector</code></p> <p>no docs found</p> <ul> <li>create(ui: <code>Any</code>)</li> <li>get_component_count(vec: <code>Control</code>)</li> <li>set_component_count(vec: <code>Control</code>, count: <code>Num</code>)</li> <li>get_value(vec: <code>Control</code>)</li> <li>set_value(vec: <code>Control</code>, value: <code>Vec</code>)</li> <li>get_text_field(vec: <code>Control</code>, index: <code>Num</code>)</li> </ul> <p> UIVector.create(ui: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIVector.get_component_count(vec: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIVector.set_component_count(vec: <code>Control</code>, count: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIVector.get_value(vec: <code>Control</code>) \u00b6 returns <code>Vec</code></p> <p>no docs found   </p> <p> UIVector.set_value(vec: <code>Control</code>, value: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIVector.get_text_field(vec: <code>Control</code>, index: <code>Num</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/ui/field/vector/#uivectorstate","title":"UIVectorState","text":"<p><code>import \"luxe: ui/field/vector\" for UIVectorState</code></p> <p>no docs found</p> <ul> <li>components</li> <li>components=(v : Any)</li> <li>value</li> <li>set_value(value: <code>Vec</code>)</li> <li>get_text_field(index: <code>Num</code>)</li> <li>make_field(index: <code>Num</code>)</li> <li>new(ui: <code>Any</code>, ctrl: <code>Any</code>)</li> <li>on_event(field: <code>Any</code>, event: <code>Any</code>)</li> </ul> <p> UIVectorState.components \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIVectorState.components=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIVectorState.value \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIVectorState.set_value(value: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIVectorState.get_text_field(index: <code>Num</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p> <p> UIVectorState.make_field(index: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIVectorState.new(ui: <code>Any</code>, ctrl: <code>Any</code>) \u00b6 returns <code>UIVectorState</code></p> <p>no docs found   </p> <p> UIVectorState.on_event(field: <code>Any</code>, event: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/world/modifier/","title":"Modifier","text":""},{"location":"api/v/2025.1.1/world/modifier/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/world/modifier/#luxe-worldmodifier-module","title":"<code>luxe: world/modifier</code> module","text":"<ul> <li>Modifier </li> <li>ModifierChange </li> </ul>"},{"location":"api/v/2025.1.1/world/modifier/#modifier","title":"Modifier","text":"<p><code>import \"luxe: world/modifier\" for Modifier</code></p> <p>no docs found</p> <ul> <li>create(modifier_id: <code>String</code>, entity: <code>Entity</code>)</li> <li>destroy(modifier_id: <code>String</code>, entity: <code>Entity</code>)</li> <li>has(modifier_id: <code>String</code>, entity: <code>Entity</code>, ignore_removed_flag: <code>Bool</code>)</li> <li>has(modifier_id: <code>String</code>, entity: <code>Entity</code>)</li> <li>get_missing_expected(modifier_meta: <code>ModifierMeta</code>, entity: <code>Entity</code>)</li> <li>has_expected(modifier_meta: <code>ModifierMeta</code>, entity: <code>Entity</code>)</li> <li>set_transient(entity: <code>Entity</code>, modifier_id: <code>String</code>, state: <code>Bool</code>)</li> <li>set_transient(entity: <code>Entity</code>, modifier_id: <code>String</code>, state: <code>Bool</code>, commit: <code>Bool</code>)</li> <li>get_transient(entity: <code>Entity</code>, modifier_id: <code>String</code>)</li> <li>get(entity: <code>String</code>, modifier_id: <code>String</code>)</li> <li>get_attached_to(world: <code>World</code>, modifier_id: <code>String</code>)</li> <li>get_meta(modifier_id: <code>String</code>)</li> <li>connect(world: <code>World</code>, modifier_id: <code>String</code>, wire: <code>Num</code>, fn: <code>Fn</code>)</li> <li>send(modifier_id: <code>String</code>, wire: <code>Num</code>, entity: <code>Entity</code>, data: <code>Any</code>)</li> <li>get_attached(entity: <code>Entity</code>)</li> <li>get_modifier_id(world: <code>World</code>, block: <code>Block</code>)</li> </ul> <p> Modifier.create(modifier_id: <code>String</code>, entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Modifier.destroy(modifier_id: <code>String</code>, entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Modifier.has(modifier_id: <code>String</code>, entity: <code>Entity</code>, ignore_removed_flag: <code>Bool</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Modifier.has(modifier_id: <code>String</code>, entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Modifier.get_missing_expected(modifier_meta: <code>ModifierMeta</code>, entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifier.has_expected(modifier_meta: <code>ModifierMeta</code>, entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifier.set_transient(entity: <code>Entity</code>, modifier_id: <code>String</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Modifier.set_transient(entity: <code>Entity</code>, modifier_id: <code>String</code>, state: <code>Bool</code>, commit: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Modifier.get_transient(entity: <code>Entity</code>, modifier_id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Modifier.get(entity: <code>String</code>, modifier_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifier.get_attached_to(world: <code>World</code>, modifier_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifier.get_meta(modifier_id: <code>String</code>) \u00b6 returns <code>ModifierMeta</code></p> <p>no docs found   </p> <p> Modifier.connect(world: <code>World</code>, modifier_id: <code>String</code>, wire: <code>Num</code>, fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifier.send(modifier_id: <code>String</code>, wire: <code>Num</code>, entity: <code>Entity</code>, data: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifier.get_attached(entity: <code>Entity</code>) \u00b6 returns <code>Set</code></p> <p>Returns a set of attached modifier IDs for the given entity   </p> <p> Modifier.get_modifier_id(world: <code>World</code>, block: <code>Block</code>) \u00b6 returns <code>String</code></p> <p>Returns a modifier id (or null if not found) for the given data block   </p>"},{"location":"api/v/2025.1.1/world/modifier/#modifierchange","title":"ModifierChange","text":"<p><code>import \"luxe: world/modifier\" for ModifierChange</code></p> <p>no docs found</p> <ul> <li><code>var world : World = 0</code></li> <li><code>var block : Block = 0</code></li> <li><code>var instance : BlockInstance = 0</code></li> <li><code>var field_path : String = null</code></li> <li><code>var field_id : String = null</code></li> <li>new()</li> <li>update(in_world: <code>World</code>, in_block: <code>Block</code>, in_instance: <code>BlockInstance</code>, in_field_path: <code>String</code>)</li> <li>array_count(field: <code>String</code>)</li> <li>value</li> <li>value_for(field: <code>String</code>)</li> <li>value_for(field: <code>String</code>, array_index: <code>Num</code>)</li> </ul> <p> ModifierChange.new() \u00b6 returns <code>ModifierChange</code></p> <p>no docs found   </p> <p> ModifierChange.update(in_world: <code>World</code>, in_block: <code>Block</code>, in_instance: <code>BlockInstance</code>, in_field_path: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierChange.array_count(field: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierChange.value \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierChange.value_for(field: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierChange.value_for(field: <code>String</code>, array_index: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/world/prototype/","title":"Prototype","text":""},{"location":"api/v/2025.1.1/world/prototype/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/world/prototype/#luxe-worldprototype-module","title":"<code>luxe: world/prototype</code> module","text":"<ul> <li>Prototype </li> </ul>"},{"location":"api/v/2025.1.1/world/prototype/#prototype","title":"Prototype","text":"<p><code>import \"luxe: world/prototype\" for Prototype</code></p> <p>no docs found</p> <ul> <li>create(world: <code>World</code>, prototype: <code>Prototype</code>)</li> <li>create(world: <code>World</code>, prototype: <code>Prototype</code>, context_into: <code>Entity</code>, name: <code>String</code>, context_instance_uuid: <code>String</code>, subfolder: <code>String</code>)</li> <li>has(entity: <code>Entity</code>)</li> </ul> <p> Prototype.create(world: <code>World</code>, prototype: <code>Prototype</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Prototype.create(world: <code>World</code>, prototype: <code>Prototype</code>, context_into: <code>Entity</code>, name: <code>String</code>, context_instance_uuid: <code>String</code>, subfolder: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Prototype.has(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/world/scene/","title":"Scene","text":""},{"location":"api/v/2025.1.1/world/scene/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/world/scene/#luxe-worldscene-module","title":"<code>luxe: world/scene</code> module","text":"<ul> <li>Scene </li> <li>SceneReady </li> <li>Stage </li> </ul>"},{"location":"api/v/2025.1.1/world/scene/#scene","title":"Scene","text":"<p><code>import \"luxe: world/scene\" for Scene</code></p> <p>no docs found</p> <ul> <li>create(world: <code>World</code>, scene: <code>Scene</code>)</li> <li>create(world: <code>World</code>, scene: <code>Scene</code>, on_ready: <code>Fn</code>)</li> <li>has(entity: <code>Entity</code>)</li> </ul> <p> Scene.create(world: <code>World</code>, scene: <code>Scene</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scene.create(world: <code>World</code>, scene: <code>Scene</code>, on_ready: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scene.has(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/world/scene/#sceneready","title":"SceneReady","text":"<p><code>import \"luxe: world/scene\" for SceneReady</code></p> <p>no docs found</p> <ul> <li><code>var world : World = 0</code></li> <li><code>var scene : Entity = Entity.none</code></li> <li>new(world: <code>World</code>, scene: <code>Entity</code>)</li> <li>editor_new(world: <code>World</code>, scene: <code>Entity</code>)</li> <li>ready(world: <code>World</code>, scene: <code>Entity</code>)</li> <li>ready()</li> <li>editor_ready(world: <code>World</code>, scene: <code>Entity</code>)</li> <li>editor_ready()</li> <li>tick(delta: <code>Num</code>)</li> <li>editor_tick(delta: <code>Num</code>)</li> <li>destroy(world: <code>World</code>, scene: <code>Entity</code>)</li> <li>destroy()</li> <li>editor_destroy(world: <code>World</code>, scene: <code>Entity</code>)</li> <li>editor_destroy()</li> </ul> <p> SceneReady.new(world: <code>World</code>, scene: <code>Entity</code>) \u00b6 returns <code>SceneReady</code></p> <p>no docs found   </p> <p> SceneReady.editor_new(world: <code>World</code>, scene: <code>Entity</code>) \u00b6 returns <code>SceneReady</code></p> <p>no docs found   </p> <p> SceneReady.ready(world: <code>World</code>, scene: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SceneReady.ready() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SceneReady.editor_ready(world: <code>World</code>, scene: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SceneReady.editor_ready() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SceneReady.tick(delta: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SceneReady.editor_tick(delta: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SceneReady.destroy(world: <code>World</code>, scene: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SceneReady.destroy() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SceneReady.editor_destroy(world: <code>World</code>, scene: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SceneReady.editor_destroy() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/world/scene/#stage","title":"Stage","text":"<p><code>import \"luxe: world/scene\" for Stage</code></p> <p>no docs found</p> <ul> <li>create(world: <code>World</code>, stage: <code>Stage</code>)</li> </ul> <p> Stage.create(world: <code>World</code>, stage: <code>Stage</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/world/world/","title":"World","text":""},{"location":"api/v/2025.1.1/world/world/#luxe-api-202511","title":"<code>luxe</code> API (<code>2025.1.1</code>)","text":""},{"location":"api/v/2025.1.1/world/world/#luxe-worldworld-module","title":"<code>luxe: world/world</code> module","text":"<ul> <li>OldEvent </li> <li>Wire </li> <li>World </li> </ul>"},{"location":"api/v/2025.1.1/world/world/#oldevent","title":"OldEvent","text":"<p><code>import \"luxe: world/world\" for OldEvent</code></p> <p>no docs found</p> <ul> <li>destroy</li> <li>tick</li> </ul> <p> OldEvent.destroy \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> OldEvent.tick \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/world/world/#wire","title":"Wire","text":"<p><code>import \"luxe: world/world\" for Wire</code></p> <p>no docs found</p> <ul> <li><code>var id : Num = null</code></li> <li><code>var uuid : String = null</code></li> <li><code>var type : String = null</code></li> <li><code>var target : String = null</code></li> <li>create()</li> <li>send(entity: <code>Entity</code>)</li> <li>send(entity: <code>Entity</code>, data: <code>Any</code>)</li> <li>prepare()</li> <li>connect(world: <code>World</code>, uuid: <code>String</code>, fn: <code>Fn</code>)</li> <li>send(world: <code>World</code>, uuid: <code>String</code>, entity: <code>Entity</code>)</li> <li>send(world: <code>World</code>, uuid: <code>String</code>, entity: <code>Entity</code>, args: <code>Any</code>)</li> </ul> <p> Wire.create() \u00b6 returns <code>Wire</code></p> <p>no docs found   </p> <p> Wire.send(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Wire.send(entity: <code>Entity</code>, data: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Wire.prepare() \u00b6 returns <code>Any</code></p> <p>no docs found   </p> <p> Wire.connect(world: <code>World</code>, uuid: <code>String</code>, fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Wire.send(world: <code>World</code>, uuid: <code>String</code>, entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Wire.send(world: <code>World</code>, uuid: <code>String</code>, entity: <code>Entity</code>, args: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/2025.1.1/world/world/#world","title":"World","text":"<p><code>import \"luxe: world/world\" for World</code></p> <p>no docs found</p> <ul> <li>get_system(world: <code>World</code>, modifier_id: <code>String</code>)</li> <li>get_scene(world: <code>World</code>, scene_id: <code>String</code>)</li> <li>get_scene_for(world: <code>World</code>, scene: <code>Entity</code>)</li> <li>exists(id: <code>String</code>)</li> <li>valid(world: <code>World</code>)</li> <li>get(id: <code>String</code>)</li> <li>get_id(world: <code>World</code>)</li> <li>set_id(world: <code>World</code>, id: <code>String</code>)</li> <li>get_default()</li> <li>set_default(world: <code>World</code>)</li> <li>list(world: <code>World</code>)</li> <li>list_ids(world: <code>World</code>)</li> <li>clear(world: <code>World</code>)</li> <li>duplicate(world: <code>World</code>)</li> <li>tag_add(world: <code>Any</code>, tag: <code>Any</code>)</li> <li>tag_remove(world: <code>Any</code>, tag: <code>Any</code>)</li> <li>tag_has(world: <code>Any</code>, tag: <code>Any</code>)</li> <li>get_scene_roots(world: <code>World</code>)</li> <li>get_delta(world: <code>Any</code>)</li> <li>tick(world: <code>World</code>, when: <code>FrameWhen</code>, section: <code>FrameSection</code>, priority: <code>Num</code>)</li> <li>tick(world: <code>World</code>)</li> <li>tick(world: <code>World</code>, delta: <code>Num</code>)</li> <li>schedule(world: <code>Any</code>, time: <code>Any</code>, count: <code>Any</code>, fn: <code>Any</code>)</li> <li>schedule(world: <code>Any</code>, time: <code>Any</code>, fn: <code>Any</code>)</li> <li>unschedule(world: <code>Any</code>, handle: <code>Any</code>)</li> <li>render_with_set(world: <code>Any</code>, camera: <code>Any</code>, set: <code>Any</code>, target_path: <code>Any</code>)</li> <li>render_with_set(world: <code>Any</code>, camera: <code>Any</code>, set: <code>Any</code>, target_path: <code>Any</code>, settings: <code>Any</code>)</li> <li>render_with_set(world: <code>Any</code>, camera: <code>Any</code>, set: <code>Any</code>, target_path: <code>Any</code>, target_resource: <code>Any</code>, target_region: <code>Any</code>, settings: <code>Any</code>)</li> <li>render(world: <code>Any</code>, camera: <code>Any</code>, target_path: <code>Any</code>)</li> <li>render(world: <code>Any</code>, camera: <code>Any</code>, target_path: <code>Any</code>, settings: <code>Any</code>)</li> <li>render(world: <code>Any</code>, camera: <code>Any</code>, target_path: <code>Any</code>, target_resource: <code>Any</code>, target_region: <code>Any</code>, settings: <code>Any</code>)</li> <li>render(world: <code>Any</code>, desc: <code>Any</code>)</li> <li>render_fn(world: <code>Any</code>, camera: <code>Any</code>, target_resource: <code>Any</code>, target_region: <code>Any</code>, settings: <code>Any</code>, fn: <code>Any</code>)</li> <li>get_phases(world: <code>World</code>)</li> <li>get_phase_modifiers(world: <code>World</code>, phase: <code>Num</code>, stage: <code>Num</code>)</li> <li>get_modifier_block(world: <code>World</code>, modifier_id: <code>String</code>)</li> <li>get_sorted_modifiers(world: <code>World</code>)</li> <li>get_rate(world: <code>Any</code>)</li> <li>set_rate(world: <code>Any</code>, rate: <code>Any</code>)</li> <li>set_time(world: <code>Any</code>, time: <code>Any</code>)</li> <li>time(world: <code>Any</code>)</li> <li>render_set(world: <code>Any</code>)</li> <li>render_set_add(world: <code>Any</code>, geometry: <code>Any</code>)</li> <li>render_set_add(world: <code>Any</code>, geometry: <code>Any</code>, entity: <code>Any</code>)</li> <li>render_set_remove(world: <code>Any</code>, geometry: <code>Any</code>)</li> <li>render_set_remove(world: <code>Any</code>, geometry: <code>Any</code>, entity: <code>Any</code>)</li> <li>render_get_entity(world: <code>Any</code>, geometry: <code>Any</code>)</li> <li>render_get_entity_set(entity: <code>Any</code>)</li> <li>disable(world: <code>Any</code>, state: <code>Any</code>, entities: <code>Any</code>)</li> <li>disable(world: <code>Any</code>, state: <code>Any</code>)</li> <li>emit(world: <code>Any</code>, tags: <code>Any</code>)</li> <li>emit(world: <code>Any</code>, tags: <code>Any</code>, data: <code>Any</code>)</li> <li>listen(world: <code>Any</code>, tags: <code>Any</code>, fn: <code>Any</code>)</li> <li>unlisten(world: <code>Any</code>, tags: <code>Any</code>, fn: <code>Any</code>)</li> <li>create()</li> <li>create(id: <code>Any</code>)</li> <li>destroy(world: <code>Any</code>)</li> <li>on_register_system(world: <code>World</code>, fn: <code>Fn</code>)</li> <li>off_register_system(world: <code>World</code>, listener: <code>Handle</code>)</li> <li>tick_now(world: <code>Any</code>, delta: <code>Any</code>)</li> <li>live_worlds</li> </ul> <p> World.get_system(world: <code>World</code>, modifier_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.get_scene(world: <code>World</code>, scene_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.get_scene_for(world: <code>World</code>, scene: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.exists(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> World.valid(world: <code>World</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> World.get(id: <code>String</code>) \u00b6 returns <code>World</code></p> <p>no docs found   </p> <p> World.get_id(world: <code>World</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> World.set_id(world: <code>World</code>, id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.get_default() \u00b6 returns <code>World</code></p> <p>no docs found   </p> <p> World.set_default(world: <code>World</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> World.list(world: <code>World</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> World.list_ids(world: <code>World</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> World.clear(world: <code>World</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> World.duplicate(world: <code>World</code>) \u00b6 returns <code>World</code></p> <p>no docs found   </p> <p> World.tag_add(world: <code>Any</code>, tag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.tag_remove(world: <code>Any</code>, tag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.tag_has(world: <code>Any</code>, tag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.get_scene_roots(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>Returns a Set of scene root entities in the given world   </p> <p> World.get_delta(world: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.tick(world: <code>World</code>, when: <code>FrameWhen</code>, section: <code>FrameSection</code>, priority: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.tick(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.tick(world: <code>World</code>, delta: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.schedule(world: <code>Any</code>, time: <code>Any</code>, count: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.schedule(world: <code>Any</code>, time: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.unschedule(world: <code>Any</code>, handle: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render_with_set(world: <code>Any</code>, camera: <code>Any</code>, set: <code>Any</code>, target_path: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render_with_set(world: <code>Any</code>, camera: <code>Any</code>, set: <code>Any</code>, target_path: <code>Any</code>, settings: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render_with_set(world: <code>Any</code>, camera: <code>Any</code>, set: <code>Any</code>, target_path: <code>Any</code>, target_resource: <code>Any</code>, target_region: <code>Any</code>, settings: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render(world: <code>Any</code>, camera: <code>Any</code>, target_path: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render(world: <code>Any</code>, camera: <code>Any</code>, target_path: <code>Any</code>, settings: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render(world: <code>Any</code>, camera: <code>Any</code>, target_path: <code>Any</code>, target_resource: <code>Any</code>, target_region: <code>Any</code>, settings: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render(world: <code>Any</code>, desc: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render_fn(world: <code>Any</code>, camera: <code>Any</code>, target_resource: <code>Any</code>, target_region: <code>Any</code>, settings: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.get_phases(world: <code>World</code>) \u00b6 returns <code>Set</code></p> <p>Return the set of phases in the world, in order   </p> <p> World.get_phase_modifiers(world: <code>World</code>, phase: <code>Num</code>, stage: <code>Num</code>) \u00b6 returns <code>Set</code></p> <p>Return a set of modifier ids in the phase/stage   </p> <p> World.get_modifier_block(world: <code>World</code>, modifier_id: <code>String</code>) \u00b6 returns <code>Block</code></p> <p>Get the block for the given modifier <code>modifier_id</code> in <code>world</code> </p> <p> World.get_sorted_modifiers(world: <code>World</code>) \u00b6 returns <code>Set</code></p> <p>Get the list of modifiers in <code>world</code> (sorted by their order)   </p> <p> World.get_rate(world: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.set_rate(world: <code>Any</code>, rate: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.set_time(world: <code>Any</code>, time: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.time(world: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render_set(world: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render_set_add(world: <code>Any</code>, geometry: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render_set_add(world: <code>Any</code>, geometry: <code>Any</code>, entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render_set_remove(world: <code>Any</code>, geometry: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render_set_remove(world: <code>Any</code>, geometry: <code>Any</code>, entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render_get_entity(world: <code>Any</code>, geometry: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render_get_entity_set(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.disable(world: <code>Any</code>, state: <code>Any</code>, entities: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.disable(world: <code>Any</code>, state: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.emit(world: <code>Any</code>, tags: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.emit(world: <code>Any</code>, tags: <code>Any</code>, data: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.listen(world: <code>Any</code>, tags: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.unlisten(world: <code>Any</code>, tags: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.create() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.create(id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.destroy(world: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.on_register_system(world: <code>World</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>Add a function to be called when a new modifier system is added to a world.   </p> <p> World.off_register_system(world: <code>World</code>, listener: <code>Handle</code>) \u00b6 returns <code>None</code></p> <p>Unsubscribe a listener from the creation of new modifier systems.   </p> <p> World.tick_now(world: <code>Any</code>, delta: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.live_worlds \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/latest/","title":"Index","text":""},{"location":"api/v/next/","title":"Index","text":""},{"location":"api/v/next/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":"<ul> <li>luxe: assert </li> <li>luxe: asset </li> <li>luxe: asset/type </li> <li>luxe: assets </li> <li>luxe: astar </li> <li>luxe: audio </li> <li>luxe: bytes </li> <li>luxe: cable </li> <li>luxe: color </li> <li>luxe: containers </li> <li>luxe: debug/alloc.block </li> <li>luxe: docgen </li> <li>luxe: draw </li> <li>luxe: editor </li> <li>luxe: events </li> <li>luxe: fuzzy </li> <li>luxe: game </li> <li>luxe: id </li> <li>luxe: input </li> <li>luxe: io </li> <li>luxe: lx </li> <li>luxe: mat4 </li> <li>luxe: math </li> <li>luxe: noise </li> <li>luxe: plot </li> <li>luxe: pose/blend.pose_node </li> <li>luxe: pose/ccdik.pose_node </li> <li>luxe: pose/clip.pose_node </li> <li>luxe: pose/look_at_ik.pose_node </li> <li>luxe: pose/two_bone_ik.pose_node </li> <li>luxe: pqueue </li> <li>luxe: regex </li> <li>luxe: render </li> <li>luxe: render/font </li> <li>luxe: sat2D </li> <li>luxe: save </li> <li>luxe: selection </li> <li>luxe: semver </li> <li>luxe: settings </li> <li>luxe: shape2D </li> <li>luxe: string </li> <li>luxe: string/po </li> <li>luxe: system/anim.modifier </li> <li>luxe: system/camera.modifier </li> <li>luxe: system/mesh.modifier </li> <li>luxe: system/nav.modifier </li> <li>luxe: system/physics/body3D.modifier </li> <li>luxe: system/physics/box_collider3D.modifier </li> <li>luxe: system/physics/capsule_collider3D.modifier </li> <li>luxe: system/physics/cast_ray.block </li> <li>luxe: system/physics/character3D.modifier </li> <li>luxe: system/physics/contact.block </li> <li>luxe: system/physics/mesh_collider3D.modifier </li> <li>luxe: system/physics/physics3D.modifier </li> <li>luxe: system/physics/sphere_collider3D.modifier </li> <li>luxe: system/skeleton.modifier </li> <li>luxe: system/skin.modifier </li> <li>luxe: system/sound.modifier </li> <li>luxe: system/sprite.modifier </li> <li>luxe: system/tags.modifier </li> <li>luxe: system/text.modifier </li> <li>luxe: system/tiles.modifier </li> <li>luxe: system/transform.change.block </li> <li>luxe: system/transform.modifier </li> <li>luxe: system/values.modifier </li> <li>luxe: system/vfx.modifier </li> <li>luxe: system/wires.modifier </li> <li>luxe: terminal </li> <li>luxe: test </li> <li>luxe: toggle </li> <li>luxe: topograph </li> <li>luxe: triangulate </li> <li>luxe: ui </li> <li>luxe: ui/block </li> <li>luxe: ui/button </li> <li>luxe: ui/check </li> <li>luxe: ui/color_picker </li> <li>luxe: ui/control </li> <li>luxe: ui/field/choice </li> <li>luxe: ui/field/color </li> <li>luxe: ui/field/framemarks </li> <li>luxe: ui/field/number </li> <li>luxe: ui/field/path </li> <li>luxe: ui/field/vector </li> <li>luxe: ui/image </li> <li>luxe: ui/label </li> <li>luxe: ui/list </li> <li>luxe: ui/list_filtered </li> <li>luxe: ui/panel </li> <li>luxe: ui/progress </li> <li>luxe: ui/scroll </li> <li>luxe: ui/slider </li> <li>luxe: ui/tabs </li> <li>luxe: ui/text </li> <li>luxe: ui/window </li> <li>luxe: ui/world </li> <li>luxe: version </li> <li>luxe: world </li> <li>luxe: world/modifier </li> <li>luxe: world/prototype </li> <li>luxe: world/scene </li> <li>luxe: world/world </li> </ul>"},{"location":"api/v/next/assert/","title":"Assert","text":""},{"location":"api/v/next/assert/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/assert/#luxe-assert-module","title":"<code>luxe: assert</code> module","text":"<ul> <li>Assert </li> </ul>"},{"location":"api/v/next/assert/#assert","title":"Assert","text":"<p><code>import \"luxe: assert\" for Assert</code></p> <p>Simple assertions.</p> <p>An assertion is a statement in code that is a strict rule. They prevent code from behaving in unexpected ways, by asserting that the code is acting in the way you intended. This can catch a lot of bugs, because it can enforce correct usage of code.</p> <p>For example, if your function does not allow null for an argument, that is something you can assert. Then the user of your code knows that they've used your API incorrectly and can correct the issue.</p> <p>An assertion calls <code>Fiber.abort()</code>, ending execution (unless handled higher up).</p> <ul> <li>is_true(condition: <code>Bool</code>)</li> <li>is_true(condition: <code>Bool</code>, message: <code>String</code>)</li> <li>is_false(condition: <code>Bool</code>)</li> <li>is_false(condition: <code>Bool</code>, message: <code>String</code>)</li> <li>not_null(value: <code>Any</code>)</li> <li>not_null(value: <code>Any</code>, message: <code>String</code>)</li> <li>is_null(value: <code>Any</code>)</li> <li>is_null(value: <code>Any</code>, message: <code>String</code>)</li> <li>equal(one: <code>Any</code>, other: <code>Any</code>)</li> <li>equal(one: <code>Any</code>, other: <code>Any</code>, message: <code>String</code>)</li> </ul> <p> Assert.is_true(condition: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Assert that a particular condition is true.</p> <pre><code>//In this code, we expect that the player\n//should never be here if they are not flying.\nAssert.is_true(player.flying)\n</code></pre> <p> Assert.is_true(condition: <code>Bool</code>, message: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Assert that a particular condition is true, and display a message on abort.</p> <pre><code>//In this code, we expect that the player\n//should never be here if they are not flying.\nAssert.is_true(player.flying, \"Expected player to be in a flying state\")\n</code></pre> <p> Assert.is_false(condition: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Assert that a particular condition is false.</p> <pre><code>Assert.is_false(player.flying)\n</code></pre> <p> Assert.is_false(condition: <code>Bool</code>, message: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Assert that a particular condition is false, and display a message on abort.</p> <pre><code>Assert.is_false(player.flying, \"Expected player NOT to be in a flying state\")\n</code></pre> <p> Assert.not_null(value: <code>Any</code>) \u00b6 returns <code>None</code></p> <p>Assert that a particular statement is not null.</p> <pre><code>//We require a valid player in this code\nAssert.not_null(player)\n</code></pre> <p> Assert.not_null(value: <code>Any</code>, message: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Assert that a particular statement is not null.</p> <pre><code>Assert.not_null(player, \"A valid player is required\")\n</code></pre> <p> Assert.is_null(value: <code>Any</code>) \u00b6 returns <code>None</code></p> <p>Assert that a particular statement is null.</p> <pre><code>//We assume the player is not holding something.\nAssert.is_null(player.item_in_hand)\n</code></pre> <p> Assert.is_null(value: <code>Any</code>, message: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Assert that a particular statement is null, and display a message on abort.</p> <pre><code>Assert.is_null(player.item_in_hand, \"Player must not have an item in hand when calling this\")\n</code></pre> <p> Assert.equal(one: <code>Any</code>, other: <code>Any</code>) \u00b6 returns <code>None</code></p> <p>Assert that a two values are the same. (mind that this uses a regular ==, which counts references with the same values as different and can be overridden)</p> <pre><code>Assert.equal(account.name, player.name)\n</code></pre> <p> Assert.equal(one: <code>Any</code>, other: <code>Any</code>, message: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Assert that a two values are the same, and display a message on abort. (mind that this uses a regular ==, which counts references with the same values as different and can be overridden)</p> <pre><code>Assert.equal(account.name, player.name, \"account and player should always have the same name\")\n</code></pre>"},{"location":"api/v/next/asset/","title":"Asset","text":""},{"location":"api/v/next/asset/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/asset/#luxe-asset-module","title":"<code>luxe: asset</code> module","text":""},{"location":"api/v/next/assets/","title":"Assets","text":""},{"location":"api/v/next/assets/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/assets/#luxe-assets-module","title":"<code>luxe: assets</code> module","text":"<ul> <li>Assets </li> <li>Strings </li> </ul>"},{"location":"api/v/next/assets/#assets","title":"Assets","text":"<p><code>import \"luxe: assets\" for Assets</code></p> <p>The <code>Assets</code> services is how you access loaded assets, and query if an asset is loaded. The primary use for this at the moment is the accessors like <code>Assets.image</code>, and finding out  if an asset is loaded via <code>Assets.has_image</code>. </p> <p>Note that the asset system is a work in progress and is not final.  There are several accessors missing, for example, fonts are often referenced  as a string, not via <code>Assets.font(\"fonts/name\")</code>. Later, all assets will be unified into this form as intended.</p> <p>Also, they're supposed to be able to reload dynamically, many can't currently. And remember the input to the asset system is compiled assets, not the assets themselves. </p> <p>Finally, there are functions in the API that shouldn't be used directly (they aren't listed here.)</p> <ul> <li>db_init()</li> <li>db_commit(db: <code>AssetDB</code>)</li> <li>db_default()</li> <li>db_default_set(db: <code>AssetDB</code>)</li> <li>db_commit_post(db: <code>AssetDB</code>)</li> <li>db_commit_refs(db: <code>AssetDB</code>)</li> <li>db_add_root_path(db: <code>AssetDB</code>, path: <code>String</code>, subfolder: <code>String</code>, prefix: <code>String</code>)</li> <li>db_add_item(db: <code>AssetDB</code>, root: <code>String</code>, path: <code>String</code>, is_directory: <code>Bool</code>)</li> <li>db_make_item(db: <code>AssetDB</code>, root: <code>String</code>, path: <code>String</code>, is_directory: <code>Bool</code>)</li> <li>db_make_item(db: <code>AssetDB</code>, root: <code>String</code>, path: <code>String</code>)</li> <li>db_remove_item(db: <code>AssetDB</code>, asset_id: <code>String</code>)</li> <li>db_add_item(db: <code>AssetDB</code>, root: <code>String</code>, path: <code>String</code>)</li> <li>db_add_ignore(db: <code>AssetDB</code>, globs: <code>List</code>)</li> <li>db_asset_from_path(db: <code>AssetDB</code>, path: <code>String</code>)</li> <li>db_asset_from_id(db: <code>AssetDB</code>, asset_id: <code>String</code>)</li> <li>db_asset_from_uuid(db: <code>AssetDB</code>, meta_uuid: <code>String</code>)</li> <li>db_asset_get_root(db: <code>AssetDB</code>, asset_id: <code>String</code>)</li> <li>db_compile(db: <code>AssetDB</code>)</li> <li>db_parse(bytes: <code>String</code>)</li> <li>db_has(db: <code>AssetDB</code>, asset_id: <code>String</code>)</li> <li>db_add_reference(db: <code>AssetDB</code>, from_asset_id: <code>String</code>, to_asset_id: <code>String</code>)</li> <li>db_reset_references(db: <code>AssetDB</code>, asset_id: <code>String</code>)</li> <li>db_get_references(db: <code>AssetDB</code>, asset_id: <code>String</code>)</li> <li>db_get_referenced_by(db: <code>AssetDB</code>, asset_id: <code>String</code>)</li> <li>list(db: <code>AssetDB</code>)</li> <li>list(db: <code>AssetDB</code>, ext: <code>String</code>, subtype: <code>String</code>)</li> <li>list(db: <code>AssetDB</code>, ext: <code>String</code>, subtype: <code>String</code>, root: <code>String</code>)</li> <li>list(db: <code>AssetDB</code>, ext: <code>String</code>)</li> <li>list_folders(db: <code>AssetDB</code>, root: <code>String</code>, use_path: <code>Bool</code>)</li> <li>db_list_tags(db: <code>AssetDB</code>)</li> <li>db_get_tags(db: <code>AssetDB</code>, asset_id: <code>String</code>)</li> <li>db_get_tagged(db: <code>AssetDB</code>, tag: <code>String</code>)</li> <li>db_get_tagged_from_list(db: <code>AssetDB</code>, tags: <code>List</code>)</li> <li>db_add_tags(db: <code>AssetDB</code>, asset_id: <code>String</code>, tags: <code>List</code>)</li> <li>db_remove_tags(db: <code>AssetDB</code>, asset_id: <code>String</code>, tags: <code>List</code>)</li> <li>modified(db: <code>AssetDB</code>, query_id: <code>String</code>)</li> <li>modified(db: <code>AssetDB</code>, query_id: <code>String</code>, ext: <code>String</code>, subtype: <code>String</code>)</li> <li>modified(db: <code>AssetDB</code>, query_id: <code>String</code>, ext: <code>String</code>, subtype: <code>String</code>, root: <code>String</code>)</li> <li>modified(db: <code>AssetDB</code>, query_id: <code>String</code>, ext: <code>String</code>)</li> <li>unmodified(db: <code>AssetDB</code>, query_id: <code>String</code>, asset_id: <code>String</code>)</li> <li>modify(db: <code>AssetDB</code>, query_id: <code>String</code>, asset_id: <code>String</code>)</li> <li>is_modified(db: <code>AssetDB</code>, query_id: <code>String</code>, asset_id: <code>String</code>)</li> <li>get_data(type_id: <code>String</code>, id: <code>String</code>)</li> <li>get_block(type_id: <code>String</code>)</li> <li>get_handle(type_id: <code>String</code>, id: <code>String</code>)</li> <li>set_handle(type_id: <code>String</code>, id: <code>String</code>, handle: <code>Num</code>)</li> <li>get_dev_version_path(db: <code>AssetDB</code>, asset_id: <code>String</code>)</li> <li>get_dev_version_data(db: <code>AssetDB</code>, asset_id: <code>String</code>)</li> <li>save_dev_version_data(db: <code>AssetDB</code>, asset_id: <code>String</code>, version_data: <code>Map</code>)</li> <li>image(id: <code>String</code>)</li> <li>bytes(id: <code>String</code>)</li> <li>material(id: <code>String</code>)</li> <li>atlas(id: <code>String</code>)</li> <li>lx(id: <code>String</code>)</li> <li>has_shader_library(id: <code>String</code>)</li> <li>has_image(id: <code>String</code>)</li> <li>has_material_basis(id: <code>String</code>)</li> <li>has_material(id: <code>String</code>)</li> <li>has_bytes(id: <code>String</code>)</li> <li>has_settings(id: <code>String</code>)</li> <li>has_atlas(id: <code>String</code>)</li> <li>has_physics(id: <code>String</code>)</li> <li>has_prototype(id: <code>String</code>)</li> <li>has_scene(id: <code>String</code>)</li> <li>has_input(id: <code>String</code>)</li> <li>has_anim(id: <code>String</code>)</li> <li>has_mesh(id: <code>String</code>)</li> <li>has_tiles(id: <code>String</code>)</li> <li>has_ui(id: <code>String</code>)</li> <li>unload_input(id: <code>String</code>)</li> <li>load_input(id: <code>String</code>)</li> </ul> <p> Assets.db_init() \u00b6 returns <code>AssetDB</code></p> <p>no docs found   </p> <p> Assets.db_commit(db: <code>AssetDB</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Assets.db_default() \u00b6 returns <code>AssetDB</code></p> <p>no docs found   </p> <p> Assets.db_default_set(db: <code>AssetDB</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.db_commit_post(db: <code>AssetDB</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Assets.db_commit_refs(db: <code>AssetDB</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Assets.db_add_root_path(db: <code>AssetDB</code>, path: <code>String</code>, subfolder: <code>String</code>, prefix: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.db_add_item(db: <code>AssetDB</code>, root: <code>String</code>, path: <code>String</code>, is_directory: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.db_make_item(db: <code>AssetDB</code>, root: <code>String</code>, path: <code>String</code>, is_directory: <code>Bool</code>) \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> Assets.db_make_item(db: <code>AssetDB</code>, root: <code>String</code>, path: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.db_remove_item(db: <code>AssetDB</code>, asset_id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Assets.db_add_item(db: <code>AssetDB</code>, root: <code>String</code>, path: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.db_add_ignore(db: <code>AssetDB</code>, globs: <code>List</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.db_asset_from_path(db: <code>AssetDB</code>, path: <code>String</code>) \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> Assets.db_asset_from_id(db: <code>AssetDB</code>, asset_id: <code>String</code>) \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> Assets.db_asset_from_uuid(db: <code>AssetDB</code>, meta_uuid: <code>String</code>) \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> Assets.db_asset_get_root(db: <code>AssetDB</code>, asset_id: <code>String</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Assets.db_compile(db: <code>AssetDB</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Assets.db_parse(bytes: <code>String</code>) \u00b6 returns <code>AssetDB</code></p> <p>no docs found   </p> <p> Assets.db_has(db: <code>AssetDB</code>, asset_id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Assets.db_add_reference(db: <code>AssetDB</code>, from_asset_id: <code>String</code>, to_asset_id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.db_reset_references(db: <code>AssetDB</code>, asset_id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.db_get_references(db: <code>AssetDB</code>, asset_id: <code>String</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.db_get_referenced_by(db: <code>AssetDB</code>, asset_id: <code>String</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.list(db: <code>AssetDB</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.list(db: <code>AssetDB</code>, ext: <code>String</code>, subtype: <code>String</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.list(db: <code>AssetDB</code>, ext: <code>String</code>, subtype: <code>String</code>, root: <code>String</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.list(db: <code>AssetDB</code>, ext: <code>String</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.list_folders(db: <code>AssetDB</code>, root: <code>String</code>, use_path: <code>Bool</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.db_list_tags(db: <code>AssetDB</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.db_get_tags(db: <code>AssetDB</code>, asset_id: <code>String</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.db_get_tagged(db: <code>AssetDB</code>, tag: <code>String</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.db_get_tagged_from_list(db: <code>AssetDB</code>, tags: <code>List</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.db_add_tags(db: <code>AssetDB</code>, asset_id: <code>String</code>, tags: <code>List</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.db_remove_tags(db: <code>AssetDB</code>, asset_id: <code>String</code>, tags: <code>List</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.modified(db: <code>AssetDB</code>, query_id: <code>String</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.modified(db: <code>AssetDB</code>, query_id: <code>String</code>, ext: <code>String</code>, subtype: <code>String</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.modified(db: <code>AssetDB</code>, query_id: <code>String</code>, ext: <code>String</code>, subtype: <code>String</code>, root: <code>String</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.modified(db: <code>AssetDB</code>, query_id: <code>String</code>, ext: <code>String</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Assets.unmodified(db: <code>AssetDB</code>, query_id: <code>String</code>, asset_id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.modify(db: <code>AssetDB</code>, query_id: <code>String</code>, asset_id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.is_modified(db: <code>AssetDB</code>, query_id: <code>String</code>, asset_id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Assets.get_data(type_id: <code>String</code>, id: <code>String</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Assets.get_block(type_id: <code>String</code>) \u00b6 returns <code>Block</code></p> <p>no docs found   </p> <p> Assets.get_handle(type_id: <code>String</code>, id: <code>String</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Assets.set_handle(type_id: <code>String</code>, id: <code>String</code>, handle: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.get_dev_version_path(db: <code>AssetDB</code>, asset_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Assets.get_dev_version_data(db: <code>AssetDB</code>, asset_id: <code>String</code>) \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> Assets.save_dev_version_data(db: <code>AssetDB</code>, asset_id: <code>String</code>, version_data: <code>Map</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Assets.image(id: <code>String</code>) \u00b6 returns <code>Image</code></p> <p>Return a loaded image by id.</p> <pre><code>var image = Assets.image(\"image/player\")\nLog.print(\"width: %(Image.get_width(image))\")\n</code></pre> <p> Assets.bytes(id: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Returns the data stored as bytes.  A Wren <code>String</code> is also a byte sequence, used via <code>string.bytes</code>.</p> <p>Note That unlike other assets, bytes are stored by name with extension. For example if you put a file called <code>data/hello.txt</code> in your project, you would access it via <code>var data = Assets.bytes(\"data/hello.txt\")</code>.</p> <p>This is because the extension might be meaningful to the user of the bytes, for example loading an image based on png vs jpg extension would be impossible if we don't know the extension of the data. Because bytes are \"opaque\", as in,  we don't care what they store, we just store them for you to access, we keep the extension.</p> <pre><code>var text = Assets.bytes(\"data/hello.txt\")\nLog.print(text) //prints the contents of the file (the contents at compile time).\n</code></pre> <p> Assets.material(id: <code>String</code>) \u00b6 returns <code>Material</code></p> <p>Returns a loaded material by id.</p> <pre><code>var material = Assets.material(\"material/player\")\nSprite.set_material(player, material)\n</code></pre> <p> Assets.atlas(id: <code>String</code>) \u00b6 returns <code>Atlas</code></p> <p>Returns a loaded atlas by id.</p> <pre><code>var atlas = Assets.atlas(\"atlas/example\")\n</code></pre> <p> Assets.lx(id: <code>String</code>) \u00b6 returns <code>Any</code></p> <p>Returns the LX parsed representation of a <code>bytes</code> asset. This is convenience for <code>Assets.bytes</code> followed by <code>LX.parse</code>. Returns null if the asset isn't found, or if parsing failed.</p> <p>See <code>Assets.bytes</code>, as bytes require an extension.</p> <pre><code>//assuming our data contains { speaker=\"sara\" message=\"follow me.\" }\nvar dialog = Assets.lx(\"dialog/hello.lx\")\nvar speaker = dialog[\"speaker\"]\nvar message = dialog[\"message\"]\nLog.print(\"%(speaker): %(message)\")\n</code></pre> <p> Assets.has_shader_library(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if a shader library with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_shader_library(\"assets/shaders\")\n</code></pre> <p> Assets.has_image(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if an image with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_image(\"image/player\")\n</code></pre> <p> Assets.has_material_basis(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if a material basis with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_material_basis(\"basis/example\")\n</code></pre> <p> Assets.has_material(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if a material with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_material(\"material/player\")\n</code></pre> <p> Assets.has_bytes(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if a bytes asset with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_bytes(\"data/hello.txt\")\n</code></pre> <p> Assets.has_settings(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if a settings asset with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_settings(\"settings/area1\")\n</code></pre> <p> Assets.has_atlas(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if an atlas asset with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_atlas(\"atlas/example\")\n</code></pre> <p> Assets.has_physics(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if a physics asset with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_physics(\"physics/ice\")\n</code></pre> <p> Assets.has_prototype(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if a prototype with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_prototype(\"proto/tree\")\n</code></pre> <p> Assets.has_scene(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if a scene with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_scene(\"scene/area1\")\n</code></pre> <p> Assets.has_input(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if an input asset with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_input(\"input/player\")\n</code></pre> <p> Assets.has_anim(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if an animation with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_anim(\"anim/jump\")\n</code></pre> <p> Assets.has_mesh(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if a mesh with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_mesh(\"mesh/cube\")\n</code></pre> <p> Assets.has_tiles(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if a tilemap with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_tiles(\"tiles/caves\")\n</code></pre> <p> Assets.has_ui(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if a ui asset with this id is loaded, or false otherwise.</p> <pre><code>var exists = Assets.has_ui(\"ui/menu\")\n</code></pre> <p> Assets.unload_input(id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Unload the input asset, which undefines any nodes or events   </p> <p> Assets.load_input(id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Load an input asset, which defines any nodes or events within it   </p>"},{"location":"api/v/next/assets/#strings","title":"Strings","text":"<p><code>import \"luxe: assets\" for Strings</code></p> <p>When dealing with data like assets, storing a string directly can take up a lot of space. Instead, what we can do is store the strings once, in a shared place, and then reference that string later.</p> <p>At runtime, strings can also be more expensive than is ideal (like needing to iterate the characters individually, or taking up more memory).</p> <p>In both cases, what we store instead of a string is a string id, which is just a number.</p> <p>Comparing two numbers, looking up numbers in an array or map and so on, it's much faster with a number than using the string itself. Operating on numbers is both faster and simpler, and has a fixed size in memory. This is commonly called \"string interning\".</p> <p>In luxe, the <code>Strings</code> class is how you interact with the strings available to your game. For example, <code>var name_id = Entity.get_name(entity)</code> will return a string id, not a string. To get the string, you can use <code>var name = Strings.get(name_id)</code>. Note that if the name is unknown to <code>Strings</code>, it will return null, so handle that appropriately.</p> <p>To add a string, use <code>Strings.add(\"string\")</code>.</p> <p>For debugging strings, if you look inside <code>.luxe/luxe.strings.lx</code>,  this lists all the strings your assets reference, and what their key is.</p> <pre><code>//Assuming this string hasn't been added before:\nLog.print( Strings.get(\"hello\") ) //prints null\nvar key = Strings.add(\"hello\") //key is 1335831723\nLog.print( Strings.get(\"hello\") ) //prints 'hello'\n</code></pre> <ul> <li>add(value: <code>String</code>)</li> <li>get(key: <code>Num</code>)</li> </ul> <p> Strings.add(value: <code>String</code>) \u00b6 returns <code>Num</code></p> <p>Adds a string to the <code>Strings</code> service and returns the key.</p> <pre><code>Log.print(Strings.add(\"hello\")) //prints 1335831723\n</code></pre> <p> Strings.get(key: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Return the value associated with the given key. This will return null if the string is not found.</p> <pre><code>var name_id = Entity.get_name(entity)\nvar name = Strings.get(name_id)\nif(name) {\n  Log.print(\"entity name is %(name)\")\n} else {\n  Log.print(\"entity name is not known (or it has no name)\")\n}\n</code></pre>"},{"location":"api/v/next/astar/","title":"Astar","text":""},{"location":"api/v/next/astar/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/astar/#luxe-astar-module","title":"<code>luxe: astar</code> module","text":"<ul> <li>AStar </li> </ul>"},{"location":"api/v/next/astar/#astar","title":"AStar","text":"<p><code>import \"luxe: astar\" for AStar</code></p> <p>A generic implementation of A* pathfinding in luxe.</p> <p>For details about the pathfinding and things like costs, heuristics and  implementation details, please see https://www.redblobgames.com/pathfinding/a-star/introduction.html</p> <ul> <li>MAX</li> <li>MAX=(v : Num)</li> <li>path2D(start: <code>Vec</code>, end: <code>Vec</code>, cost_get_fn: <code>Fn</code>, neighbors_get_fn: <code>Fn</code>, heuristic_fn: <code>Fn</code>)</li> </ul> <p> AStar.MAX \u00b6 returns <code>Num</code></p> <p>A value that defaults to <code>250</code>, for the max number of iterations that will be considered valid. If the max is reached, no path is returned. To update it, use <code>Astar.MAX = 400</code>.   </p> <p> AStar.MAX=(v : Num) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AStar.path2D(start: <code>Vec</code>, end: <code>Vec</code>, cost_get_fn: <code>Fn</code>, neighbors_get_fn: <code>Fn</code>, heuristic_fn: <code>Fn</code>) \u00b6 returns <code>List</code></p> <p>Returns a path between <code>start</code> and <code>end</code> if one was found, or <code>null</code> otherwise. The path is a <code>List</code> of nodes received from <code>start</code>, <code>end</code> or <code>neighbors_get_fn</code> and are unmodified.</p> <p>Note: Check if <code>start</code>/<code>end</code> are walkable before calling this function.</p> <p>Cost-calculating Function: <pre><code>//no cost?\n_cost_get_fn = Fn.new {|from, to| 1 }\n//cost from a tilemap, simple (fake) example\n_cost_get_fn = Fn.new {|from, to| tiles.get_cost(to.x, to.y) }\n</code></pre></p> <p>Getting the neighbors of a node: <pre><code>_neighbors_get_fn = Fn.new {|node|\n  var list = []\n  //check above, below, left and right.\n  if(is_walkable(node.x, node.y+1)) list.add(Node.new(node.x, node.y+1))\n  if(is_walkable(node.x, node.y-1)) list.add(Node.new(node.x, node.y-1))\n  if(is_walkable(node.x+1, node.y)) list.add(Node.new(node.x+1, node.y))\n  if(is_walkable(node.x-1, node.y)) list.add(Node.new(node.x-1, node.y))\n  return list\n}\n</code></pre></p> <p>Getting the heuristic value of a point: <pre><code>_heuristic_fn = Fn.new {|end, point|\n  var manhattan = ((end.x - point.x).abs + (end.y - point.y).abs)\n  return manhattan * 1.001 //fudge factor, see the linked articles on pathfinding\n}\n</code></pre></p> <p>Getting a path: <pre><code>get_path(start, end) {\n  if(!is_walkable(start)) return null\n  if(!is_walkable(end)) return null\n  return AStar.path2D(start, end, _cost_get_fn, _neighbors_get_fn, _heuristic_fn)\n}\n</code></pre></p>"},{"location":"api/v/next/audio/","title":"Audio","text":""},{"location":"api/v/next/audio/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/audio/#luxe-audio-module","title":"<code>luxe: audio</code> module","text":"<ul> <li>Audio </li> <li>AudioAttenuation </li> <li>Bus </li> </ul>"},{"location":"api/v/next/audio/#audio","title":"Audio","text":"<p><code>import \"luxe: audio\" for Audio</code></p> <p>The Audio module let's you play audio.</p> <p><code>Audio</code> is a service API, and isn't a modifier system. There is e.g the Sound modifier for placing sounds in the world.</p> <p>Most things in <code>Audio</code> work on an instance (handle) of a sound. You get one of those from <code>play</code> or <code>loop</code>, and then can modify or query it. It's always safe to call any function on an instance, even if it's finished playing.</p> <p>A quick look:</p> <pre><code>//play them\nvar sound = Audio.play(Asset.audio(\"assets/sound\"))\nvar music = Audio.loop(Asset.audio(\"assets/music\"))\n\n//later...\nAudio.volume(music, 0.5)\n\n//later still...\nAudio.stop(music)\n</code></pre> <p>That's it!</p> <ul> <li>set_listener(pos: <code>Float3</code>, forward: <code>Float3</code>, up: <code>Float3</code>, velocity: <code>Float3</code>)</li> <li>play(source: <code>AudioAsset</code>, volume: <code>Num</code>)</li> <li>play(source: <code>AudioAsset</code>, as3D: <code>Bool</code>, bus: <code>AudioBus</code>, volume: <code>Num</code>)</li> <li>play(source: <code>AudioAsset</code>)</li> <li>loop(source: <code>AudioAsset</code>, volume: <code>Num</code>)</li> <li>loop(source: <code>AudioAsset</code>, as3D: <code>Bool</code>, bus: <code>AudioBus</code>, volume: <code>Num</code>)</li> <li>loop(source: <code>AudioAsset</code>)</li> <li>stop(instance: <code>AudioInstance</code>)</li> <li>playing(instance: <code>AudioInstance</code>)</li> <li>pan(instance: <code>AudioInstance</code>, pan: <code>Num</code>)</li> <li>pan_of(instance: <code>AudioInstance</code>)</li> <li>volume(instance: <code>AudioInstance</code>, volume: <code>Num</code>)</li> <li>volume_of(instance: <code>AudioInstance</code>)</li> <li>pitch(instance: <code>AudioInstance</code>, pitch: <code>Num</code>)</li> <li>pitch_of(instance: <code>AudioInstance</code>)</li> <li>pause(instance: <code>AudioInstance</code>, paused: <code>Bool</code>)</li> <li>pause_of(instance: <code>AudioInstance</code>)</li> <li>set3D(instance: <code>AudioInstance</code>, pos: <code>Float3</code>, vel: <code>Float3</code>, dopper_factor: <code>Float</code>, attenuation: <code>AudioAttenuation</code>, range: <code>Float2</code>, rolloff: <code>Num</code>)</li> </ul> <p> Audio.set_listener(pos: <code>Float3</code>, forward: <code>Float3</code>, up: <code>Float3</code>, velocity: <code>Float3</code>) \u00b6 returns <code>unknown</code></p> <p>Set the world space listener position directly   </p> <p> Audio.play(source: <code>AudioAsset</code>, volume: <code>Num</code>) \u00b6 returns <code>AudioInstance</code></p> <p>Plays audio from the specified <code>source</code> at volume <code>volume</code>. Returns a handle to an audio instance that you can modify or stop.</p> <pre><code>Audio.define_source(\"sound\", \"assets/sound.wav\")\nAudio.play(\"sound\", 1)\n</code></pre> <p> Audio.play(source: <code>AudioAsset</code>, as3D: <code>Bool</code>, bus: <code>AudioBus</code>, volume: <code>Num</code>) \u00b6 returns <code>AudioInstance</code></p> <p>Plays audio from the specified <code>source</code> with <code>as3D</code> and <code>bus</code> at volume <code>volume</code>. The bus comes from <code>create_bus</code>, and 0 means global/default bus. If <code>as3D</code> is true, use set3D on the handle returned to configure position/velocity. Returns a handle to an audio instance that you can modify or stop.</p> <pre><code>Audio.define_source(\"sound\", \"assets/sound.wav\")\nAudio.play(\"sound\", true, 0, 1)\n</code></pre> <p> Audio.play(source: <code>AudioAsset</code>) \u00b6 returns <code>AudioInstance</code></p> <p>Plays audio from the specified <code>source</code> at volume <code>1.0</code>. Returns a handle to an audio instance that you can modify or stop.</p> <pre><code>Audio.define_source(\"sound\", \"assets/sound.wav\")\nAudio.play(\"sound\")\n</code></pre> <p> Audio.loop(source: <code>AudioAsset</code>, volume: <code>Num</code>) \u00b6 returns <code>AudioInstance</code></p> <p>Begins looping audio for <code>id</code> at volume <code>volume</code>. Returns a handle to an audio instance that you can modify or stop.</p> <pre><code>var music = Audio.loop(\"music\", 1.0)\n</code></pre> <p> Audio.loop(source: <code>AudioAsset</code>, as3D: <code>Bool</code>, bus: <code>AudioBus</code>, volume: <code>Num</code>) \u00b6 returns <code>AudioInstance</code></p> <p>Begins looping audio for <code>id</code> with <code>as3D</code> and <code>bus</code> at volume <code>volume</code>. The bus comes from <code>create_bus</code>, and 0 means global/default bus. If <code>as3D</code> is true, use set3D on the handle returned to configure position/velocity.   Returns a handle to an audio instance that you can modify or stop.</p> <pre><code>var music = Audio.loop(\"music\", false, 0, 1.0)\n</code></pre> <p> Audio.loop(source: <code>AudioAsset</code>) \u00b6 returns <code>AudioInstance</code></p> <p>Begins looping audio for <code>id</code> at volume <code>1.0</code>. Returns a handle to an audio instance that you can modify or stop.</p> <pre><code>var music = Audio.loop(\"music\")\n</code></pre> <p> Audio.stop(instance: <code>AudioInstance</code>) \u00b6 returns <code>None</code></p> <p>Stops an AudioInstance.</p> <pre><code>var music = Audio.loop(\"music\")\nAudio.stop(music)\n</code></pre> <p> Audio.playing(instance: <code>AudioInstance</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if an AudioInstance is playing.</p> <pre><code>var music = Audio.loop(\"music\")\nLog.print(Audio.playing(music)) //true\nAudio.stop(music)\nLog.print(Audio.playing(music)) //false\n</code></pre> <p> Audio.pan(instance: <code>AudioInstance</code>, pan: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Sets the current <code>pan</code> value for the given <code>instance</code>.</p> <p>Negative values for <code>pan</code> will move the audio to the left speakers,  while positive values will move the audio to the right speakers.</p> <p>A value of 0 will reset to the audio sample back to center.</p> <pre><code>var sound = Audio.play(\"sound\")\nAudio.pan(sound, -2.0)\n</code></pre> <p> Audio.pan_of(instance: <code>AudioInstance</code>) \u00b6 returns <code>Num</code></p> <p>Returns the current <code>pan</code> value for the given <code>instance</code>.</p> <pre><code>var sound = Audio.play(\"sound\")\nAudio.pan(sound, 2.0)\nLog.print(Audio.pan_of(sound)) // returns 2.0\n</code></pre> <p> Audio.volume(instance: <code>AudioInstance</code>, volume: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Sets the <code>volume</code> for a given <code>instance</code>.</p> <p>Intended volumes range from 0..1, with 1 meaning 100% volume, and 0 meaning silence. Volume values higher than 1 are valid (&gt; 100%).</p> <pre><code>var sound = Audio.play(\"sound\") // Volume is 1.0\nAudio.volume(sound, 0.5)        // Volume is now 0.5\n</code></pre> <p> Audio.volume_of(instance: <code>AudioInstance</code>) \u00b6 returns <code>Num</code></p> <p>Returns the current <code>volume</code> for the given <code>instance</code>.</p> <pre><code>var sound = Audio.play(\"sound\")\nLog.print(Audio.volume_of(sound)) // returns 1\n</code></pre> <p> Audio.pitch(instance: <code>AudioInstance</code>, pitch: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Adjusts the <code>pitch</code> of <code>instance</code>, making the sample sound higher or lower-pitched. Pitch values below 1 will lower the pitch of the sample, while pitch values above 1 raise it.</p> <p>A value of 1 will cause the sample to be played at its source pitch.</p> <p>Pitch changes will affect playback duration, causing lower-pitched samples  to have longer durations and higher-pitched samples to have shorter durations,  because the audio is not resampled (when using this function).</p> <p>A pitch of 0 (or smaller) will be ignored.</p> <pre><code>var sound = Audio.play(\"sound\")\nAudio.pitch(sound, 1)\n</code></pre> <p> Audio.pitch_of(instance: <code>AudioInstance</code>) \u00b6 returns <code>Num</code></p> <p>Returns the current <code>pitch</code> for <code>instance</code>.</p> <pre><code>var sound = Audio.play(\"sound\")\nAudio.pitch(sound, 3)\nLog.print(Audio.pitch_of(sound)) // returns 3\n</code></pre> <p> Audio.pause(instance: <code>AudioInstance</code>, paused: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Sets whether the audio <code>instance</code> is playing, pausing it when not. Once you set an <code>instance</code> to not play you can resume it later.</p> <pre><code>var sound = Audio.play(\"sound\")\nAudio.pause(sound, false) //pauses\n</code></pre> <p> Audio.pause_of(instance: <code>AudioInstance</code>) \u00b6 returns <code>Bool</code></p> <p>Returns whether an <code>instance</code> is paused.</p> <pre><code>var sound = Audio.play(\"sound\")\nLog.print(Audio.pause_of(sound)) //true\nAudio.pause(sound, false) //pause\nLog.print(Audio.pause_of(sound)) //false\n</code></pre> <p> Audio.set3D(instance: <code>AudioInstance</code>, pos: <code>Float3</code>, vel: <code>Float3</code>, dopper_factor: <code>Float</code>, attenuation: <code>AudioAttenuation</code>, range: <code>Float2</code>, rolloff: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Sets 3D parameters of the the audio <code>instance</code>. Note that you need to use play with the 3d flag to make the sound 3d otherwise this has no effect.</p> <pre><code>var sound = Audio.play(\"sound\")\nvar pos = [0,0,0]\nvar vel = [0,0,0]\nvar doppler = 1.0\nvar attn = AudioAttenuation.none\nvar range = [1, 100] // min / max distance for attenuation\nvar rolloff = 1.0\nAudio.set3D(sound, pos, vel, doppler, attn, range, rolloff)\n</code></pre>"},{"location":"api/v/next/audio/#audioattenuation","title":"AudioAttenuation","text":"<p><code>import \"luxe: audio\" for AudioAttenuation</code></p> <p>Read more details with graphs here https://solhsa.com/soloud/concepts3d.html#attenuation</p> <ul> <li>none</li> <li>inverse_distance</li> <li>linear_distance</li> <li>exponential_distance</li> </ul> <p> AudioAttenuation.none \u00b6 returns <code>unknown</code></p> <p>No attenuation based on distance. The default   </p> <p> AudioAttenuation.inverse_distance \u00b6 returns <code>unknown</code></p> <p>The higher the rolloff factor, the more steeply the volume drops.  At low enough rolloff factor, the volume never drops near zero.  Values over 1 recommended (unless you have special needs).  Values less than equal to zero result in undefined behavior. Increasing the minimum distance pushes the start of the attenuation further.  It also causes the curve to change. Note that the minimum distance must be above 0. The maximum distance simply cuts the attenuation at the volume level it has reached at that point.   </p> <p> AudioAttenuation.linear_distance \u00b6 returns <code>unknown</code></p> <p>The rolloff factor for linear distance simply sets the maximum volume reduction.  Using values outside the 0..1 range causes undefined behavior. The minimum and maximum distance works as one might expect.  Minimum distance must be less or equal to maximum distance.   </p> <p> AudioAttenuation.exponential_distance \u00b6 returns <code>unknown</code></p> <p>The higher the rolloff factor, the more steeply the volume drops.  At low enough rolloff factor, the volume never drops near zero.  Values over 1 recommended (unless you have special needs).  Values less than equal to zero result in really weird behavior. Increasing the minimum distance pushes the start of the attenuation further.  It also causes the curve to change. Note that the minimum distance must be above 0. The maximum distance simply cuts the attenuation at the volume level it has reached at that point.   </p>"},{"location":"api/v/next/audio/#bus","title":"Bus","text":"<p><code>import \"luxe: audio\" for Bus</code></p> <p>no docs found</p> <ul> <li>set_channels(bus: <code>AudioBus</code>, value: <code>Num</code>)</li> <li>set_volume(bus: <code>AudioBus</code>, value: <code>Num</code>)</li> <li>get_volume(bus: <code>AudioBus</code>)</li> </ul> <p> Bus.set_channels(bus: <code>AudioBus</code>, value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the number of channels for the bus   </p> <p> Bus.set_volume(bus: <code>AudioBus</code>, value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the volume for the bus   </p> <p> Bus.get_volume(bus: <code>AudioBus</code>) \u00b6 returns <code>Num</code></p> <p>Get the volume for the bus   </p>"},{"location":"api/v/next/bytes/","title":"Bytes","text":""},{"location":"api/v/next/bytes/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/bytes/#luxe-bytes-module","title":"<code>luxe: bytes</code> module","text":"<ul> <li>Byter </li> <li>Bytes </li> <li>BytesReader </li> <li>BytesWriter </li> <li>Floats </li> <li>Uint16 </li> <li>Uint32 </li> </ul>"},{"location":"api/v/next/bytes/#byter","title":"Byter","text":"<p><code>import \"luxe: bytes\" for Byter</code></p> <p>no docs found</p> <ul> <li>pos</li> <li>inner</li> <li>new(size: <code>Any</code>)</li> <li>bytes()</li> <li>write_string(string: <code>Any</code>)</li> <li>write_string(string: <code>Any</code>, length: <code>Any</code>)</li> <li>write_string_aligned4(string: <code>Any</code>)</li> <li>write_string_aligned4(string: <code>Any</code>, length: <code>Any</code>)</li> <li>write_int8(value: <code>Any</code>)</li> <li>write_uint8(value: <code>Any</code>)</li> <li>write_int16(value: <code>Any</code>)</li> <li>write_int32(value: <code>Any</code>)</li> <li>write_int64(value: <code>Any</code>)</li> <li>write_uint16(value: <code>Any</code>)</li> <li>write_uint32(value: <code>Any</code>)</li> <li>write_uint64(value: <code>Any</code>)</li> <li>write_float32(value: <code>Any</code>)</li> <li>write_float64(value: <code>Any</code>)</li> <li>write_uuid(uuid: <code>Any</code>)</li> </ul> <p> Byter.pos \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.inner \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.new(size: <code>Any</code>) \u00b6 returns <code>Byter</code></p> <p>no docs found   </p> <p> Byter.bytes() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_string(string: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_string(string: <code>Any</code>, length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_string_aligned4(string: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_string_aligned4(string: <code>Any</code>, length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_int8(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_uint8(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_int16(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_int32(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_int64(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_uint16(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_uint32(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_uint64(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_float32(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_float64(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Byter.write_uuid(uuid: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/bytes/#bytes","title":"Bytes","text":"<p><code>import \"luxe: bytes\" for Bytes</code></p> <p>no docs found</p> <ul> <li>new(elements: <code>Any</code>)</li> <li>length</li> <li>[index : Any]</li> <li>[index : Any]=(value : Any)</li> <li>from_string(string: <code>Any</code>)</li> <li>set_from(other: <code>Any</code>)</li> <li>copy(other: <code>Any</code>, at: <code>Any</code>, length: <code>Any</code>)</li> <li>copy(other: <code>Any</code>, to: <code>Any</code>, from: <code>Any</code>, length: <code>Any</code>)</li> <li>set_string(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set_string(at: <code>Any</code>, value: <code>Any</code>, length: <code>Any</code>)</li> <li>get_string(at: <code>Any</code>, length: <code>Any</code>)</li> <li>set_int8(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set_int16(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set_int32(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set_int64(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set_uint8(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set_uint16(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set_uint32(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set_uint64(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set_float32(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set_float64(at: <code>Any</code>, value: <code>Any</code>)</li> <li>get_int8(at: <code>Any</code>)</li> <li>get_int16(at: <code>Any</code>)</li> <li>get_int32(at: <code>Any</code>)</li> <li>get_int64(at: <code>Any</code>)</li> <li>get_uint8(at: <code>Any</code>)</li> <li>get_uint16(at: <code>Any</code>)</li> <li>get_uint32(at: <code>Any</code>)</li> <li>get_uint64(at: <code>Any</code>)</li> <li>get_float32(at: <code>Any</code>)</li> <li>get_float64(at: <code>Any</code>)</li> <li>get(at: <code>Any</code>)</li> <li>set(at: <code>Any</code>, value: <code>Any</code>)</li> <li>bytes()</li> <li>clear()</li> <li>padding(length: <code>Any</code>, align: <code>Any</code>)</li> <li>padding(length: <code>Any</code>)</li> <li>iterate(iter: <code>Any</code>)</li> <li>iteratorValue(iter: <code>Any</code>)</li> </ul> <p> Bytes.new(elements: <code>Any</code>) \u00b6 returns <code>Bytes</code></p> <p>no docs found   </p> <p> Bytes.length \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes [index : Any] \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes [index : Any]=(value : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.from_string(string: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_from(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.copy(other: <code>Any</code>, at: <code>Any</code>, length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.copy(other: <code>Any</code>, to: <code>Any</code>, from: <code>Any</code>, length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_string(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_string(at: <code>Any</code>, value: <code>Any</code>, length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.get_string(at: <code>Any</code>, length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_int8(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_int16(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_int32(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_int64(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_uint8(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_uint16(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_uint32(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_uint64(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_float32(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set_float64(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.get_int8(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.get_int16(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.get_int32(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.get_int64(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.get_uint8(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.get_uint16(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.get_uint32(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.get_uint64(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.get_float32(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.get_float64(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.get(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.set(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.bytes() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.clear() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.padding(length: <code>Any</code>, align: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.padding(length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.iterate(iter: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Bytes.iteratorValue(iter: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/bytes/#bytesreader","title":"BytesReader","text":"<p><code>import \"luxe: bytes\" for BytesReader</code></p> <p>no docs found</p> <ul> <li>pos</li> <li>pos=(v : Any)</li> <li>bytes</li> <li>new(source_bytes: <code>Any</code>)</li> <li>from_string(string: <code>Any</code>)</li> <li>skip(count: <code>Any</code>)</li> <li>check_bounds(to_read: <code>Any</code>)</li> <li>get_string(length: <code>Any</code>)</li> <li>get_int8()</li> <li>get_int16()</li> <li>get_int32()</li> <li>get_int64()</li> <li>get_uint8()</li> <li>get_uint16()</li> <li>get_uint32()</li> <li>get_uint64()</li> <li>get_float32()</li> <li>get_float64()</li> </ul> <p> BytesReader.pos \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.pos=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.bytes \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.new(source_bytes: <code>Any</code>) \u00b6 returns <code>BytesReader</code></p> <p>no docs found   </p> <p> BytesReader.from_string(string: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.skip(count: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.check_bounds(to_read: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.get_string(length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.get_int8() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.get_int16() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.get_int32() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.get_int64() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.get_uint8() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.get_uint16() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.get_uint32() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.get_uint64() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.get_float32() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesReader.get_float64() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/bytes/#byteswriter","title":"BytesWriter","text":"<p><code>import \"luxe: bytes\" for BytesWriter</code></p> <p>no docs found</p> <ul> <li>pos</li> <li>pos=(v : Num)</li> <li>count</li> <li>capacity</li> <li>bytes</li> <li>inner</li> <li>new(initial_length: <code>Num</code>)</li> <li>resize(new_capacity: <code>Num</code>)</li> <li>ensure(write_length: <code>Num</code>)</li> <li>write_string(string: <code>String</code>, length: <code>Num</code>)</li> <li>write_string(string: <code>String</code>)</li> <li>write_string_aligned4(string: <code>String</code>, length: <code>Num</code>)</li> <li>write_string_aligned4(string: <code>String</code>)</li> <li>write_string_and_length(string: <code>String</code>, length: <code>Num</code>)</li> <li>write_string_and_length(string: <code>String</code>)</li> <li>write_int8(value: <code>Num</code>)</li> <li>write_uint8(value: <code>Num</code>)</li> <li>write_int16(value: <code>Num</code>)</li> <li>write_int32(value: <code>Num</code>)</li> <li>write_int64(value: <code>Num</code>)</li> <li>write_uint16(value: <code>Num</code>)</li> <li>write_uint32(value: <code>Num</code>)</li> <li>write_uint64(value: <code>Num</code>)</li> <li>write_float32(value: <code>Num</code>)</li> <li>write_float64(value: <code>Num</code>)</li> <li>write_uuid(uuid: <code>String</code>)</li> </ul> <p> BytesWriter.pos \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> BytesWriter.pos=(v : Num) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BytesWriter.count \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> BytesWriter.capacity \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> BytesWriter.bytes \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> BytesWriter.inner \u00b6 returns <code>Bytes</code></p> <p>no docs found   </p> <p> BytesWriter.new(initial_length: <code>Num</code>) \u00b6 returns <code>BytesWriter</code></p> <p>no docs found   </p> <p> BytesWriter.resize(new_capacity: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.ensure(write_length: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_string(string: <code>String</code>, length: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_string(string: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_string_aligned4(string: <code>String</code>, length: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_string_aligned4(string: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_string_and_length(string: <code>String</code>, length: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_string_and_length(string: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_int8(value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_uint8(value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_int16(value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_int32(value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_int64(value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_uint16(value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_uint32(value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_uint64(value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_float32(value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_float64(value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> BytesWriter.write_uuid(uuid: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p>"},{"location":"api/v/next/bytes/#floats","title":"Floats","text":"<p><code>import \"luxe: bytes\" for Floats</code></p> <p>no docs found</p> <ul> <li>new(elements: <code>Any</code>)</li> <li>length</li> <li>capacity</li> <li>size</li> <li>[index : Any]</li> <li>[index : Any]=(value : Any)</li> <li>resize(elements: <code>Any</code>)</li> <li>get(at: <code>Any</code>)</li> <li>set(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set(list: <code>Any</code>, at: <code>Any</code>, list_offset: <code>Any</code>, count: <code>Any</code>)</li> <li>set(list: <code>Any</code>)</li> <li>ortho(left: <code>Any</code>, top: <code>Any</code>, right: <code>Any</code>, bottom: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>)</li> <li>perspective(fov_vertical: <code>Any</code>, aspect: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>)</li> <li>transform(px: <code>Any</code>, py: <code>Any</code>, pz: <code>Any</code>, rx: <code>Any</code>, ry: <code>Any</code>, rz: <code>Any</code>, sx: <code>Any</code>, sy: <code>Any</code>, sz: <code>Any</code>)</li> <li>iterate(iter: <code>Any</code>)</li> <li>iteratorValue(iter: <code>Any</code>)</li> </ul> <p> Floats.new(elements: <code>Any</code>) \u00b6 returns <code>Floats</code></p> <p>Create a new Floats instance that can store the amount of elements specified.   </p> <p> Floats.length \u00b6 returns <code>unknown</code></p> <p>Get the size of the array in bytes. Since a float is 4 bytes, this should always be <code>value.size * 4</code>.   </p> <p> Floats.capacity \u00b6 returns <code>unknown</code></p> <p>Get the capacity of the underlying array. When resizing up to this amount of elements, the array does not need to be reallocated. You can ignore this most of the time.   </p> <p> Floats.size \u00b6 returns <code>unknown</code></p> <p>Get the amount of elements in the array.   </p> <p> Floats [index : Any] \u00b6 returns <code>unknown</code></p> <p>Get the float value at a specific index.   </p> <p> Floats [index : Any]=(value : Any) \u00b6 returns <code>unknown</code></p> <p>Set the float value at a specific index.   </p> <p> Floats.resize(elements: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Resize array to new size.   </p> <p> Floats.get(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Get the float value at a specific index.   </p> <p> Floats.set(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Set the float value at a specific index.   </p> <p> Floats.set(list: <code>Any</code>, at: <code>Any</code>, list_offset: <code>Any</code>, count: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Copy a part of a list into this array. This will grow the array if nessecary.   </p> <p> Floats.set(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Set the array to have the contents of a list. The array will be resized to have the same count as the list   </p> <p> Floats.ortho(left: <code>Any</code>, top: <code>Any</code>, right: <code>Any</code>, bottom: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Makes the array a 4x4 (16 elements) orthographic projection matrix for camera rendering.   </p> <p> Floats.perspective(fov_vertical: <code>Any</code>, aspect: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Makes the array a 4x4 (16 elements) perspective projection matrix for camera rendering.   </p> <p> Floats.transform(px: <code>Any</code>, py: <code>Any</code>, pz: <code>Any</code>, rx: <code>Any</code>, ry: <code>Any</code>, rz: <code>Any</code>, sx: <code>Any</code>, sy: <code>Any</code>, sz: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Makes the array a 4x4 (16 elements) model/transform matrix.   </p> <p> Floats.iterate(iter: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Floats.iteratorValue(iter: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/bytes/#uint16","title":"Uint16","text":"<p><code>import \"luxe: bytes\" for Uint16</code></p> <p>Tight uint16 array. Handeled internally as a C++ array, but will properly be deallocated by the wren garbage collector.</p> <ul> <li>new(elements: <code>Any</code>)</li> <li>length</li> <li>[index : Any]</li> <li>[index : Any]=(value : Any)</li> <li>get(at: <code>Any</code>)</li> <li>set(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set(list: <code>Any</code>, at: <code>Any</code>, list_offset: <code>Any</code>, count: <code>Any</code>)</li> <li>set(list: <code>Any</code>)</li> <li>iterate(iter: <code>Any</code>)</li> <li>iteratorValue(iter: <code>Any</code>)</li> </ul> <p> Uint16.new(elements: <code>Any</code>) \u00b6 returns <code>Uint16</code></p> <p>Create an array with the requested amount of elements   </p> <p> Uint16.length \u00b6 returns <code>unknown</code></p> <p>Get the size of the array in bytes. This is twice the amount of elements it can hold since each element takes up 2 bytes.   </p> <p> Uint16 [index : Any] \u00b6 returns <code>unknown</code></p> <p>Get the int value at a specific index.   </p> <p> Uint16 [index : Any]=(value : Any) \u00b6 returns <code>unknown</code></p> <p>Set the int value at a specific index.   </p> <p> Uint16.get(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Get the int value at a specific index.   </p> <p> Uint16.set(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Set the int value at a specific index.   </p> <p> Uint16.set(list: <code>Any</code>, at: <code>Any</code>, list_offset: <code>Any</code>, count: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Copy a part of a list into this array. This will fail if trying to write outside the array bounds.   </p> <p> Uint16.set(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Set the array to have the contents of a list. This will fail if trying to write outside the array bounds and will leave elements unchanged if list is shorter than array.   </p> <p> Uint16.iterate(iter: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Uint16.iteratorValue(iter: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/bytes/#uint32","title":"Uint32","text":"<p><code>import \"luxe: bytes\" for Uint32</code></p> <p>Tight uint32 array. Handeled internally as a C++ array, but will properly be deallocated by the wren garbage collector.</p> <ul> <li>new(elements: <code>Any</code>)</li> <li>length</li> <li>[index : Any]</li> <li>[index : Any]=(value : Any)</li> <li>get(at: <code>Any</code>)</li> <li>set(at: <code>Any</code>, value: <code>Any</code>)</li> <li>set(list: <code>Any</code>, at: <code>Any</code>, list_offset: <code>Any</code>, count: <code>Any</code>)</li> <li>set(list: <code>Any</code>)</li> <li>iterate(iter: <code>Any</code>)</li> <li>iteratorValue(iter: <code>Any</code>)</li> </ul> <p> Uint32.new(elements: <code>Any</code>) \u00b6 returns <code>Uint32</code></p> <p>Create an array with the requested amount of elements   </p> <p> Uint32.length \u00b6 returns <code>unknown</code></p> <p>Get the size of the array in bytes. This is twice the amount of elements it can hold since each element takes up 2 bytes.   </p> <p> Uint32 [index : Any] \u00b6 returns <code>unknown</code></p> <p>Get the int value at a specific index.   </p> <p> Uint32 [index : Any]=(value : Any) \u00b6 returns <code>unknown</code></p> <p>Set the int value at a specific index.   </p> <p> Uint32.get(at: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Get the int value at a specific index.   </p> <p> Uint32.set(at: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Set the int value at a specific index.   </p> <p> Uint32.set(list: <code>Any</code>, at: <code>Any</code>, list_offset: <code>Any</code>, count: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Copy a part of a list into this array. This will fail if trying to write outside the array bounds.   </p> <p> Uint32.set(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Set the array to have the contents of a list. This will fail if trying to write outside the array bounds and will leave elements unchanged if list is shorter than array.   </p> <p> Uint32.iterate(iter: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Uint32.iteratorValue(iter: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/cable/","title":"Cable","text":""},{"location":"api/v/next/cable/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/cable/#luxe-cable-module","title":"<code>luxe: cable</code> module","text":"<ul> <li>Cable </li> </ul>"},{"location":"api/v/next/cable/#cable","title":"Cable","text":"<p><code>import \"luxe: cable\" for Cable</code></p> <p>no docs found</p> <ul> <li><code>var fixed_size : Bool = false</code></li> <li><code>var flex_amount : Num = 0.1</code></li> <li><code>var damping : Num = 0.96</code></li> <li><code>var iterations : Num = 4</code></li> <li><code>var segments : Num = 20</code></li> <li><code>var segment_length : Num = 12</code></li> <li><code>var gravity : List = [0, -200, 0]</code></li> <li><code>var start : Float3 = [0, 0, 0]</code></li> <li><code>var end : Float3 = [0, 0, 0]</code></li> <li><code>var nodes : List = []</code></li> <li>new()</li> <li>pre_warm(warm_iterations: <code>Num</code>)</li> <li>simulate()</li> <li>apply_constraints()</li> <li>tick()</li> </ul> <p> Cable.new() \u00b6 returns <code>Cable</code></p> <p>no docs found   </p> <p> Cable.pre_warm(warm_iterations: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Cable.simulate() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Cable.apply_constraints() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Cable.tick() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/color/","title":"Color","text":""},{"location":"api/v/next/color/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/color/#luxe-color-module","title":"<code>luxe: color</code> module","text":"<ul> <li>Color </li> </ul>"},{"location":"api/v/next/color/#color","title":"Color","text":"<p><code>import \"luxe: color\" for Color</code></p> <p>Access to color APIs. Note that this is not done at all.</p> <ul> <li>white</li> <li>black</li> <li>clear</li> <li>pink</li> <li>red</li> <li>green</li> <li>blue</li> <li>hex(value: <code>Num</code>)</li> <li>clone(other: <code>Color</code>, alpha: <code>Num</code>)</li> <li>hex_string(color: <code>Color</code>)</li> <li>hex_string(color: <code>Color</code>, alpha: <code>Bool</code>)</li> <li>hex(value: <code>Num</code>, alpha: <code>Num</code>)</li> <li>hex_set(color: <code>Color</code>, hex: <code>Num</code>)</li> <li>hex_color(color: <code>Color</code>)</li> <li>hex_color(color: <code>Color</code>, include_alpha: <code>Bool</code>)</li> <li>lerp(from: <code>Color</code>, to: <code>Color</code>, t: <code>Num</code>)</li> <li>lerp(from: <code>Color</code>, to: <code>Color</code>, t: <code>Num</code>, into: <code>Color</code>)</li> <li>rgb2hsv(rgb: <code>Color</code>)</li> <li>hsv2rgb(hsv: <code>Color</code>)</li> <li>color_from_hue(hue: <code>Num</code>)</li> <li>linear_srgb_to_oklab(r: <code>Num</code>, g: <code>Num</code>, b: <code>Num</code>)</li> <li>oklab_to_linear_srgb(L: <code>Num</code>, a: <code>Num</code>, b: <code>Num</code>)</li> <li>okhsl_to_srgb(h: <code>Num</code>, s: <code>Num</code>, l: <code>Num</code>)</li> <li>srgb_to_okhsl(r: <code>Num</code>, g: <code>Num</code>, b: <code>Num</code>)</li> <li>okhsv_to_srgb(h: <code>Num</code>, s: <code>Num</code>, v: <code>Num</code>)</li> <li>srgb_to_okhsv(r: <code>Num</code>, g: <code>Num</code>, b: <code>Num</code>)</li> <li>find_cusp(a: <code>Any</code>, b: <code>Any</code>)</li> <li>compute_max_saturation(a: <code>Num</code>, b: <code>Num</code>)</li> <li>find_gamut_intersection(a: <code>Any</code>, b: <code>Any</code>, L1: <code>Any</code>, C1: <code>Any</code>, L0: <code>Any</code>, cusp: <code>Any</code>)</li> </ul> <p> Color.white \u00b6 returns <code>Color</code></p> <p>A constant for [1,1,1,1]. Note: don't modify the return value.   </p> <p> Color.black \u00b6 returns <code>Color</code></p> <p>A constant for [0,0,0,1]. Note: don't modify the return value.   </p> <p> Color.clear \u00b6 returns <code>Color</code></p> <p>A constant for [0,0,0,0]. Note: don't modify the return value.   </p> <p> Color.pink \u00b6 returns <code>Color</code></p> <p>The luxe pink color used everywhere. Note: don't modify the return value.   </p> <p> Color.red \u00b6 returns <code>Color</code></p> <p>The luxe red color. Note: don't modify the return value.   </p> <p> Color.green \u00b6 returns <code>Color</code></p> <p>The luxe green color. Note: don't modify the return value.   </p> <p> Color.blue \u00b6 returns <code>Color</code></p> <p>The luxe blue color. Note: don't modify the return value.   </p> <p> Color.hex(value: <code>Num</code>) \u00b6 returns <code>Color</code></p> <p>Returns a new color from the specified hex color value.</p> <pre><code>var color = Color.hex(0xFF00AA)\n</code></pre> <p> Color.clone(other: <code>Color</code>, alpha: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Returns a new color from the specified color with a different alpha.</p> <pre><code>var other = Color.hex(0xFF00AA)\nvar color = Color.clone(other, 0.5)\n</code></pre> <p> Color.hex_string(color: <code>Color</code>) \u00b6 returns <code>String</code></p> <p>Returns a hex string from the specified color.</p> <pre><code>Color.hex_string(Color.white) //#FFFFFF\n</code></pre> <p> Color.hex_string(color: <code>Color</code>, alpha: <code>Bool</code>) \u00b6 returns <code>String</code></p> <p>Returns a hex string from the specified color. If <code>alpha</code> is true, includes the alpha component.</p> <pre><code>Color.hex_string(Color.white, true) //#FFFFFFFF\n</code></pre> <p> Color.hex(value: <code>Num</code>, alpha: <code>Num</code>) \u00b6 returns <code>Color</code></p> <p>Returns a new color from the specified hex color value, with the specified alpha value.</p> <pre><code>var color = Color.hex(0xFF00AA, 0.5)\n</code></pre> <p> Color.hex_set(color: <code>Color</code>, hex: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Set an existing color to the specified hex color value.</p> <pre><code>var color = Color.hex_set(0xFF00AA)\n</code></pre> <p> Color.hex_color(color: <code>Color</code>) \u00b6 returns <code>Num</code></p> <p>Get the hex color value of a color   </p> <p> Color.hex_color(color: <code>Color</code>, include_alpha: <code>Bool</code>) \u00b6 returns <code>Num</code></p> <p>Get the hex color value of a color, either 3 byte or 4 byte with alpha   </p> <p> Color.lerp(from: <code>Color</code>, to: <code>Color</code>, t: <code>Num</code>) \u00b6 returns <code>Color</code></p> <p>Linearly interpolate between two colors, using <code>t</code> as the distance between the two in 0...1 range. To blend two colors half and half, you'd use <code>lerp(from, to, 0.5)</code>. If <code>t</code> is <code>0</code>, <code>from</code> is returned and if <code>t</code> is <code>1</code>, <code>to</code> is returned.   </p> <p> Color.lerp(from: <code>Color</code>, to: <code>Color</code>, t: <code>Num</code>, into: <code>Color</code>) \u00b6 returns <code>unknown</code></p> <p>Linearly interpolate between two colors, storing the result in the existing color <code>into</code>.  <code>t</code> is the distance between the two in 0...1 range. To blend two colors half and half,  you'd use <code>lerp(from, to, 0.5)</code>. If <code>t</code> is <code>0</code>, <code>from</code> is returned and if <code>t</code> is <code>1</code>, <code>to</code> is returned.   </p> <p> Color.rgb2hsv(rgb: <code>Color</code>) \u00b6 returns <code>Color</code></p> <p>Convert from an RGB format color to an HSV format.   </p> <p> Color.hsv2rgb(hsv: <code>Color</code>) \u00b6 returns <code>Color</code></p> <p>Convert an HSV format color to an RGB format.   </p> <p> Color.color_from_hue(hue: <code>Num</code>) \u00b6 returns <code>Color</code></p> <p>Create a color from the given hue, in a 0...1 range.  Values outside 0...1 are wrapped into 0...1 range.   </p> <p> Color.linear_srgb_to_oklab(r: <code>Num</code>, g: <code>Num</code>, b: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Color.oklab_to_linear_srgb(L: <code>Num</code>, a: <code>Num</code>, b: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Color.okhsl_to_srgb(h: <code>Num</code>, s: <code>Num</code>, l: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Color.srgb_to_okhsl(r: <code>Num</code>, g: <code>Num</code>, b: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Color.okhsv_to_srgb(h: <code>Num</code>, s: <code>Num</code>, v: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Color.srgb_to_okhsv(r: <code>Num</code>, g: <code>Num</code>, b: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Color.find_cusp(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Color.compute_max_saturation(a: <code>Num</code>, b: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Color.find_gamut_intersection(a: <code>Any</code>, b: <code>Any</code>, L1: <code>Any</code>, C1: <code>Any</code>, L0: <code>Any</code>, cusp: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/containers/","title":"Containers","text":""},{"location":"api/v/next/containers/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/containers/#luxe-containers-module","title":"<code>luxe: containers</code> module","text":"<ul> <li>Lists </li> <li>MapOrdered </li> </ul>"},{"location":"api/v/next/containers/#lists","title":"Lists","text":"<p><code>import \"luxe: containers\" for Lists</code></p> <p>The <code>Lists</code> API works with the built in Wren <code>List</code> type, offering more tools to operate on them.</p> <ul> <li>first(list: <code>Sequence</code>)</li> <li>first(list: <code>Sequence</code>, callback: <code>Fn</code>)</li> <li>binary_search(list: <code>List</code>, value: <code>Any</code>)</li> <li>binary_search_first(list: <code>List</code>, value: <code>Any</code>, fn: <code>Fn</code>)</li> <li>equal(a: <code>List</code>, b: <code>List</code>)</li> <li>equalish(a: <code>List</code>, b: <code>List</code>)</li> <li>flatten(list: <code>List</code>)</li> <li>add_unique(list: <code>List</code>, value: <code>Any</code>)</li> <li>append(into: <code>List</code>, list: <code>List</code>)</li> <li>prepend(into: <code>List</code>, list: <code>List</code>)</li> <li>remove_where(list: <code>List</code>, value: <code>Any</code>, fn: <code>Fn</code>)</li> <li>contains(list: <code>Any</code>, item: <code>Any</code>)</li> <li>remove(list: <code>Any</code>, to_remove: <code>Any</code>)</li> <li>index_of(list: <code>Any</code>, item: <code>Any</code>)</li> <li>index_of_where(list: <code>List</code>, fn: <code>Fn</code>)</li> <li>index_of_where(list: <code>List</code>, value: <code>Any</code>, fn: <code>Fn</code>)</li> <li>bubble_sort(list: <code>List</code>, compare: <code>Fn</code>)</li> <li>quicksort(list: <code>List</code>, compare: <code>Fn</code>)</li> <li>quicksort(list: <code>List</code>, low: <code>Num</code>, high: <code>Num</code>, compare: <code>Fn</code>)</li> </ul> <p> Lists.first(list: <code>Sequence</code>) \u00b6 returns <code>Any</code></p> <p>Returns the first element of a Sequence, null if the sequence is empty.</p> <pre><code>  var list = [\"twig\", 2, null, \"tree\", \"petals\", \"faeries\", 9]\n  Lists.first(list) //\"twig\"\n</code></pre> <p> Lists.first(list: <code>Sequence</code>, callback: <code>Fn</code>) \u00b6 returns <code>Any</code></p> <p>Searches for the first element in a sequence that fulfills a requirement and returns it. If no element fulfills the requirement, null is returned.</p> <pre><code>  var list = [\"twig\", 2, null, \"tree\", \"petals\", \"faeries\", 9]\n  Lists.first(list){|elem| elem is String &amp;&amp; elem.count &gt; 4} //\"petals\"\n</code></pre> <p> Lists.binary_search(list: <code>List</code>, value: <code>Any</code>) \u00b6 returns <code>Num</code></p> <p>Searches for <code>value</code> in <code>list</code> using a binary search.  Binary searches can be more efficient for finding items when there are many. This requires the list to be sorted, and values in the list to be comparable with <code>&gt;</code>/<code>&lt;</code>.</p> <p>Returns the index in the list, or <code>-1</code> if not found.</p> <pre><code>var to_find = 9\nvar list = [1,3,7,9,23,54]\nvar index = Lists.binary_search(list, to_find) //index is 3\n</code></pre> <p> Lists.binary_search_first(list: <code>List</code>, value: <code>Any</code>, fn: <code>Fn</code>) \u00b6 returns <code>Num</code></p> <p>Similar to <code>binary_search</code> but handles comparison via a callback. The callback should return 0 for equal, -1 for lower and 1 for higher. The callback puts the input value in the first argument.</p> <p>Returns the index in the list, or <code>-1</code> if not found.</p> <pre><code>var list = [1,3,7,9,23,54]\nvar index = Lists.binary_search_first(list, 9) {|value, other|\n  if(value == to_find) return 0\n  if(value &lt; to_find)  return -1\n  return 1\n}\n</code></pre> <p> Lists.equal(a: <code>List</code>, b: <code>List</code>) \u00b6 returns <code>Bool</code></p> <p>Compares two flat lists, returning true if the contents are the same and in the same order. Does not recurse nested lists. Uses <code>a[i] != b[i]</code> to compare.</p> <pre><code>var listA = [1,9,7]\nvar listB = [1,7,9]\nvar equalA = Lists.equal(listA, [1,7,9]) //false\nvar equalB = Lists.equal(listB, [1,7,9]) //true\n</code></pre> <p> Lists.equalish(a: <code>List</code>, b: <code>List</code>) \u00b6 returns <code>Bool</code></p> <p>Similar to <code>equal</code> but values don't need to be in the same order.</p> <pre><code>var listA = [1,9,7]\nvar listB = [1,7,9]\nvar equalA = Lists.equal(listA, [1,7,9]) //true\nvar equalB = Lists.equal(listB, [1,7,9]) //true\n</code></pre> <p> Lists.flatten(list: <code>List</code>) \u00b6 returns <code>List</code></p> <p>Converts a nested list of lists to a single flat list of values.</p> <pre><code>var list = [1,[2,3,[4,[5]]]]\nvar flat = Lists.flatten(list) //[1,2,3,4,5]\n</code></pre> <p> Lists.add_unique(list: <code>List</code>, value: <code>Any</code>) \u00b6 returns <code>Bool</code></p> <p>Add an item to a list if the value doesn't already exist in the list. Uses <code>list.indexOf</code> to check. </p> <p>Returns true if the value was unique and added to the list.</p> <pre><code>var list = [1,2,3]\nLists.add_unique(list, 0) //true\nLists.add_unique(list, 1) //false, already found\n</code></pre> <p> Lists.append(into: <code>List</code>, list: <code>List</code>) \u00b6 returns <code>None</code></p> <p>Append <code>list</code> at the end of <code>into</code> without allocating a new list.  This function modifies <code>into</code>.</p> <p>Note that in Wren, <code>List</code> implements <code>+</code>, which is append too,  but that makes a new list with the two combined. <code>[1] + [2] = [1, 2]</code></p> <pre><code>var list = [1,2]\nLists.append(list, [3,4,5])\nLog.print(list) //[1,2,3,4,5]\n</code></pre> <p> Lists.prepend(into: <code>List</code>, list: <code>List</code>) \u00b6 returns <code>None</code></p> <p>Similar to <code>append</code>, but adds the items from <code>list</code> to the front of <code>into</code>. This function modifies <code>into</code>.</p> <pre><code>var list = [1,2]\nLists.prepend(list, [3,4,5])\nLog.print(list) //[3,4,5,1,2]\n</code></pre> <p> Lists.remove_where(list: <code>List</code>, value: <code>Any</code>, fn: <code>Fn</code>) \u00b6 returns <code>Any</code></p> <p>Similar to <code>list.remove</code> but uses a function for the find/equality check. Uses <code>Lists.index_of_where</code> to find the index, so the callback  msut return true if the values are equal or false if not.</p> <p>Returns the value if it was removed, or null if it wasn't found.</p> <pre><code>var list = [1,2,3]\nvar fn = Fn.new {|value, other| value == other }\nLists.remove_where(list, 3, fn)  //3\nLists.remove_where(list, 6, fn)  //null\nLog.print(list)               //[1,2]\n</code></pre> <p> Lists.contains(list: <code>Any</code>, item: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Deprecated. Use list.contains(item) Returns true if the list contains the item.   </p> <p> Lists.remove(list: <code>Any</code>, to_remove: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Deprecated. Use list.remove(item) Returns the item if removed, or null.   </p> <p> Lists.index_of(list: <code>Any</code>, item: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Deprecated. Use list.indexOf(item) Returns the index, or -1 if the item isn't found.   </p> <p> Lists.index_of_where(list: <code>List</code>, fn: <code>Fn</code>) \u00b6 returns <code>Num</code></p> <p>Returns the index of <code>value</code> in <code>list</code> or <code>-1</code> if not found, where comparison is handled by a callback function.</p> <pre><code>var list = [1,2,3]\nLists.index_of_where(list, 3) {|value, other| value == other } //2\n</code></pre> <p> Lists.index_of_where(list: <code>List</code>, value: <code>Any</code>, fn: <code>Fn</code>) \u00b6 returns <code>Num</code></p> <p>Returns the index of <code>item</code> in <code>list</code> or <code>-1</code> if not found, where comparison is handled by a callback function.</p> <pre><code>var list = [1,2,3]\nLists.index_of_where(list, 3) {|value, other| value == other } //2\n</code></pre> <p> Lists.bubble_sort(list: <code>List</code>, compare: <code>Fn</code>) \u00b6 returns <code>None</code></p> <p>In-place sorting of <code>list</code> using the <code>compare</code> function. Modifies <code>list</code>. Uses bubble sort. The compare function should return <code>0</code> for equal, <code>-1</code> for lower values and <code>1</code> for higher values.</p> <pre><code>var list = [5,2,67,23]\nLists.bubble_sort(list) {|a, b| b - a }\nLog.print(list) // [67, 23, 5, 2]\n\nLists.bubble_sort(list) {|a, b| a - b }\nLog.print(list) // [2, 5, 23, 67]\n</code></pre> <p> Lists.quicksort(list: <code>List</code>, compare: <code>Fn</code>) \u00b6 returns <code>List</code></p> <p>In-place sorting of <code>list</code> using the <code>compare</code> function. Modifies <code>list</code>. Uses quick sort. The compare function should return <code>0</code> for equal, <code>-1</code> for lower values and <code>1</code> for higher values.</p> <pre><code>var list = [5,2,67,23]\nLists.quicksort(list) {|a, b| b - a }\nLog.print(list) // [67, 23, 5, 2]\n\nLists.quicksort(list) {|a, b| a - b }\nLog.print(list) // [2, 5, 23, 67]\n</code></pre> <p> Lists.quicksort(list: <code>List</code>, low: <code>Num</code>, high: <code>Num</code>, compare: <code>Fn</code>) \u00b6 returns <code>List</code></p> <p>Same as <code>quicksort</code> but a low and high index can be specified to sort just a portion of a list. The default for <code>quicksort(list, compare)</code> is <code>low = 0</code>, <code>high = list.count-1</code>.</p> <pre><code>var list = [5,2,34,89,11,60,45]\nLists.quicksort(list, 2, 5) {|a, b| a - b }\nLog.print(list) // [5, 2, |11, 34, 60, 89|, 45]\n//note only the range between | was sorted\n</code></pre>"},{"location":"api/v/next/containers/#mapordered","title":"MapOrdered","text":"<p><code>import \"luxe: containers\" for MapOrdered</code></p> <p>A <code>Map</code> wrapper that keeps the order of the keys the same in which they're added. Note: The Wren <code>Map</code> class doesn't guarantee order of keys.</p> <ul> <li>keys</li> <li>map</li> <li>new()</li> <li>get(key: <code>Any</code>)</li> <li>set(key: <code>Any</code>, value: <code>Any</code>)</li> <li>containsKey(key: <code>Any</code>)</li> <li>[key : Any]</li> <li>[key : Any]=(value : Any)</li> <li>iterate(iterator: <code>Any</code>)</li> <li>iteratorValue(iterator: <code>Any</code>)</li> </ul> <p> MapOrdered.keys \u00b6 returns <code>List</code></p> <p>Returns the list of <code>keys</code> in the Map. Don't modify this.</p> <pre><code>var map = MapOrdered.new()\nmap[\"one\"] = 1\nmap[\"two\"] = 2\nLog.print(map.keys) //[\"one\", \"two\"]\n</code></pre> <p> MapOrdered.map \u00b6 returns <code>Map</code></p> <p>Access to the underlying Wren <code>Map</code> data. Normally you don't modify this directly.</p> <pre><code>var map = MapOrdered.new()\nmap[\"one\"] = 1\nmap[\"two\"] = 2\nLog.print(map.map) //{two: 2, one: 1}\n</code></pre> <p> MapOrdered.new() \u00b6 returns <code>MapOrdered</code></p> <p>Create a new ordered map.</p> <pre><code>var map = MapOrdered.new()\n</code></pre> <p> MapOrdered.get(key: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Return the value associated with <code>key</code>, or <code>null</code> if not found. You can also use <code>map[key]</code> as an alternative.</p> <pre><code>var map = MapOrdered.new()\nmap[\"one\"] = 1\nLog.print(map.get(\"one\"))  //1\nLog.print(map.get(\"two\"))  //null\n</code></pre> <p> MapOrdered.set(key: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Set a <code>value</code> for a given <code>key</code>. You can also use <code>map[key] = value</code> as an alternative.</p> <pre><code>var map = MapOrdered.new()\nmap.set(\"one\", 1)\n</code></pre> <p> MapOrdered.containsKey(key: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Returns true if <code>key</code> is found in the map.</p> <pre><code>var map = MapOrdered.new()\nmap[\"one\"] = 1\nLog.print(map.containsKey(\"one\"))  //true\nLog.print(map.containsKey(\"two\"))  //false\n</code></pre> <p> MapOrdered [key : Any] \u00b6 returns <code>unknown</code></p> <p>Return the value associated with <code>key</code>, or <code>null</code> if not found.</p> <pre><code>var map = MapOrdered.new()\nmap[\"one\"] = 1\nLog.print(map[\"one\"])  //1\nLog.print(map[\"two\"])  //null\n</code></pre> <p> MapOrdered [key : Any]=(value : Any) \u00b6 returns <code>unknown</code></p> <p> MapOrdered.iterate(iterator: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Implementation details for the Wren iterator protocol.   </p> <p> MapOrdered.iteratorValue(iterator: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Implementation details for the Wren iterator protocol.   </p>"},{"location":"api/v/next/docgen/","title":"Docgen","text":""},{"location":"api/v/next/docgen/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/docgen/#luxe-docgen-module","title":"<code>luxe: docgen</code> module","text":"<ul> <li>DocGen </li> </ul>"},{"location":"api/v/next/docgen/#docgen","title":"DocGen","text":"<p><code>import \"luxe: docgen\" for DocGen</code></p> <p>no docs found</p> <ul> <li>config</li> <li>new(in_config: <code>Map</code>)</li> <li>get_param_string(parameters: <code>Any</code>)</li> <li>get_param_string(parameters: <code>Any</code>, display: <code>Any</code>)</li> <li>generate_from_module(module_path: <code>String</code>)</li> <li>generate_from_module(config: <code>Map</code>, module_path: <code>String</code>)</li> <li>get_ast_for_path(module_prefix: <code>String</code>, path: <code>String</code>)</li> <li>generate()</li> <li>generate_from_project(config: <code>Any</code>)</li> <li>expr_to_string(expr: <code>Expr</code>)</li> <li>generate_from_ast_nodes(config: <code>Map</code>, nodes: <code>Map</code>)</li> <li>format_docs(meta_list: <code>Any</code>)</li> <li>get_alias(meta: <code>Any</code>, name: <code>Any</code>)</li> <li>signature_url(name: <code>Any</code>, args: <code>Any</code>, setter: <code>Any</code>)</li> <li>get_meta(source_meta: <code>Any</code>)</li> <li>convert_meta(in_meta: <code>Any</code>)</li> </ul> <p> DocGen.config \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> DocGen.new(in_config: <code>Map</code>) \u00b6 returns <code>DocGen</code></p> <p>no docs found   </p> <p> DocGen.get_param_string(parameters: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> DocGen.get_param_string(parameters: <code>Any</code>, display: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> DocGen.generate_from_module(module_path: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> DocGen.generate_from_module(config: <code>Map</code>, module_path: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>takes a raw path for a module and tries to generate documentation for it   </p> <p> DocGen.get_ast_for_path(module_prefix: <code>String</code>, path: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> DocGen.generate() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> DocGen.generate_from_project(config: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> DocGen.expr_to_string(expr: <code>Expr</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> DocGen.generate_from_ast_nodes(config: <code>Map</code>, nodes: <code>Map</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> DocGen.format_docs(meta_list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> DocGen.get_alias(meta: <code>Any</code>, name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> DocGen.signature_url(name: <code>Any</code>, args: <code>Any</code>, setter: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> DocGen.get_meta(source_meta: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> DocGen.convert_meta(in_meta: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/draw/","title":"Draw","text":""},{"location":"api/v/next/draw/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/draw/#luxe-draw-module","title":"<code>luxe: draw</code> module","text":"<ul> <li>Draw </li> <li>LineCap </li> <li>LineJoin </li> <li>PathStyle </li> </ul>"},{"location":"api/v/next/draw/#draw","title":"Draw","text":"<p><code>import \"luxe: draw\" for Draw</code></p> <p>Draw is a service API that offers drawing to a context (canvas) in an efficient way. Things like lines, circles, paths and so on are what it provides. The terms canvas and context will be used interchangeably. </p> <p>It is important to note that <code>Draw</code> is a commit based API. A brief tutorial  on using it can be found here: 2D drawing tutorial.</p> <p><code>Draw</code> can be used to draw game content with, but is also a great tool for debug visualization. Many problems are a lot clearer when their details are drawn in the world, which Draw is very useful for.</p> <p>The context can be drawn to once or updated frequently. For example you might draw a grid to the context, and then leave it there which is a very efficient way to draw many lines.</p> <ul> <li>create(set: <code>Any</code>)</li> <li>create(set: <code>RenderSet</code>, tri_basis: <code>String</code>, text_basis: <code>String</code>, line_basis: <code>String</code>)</li> <li>destroy(context: <code>Any</code>)</li> <li>valid(context: <code>Any</code>)</li> <li>clear(context: <code>Any</code>)</li> <li>commit(context: <code>Any</code>)</li> <li>rect(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, angle: <code>Any</code>, style: <code>Any</code>)</li> <li>rect_detailed(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, angle: <code>Any</code>, radius: <code>Any</code>, smoothness: <code>Any</code>, style: <code>Any</code>)</li> <li>quad_detailed(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, angle: <code>Any</code>, radius: <code>Any</code>, smoothness: <code>Any</code>, color: <code>Any</code>)</li> <li>quad(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, angle: <code>Any</code>, color: <code>Any</code>)</li> <li>ngon(context: <code>Any</code>, ox: <code>Any</code>, oy: <code>Any</code>, oz: <code>Any</code>, rx: <code>Any</code>, ry: <code>Any</code>, sides: <code>Any</code>, angle: <code>Any</code>, style: <code>Any</code>)</li> <li>ngon_solid(context: <code>Any</code>, ox: <code>Any</code>, oy: <code>Any</code>, oz: <code>Any</code>, rx: <code>Any</code>, ry: <code>Any</code>, sides: <code>Any</code>, angle: <code>Any</code>, color: <code>Any</code>)</li> <li>ring(context: <code>Any</code>, ox: <code>Any</code>, oy: <code>Any</code>, oz: <code>Any</code>, rx: <code>Any</code>, ry: <code>Any</code>, start_angle: <code>Any</code>, end_angle: <code>Any</code>, smoothness: <code>Any</code>, style: <code>Any</code>)</li> <li>ring(context: <code>Any</code>, ox: <code>Any</code>, oy: <code>Any</code>, oz: <code>Any</code>, radius: <code>Any</code>, smoothness: <code>Any</code>, style: <code>Any</code>)</li> <li>circle(context: <code>Any</code>, ox: <code>Any</code>, oy: <code>Any</code>, oz: <code>Any</code>, radius: <code>Any</code>, smoothness: <code>Any</code>, color: <code>Any</code>)</li> <li>circle(context: <code>Any</code>, ox: <code>Any</code>, oy: <code>Any</code>, oz: <code>Any</code>, rx: <code>Any</code>, ry: <code>Any</code>, start_angle: <code>Any</code>, end_angle: <code>Any</code>, smoothness: <code>Any</code>, color: <code>Any</code>)</li> <li>line(context: <code>Any</code>, x1: <code>Any</code>, y1: <code>Any</code>, x2: <code>Any</code>, y2: <code>Any</code>, z: <code>Any</code>, style: <code>Any</code>)</li> <li>path(context: <code>Any</code>, points: <code>Any</code>, style: <code>Any</code>, closed: <code>Any</code>)</li> <li>path3D(context: <code>Any</code>, points: <code>Any</code>, style: <code>Any</code>, closed: <code>Any</code>)</li> <li>line3D(context: <code>Draw</code>, start: <code>Vec</code>, end: <code>Vec</code>, style: <code>PathStyle</code>)</li> <li>bounds3D(context: <code>Any</code>, geometry: <code>Any</code>, style: <code>Any</code>)</li> <li>aabb3D(context: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>, style: <code>Any</code>)</li> <li>plane3D(context: <code>Draw</code>, pos: <code>Vec</code>, normal: <code>Vec</code>, radius: <code>Num</code>, style: <code>PathStyle</code>)</li> <li>plus3D(context: <code>Draw</code>, pos: <code>Vec</code>, radius: <code>Num</code>, style: <code>PathStyle</code>)</li> <li>ring3D(context: <code>Draw</code>, pos: <code>Vec3</code>, radius: <code>Vec2</code>, start_angle: <code>Num</code>, end_angle: <code>Num</code>, smoothness: <code>Num</code>, style: <code>PathStyle</code>)</li> <li>plus(context: <code>Draw</code>, pos: <code>Vec</code>, radius: <code>Num</code>, style: <code>PathStyle</code>)</li> <li>camera(context: <code>Draw</code>, camera: <code>Entity</code>, style: <code>PathStyle</code>)</li> <li>frustum(context: <code>Draw</code>, corners: <code>List</code>, style: <code>PathStyle</code>)</li> <li>text(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, string: <code>Any</code>, size: <code>Any</code>, font: <code>Any</code>, color: <code>Any</code>, align: <code>Any</code>, align_vertical: <code>Any</code>)</li> <li>text(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, string: <code>Any</code>, size: <code>Any</code>, font: <code>Any</code>, color: <code>Any</code>, align: <code>Any</code>, align_vertical: <code>Any</code>)</li> <li>text(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, string: <code>Any</code>, size: <code>Any</code>, color: <code>Any</code>)</li> <li>image(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, angle: <code>Any</code>, material: <code>Any</code>)</li> <li>image(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, angle: <code>Any</code>, color: <code>Any</code>, uv: <code>Any</code>, material: <code>Any</code>)</li> <li>cross(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, radius: <code>Any</code>, angle: <code>Any</code>, style: <code>Any</code>)</li> <li>sphere3D_slice(context: <code>Draw</code>, pos: <code>Vec3</code>, radius: <code>Vec2</code>, start_angle: <code>Num</code>, end_angle: <code>Num</code>, layers: <code>Num</code>, style: <code>PathStyle</code>)</li> </ul> <p> Draw.create(set: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Creates a new drawing context to draw with. The <code>set</code> passed in is a <code>RenderSet</code>, which you normally get from a <code>World</code> via <code>World.render_set(world)</code>. This would place the canvas in the world to be rendered at the same time, as part of the world.</p> <pre><code>var canvas = Draw.create(World.render_set(app.world))\n</code></pre> <p> Draw.create(set: <code>RenderSet</code>, tri_basis: <code>String</code>, text_basis: <code>String</code>, line_basis: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Creates a new drawing context to draw with. The <code>set</code> passed in is a <code>RenderSet</code>, which you normally get from a <code>World</code> via <code>World.render_set(world)</code>. This would place the canvas in the world to be rendered at the same time, as part of the world.</p> <ul> <li><code>tri_basis</code></li> <li>Triangle Material Basis for the geometry</li> <li>default <code>luxe: material_basis/solid</code></li> <li><code>text_basis</code></li> <li>Text Material Basis</li> <li>default <code>luxe: material_basis/font</code></li> <li><code>line_basis</code></li> <li>Line Material Basis for 3D line geometry</li> <li> <p>default <code>luxe: material_basis/debug_line3d</code></p> <p>var canvas = Draw.create(World.render_set(app.world),                           \"luxe: material_basis/solid\",                           \"luxe: material_basis/font\",                          \"luxe: material_basis/debug_line3d\")   </p> </li> </ul> <p> Draw.destroy(context: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Destroy a previously created context.</p> <pre><code>var canvas = Draw.create(World.render_set(app.world))\n...\nDraw.destroy(canvas)\n</code></pre> <p> Draw.valid(context: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Returns true if the context is valid (and hasn't been destroyed).</p> <pre><code>var canvas = Draw.create(World.render_set(app.world))\nvar canvas = Draw.create(World.render_set(app.world))\nLog.print(Draw.valid(canvas)) //true\nDraw.destroy(canvas)\nLog.print(Draw.valid(canvas)) //false\n</code></pre> <p> Draw.clear(context: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Clears the context of any drawn content. This clears both committed and uncommitted data.</p> <pre><code>Draw.clear(draw)\n</code></pre> <p> Draw.commit(context: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Commit the content that has been drawn to the context.</p> <p>When using the Draw API, you can submit a bunch of drawing to happen, but it won't show up until it is committed. </p> <p>You can think of the draw calls as a queue, commit will process  that queue, and the canvas contents will be updated. The content will stay there until commit is called again. </p> <p>Calling commit with nothing in the queue will clear the contents (see also <code>Draw.clear</code>).</p> <pre><code>var canvas = Draw.create(World.render_set(app.world))\n//draw a red box rotated 45 degrees\nDraw.quad(canvas, 0, 0, 0, 100, 100, 45, [1, 0, 0, 1])\nDraw.commit(canvas)\n</code></pre> <p> Draw.rect(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, angle: <code>Any</code>, style: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draws a rectangle outline using <code>style</code> (<code>PathStyle</code>) at <code>x</code>,<code>y</code>, with depth <code>z</code>, with width of <code>w</code> and height of <code>h</code>. The rectangle will be rotated <code>angle</code> degrees.</p> <pre><code>var depth = 0\nvar angle = 45\nvar style = PathStyle.new()\n    style.color = [1,0,0,1]\n    style.thickness = 2\nDraw.rect(canvas, 0, 0, depth, 100, 100, angle, style)\n</code></pre> <p> Draw.rect_detailed(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, angle: <code>Any</code>, radius: <code>Any</code>, smoothness: <code>Any</code>, style: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draws a detailed rectangle outline using <code>style</code> (<code>PathStyle</code>) at <code>x</code>,<code>y</code>, with depth <code>z</code>, with width of <code>w</code> and height of <code>h</code>. The rectangle will be rotated <code>angle</code> degrees. </p> <p>\"Detailed\" means that the corners can be configured using the <code>radius</code> and <code>smoothness</code> values. This allows drawing rounded rectangles, rectangles with inverted rounded corners, and with flat corners. The radius controls the amount inset from the edges. With a smoothness of 0, the corners will be angled/flat.</p> <p>The order is <code>[bottom left, bottom right, top right, top left]</code> for radius + smoothness.</p> <pre><code>var depth = 0\nvar angle = 0\nvar style = PathStyle.new()\nvar radius = [16, 16, 16, 16]\nvar smoothness = [2, 2, 2, 2]\nDraw.rect_detailed(_ctx, 64, 64, depth, 256, 128, angle, radius, smoothness, style)\n</code></pre> <p> Draw.quad_detailed(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, angle: <code>Any</code>, radius: <code>Any</code>, smoothness: <code>Any</code>, color: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draws a detailed rectangle using <code>color</code> at <code>x</code>,<code>y</code>, with depth <code>z</code>, with width of <code>w</code> and height of <code>h</code>. The rectangle will be rotated <code>angle</code> degrees. </p> <p>\"Detailed\" means that the corners can be configured using the <code>radius</code> and <code>smoothness</code> values. This allows drawing rounded rectangles, rectangles with inverted rounded corners, and with flat corners. The radius controls the amount inset from the edges. With a smoothness of 0, the corners will be angled/flat.</p> <p>The order is <code>[bottom left, bottom right, top right, top left]</code> for radius + smoothness.</p> <pre><code>var depth = 0\nvar angle = 0\nvar color = [0,0,0,1]\nvar radius = [16, 16, 16, 16]\nvar smoothness = [2, 2, 2, 2]\nDraw.quad_detailed(_ctx, 64, 64, depth, 256, 128, angle, radius, smoothness, color)\n</code></pre> <p> Draw.quad(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, angle: <code>Any</code>, color: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draws a solid rectangle using <code>color</code> at <code>x</code>,<code>y</code>, with depth <code>z</code>, with width of <code>w</code> and height of <code>h</code>. The rectangle will be rotated <code>angle</code> degrees.</p> <pre><code>//draw a black solid rectangle\nvar depth = 0\nvar angle = 45\nDraw.quad(canvas, 0, 0, depth, 100, 100, angle, [0,0,0,1])\n</code></pre> <p> Draw.ngon(context: <code>Any</code>, ox: <code>Any</code>, oy: <code>Any</code>, oz: <code>Any</code>, rx: <code>Any</code>, ry: <code>Any</code>, sides: <code>Any</code>, angle: <code>Any</code>, style: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw an ngon (like a triangle, hexagon, pentagon etc) outline at <code>ox</code>,<code>oy</code> at depth <code>oz</code>.  The <code>rx</code> and <code>ry</code> radius values control the size of the shape around its origin. The number of <code>sides</code> controls how many sides the polygon will have (3 for a triangle, 6 for a hexagon). <code>sides</code> must be bigger than <code>3</code> to make sense for this function, it will be clamped to 3.</p> <pre><code>var depth = 0\nvar sides = 3\nvar radius = 32\nvar angle = 45\nvar style = PathStyle.new()\nDraw.ngon(canvas, 128, 128, depth, radius, radius, sides, angle, style)\n</code></pre> <p> Draw.ngon_solid(context: <code>Any</code>, ox: <code>Any</code>, oy: <code>Any</code>, oz: <code>Any</code>, rx: <code>Any</code>, ry: <code>Any</code>, sides: <code>Any</code>, angle: <code>Any</code>, color: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a solid ngon (like a triangle, hexagon, pentagon etc)  at <code>ox</code>,<code>oy</code> at depth <code>oz</code>.  The <code>rx</code> and <code>ry</code> radius values control the size of the shape around its origin. The number of <code>sides</code> controls how many sides the polygon will have (3 for a triangle, 6 for a hexagon). <code>sides</code> must be bigger than <code>3</code> to make sense for this function.</p> <p>:todo: this naming will change soon to be consistent across all draw APIs.</p> <pre><code>var depth = 0\nvar sides = 3\nvar radius = 32\nvar angle = 45\nDraw.ngon_solid(canvas, 128, 128, depth, radius, radius, sides, angle, Color.pink)\n</code></pre> <p> Draw.ring(context: <code>Any</code>, ox: <code>Any</code>, oy: <code>Any</code>, oz: <code>Any</code>, rx: <code>Any</code>, ry: <code>Any</code>, start_angle: <code>Any</code>, end_angle: <code>Any</code>, smoothness: <code>Any</code>, style: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a circle outline at <code>ox</code>,<code>oy</code> at depth <code>oz</code>. <code>rx</code> and <code>ry</code> control separate radius values for x and y axis, to draw an ellipse.</p> <p><code>start_angle</code> and <code>end_angle</code> specify in degrees allow drawing an open arc, instead of a closed circle. A closed circle has <code>start_angle</code> as <code>0</code> and <code>end_angle</code> as <code>360</code>. These angles match \"the unit circle\" in mathematics, where 0 is to the right, and 90 is pointing up.</p> <p>:todo: <code>smoothness</code> controls how smooth the circle will be.</p> <pre><code>var depth = 0\nvar start_angle = 0\nvar end_angle = 270\nvar smoothness = 2\nvar style = PathStyle.new()\nDraw.ring(canvas, 128, 128, depth, 32, 16, start_angle, end_angle, smoothness, style)\n</code></pre> <p> Draw.ring(context: <code>Any</code>, ox: <code>Any</code>, oy: <code>Any</code>, oz: <code>Any</code>, radius: <code>Any</code>, smoothness: <code>Any</code>, style: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Similar to <code>ring</code> with a single radius for both <code>x</code> and <code>y</code>.   </p> <p> Draw.circle(context: <code>Any</code>, ox: <code>Any</code>, oy: <code>Any</code>, oz: <code>Any</code>, radius: <code>Any</code>, smoothness: <code>Any</code>, color: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a solid circle at <code>ox</code>,<code>oy</code> at depth <code>oz</code>, using <code>color</code> and <code>radius</code> in size. :todo: <code>smoothness</code> controls how smooth the circle will be.</p> <pre><code>var depth = 0\nvar smoothness = 2\nDraw.circle(canvas, 128, 128, depth, 32, smoothness, [1,0,0,1])\n</code></pre> <p> Draw.circle(context: <code>Any</code>, ox: <code>Any</code>, oy: <code>Any</code>, oz: <code>Any</code>, rx: <code>Any</code>, ry: <code>Any</code>, start_angle: <code>Any</code>, end_angle: <code>Any</code>, smoothness: <code>Any</code>, color: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a solid circle at <code>ox</code>,<code>oy</code> at depth <code>oz</code>. <code>rx</code> and <code>ry</code> control separate radius values for x and y axis, to draw an ellipse.</p> <p><code>start_angle</code> and <code>end_angle</code> specify in degrees allow drawing an open area, like a pie chart (or pacman) instead of a closed circle. A closed circle has <code>start_angle</code> as <code>0</code> and <code>end_angle</code> as <code>360</code>. These angles match \"the unit circle\" in mathematics, where 0 is to the right, and 90 is pointing up.</p> <p>:todo: <code>smoothness</code> controls how smooth the circle will be.</p> <pre><code>var depth = 0\nvar start_angle = 0\nvar end_angle = 270\nvar smoothness = 2\nDraw.circle(canvas, 128, 128, depth, 32, 16, start_angle, end_angle, smoothness, Color.black)\n</code></pre> <p> Draw.line(context: <code>Any</code>, x1: <code>Any</code>, y1: <code>Any</code>, x2: <code>Any</code>, y2: <code>Any</code>, z: <code>Any</code>, style: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a line from <code>x1</code>,<code>y1</code> to <code>x2</code>,<code>y2</code> at depth <code>z</code> using <code>style</code> (<code>PathStyle</code>).</p> <pre><code>var depth = 0\nvar style = PathStyle.new()\nDraw.line(canvas, 0,0, 100,100, depth, style)\n</code></pre> <p> Draw.path(context: <code>Any</code>, points: <code>Any</code>, style: <code>Any</code>, closed: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a path consisting of a list of points. </p> <p>If <code>closed</code> is true it is expected that the first and last point in <code>points</code> have the same positions. </p> <p><code>points</code> is a <code>List</code> of <code>[x, y]</code> or <code>[x,y,z]</code> points.  If <code>z</code> is not specified for a point it will be 0.  Note that this is a 2D drawing function atm, so different z values may not be what you expect.</p> <pre><code>var style = PathStyle.new()\nvar points = [\n  [0,0],\n  [100,100],\n  [120,50],\n  [0,0]\n]\nDraw.path(canvas, points, style, true)\n</code></pre> <p> Draw.path3D(context: <code>Any</code>, points: <code>Any</code>, style: <code>Any</code>, closed: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a 3D path consisting of a list of points. </p> <p>If <code>closed</code> is true it is expected that the first and last point in <code>points</code> have the same positions. </p> <p><code>points</code> is a <code>List</code> of <code>[x,y,z]</code> points. </p> <pre><code>var style = PathStyle.new()\nvar points = [\n  [0,0,0],\n  [100,100,100],\n  [120,50,100],\n  [0,0,0]\n]\nDraw.path3D(canvas, points, style, true)\n</code></pre> <p> Draw.line3D(context: <code>Draw</code>, start: <code>Vec</code>, end: <code>Vec</code>, style: <code>PathStyle</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a 3D line from <code>start</code> to <code>end</code> using <code>style</code>. </p> <pre><code>var style = PathStyle.new()\nDraw.line3D(canvas, [100,100,100], [120,50,100], style)\n</code></pre> <p> Draw.bounds3D(context: <code>Any</code>, geometry: <code>Any</code>, style: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Draw.aabb3D(context: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>, style: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Draw.plane3D(context: <code>Draw</code>, pos: <code>Vec</code>, normal: <code>Vec</code>, radius: <code>Num</code>, style: <code>PathStyle</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Draw.plus3D(context: <code>Draw</code>, pos: <code>Vec</code>, radius: <code>Num</code>, style: <code>PathStyle</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a 3D plus at <code>pos</code> with size <code>radius</code> using <code>style</code>. </p> <pre><code>var style = PathStyle.new()\nDraw.plus3D(canvas, [100,100,100], 4, style)\n</code></pre> <p> Draw.ring3D(context: <code>Draw</code>, pos: <code>Vec3</code>, radius: <code>Vec2</code>, start_angle: <code>Num</code>, end_angle: <code>Num</code>, smoothness: <code>Num</code>, style: <code>PathStyle</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a 3D ring at <code>pos</code> with radius <code>[radius_x, radius_y]</code> using <code>style</code>. </p> <pre><code>var style = PathStyle.new()\nDraw.ring3D(canvas, [100,100,100], [4, 4], 0, 360, smoothness, style)\n</code></pre> <p> Draw.plus(context: <code>Draw</code>, pos: <code>Vec</code>, radius: <code>Num</code>, style: <code>PathStyle</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a 2D plus at <code>pos</code> with size <code>radius</code> using <code>style</code>. </p> <pre><code>var style = PathStyle.new()\nDraw.plus(canvas, [100,100], 20, style)\n</code></pre> <p> Draw.camera(context: <code>Draw</code>, camera: <code>Entity</code>, style: <code>PathStyle</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a 3D camera frustum for the given camera entity using <code>style</code>. </p> <pre><code>var style = PathStyle.new()\nDraw.camera(canvas, camera, style)\n</code></pre> <p> Draw.frustum(context: <code>Draw</code>, corners: <code>List</code>, style: <code>PathStyle</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a 3D camera frustum for the given 8 corner points using <code>style</code>. (You can get one from Camera.get_frustum(entity) for example, but can use Draw.camera as well).</p> <pre><code>var style = PathStyle.new()\nvar corners = [\n  near_top_left, \n  near_top_right, \n  near_bottom_left, \n  near_bottom_right,\n  far_top_left, \n  far_top_right, \n  far_bottom_left, \n  far_bottom_right,\n]\nDraw.frustum(canvas, corners, style)\n</code></pre> <p> Draw.text(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, string: <code>Any</code>, size: <code>Any</code>, font: <code>Any</code>, color: <code>Any</code>, align: <code>Any</code>, align_vertical: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw the specified <code>string</code> at <code>x</code>,<code>y</code> and depth <code>z</code>. <code>w</code> and <code>h</code> specify the bounds for the text, bottom left origin, y going up.  The <code>size</code> specifies the text size, and <code>color</code> the color. <code>font</code> is a font asset, e.g Asset.font(\"luxe: font/lato\").  <code>align</code> and <code>align_vertical</code> control alignment within the bounds,  using the <code>TextAlign</code> enums such as <code>TextAlign.left</code>.</p> <pre><code>var depth = 0\nvar size = 24\nvar red = [1,0,0,1]\nDraw.text(canvas, 32, 32, depth, 100, 32, \"hello\", size, Asset.font(\"luxe: font/lato\"), red, TextAlign.center, TextAlign.bottom)\n</code></pre> <p> Draw.text(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, string: <code>Any</code>, size: <code>Any</code>, font: <code>Any</code>, color: <code>Any</code>, align: <code>Any</code>, align_vertical: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw the specified <code>string</code> at <code>x</code>,<code>y</code> and depth <code>z</code>.  The <code>size</code> specifies the text size, and <code>color</code> the color.  <code>font</code> is a font asset, e.g Asset.font(\"luxe: font/lato\").  <code>align</code> and <code>align_vertical</code> control alignment relative to the specified position,  using the <code>TextAlign</code> enums such as <code>TextAlign.left</code>.</p> <pre><code>var depth = 0\nvar size = 24\nvar red = [1,0,0,1]\nDraw.text(canvas, 32, 32, depth, \"hello\", size, Asset.font(\"luxe: font/lato\"), red, TextAlign.center, TextAlign.bottom)\n</code></pre> <p> Draw.text(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, string: <code>Any</code>, size: <code>Any</code>, color: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw the specified <code>string</code> at <code>x</code>,<code>y</code>, <code>z</code>. The <code>size</code> specifies the text size, and <code>color</code> the color. </p> <pre><code>var depth = 0\nvar size = 24\nvar red = [1,0,0,1]\nDraw.text(canvas, 32, 32, depth, \"hello\", size, red)\n</code></pre> <p> Draw.image(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, angle: <code>Any</code>, material: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw an image with the specified <code>material</code> at <code>x</code>,<code>y</code> and depth <code>z</code>.  The image will be rotated by <code>angle</code> degrees.</p> <pre><code>var depth = 0\nvar angle = 30\nvar material = Assets.material(\"luxe: material/logo.sprite\")\nDraw.image(canvas, 128, 128, depth, 64, 64, angle, material)\n</code></pre> <p> Draw.image(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, angle: <code>Any</code>, color: <code>Any</code>, uv: <code>Any</code>, material: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draw an image with the specified <code>material</code> at <code>x</code>,<code>y</code> and depth <code>z</code>.  The image will be rotated by <code>angle</code> degrees. </p> <p>The <code>uv</code> value specifies a fixed rectangle like <code>[left, top, right, bottom]</code> in the <code>0..1</code> range, where <code>[0,0,1,1]</code> is the default and displays the full image.  A <code>uv</code> value of <code>[0.5, 0, 1, 0.5]</code> would draw the top right corner of the image only. A <code>uv</code> value of <code>[0, 0, 4, 4]</code> would tile the image 4 times (as long as the material has a repeat mode for the image).</p> <pre><code>var depth = 0\nvar angle = 30\nvar material = Assets.material(\"luxe: material/logo.sprite\")\nvar uv = [0, 0.5, 0, 1] //bottom right\nDraw.image(canvas, 128, 128, depth, 64, 64, angle, uv, material)\n</code></pre> <p> Draw.cross(context: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, radius: <code>Any</code>, angle: <code>Any</code>, style: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Draws a cross, an x shape   </p> <p> Draw.sphere3D_slice(context: <code>Draw</code>, pos: <code>Vec3</code>, radius: <code>Vec2</code>, start_angle: <code>Num</code>, end_angle: <code>Num</code>, layers: <code>Num</code>, style: <code>PathStyle</code>) \u00b6 returns <code>unknown</code></p> <p>Draw a 3D sphere made from layered circles with <code>layers</code> number of circles and <code>radius</code> radius. Make the <code>start_angle</code> 0 and the <code>end_angle</code> 360 to make a full sphere, or 0/180 for a half sphere.</p> <pre><code>Draw.sphere3D_slice(canvas, [0, 2, 0], 1, 0, 360, 16, PathStyle.new())\n</code></pre>"},{"location":"api/v/next/draw/#linecap","title":"LineCap","text":"<p><code>import \"luxe: draw\" for LineCap</code></p> <p>The end of a line is called a \"cap\", when drawing paths, this determines the type of cap that a line will have. :todo: images</p> <ul> <li>butt</li> <li>round</li> <li>square</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> LineCap.butt \u00b6 returns <code>unknown</code></p> <p>This cap is as if there was no cap, the line is just ended. The default.</p> <pre><code>var style = PathStyle.new()\n    style.cap = LineCap.butt\n</code></pre> <p> LineCap.round \u00b6 returns <code>unknown</code></p> <p>A round cap is a half circle at the end of the line.</p> <pre><code>var style = PathStyle.new()\n    style.cap = LineCap.round\n</code></pre> <p> LineCap.square \u00b6 returns <code>unknown</code></p> <p>A square cap is a square at the end of the line.</p> <pre><code>var style = PathStyle.new()\n    style.cap = LineCap.square\n</code></pre> <p> LineCap.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Convert a string to a LineCap value.</p> <pre><code>Log.print(LineCap.round == LineCap.from_string(\"round\")) //true\n</code></pre>"},{"location":"api/v/next/draw/#linejoin","title":"LineJoin","text":"<p><code>import \"luxe: draw\" for LineJoin</code></p> <p>When drawing a path, a series of lines will be drawn and joined together. The join of each connection can be configured when drawing paths using <code>LineJoin</code>. :todo: images</p> <ul> <li>bevel</li> <li>round</li> <li>miter</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> LineJoin.bevel \u00b6 returns <code>unknown</code></p> <p>The default join is a bevel, which is a flat join.</p> <pre><code>var style = PathStyle.new()\n    style.join = LineJoin.bevel\n</code></pre> <p> LineJoin.round \u00b6 returns <code>unknown</code></p> <p>A round join is a semi circle that makes the corner rounded.</p> <pre><code>var style = PathStyle.new()\n    style.join = LineJoin.round\n</code></pre> <p> LineJoin.miter \u00b6 returns <code>unknown</code></p> <p>A miter join is a sharp triangle join that has a limit value (which falls back to bevel).</p> <pre><code>var style = PathStyle.new()\n    style.join = LineJoin.miter\n    style.miter_limit = 8\n</code></pre> <p> LineJoin.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Convert a string to a LineJoin value.</p> <pre><code>Log.print(LineJoin.round == LineJoin.from_string(\"round\")) //true\n</code></pre>"},{"location":"api/v/next/draw/#pathstyle","title":"PathStyle","text":"<p><code>import \"luxe: draw\" for PathStyle</code></p> <ul> <li>array</li> <li>color</li> <li>alpha(value: <code>Any</code>)</li> <li>color(value: <code>Any</code>)</li> <li>thickness(value: <code>Any</code>)</li> <li>color=(value : Any)</li> <li>alpha</li> <li>alpha=(value : Any)</li> <li>thickness</li> <li>thickness=(value : Any)</li> <li>feather</li> <li>feather=(value : Any)</li> <li>cap</li> <li>cap=(value : Any)</li> <li>join</li> <li>join=(value : Any)</li> <li>miter_limit</li> <li>miter_limit=(value : Any)</li> <li>new()</li> </ul> <p> PathStyle.array \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PathStyle.color \u00b6 returns <code>unknown</code></p> <p>Returns the color of the path style.</p> <pre><code>var style = PathStyle.new()\nvar color = style.color //the default color\n</code></pre> <p> PathStyle.alpha(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PathStyle.color(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PathStyle.thickness(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PathStyle.color=(value : Any) \u00b6 returns <code>unknown</code></p> <p>Set the color for the style.</p> <pre><code>var style = PathStyle.new()\nstyle.color = [0, 0, 0, 1] //black\n</code></pre> <p> PathStyle.alpha \u00b6 returns <code>unknown</code></p> <p>Returns the alpha from the color of the path style.</p> <pre><code>var style = PathStyle.new()\nvar color = style.alpha //the alpha value of the default color\n</code></pre> <p> PathStyle.alpha=(value : Any) \u00b6 returns <code>unknown</code></p> <p>Set the alpha of the color for the style.</p> <pre><code>var style = PathStyle.new()\nstyle.alpha = 0.5 //half alpha\n</code></pre> <p> PathStyle.thickness \u00b6 returns <code>unknown</code></p> <p>Returns the thickness of the path style.</p> <pre><code>var style = PathStyle.new()\nLog.print(style.thickness) //1\n</code></pre> <p> PathStyle.thickness=(value : Any) \u00b6 returns <code>unknown</code></p> <p>Set the thickness of the path style.</p> <pre><code>var style = PathStyle.new()\nstyle.thickness = 4\n</code></pre> <p> PathStyle.feather \u00b6 returns <code>unknown</code></p> <p>Returns the feather value for the path style.  Note: not used much at the moment.</p> <pre><code>var style = PathStyle.new()\nvar feather = style.feather\n</code></pre> <p> PathStyle.feather=(value : Any) \u00b6 returns <code>unknown</code></p> <p>Set the feather value for the path style.  Note: not used much at the moment.</p> <pre><code>var style = PathStyle.new()\nstyle.feather = 2\n</code></pre> <p> PathStyle.cap \u00b6 returns <code>unknown</code></p> <p>Returns the <code>LineCap</code> type for the path style.</p> <pre><code>var style = PathStyle.new()\nvar cap = style.cap\n</code></pre> <p> PathStyle.cap=(value : Any) \u00b6 returns <code>unknown</code></p> <p>Set the <code>LineCap</code> type for the path style.</p> <pre><code>var style = PathStyle.new()\nstyle.cap = LineCap.round\n</code></pre> <p> PathStyle.join \u00b6 returns <code>unknown</code></p> <p>Returns the <code>LineJoin</code> type for the path style.</p> <pre><code>var style = PathStyle.new()\nvar join = style.join\n</code></pre> <p> PathStyle.join=(value : Any) \u00b6 returns <code>unknown</code></p> <p>Set the <code>LineJoin</code> type for the path style.</p> <pre><code>var style = PathStyle.new()\nstyle.cap = LineJoin.round\n</code></pre> <p> PathStyle.miter_limit \u00b6 returns <code>unknown</code></p> <p>Returns the miter limit for the path style. Only relevant if the <code>join</code> type is <code>LineJoin.miter</code>.</p> <pre><code>var style = PathStyle.new()\nvar limit = style.miter_limit\n</code></pre> <p> PathStyle.miter_limit=(value : Any) \u00b6 returns <code>unknown</code></p> <p>Set the miter limit for the path style. Only relevant if the <code>join</code> type is <code>LineJoin.miter</code>.</p> <pre><code>var style = PathStyle.new()\nstyle.miter_limit = 8\n</code></pre> <p> PathStyle.new() \u00b6 returns <code>PathStyle</code></p> <p>Create a new <code>PathStyle</code> instance.</p> <pre><code>var style = PathStyle.new()\nstyle.color = [1,0,0,1]\nstyle.thickness = 2\nstyle.join = LineJoin.round\n//use style\n//...\nstyle.thickness = 1\n//use style again...\n</code></pre>"},{"location":"api/v/next/editor/","title":"Editor","text":""},{"location":"api/v/next/editor/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/editor/#luxe-editor-module","title":"<code>luxe: editor</code> module","text":"<ul> <li>Editor </li> </ul>"},{"location":"api/v/next/editor/#editor","title":"Editor","text":"<p><code>import \"luxe: editor\" for Editor</code></p> <p>Access to information about the editor, if the game is currently running in the editor. Please note this API is new and heavily work in progress.</p> <ul> <li>get</li> <li>get(context_id: <code>Any</code>)</li> </ul> <p> Editor.get \u00b6 returns <code>unknown</code></p> <p>Returns the editor API for access to the editor   </p> <p> Editor.get(context_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Returns the editor context with the given ID. Examples include <code>luxe.editor.world</code> for the world editor, or <code>luxe.editor.tiles</code>.</p> <pre><code>//We can check if a world is in edit mode via the `edit` tag.\n//For example, a scene being previewed in editor is still running in \n//the editor, but we don't want to act as if it's being edited.\nvar is_world_editable = World.tag_has(world, \"edit\")\nif(!is_world_editable) return\n\n//if we're in the editor, we can access the world editor and do some things\nvar world_editor = Editor.get(\"luxe.editor.world\")\nif(world_editor) {\n  //simple example, make sure the gizmo matches the transform\n  //if there's no gizmo, the function returns null\n  var gizmo = world_editor.gizmo\n  if(gizmo) gizmo.refresh()\n}\n</code></pre>"},{"location":"api/v/next/events/","title":"Events","text":""},{"location":"api/v/next/events/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/events/#luxe-events-module","title":"<code>luxe: events</code> module","text":"<ul> <li>Events </li> </ul>"},{"location":"api/v/next/events/#events","title":"Events","text":"<p><code>import \"luxe: events\" for Events</code></p> <p>A simple event system for listening to and emitting events.</p> <p>Note: this API will likely change to ID based soon, where  on listening, an ID will be returned, and use that ID to unlisten  rather than needing the function object.</p> <ul> <li>new()</li> <li>once(tags: <code>List</code>, fn: <code>Fn</code>)</li> <li>listen(tags: <code>List</code>, fn: <code>Fn</code>)</li> <li>unlisten(tags: <code>List</code>, fn: <code>Fn</code>)</li> <li>unlisten_id(tags: <code>List</code>, id: <code>String</code>)</li> <li>unlisten(tags: <code>List</code>)</li> <li>emit(tags: <code>List</code>)</li> <li>emit(tags: <code>List</code>, data: <code>Any</code>)</li> </ul> <p> Events.new() \u00b6 returns <code>Events</code></p> <p>Create a new <code>Events</code> instance to use.</p> <pre><code>var events = Events.new()\n</code></pre> <p> Events.once(tags: <code>List</code>, fn: <code>Fn</code>) \u00b6 returns <code>String</code></p> <p>Connect a function to the given tags, that is automatically removed after the event is emitted. The function takes a single argument, <code>data</code>, which is sent from <code>emit</code>.</p> <pre><code>events.once([\"example\"]) {|data|\n  Log.print(\"event received: data = `%(data)`\")\n}\n\n//make the event happen, will call the above function\n//which prints  event received: data = `321`\nevents.emit([\"example\"], 321)\n//fire the event again, but this one does NOT print,\n//because the event was only listening once\nevents.emit([\"example\"], 654)\n</code></pre> <p> Events.listen(tags: <code>List</code>, fn: <code>Fn</code>) \u00b6 returns <code>String</code></p> <p>Connect a function to the given tags. The function will be called each time the event is emitted, until <code>unlisten</code> is called. The function takes a single argument, <code>data</code>, which is sent through <code>emit</code>. Returns an id that you give to <code>unlisten</code>.</p> <pre><code>var tags = [\"example\", \"tags\"]\nvar fn = Fn.new {|data|\n  Log.print(\"data = `%(data)`\")\n}\n\nvar id = events.listen(tags, fn)\nevents.emit(tags, \"hello\")          //prints data = `hello`\nevents.emit(tags, { \"map\":\"data\" }) //prints data = `{map:data}`\nevents.emit(tags)                   //prints data = `null`\nevents.unlisten_id(tags, id)        //remove the function\nevents.emit(tags)                   //nothing printed\n</code></pre> <p> Events.unlisten(tags: <code>List</code>, fn: <code>Fn</code>) \u00b6 returns <code>None</code></p> <p>Removes a connected function for the specified tags (if one exists),  by specifying the same function passed to <code>listen</code>. See <code>listen</code> for example.</p> <pre><code>events.unlisten([\"tag\"], fn)\n</code></pre> <p> Events.unlisten_id(tags: <code>List</code>, id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Removes a connected function for the specified tags (if one exists). The id is the one returned from <code>listen</code>. See <code>listen</code> for example.</p> <pre><code>events.unlisten_id([\"tag\"], id)\n</code></pre> <p> Events.unlisten(tags: <code>List</code>) \u00b6 returns <code>None</code></p> <p>Removes ALL functions from the specified tags, clearing them.</p> <pre><code>events.unlisten([\"tag\"])\n</code></pre> <p> Events.emit(tags: <code>List</code>) \u00b6 returns <code>None</code></p> <p>Emit the event tags so that any connected functions will be called. Sends <code>null</code> for the data argument to the functions. See <code>listen</code> for an example.</p> <pre><code>events.emit([\"tag\"])\n</code></pre> <p> Events.emit(tags: <code>List</code>, data: <code>Any</code>) \u00b6 returns <code>None</code></p> <p>Emit the event tags so that any connected functions will be called. Sends <code>data</code> as is for the data argument to the functions. See <code>listen</code> for an example.</p> <pre><code>events.emit([\"tag\"], [\"hello\"])\n</code></pre>"},{"location":"api/v/next/fuzzy/","title":"Fuzzy","text":""},{"location":"api/v/next/fuzzy/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/fuzzy/#luxe-fuzzy-module","title":"<code>luxe: fuzzy</code> module","text":"<ul> <li>Fuzzy </li> <li>FuzzyResult </li> <li>FuzzyScore </li> </ul>"},{"location":"api/v/next/fuzzy/#fuzzy","title":"Fuzzy","text":"<p><code>import \"luxe: fuzzy\" for Fuzzy</code></p> <p>no docs found</p> <ul> <li>sorted(pattern: <code>String</code>, items: <code>List</code>)</li> <li>matches(pattern: <code>String</code>, items: <code>List</code>)</li> <li>matches(pattern: <code>String</code>, items: <code>List</code>, fn: <code>Fn</code>)</li> <li>match(pattern: <code>String</code>, str: <code>String</code>)</li> <li>match_at(pattern: <code>List</code>, str: <code>List</code>, pattern_idx: <code>Any</code>, str_idx: <code>Any</code>)</li> <li>match_simple(pattern: <code>String</code>, str: <code>String</code>)</li> <li>is_camel_case(c0: <code>Num</code>, c1: <code>Num</code>)</li> <li>match_recursive(pattern: <code>List</code>, str: <code>List</code>, pattern_idx: <code>Num</code>, str_idx: <code>Num</code>, srcMatches: <code>List</code>, matches: <code>List</code>, maxMatches: <code>Num</code>, nextMatch: <code>Num</code>, count: <code>Num</code>, limit: <code>Num</code>)</li> </ul> <p> Fuzzy.sorted(pattern: <code>String</code>, items: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Fuzzy.matches(pattern: <code>String</code>, items: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Fuzzy.matches(pattern: <code>String</code>, items: <code>List</code>, fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Fuzzy.match(pattern: <code>String</code>, str: <code>String</code>) \u00b6 returns <code>Result</code></p> <p>no docs found   </p> <p> Fuzzy.match_at(pattern: <code>List</code>, str: <code>List</code>, pattern_idx: <code>Any</code>, str_idx: <code>Any</code>) \u00b6 returns <code>Bool</code></p> <p>returns true if character at two positions is the same   </p> <p> Fuzzy.match_simple(pattern: <code>String</code>, str: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>returns true if each character in pattern is found sequentially within str   </p> <p> Fuzzy.is_camel_case(c0: <code>Num</code>, c1: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Fuzzy.match_recursive(pattern: <code>List</code>, str: <code>List</code>, pattern_idx: <code>Num</code>, str_idx: <code>Num</code>, srcMatches: <code>List</code>, matches: <code>List</code>, maxMatches: <code>Num</code>, nextMatch: <code>Num</code>, count: <code>Num</code>, limit: <code>Num</code>) \u00b6 returns <code>Result</code></p> <p>no docs found   </p>"},{"location":"api/v/next/fuzzy/#fuzzyresult","title":"FuzzyResult","text":"<p><code>import \"luxe: fuzzy\" for FuzzyResult</code></p> <p>no docs found</p> <ul> <li>item</li> <li>score</li> <li>matches</li> <li>new(item: <code>String</code>, score: <code>Num</code>, matches: <code>List</code>)</li> </ul> <p> FuzzyResult.item \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> FuzzyResult.score \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> FuzzyResult.matches \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> FuzzyResult.new(item: <code>String</code>, score: <code>Num</code>, matches: <code>List</code>) \u00b6 returns <code>FuzzyResult</code></p> <p>no docs found   </p>"},{"location":"api/v/next/fuzzy/#fuzzyscore","title":"FuzzyScore","text":"<p><code>import \"luxe: fuzzy\" for FuzzyScore</code></p> <p>no docs found</p> <ul> <li>sequential_bonus</li> <li>separator_bonus</li> <li>camel_bonus</li> <li>first_letter_bonus</li> <li>leading_letter_penalty</li> <li>max_leading_letter_penalty</li> <li>unmatched_letter_penalty</li> </ul> <p> FuzzyScore.sequential_bonus \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> FuzzyScore.separator_bonus \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> FuzzyScore.camel_bonus \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> FuzzyScore.first_letter_bonus \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> FuzzyScore.leading_letter_penalty \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> FuzzyScore.max_leading_letter_penalty \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> FuzzyScore.unmatched_letter_penalty \u00b6 returns <code>Num</code></p> <p>no docs found   </p>"},{"location":"api/v/next/game/","title":"Game","text":""},{"location":"api/v/next/game/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/game/#luxe-game-module","title":"<code>luxe: game</code> module","text":"<ul> <li>Frame </li> <li>FrameSection </li> <li>FrameWhen </li> <li>Ready </li> </ul>"},{"location":"api/v/next/game/#frame","title":"Frame","text":"<p><code>import \"luxe: game\" for Frame</code></p> <p>Access to the frame and game loop.  At the moment, the loop contains fixed sections, <code>begin</code> -&gt; <code>init</code> -&gt; <code>sim</code> -&gt; <code>visual</code> -&gt; <code>debug</code> -&gt; <code>end</code>.</p> <p>Functions can be hooked into sections of the frame using <code>before</code>, <code>after</code> or <code>on</code> ordering.</p> <p>Note: This API is a work in progress.</p> <ul> <li>begin</li> <li>init</li> <li>sim</li> <li>visual</li> <li>debug</li> <li>end</li> <li>queue(fn: <code>Fn</code>)</li> <li>next(fn: <code>Fn</code>)</li> <li>end(fn: <code>Fn</code>)</li> <li>schedule(time: <code>Num</code>, fn: <code>Fn</code>)</li> <li>schedule(time: <code>Num</code>, count: <code>Num</code>, fn: <code>Fn</code>)</li> <li>unschedule(handle: <code>Handle</code>)</li> <li>off(handle: <code>Handle</code>)</li> <li>once(section: <code>String</code>, priority: <code>Num</code>, fn: <code>Fn</code>)</li> <li>on(section: <code>String</code>, priority: <code>Num</code>, fn: <code>Fn</code>)</li> <li>before(section: <code>String</code>, priority: <code>Num</code>, fn: <code>Fn</code>)</li> <li>after(section: <code>String</code>, priority: <code>Num</code>, fn: <code>Fn</code>)</li> <li>on(section: <code>String</code>, fn: <code>Fn</code>)</li> <li>once(section: <code>String</code>, fn: <code>Fn</code>)</li> <li>before(section: <code>String</code>, fn: <code>Fn</code>)</li> <li>after(section: <code>String</code>, fn: <code>Fn</code>)</li> <li>skip(count_frames: <code>Num</code>, fn: <code>Fn</code>)</li> <li>mark(id: <code>String</code>, display: <code>String</code>)</li> <li>get_marks(frame_index: <code>Num</code>)</li> <li>index</li> <li>delta</li> </ul> <p> Frame.begin \u00b6 returns <code>String</code></p> <p>An enum value for the <code>begin</code> section in the loop. The `begin section is the start of the frame from the game's perspective.</p> <pre><code>Frame.on(Frame.begin) {|delta| ... }\n</code></pre> <p> Frame.init \u00b6 returns <code>String</code></p> <p>An enum value for the <code>init</code> section in the loop. The <code>init</code> section is used for initialization tasks that happen before updates, like when a new entity is created, it can be added to a queue and processed in init to set some default values before it arrives in <code>sim</code> or <code>visual</code>.</p> <pre><code>Frame.on(Frame.init) {|delta| ... }\n</code></pre> <p> Frame.sim \u00b6 returns <code>String</code></p> <p>An enum value for the <code>sim</code> section in the loop. The <code>sim</code> section is for simulation, also known as <code>update</code>.  In this section you would update game logic and modify things that the <code>visual</code> section would reference.</p> <pre><code>Frame.on(Frame.sim) {|delta| ... }\n</code></pre> <p> Frame.visual \u00b6 returns <code>String</code></p> <p>An enum value for the <code>visual</code> section in the loop. The <code>visual</code> section is for rendering, also known as <code>render</code>. Updating visual state from the sim states happens here.</p> <pre><code>Frame.on(Frame.visual) {|delta| ... }\n</code></pre> <p> Frame.debug \u00b6 returns <code>String</code></p> <p>An enum value for the <code>debug</code> section in the loop. The <code>debug</code> part of the loop can perform debug related tasks before the end of the frame and rendering is submitted.</p> <pre><code>Frame.on(Frame.debug) {|delta| ... }\n</code></pre> <p> Frame.end \u00b6 returns <code>String</code></p> <p>An enum value for the <code>end</code> section in the loop. The <code>end</code> of the loop can perform tasks after rendering and simulation.</p> <pre><code>Frame.on(Frame.end) {|delta| ... }\n</code></pre> <p> Frame.queue(fn: <code>Fn</code>) \u00b6 returns <code>None</code></p> <p>Once off. Queue a function to be called after the current section has completed fully. That is, if we were inside of <code>sim</code> and we queued a function, it would happen after <code>before</code> <code>on</code> and <code>after</code>.</p> <p>This is used for systems that fire callbacks, you normally don't want to fire callbacks during processing, so you can queue them to happen \"as soon as possible\" but in a well defined place and time.</p> <pre><code>Frame.queue {\n  Log.print(\"happens at the end of the current section\")\n}\n\n//fake example: collision callbacks\nfor(entity in collidable) {\n  if(collides(entity)) {\n    var fn = callbacks[entity]\n    Frame.queue { fn.call() }\n  }\n}\n</code></pre> <p> Frame.next(fn: <code>Fn</code>) \u00b6 returns <code>None</code></p> <p>Once off. Queue a function to be called at the beginning of the next frame,  before any sections.</p> <pre><code>Frame.next {\n  Log.print(\"next frame!\")\n}\n\n//common example, destroying something when it might\n//not be safe to. Instead, just destroy it later\nfor(thing in list) {\n  Frame.next { Thing.destroy(thing) }\n}\n</code></pre> <p> Frame.end(fn: <code>Fn</code>) \u00b6 returns <code>None</code></p> <p>Once off. Queue a function to be called at the end of the current frame, after all sections.</p> <pre><code>Frame.end {\n  Log.print(\"end frame!\")\n}\n</code></pre> <p> Frame.schedule(time: <code>Num</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>Schedule a function to be called in future.  The <code>time</code> value is in seconds, and is not affected by any time scaling. The function is only called once. To repeat, see the other <code>schedule</code> method.   </p> <p> Frame.schedule(time: <code>Num</code>, count: <code>Num</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>Schedule a function to be called in future.  The <code>time</code> value is in seconds, and is not affected by any time scaling. If <code>count</code> is 0, the function will be called repeatedly until <code>unschedule</code> is called.   </p> <p> Frame.unschedule(handle: <code>Handle</code>) \u00b6 returns <code>None</code></p> <p>Unschedule a function scheduled previously, using the handle returned from <code>schedule</code>.   </p> <p> Frame.off(handle: <code>Handle</code>) \u00b6 returns <code>Bool</code></p> <p>Disconnect a function using the handle returned from one of the recurring functions. This will remove the function from the loop and it will no longer be called.</p> <p>Returns true if the function was valid and removed.</p> <pre><code>var tick = Frame.on(Frame.sim) {|delta| Log.print(\"delta:%(delta)\") }\n//...\nFrame.off(tick)\n</code></pre> <p> Frame.once(section: <code>String</code>, priority: <code>Num</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>Once off. Queues a function to the specified section, with a given priority which will be executed during the section. Priority is based on \"highest priority first\". So priority 1 executes before 0.</p> <p>Returns a handle that can be used to remove the function via <code>off</code>.</p> <pre><code>Frame.once(Frame.sim, 3) {|delta| Log.print(\"prints first\") }\nFrame.once(Frame.sim, 1) {|delta| Log.print(\"prints second\") }\n</code></pre> <p> Frame.on(section: <code>String</code>, priority: <code>Num</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>Connect a function to the specified section, with a given priority which will be executed during the section. Priority is based on \"highest priority first\". So priority 1 executes before 0.</p> <p>Returns a handle that can be used to remove the function via <code>off</code>.</p> <pre><code>Frame.on(Frame.sim, 3) {|delta| Log.print(\"prints first\") }\nFrame.on(Frame.sim, 1) {|delta| Log.print(\"prints second\") }\n</code></pre> <p> Frame.before(section: <code>String</code>, priority: <code>Num</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>Connect a function to the specified section, with a given priority which will be executed before the section. Priority is based on \"highest priority first\". So priority 1 executes before 0.</p> <p>Returns a handle that can be used to remove the function via <code>off</code>.</p> <pre><code>Frame.before(Frame.sim, 0) {|delta| Log.print(\"prints second\") }\nFrame.before(Frame.sim, 1) {|delta| Log.print(\"prints first\") }\n</code></pre> <p> Frame.after(section: <code>String</code>, priority: <code>Num</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>Connect a function to the specified section, with a given priority which will be executed after the section. Priority is based on \"highest priority first\". So priority 1 executes before 0.</p> <p>Returns a handle that can be used to remove the function via <code>off</code>.</p> <pre><code>Frame.after(Frame.sim, 2) {|delta| Log.print(\"prints first\") }\nFrame.after(Frame.sim, 1) {|delta| Log.print(\"prints second\") }\n</code></pre> <p> Frame.on(section: <code>String</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>Connect a function to the specified section (with priority 0) which will be executed during the section.</p> <p>Returns a handle that can be used to remove the function via <code>off</code>.</p> <pre><code>Frame.on(Frame.sim) {|delta| Log.print(\"delta:%(delta)\") }\n</code></pre> <p> Frame.once(section: <code>String</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>Once off. Queue a function to the specified section (with priority 0) which will be executed during the section. Returns a handle that can be used to remove the function via <code>off</code>.</p> <pre><code>Frame.once(Frame.sim) { Log.print(\"happens during 'sim'\") }\n</code></pre> <p> Frame.before(section: <code>String</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>Connect a function to the specified section (with priority 0) which will be executed before the section.</p> <p>Returns a handle that can be used to remove the function via <code>off</code>.</p> <pre><code>Frame.before(Frame.sim) {|delta| Log.print(\"delta:%(delta)\") }\n</code></pre> <p> Frame.after(section: <code>String</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>Connect a function to the specified section (with priority 0) which will be executed after the section.</p> <p>Returns a handle that can be used to remove the function via <code>off</code>.</p> <pre><code>Frame.after(Frame.sim) {|delta| Log.print(\"delta:%(delta)\") }\n</code></pre> <p> Frame.skip(count_frames: <code>Num</code>, fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>Once off. Queue a function to be called at the beginning of the frame <code>count_frames</code> from now,  before any sections. This is <code>Frame.next</code> but can push actions forward by frame count instead of time.</p> <pre><code>Frame.skip(3) {\n  Log.print(\"three frames from now!\")\n}\n</code></pre> <p> Frame.mark(id: <code>String</code>, display: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Frame.get_marks(frame_index: <code>Num</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Frame.index \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Frame.delta \u00b6 returns <code>Num</code></p> <p>no docs found   </p>"},{"location":"api/v/next/game/#framesection","title":"FrameSection","text":"<p><code>import \"luxe: game\" for FrameSection</code></p> <p>no docs found</p> <ul> <li>begin</li> <li>init</li> <li>sim</li> <li>visual</li> <li>debug</li> <li>end</li> <li>name(value: <code>Any</code>)</li> </ul> <p> FrameSection.begin \u00b6 returns <code>String</code></p> <p>An enum value for the <code>begin</code> section in the loop. The `begin section is the start of the frame from the game's perspective.</p> <pre><code>Frame.on(Frame.begin) {|delta| ... }\n</code></pre> <p> FrameSection.init \u00b6 returns <code>String</code></p> <p>An enum value for the <code>init</code> section in the loop. The <code>init</code> section is used for initialization tasks that happen before updates, like when a new entity is created, it can be added to a queue and processed in init to set some default values before it arrives in <code>sim</code> or <code>visual</code>.</p> <pre><code>Frame.on(Frame.init) {|delta| ... }\n</code></pre> <p> FrameSection.sim \u00b6 returns <code>String</code></p> <p>An enum value for the <code>sim</code> section in the loop. The <code>sim</code> section is for simulation, also known as <code>update</code>.  In this section you would update game logic and modify things that the <code>visual</code> section would reference.</p> <pre><code>Frame.on(Frame.sim) {|delta| ... }\n</code></pre> <p> FrameSection.visual \u00b6 returns <code>String</code></p> <p>An enum value for the <code>visual</code> section in the loop. The <code>visual</code> section is for rendering, also known as <code>render</code>. Updating visual state from the sim states happens here.</p> <pre><code>Frame.on(Frame.visual) {|delta| ... }\n</code></pre> <p> FrameSection.debug \u00b6 returns <code>String</code></p> <p>An enum value for the <code>debug</code> section in the loop. The <code>debug</code> part of the loop can perform debug related tasks before the end of the frame and rendering is submitted.</p> <pre><code>Frame.on(Frame.debug) {|delta| ... }\n</code></pre> <p> FrameSection.end \u00b6 returns <code>String</code></p> <p>An enum value for the <code>end</code> section in the loop. The <code>end</code> of the loop can perform tasks after rendering and simulation.</p> <pre><code>Frame.on(Frame.end) {|delta| ... }\n</code></pre> <p> FrameSection.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/game/#framewhen","title":"FrameWhen","text":"<p><code>import \"luxe: game\" for FrameWhen</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>before</li> <li>on</li> <li>after</li> <li>name(value: <code>Any</code>)</li> </ul> <p> FrameWhen.unknown \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> FrameWhen.before \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> FrameWhen.on \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> FrameWhen.after \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> FrameWhen.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/game/#ready","title":"Ready","text":"<p><code>import \"luxe: game\" for Ready</code></p> <p>The base class for a luxe game.</p> <ul> <li>ready()</li> <li>ready(message: <code>String</code>)</li> <li>tick(delta: <code>Num</code>)</li> <li>destroy()</li> </ul> <p> Ready.ready() \u00b6 returns <code>None</code></p> <p>Called via <code>super()</code> inside your <code>ready</code> function. Must be called.   </p> <p> Ready.ready(message: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Called via <code>super(message)</code> inside your <code>ready</code> function. Must be called.   </p> <p> Ready.tick(delta: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>A default implementation for tick.   </p> <p> Ready.destroy() \u00b6 returns <code>None</code></p> <p>A default implementation for destroy.   </p>"},{"location":"api/v/next/id/","title":"Id","text":""},{"location":"api/v/next/id/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/id/#luxe-id-module","title":"<code>luxe: id</code> module","text":"<ul> <li>ID </li> </ul>"},{"location":"api/v/next/id/#id","title":"ID","text":"<p><code>import \"luxe: id\" for ID</code></p> <p>IDs are useful in many cases, this API provides them in various forms like UUID or unique short strings.</p> <ul> <li>unique()</li> <li>unique(length: <code>Num</code>)</li> <li>index(index: <code>Num</code>)</li> <li>uuid()</li> <li>uuid(from: <code>String</code>)</li> <li>uuid_validate(uuid: <code>String</code>)</li> <li>uuid_base62()</li> <li>uuid_combine(uuid_a: <code>String</code>, uuid_b: <code>String</code>)</li> </ul> <p> ID.unique() \u00b6 returns <code>String</code></p> <p>Returns a unique short string ID for use. These are useful for default generated names, random urls, etc.</p> <p>Note that these are \"unique enough\" but has higher risk of collision than a UUID. If you want universally unique IDs that's what UUID is for. (Don't make assumptions about the length of the ID, for fixed length use <code>ID.unique(length: Num)</code>).</p> <pre><code>Log.print(ID.unique()) //UuIyH\nLog.print(ID.unique()) //39sjDw\nLog.print(ID.unique()) //28zASZ\n</code></pre> <p> ID.unique(length: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Returns a unique short string ID for use. These are useful for default generated names, random urls, etc.</p> <p>Note that these are \"unique enough\" but has higher risk of collision than a UUID. If you want universally unique IDs that's what UUID is for.</p> <pre><code>Log.print(ID.unique(6)) //Uu2IyH\nLog.print(ID.unique(8)) //39sjDwl4\n</code></pre> <p> ID.index(index: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> ID.uuid() \u00b6 returns <code>String</code></p> <p>Returns a UUID v4 ID. These are unique enough to not worry about collisions (not for cryptography).</p> <pre><code>Log.print(ID.uuid()) //5606ba0f-968a-4ab7-8230-ba46cdb345da\nLog.print(ID.uuid()) //48e3d469-e9fa-4a24-aa22-d653de9af5b2\nLog.print(ID.uuid()) //a4861cc5-c2e4-4656-a3a4-176bc63e5d05\n</code></pre> <p> ID.uuid(from: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Returns a UUID v4 from the given string (treated as bytes). This runs a 128 bit hash (spooky v2) over the string, converting the bits to a uuid string.</p> <pre><code>Log.print(ID.uuid(\"hello\")) //3768826a-d382-e6ca-5c94-1ed1c71ae043\nLog.print(ID.uuid(\"luxe\")) //7281a4a8-abc4-dc50-52ae-7f59626f242a\n</code></pre> <p> ID.uuid_validate(uuid: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Returns true if the given UUID is valid (using regex matching).</p> <pre><code>Log.print(ID.validate_uuid(ID.uuid())) //true\nLog.print(ID.validate_uuid(\"hello\"))   //false\n</code></pre> <p> ID.uuid_base62() \u00b6 returns <code>String</code></p> <p>Returns a UUID represented as a base62 string.</p> <pre><code>Log.print(ID.uuid_base62()) //AXiFxIVixJM-EDCrnEHVkWJ\n</code></pre> <p> ID.uuid_combine(uuid_a: <code>String</code>, uuid_b: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Returns a new UUID by combining the two UUIDs given.</p> <pre><code>Log.print(ID.uuid_combine(ID.uuid(), ID.uuid())) //5f558462-7525-48c0-812d-a65df074ce42\n</code></pre>"},{"location":"api/v/next/input/","title":"Input","text":""},{"location":"api/v/next/input/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/input/#luxe-input-module","title":"<code>luxe: input</code> module","text":"<ul> <li>GamepadEvent </li> <li>InputBind </li> <li>InputCh </li> <li>InputEvent </li> <li>InputNode </li> <li>InputState </li> <li>InputType </li> <li>Input </li> <li>Key </li> <li>Mod </li> <li>ModState </li> <li>MouseButton </li> <li>Scan </li> <li>SystemCursor </li> <li>TextEvent </li> </ul>"},{"location":"api/v/next/input/#gamepadevent","title":"GamepadEvent","text":"<p><code>import \"luxe: input\" for GamepadEvent</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>device_added</li> <li>device_removed</li> <li>device_remapped</li> <li>name(value: <code>Any</code>)</li> </ul> <p> GamepadEvent.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> GamepadEvent.device_added \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> GamepadEvent.device_removed \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> GamepadEvent.device_remapped \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> GamepadEvent.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/input/#inputbind","title":"InputBind","text":"<p><code>import \"luxe: input\" for InputBind</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>key_state</li> <li>mouse_state</li> <li>mouse_axis</li> <li>touch_state</li> <li>touch_axis</li> <li>gamepad_state</li> <li>gamepad_axis</li> <li>name(value: <code>Any</code>)</li> </ul> <p> InputBind.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputBind.key_state \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputBind.mouse_state \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputBind.mouse_axis \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputBind.touch_state \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputBind.touch_axis \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputBind.gamepad_state \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputBind.gamepad_axis \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputBind.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/input/#inputch","title":"InputCh","text":"<p><code>import \"luxe: input\" for InputCh</code></p> <p>no docs found</p> <ul> <li>none</li> <li>c01</li> <li>c02</li> <li>c03</li> <li>c04</li> <li>c05</li> <li>c06</li> <li>c07</li> <li>c08</li> <li>c09</li> <li>c10</li> <li>c11</li> <li>c12</li> <li>c13</li> <li>c14</li> <li>c15</li> <li>c16</li> <li>all</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> InputCh.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c01 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c02 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c03 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c04 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c05 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c06 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c07 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c08 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c09 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c10 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c11 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c12 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c13 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c14 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c15 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.c16 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.all \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputCh.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/input/#inputevent","title":"InputEvent","text":"<p><code>import \"luxe: input\" for InputEvent</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>type</li> <li>key</li> <li>scan</li> <li>repeat</li> <li>mod</li> <li>x</li> <li>y</li> <li>dx</li> <li>dy</li> <li>x_rel</li> <li>y_rel</li> <li>value</li> <li>value1</li> <li>value2</li> <li>state</li> <li>touch_id</li> <li>axis</li> <li>button</li> <li>gamepad</li> </ul> <p> InputEvent.new() \u00b6 returns <code>InputEvent</code></p> <p>no docs found   </p> <p> InputEvent.type \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.key \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.scan \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.repeat \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.mod \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.x \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.y \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.dx \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.dy \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.x_rel \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.y_rel \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.value \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.value1 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.value2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.state \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.touch_id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.axis \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.button \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputEvent.gamepad \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/input/#inputnode","title":"InputNode","text":"<p><code>import \"luxe: input\" for InputNode</code></p> <p>no docs found</p> <ul> <li>node</li> </ul> <p> InputNode.node \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/input/#inputstate","title":"InputState","text":"<p><code>import \"luxe: input\" for InputState</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>began</li> <li>active</li> <li>ended</li> <li>name(value: <code>Any</code>)</li> </ul> <p> InputState.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputState.began \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputState.active \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputState.ended \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputState.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/input/#inputtype","title":"InputType","text":"<p><code>import \"luxe: input\" for InputType</code></p> <p>no docs found</p> <ul> <li>none</li> <li>key_down</li> <li>key_up</li> <li>text</li> <li>mouse_down</li> <li>mouse_up</li> <li>mouse_move</li> <li>mouse_wheel</li> <li>touch_down</li> <li>touch_up</li> <li>touch_move</li> <li>gamepad_axis</li> <li>gamepad_down</li> <li>gamepad_up</li> <li>gamepad_device</li> <li>name(type: <code>Any</code>)</li> </ul> <p> InputType.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.key_down \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.key_up \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.text \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.mouse_down \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.mouse_up \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.mouse_move \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.mouse_wheel \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.touch_down \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.touch_up \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.touch_move \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.gamepad_axis \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.gamepad_down \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.gamepad_up \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.gamepad_device \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputType.name(type: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/input/#input","title":"Input","text":"<p><code>import \"luxe: input\" for Input</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>tick_pre()</li> <li>tick()</li> <li>tick_post()</li> <li>graph</li> <li>key_down(key: <code>Any</code>, scan: <code>Any</code>, repeat: <code>Any</code>, mod: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>)</li> <li>key_up(key: <code>Any</code>, scan: <code>Any</code>, mod: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>)</li> <li>text(text: <code>Any</code>, start: <code>Any</code>, length: <code>Any</code>, type: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>)</li> <li>mouse_down(x: <code>Any</code>, y: <code>Any</code>, button: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>)</li> <li>mouse_up(x: <code>Any</code>, y: <code>Any</code>, button: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>)</li> <li>mouse_move(x: <code>Any</code>, y: <code>Any</code>, x_rel: <code>Any</code>, y_rel: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>)</li> <li>mouse_wheel(x: <code>Any</code>, y: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>)</li> <li>touch_down(x: <code>Any</code>, y: <code>Any</code>, touch_id: <code>Any</code>, timestamp: <code>Any</code>)</li> <li>touch_up(x: <code>Any</code>, y: <code>Any</code>, touch_id: <code>Any</code>, timestamp: <code>Any</code>)</li> <li>touch_move(x: <code>Any</code>, y: <code>Any</code>, dx: <code>Any</code>, dy: <code>Any</code>, touch_id: <code>Any</code>, timestamp: <code>Any</code>)</li> <li>gamepad_axis(gamepad: <code>Any</code>, axis: <code>Any</code>, value: <code>Any</code>, timestamp: <code>Any</code>)</li> <li>gamepad_down(gamepad: <code>Any</code>, button: <code>Any</code>, value: <code>Any</code>, timestamp: <code>Any</code>)</li> <li>gamepad_up(gamepad: <code>Any</code>, button: <code>Any</code>, value: <code>Any</code>, timestamp: <code>Any</code>)</li> <li>gamepad_device(gamepad: <code>Any</code>, name: <code>Any</code>, type: <code>Any</code>, timestamp: <code>Any</code>)</li> <li>deadzone(x: <code>Any</code>, y: <code>Any</code>, zone: <code>Any</code>)</li> <li>define_event(bind_type: <code>Any</code>, name: <code>Any</code>)</li> <li>define_event(bind_type: <code>Any</code>, name: <code>Any</code>, args: <code>Any</code>)</li> <li>undefine_event(bind_type: <code>Any</code>, name: <code>Any</code>)</li> <li>undefine_event(name: <code>Any</code>)</li> <li>listen_for(type: <code>Any</code>, at_node: <code>Any</code>, fn: <code>Any</code>)</li> <li>listen_for(type: <code>Any</code>, fn: <code>Any</code>)</li> <li>unlisten(type: <code>Any</code>, fn: <code>Any</code>)</li> <li>unlisten(type: <code>Any</code>, at_node: <code>Any</code>, fn: <code>Any</code>)</li> <li>listen_for_event(name: <code>Any</code>, at_node: <code>Any</code>, fn: <code>Any</code>)</li> <li>listen_for_event(name: <code>Any</code>, fn: <code>Any</code>)</li> <li>unlisten_for_event(name: <code>Any</code>, fn: <code>Any</code>)</li> <li>unlisten_for_event(name: <code>Any</code>, at_node: <code>Any</code>, fn: <code>Any</code>)</li> <li>event_active(name: <code>Any</code>, at_node: <code>Any</code>)</li> <li>event_began(name: <code>Any</code>, at_node: <code>Any</code>)</li> <li>event_ended(name: <code>Any</code>, at_node: <code>Any</code>)</li> <li>event_active(name: <code>Any</code>)</li> <li>event_began(name: <code>Any</code>)</li> <li>event_ended(name: <code>Any</code>)</li> <li>key_state_down(key: <code>Any</code>, at_node: <code>Any</code>)</li> <li>key_state_pressed(key: <code>Any</code>, at_node: <code>Any</code>)</li> <li>key_state_released(key: <code>Any</code>, at_node: <code>Any</code>)</li> <li>scan_state_down(scan: <code>Any</code>, at_node: <code>Any</code>)</li> <li>scan_state_pressed(scan: <code>Any</code>, at_node: <code>Any</code>)</li> <li>scan_state_released(scan: <code>Any</code>, at_node: <code>Any</code>)</li> <li>mouse_state_down(button: <code>Any</code>, at_node: <code>Any</code>)</li> <li>mouse_state_pressed(button: <code>Any</code>, at_node: <code>Any</code>)</li> <li>mouse_state_released(button: <code>Any</code>, at_node: <code>Any</code>)</li> <li>mouse_state_released(button: <code>Any</code>, at_node: <code>Any</code>, channels: <code>Any</code>)</li> <li>gamepad_state_down(gamepad: <code>Any</code>, button: <code>Any</code>, at_node: <code>Any</code>)</li> <li>gamepad_state_pressed(gamepad: <code>Any</code>, button: <code>Any</code>, at_node: <code>Any</code>)</li> <li>gamepad_state_released(gamepad: <code>Any</code>, button: <code>Any</code>, at_node: <code>Any</code>)</li> <li>gamepad_state_axis(gamepad: <code>Any</code>, axis: <code>Any</code>, at_node: <code>Any</code>)</li> <li>key_state_down(key: <code>Any</code>)</li> <li>key_state_pressed(key: <code>Any</code>)</li> <li>key_state_released(key: <code>Any</code>)</li> <li>scan_state_down(scan: <code>Any</code>)</li> <li>scan_state_pressed(scan: <code>Any</code>)</li> <li>scan_state_released(scan: <code>Any</code>)</li> <li>mouse_state_down(button: <code>Any</code>)</li> <li>mouse_state_released(button: <code>Any</code>)</li> <li>mouse_state_pressed(button: <code>Any</code>)</li> <li>mouse_state_wheel()</li> <li>mouse_x()</li> <li>mouse_y()</li> <li>mouse_x_rel()</li> <li>mouse_y_rel()</li> <li>set_mouse_cursor(image: <code>Image</code>, cursor_x: <code>Num</code>, cursor_y: <code>Num</code>)</li> <li>set_mouse_system_cursor(cursor: <code>SystemCursor</code>)</li> <li>set_mouse_pos(x: <code>Num</code>, y: <code>Num</code>)</li> <li>set_mouse_visible(state: <code>Bool</code>)</li> <li>set_mouse_capture(state: <code>Bool</code>)</li> <li>get_mouse_capture()</li> <li>gamepad_state_down(gamepad: <code>Any</code>, button: <code>Any</code>)</li> <li>gamepad_state_pressed(gamepad: <code>Any</code>, button: <code>Any</code>)</li> <li>gamepad_state_released(gamepad: <code>Any</code>, button: <code>Any</code>)</li> <li>gamepad_state_axis(gamepad: <code>Any</code>, axis: <code>Any</code>)</li> <li>define_node_front(id: <code>Any</code>, type: <code>Any</code>, channels: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>)</li> <li>define_node_back(id: <code>Any</code>, type: <code>Any</code>, channels: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>)</li> <li>define_node_after(other: <code>Any</code>, id: <code>Any</code>, type: <code>Any</code>, channels: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>)</li> <li>define_node_before(other: <code>Any</code>, id: <code>Any</code>, type: <code>Any</code>, channels: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>)</li> <li>node_defined(node: <code>Any</code>)</li> <li>undefine_node(id: <code>Any</code>)</li> <li>channels_active(at_node: <code>Any</code>, channels: <code>Any</code>)</li> <li>channels_active(at_node: <code>Any</code>)</li> <li>channels_state(at_node: <code>Any</code>)</li> <li>channels_at(at_node: <code>Any</code>)</li> <li>channels_plus_at(at_node: <code>Any</code>)</li> <li>channels_minus_at(at_node: <code>Any</code>)</li> <li>channels_set(at_node: <code>Any</code>, channels: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>)</li> <li>channels_add(at_node: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>)</li> <li>channels_remove(at_node: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>)</li> <li>channels_add_plus(at_node: <code>Any</code>, plus: <code>Any</code>)</li> <li>channels_add_minus(at_node: <code>Any</code>, minus: <code>Any</code>)</li> <li>channels_remove_plus(at_node: <code>Any</code>, plus: <code>Any</code>)</li> <li>channels_remove_minus(at_node: <code>Any</code>, minus: <code>Any</code>)</li> <li>channels_set(at_node: <code>Any</code>, channels: <code>Any</code>)</li> <li>channels_set_plus(at_node: <code>Any</code>, plus: <code>Any</code>)</li> <li>channels_set_minus(at_node: <code>Any</code>, minus: <code>Any</code>)</li> <li>set_events(ev: <code>Any</code>)</li> </ul> <p> Input.new() \u00b6 returns <code>Input</code></p> <p>no docs found   </p> <p> Input.tick_pre() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.tick() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.tick_post() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.graph \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.key_down(key: <code>Any</code>, scan: <code>Any</code>, repeat: <code>Any</code>, mod: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.key_up(key: <code>Any</code>, scan: <code>Any</code>, mod: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.text(text: <code>Any</code>, start: <code>Any</code>, length: <code>Any</code>, type: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_down(x: <code>Any</code>, y: <code>Any</code>, button: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_up(x: <code>Any</code>, y: <code>Any</code>, button: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_move(x: <code>Any</code>, y: <code>Any</code>, x_rel: <code>Any</code>, y_rel: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_wheel(x: <code>Any</code>, y: <code>Any</code>, timestamp: <code>Any</code>, window_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.touch_down(x: <code>Any</code>, y: <code>Any</code>, touch_id: <code>Any</code>, timestamp: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.touch_up(x: <code>Any</code>, y: <code>Any</code>, touch_id: <code>Any</code>, timestamp: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.touch_move(x: <code>Any</code>, y: <code>Any</code>, dx: <code>Any</code>, dy: <code>Any</code>, touch_id: <code>Any</code>, timestamp: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.gamepad_axis(gamepad: <code>Any</code>, axis: <code>Any</code>, value: <code>Any</code>, timestamp: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.gamepad_down(gamepad: <code>Any</code>, button: <code>Any</code>, value: <code>Any</code>, timestamp: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.gamepad_up(gamepad: <code>Any</code>, button: <code>Any</code>, value: <code>Any</code>, timestamp: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.gamepad_device(gamepad: <code>Any</code>, name: <code>Any</code>, type: <code>Any</code>, timestamp: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.deadzone(x: <code>Any</code>, y: <code>Any</code>, zone: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.define_event(bind_type: <code>Any</code>, name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.define_event(bind_type: <code>Any</code>, name: <code>Any</code>, args: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.undefine_event(bind_type: <code>Any</code>, name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.undefine_event(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.listen_for(type: <code>Any</code>, at_node: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.listen_for(type: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.unlisten(type: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.unlisten(type: <code>Any</code>, at_node: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.listen_for_event(name: <code>Any</code>, at_node: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.listen_for_event(name: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.unlisten_for_event(name: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.unlisten_for_event(name: <code>Any</code>, at_node: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.event_active(name: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.event_began(name: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.event_ended(name: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.event_active(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.event_began(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.event_ended(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.key_state_down(key: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.key_state_pressed(key: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.key_state_released(key: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.scan_state_down(scan: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.scan_state_pressed(scan: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.scan_state_released(scan: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_state_down(button: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_state_pressed(button: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_state_released(button: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_state_released(button: <code>Any</code>, at_node: <code>Any</code>, channels: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.gamepad_state_down(gamepad: <code>Any</code>, button: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.gamepad_state_pressed(gamepad: <code>Any</code>, button: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.gamepad_state_released(gamepad: <code>Any</code>, button: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.gamepad_state_axis(gamepad: <code>Any</code>, axis: <code>Any</code>, at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.key_state_down(key: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.key_state_pressed(key: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.key_state_released(key: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.scan_state_down(scan: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.scan_state_pressed(scan: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.scan_state_released(scan: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_state_down(button: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_state_released(button: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_state_pressed(button: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_state_wheel() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_x() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_y() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_x_rel() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.mouse_y_rel() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.set_mouse_cursor(image: <code>Image</code>, cursor_x: <code>Num</code>, cursor_y: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.set_mouse_system_cursor(cursor: <code>SystemCursor</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.set_mouse_pos(x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.set_mouse_visible(state: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.set_mouse_capture(state: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.get_mouse_capture() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.gamepad_state_down(gamepad: <code>Any</code>, button: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.gamepad_state_pressed(gamepad: <code>Any</code>, button: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.gamepad_state_released(gamepad: <code>Any</code>, button: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.gamepad_state_axis(gamepad: <code>Any</code>, axis: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.define_node_front(id: <code>Any</code>, type: <code>Any</code>, channels: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.define_node_back(id: <code>Any</code>, type: <code>Any</code>, channels: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.define_node_after(other: <code>Any</code>, id: <code>Any</code>, type: <code>Any</code>, channels: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.define_node_before(other: <code>Any</code>, id: <code>Any</code>, type: <code>Any</code>, channels: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.node_defined(node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.undefine_node(id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_active(at_node: <code>Any</code>, channels: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_active(at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_state(at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_at(at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_plus_at(at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_minus_at(at_node: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_set(at_node: <code>Any</code>, channels: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_add(at_node: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_remove(at_node: <code>Any</code>, plus: <code>Any</code>, minus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_add_plus(at_node: <code>Any</code>, plus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_add_minus(at_node: <code>Any</code>, minus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_remove_plus(at_node: <code>Any</code>, plus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_remove_minus(at_node: <code>Any</code>, minus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_set(at_node: <code>Any</code>, channels: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_set_plus(at_node: <code>Any</code>, plus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.channels_set_minus(at_node: <code>Any</code>, minus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Input.set_events(ev: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/input/#key","title":"Key","text":"<p><code>import \"luxe: input\" for Key</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>enter</li> <li>escape</li> <li>backspace</li> <li>tab</li> <li>space</li> <li>exclaim</li> <li>quotedbl</li> <li>hash</li> <li>percent</li> <li>dollar</li> <li>ampersand</li> <li>quote</li> <li>leftparen</li> <li>rightparen</li> <li>asterisk</li> <li>plus</li> <li>comma</li> <li>minus</li> <li>period</li> <li>slash</li> <li>key_0</li> <li>key_1</li> <li>key_2</li> <li>key_3</li> <li>key_4</li> <li>key_5</li> <li>key_6</li> <li>key_7</li> <li>key_8</li> <li>key_9</li> <li>colon</li> <li>semicolon</li> <li>less</li> <li>equals</li> <li>greater</li> <li>question</li> <li>at</li> <li>leftbracket</li> <li>backslash</li> <li>rightbracket</li> <li>caret</li> <li>underscore</li> <li>backquote</li> <li>key_a</li> <li>key_b</li> <li>key_c</li> <li>key_d</li> <li>key_e</li> <li>key_f</li> <li>key_g</li> <li>key_h</li> <li>key_i</li> <li>key_j</li> <li>key_k</li> <li>key_l</li> <li>key_m</li> <li>key_n</li> <li>key_o</li> <li>key_p</li> <li>key_q</li> <li>key_r</li> <li>key_s</li> <li>key_t</li> <li>key_u</li> <li>key_v</li> <li>key_w</li> <li>key_x</li> <li>key_y</li> <li>key_z</li> <li>capslock</li> <li>f1</li> <li>f2</li> <li>f3</li> <li>f4</li> <li>f5</li> <li>f6</li> <li>f7</li> <li>f8</li> <li>f9</li> <li>f10</li> <li>f11</li> <li>f12</li> <li>printscreen</li> <li>scrolllock</li> <li>pause</li> <li>insert</li> <li>home</li> <li>pageup</li> <li>delete</li> <li>end</li> <li>pagedown</li> <li>right</li> <li>left</li> <li>down</li> <li>up</li> <li>numlockclear</li> <li>kp_divide</li> <li>kp_multiply</li> <li>kp_minus</li> <li>kp_plus</li> <li>kp_enter</li> <li>kp_1</li> <li>kp_2</li> <li>kp_3</li> <li>kp_4</li> <li>kp_5</li> <li>kp_6</li> <li>kp_7</li> <li>kp_8</li> <li>kp_9</li> <li>kp_0</li> <li>kp_period</li> <li>application</li> <li>power</li> <li>kp_equals</li> <li>f13</li> <li>f14</li> <li>f15</li> <li>f16</li> <li>f17</li> <li>f18</li> <li>f19</li> <li>f20</li> <li>f21</li> <li>f22</li> <li>f23</li> <li>f24</li> <li>execute</li> <li>help</li> <li>menu</li> <li>select</li> <li>stop</li> <li>again</li> <li>undo</li> <li>cut</li> <li>copy</li> <li>paste</li> <li>find</li> <li>mute</li> <li>volumeup</li> <li>volumedown</li> <li>kp_comma</li> <li>kp_equalsas400</li> <li>alterase</li> <li>sysreq</li> <li>cancel</li> <li>clear</li> <li>prior</li> <li>return2</li> <li>separator</li> <li>out</li> <li>oper</li> <li>clearagain</li> <li>crsel</li> <li>exsel</li> <li>kp_00</li> <li>kp_000</li> <li>thousandsseparator</li> <li>decimalseparator</li> <li>currencyunit</li> <li>currencysubunit</li> <li>kp_leftparen</li> <li>kp_rightparen</li> <li>kp_leftbrace</li> <li>kp_rightbrace</li> <li>kp_tab</li> <li>kp_backspace</li> <li>kp_a</li> <li>kp_b</li> <li>kp_c</li> <li>kp_d</li> <li>kp_e</li> <li>kp_f</li> <li>kp_xor</li> <li>kp_power</li> <li>kp_percent</li> <li>kp_less</li> <li>kp_greater</li> <li>kp_ampersand</li> <li>kp_dblampersand</li> <li>kp_verticalbar</li> <li>kp_dblverticalbar</li> <li>kp_colon</li> <li>kp_hash</li> <li>kp_space</li> <li>kp_at</li> <li>kp_exclam</li> <li>kp_memstore</li> <li>kp_memrecall</li> <li>kp_memclear</li> <li>kp_memadd</li> <li>kp_memsubtract</li> <li>kp_memmultiply</li> <li>kp_memdivide</li> <li>kp_plusminus</li> <li>kp_clear</li> <li>kp_clearentry</li> <li>kp_binary</li> <li>kp_octal</li> <li>kp_decimal</li> <li>kp_hexadecimal</li> <li>lctrl</li> <li>lshift</li> <li>lalt</li> <li>lmeta</li> <li>rctrl</li> <li>rshift</li> <li>ralt</li> <li>rmeta</li> <li>mode</li> <li>audionext</li> <li>audioprev</li> <li>audiostop</li> <li>audioplay</li> <li>audiomute</li> <li>mediaselect</li> <li>www</li> <li>mail</li> <li>calculator</li> <li>computer</li> <li>ac_search</li> <li>ac_home</li> <li>ac_back</li> <li>ac_forward</li> <li>ac_stop</li> <li>ac_refresh</li> <li>ac_bookmarks</li> <li>brightnessdown</li> <li>brightnessup</li> <li>displayswitch</li> <li>kbdillumtoggle</li> <li>kbdillumdown</li> <li>kbdillumup</li> <li>eject</li> <li>sleep</li> <li>from_string(value: <code>Any</code>)</li> <li>name(value: <code>Any</code>)</li> <li>display_name(value: <code>Any</code>)</li> </ul> <p> Key.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.enter \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.escape \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.backspace \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.tab \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.space \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.exclaim \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.quotedbl \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.hash \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.percent \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.dollar \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.ampersand \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.quote \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.leftparen \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.rightparen \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.asterisk \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.plus \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.comma \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.minus \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.period \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.slash \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_0 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_1 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_5 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_6 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_7 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_8 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_9 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.colon \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.semicolon \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.less \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.equals \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.greater \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.question \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.at \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.leftbracket \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.backslash \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.rightbracket \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.caret \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.underscore \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.backquote \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_a \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_b \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_c \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_d \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_e \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_f \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_g \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_h \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_i \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_j \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_k \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_l \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_m \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_n \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_o \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_p \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_q \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_r \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_s \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_t \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_u \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_v \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_w \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_x \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_y \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.key_z \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.capslock \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f1 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f5 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f6 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f7 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f8 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f9 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f10 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f11 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f12 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.printscreen \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.scrolllock \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.pause \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.insert \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.home \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.pageup \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.delete \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.end \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.pagedown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.right \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.left \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.down \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.up \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.numlockclear \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_divide \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_multiply \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_minus \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_plus \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_enter \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_1 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_5 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_6 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_7 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_8 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_9 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_0 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_period \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.application \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.power \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_equals \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f13 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f14 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f15 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f16 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f17 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f18 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f19 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f20 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f21 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f22 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f23 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.f24 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.execute \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.help \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.menu \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.select \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.stop \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.again \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.undo \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.cut \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.copy \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.paste \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.find \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.mute \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.volumeup \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.volumedown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_comma \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_equalsas400 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.alterase \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.sysreq \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.cancel \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.clear \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.prior \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.return2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.separator \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.out \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.oper \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.clearagain \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.crsel \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.exsel \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_00 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_000 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.thousandsseparator \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.decimalseparator \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.currencyunit \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.currencysubunit \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_leftparen \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_rightparen \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_leftbrace \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_rightbrace \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_tab \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_backspace \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_a \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_b \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_c \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_d \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_e \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_f \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_xor \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_power \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_percent \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_less \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_greater \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_ampersand \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_dblampersand \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_verticalbar \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_dblverticalbar \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_colon \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_hash \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_space \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_at \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_exclam \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_memstore \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_memrecall \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_memclear \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_memadd \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_memsubtract \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_memmultiply \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_memdivide \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_plusminus \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_clear \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_clearentry \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_binary \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_octal \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_decimal \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kp_hexadecimal \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.lctrl \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.lshift \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.lalt \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.lmeta \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.rctrl \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.rshift \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.ralt \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.rmeta \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.mode \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.audionext \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.audioprev \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.audiostop \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.audioplay \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.audiomute \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.mediaselect \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.www \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.mail \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.calculator \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.computer \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.ac_search \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.ac_home \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.ac_back \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.ac_forward \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.ac_stop \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.ac_refresh \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.ac_bookmarks \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.brightnessdown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.brightnessup \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.displayswitch \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kbdillumtoggle \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kbdillumdown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.kbdillumup \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.eject \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.sleep \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Key.display_name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/input/#mod","title":"Mod","text":"<p><code>import \"luxe: input\" for Mod</code></p> <p>no docs found</p> <ul> <li>none</li> <li>lshift</li> <li>rshift</li> <li>lctrl</li> <li>rctrl</li> <li>lalt</li> <li>ralt</li> <li>lmeta</li> <li>rmeta</li> <li>num</li> <li>caps</li> <li>mode</li> <li>ctrl</li> <li>shift</li> <li>alt</li> <li>meta</li> </ul> <p> Mod.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.lshift \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.rshift \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.lctrl \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.rctrl \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.lalt \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.ralt \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.lmeta \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.rmeta \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.num \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.caps \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.mode \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.ctrl \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.shift \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.alt \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mod.meta \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/input/#modstate","title":"ModState","text":"<p><code>import \"luxe: input\" for ModState</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>new(value: <code>Num</code>)</li> <li>value=(v : Any)</li> <li>value</li> <li>none</li> <li>lshift</li> <li>rshift</li> <li>lctrl</li> <li>rctrl</li> <li>lalt</li> <li>ralt</li> <li>lmeta</li> <li>rmeta</li> <li>num</li> <li>caps</li> <li>mode</li> <li>ctrl</li> <li>shift</li> <li>alt</li> <li>meta</li> </ul> <p> ModState.new() \u00b6 returns <code>ModState</code></p> <p>no docs found   </p> <p> ModState.new(value: <code>Num</code>) \u00b6 returns <code>ModState</code></p> <p>no docs found   </p> <p> ModState.value=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.value \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.lshift \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.rshift \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.lctrl \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.rctrl \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.lalt \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.ralt \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.lmeta \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.rmeta \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.num \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.caps \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.mode \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.ctrl \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.shift \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.alt \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModState.meta \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/input/#mousebutton","title":"MouseButton","text":"<p><code>import \"luxe: input\" for MouseButton</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>left</li> <li>middle</li> <li>right</li> <li>four</li> <li>five</li> <li>six</li> <li>seven</li> <li>eight</li> <li>name(value: <code>Any</code>)</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> MouseButton.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MouseButton.left \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MouseButton.middle \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MouseButton.right \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MouseButton.four \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MouseButton.five \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MouseButton.six \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MouseButton.seven \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MouseButton.eight \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MouseButton.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MouseButton.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/input/#scan","title":"Scan","text":"<p><code>import \"luxe: input\" for Scan</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>scan_a</li> <li>scan_b</li> <li>scan_c</li> <li>scan_d</li> <li>scan_e</li> <li>scan_f</li> <li>scan_g</li> <li>scan_h</li> <li>scan_i</li> <li>scan_j</li> <li>scan_k</li> <li>scan_l</li> <li>scan_m</li> <li>scan_n</li> <li>scan_o</li> <li>scan_p</li> <li>scan_q</li> <li>scan_r</li> <li>scan_s</li> <li>scan_t</li> <li>scan_u</li> <li>scan_v</li> <li>scan_w</li> <li>scan_x</li> <li>scan_y</li> <li>scan_z</li> <li>scan_1</li> <li>scan_2</li> <li>scan_3</li> <li>scan_4</li> <li>scan_5</li> <li>scan_6</li> <li>scan_7</li> <li>scan_8</li> <li>scan_9</li> <li>scan_0</li> <li>enter</li> <li>escape</li> <li>backspace</li> <li>tab</li> <li>space</li> <li>minus</li> <li>equals</li> <li>leftbracket</li> <li>rightbracket</li> <li>backslash</li> <li>nonushash</li> <li>semicolon</li> <li>apostrophe</li> <li>grave</li> <li>comma</li> <li>period</li> <li>slash</li> <li>capslock</li> <li>f1</li> <li>f2</li> <li>f3</li> <li>f4</li> <li>f5</li> <li>f6</li> <li>f7</li> <li>f8</li> <li>f9</li> <li>f10</li> <li>f11</li> <li>f12</li> <li>printscreen</li> <li>scrolllock</li> <li>pause</li> <li>insert</li> <li>home</li> <li>pageup</li> <li>delete</li> <li>end</li> <li>pagedown</li> <li>right</li> <li>left</li> <li>down</li> <li>up</li> <li>numlockclear</li> <li>kp_divide</li> <li>kp_multiply</li> <li>kp_minus</li> <li>kp_plus</li> <li>kp_enter</li> <li>kp_1</li> <li>kp_2</li> <li>kp_3</li> <li>kp_4</li> <li>kp_5</li> <li>kp_6</li> <li>kp_7</li> <li>kp_8</li> <li>kp_9</li> <li>kp_0</li> <li>kp_period</li> <li>nonusbackslash</li> <li>application</li> <li>power</li> <li>kp_equals</li> <li>f13</li> <li>f14</li> <li>f15</li> <li>f16</li> <li>f17</li> <li>f18</li> <li>f19</li> <li>f20</li> <li>f21</li> <li>f22</li> <li>f23</li> <li>f24</li> <li>execute</li> <li>help</li> <li>menu</li> <li>select</li> <li>stop</li> <li>again</li> <li>undo</li> <li>cut</li> <li>copy</li> <li>paste</li> <li>find</li> <li>mute</li> <li>volumeup</li> <li>volumedown</li> <li>kp_comma</li> <li>kp_equalsas400</li> <li>international1</li> <li>international2</li> <li>international3</li> <li>international4</li> <li>international5</li> <li>international6</li> <li>international7</li> <li>international8</li> <li>international9</li> <li>lang1</li> <li>lang2</li> <li>lang3</li> <li>lang4</li> <li>lang5</li> <li>lang6</li> <li>lang7</li> <li>lang8</li> <li>lang9</li> <li>alterase</li> <li>sysreq</li> <li>cancel</li> <li>clear</li> <li>prior</li> <li>return2</li> <li>separator</li> <li>out</li> <li>oper</li> <li>clearagain</li> <li>crsel</li> <li>exsel</li> <li>kp_00</li> <li>kp_000</li> <li>thousandsseparator</li> <li>decimalseparator</li> <li>currencyunit</li> <li>currencysubunit</li> <li>kp_leftparen</li> <li>kp_rightparen</li> <li>kp_leftbrace</li> <li>kp_rightbrace</li> <li>kp_tab</li> <li>kp_backspace</li> <li>kp_a</li> <li>kp_b</li> <li>kp_c</li> <li>kp_d</li> <li>kp_e</li> <li>kp_f</li> <li>kp_xor</li> <li>kp_power</li> <li>kp_percent</li> <li>kp_less</li> <li>kp_greater</li> <li>kp_ampersand</li> <li>kp_dblampersand</li> <li>kp_verticalbar</li> <li>kp_dblverticalbar</li> <li>kp_colon</li> <li>kp_hash</li> <li>kp_space</li> <li>kp_at</li> <li>kp_exclam</li> <li>kp_memstore</li> <li>kp_memrecall</li> <li>kp_memclear</li> <li>kp_memadd</li> <li>kp_memsubtract</li> <li>kp_memmultiply</li> <li>kp_memdivide</li> <li>kp_plusminus</li> <li>kp_clear</li> <li>kp_clearentry</li> <li>kp_binary</li> <li>kp_octal</li> <li>kp_decimal</li> <li>kp_hexadecimal</li> <li>lctrl</li> <li>lshift</li> <li>lalt</li> <li>lmeta</li> <li>rctrl</li> <li>rshift</li> <li>ralt</li> <li>rmeta</li> <li>mode</li> <li>audionext</li> <li>audioprev</li> <li>audiostop</li> <li>audioplay</li> <li>audiomute</li> <li>mediaselect</li> <li>www</li> <li>mail</li> <li>calculator</li> <li>computer</li> <li>ac_search</li> <li>ac_home</li> <li>ac_back</li> <li>ac_forward</li> <li>ac_stop</li> <li>ac_refresh</li> <li>ac_bookmarks</li> <li>brightnessdown</li> <li>brightnessup</li> <li>displayswitch</li> <li>kbdillumtoggle</li> <li>kbdillumdown</li> <li>kbdillumup</li> <li>eject</li> <li>sleep</li> <li>app1</li> <li>app2</li> <li>MAX</li> </ul> <p> Scan.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_a \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_b \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_c \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_d \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_e \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_f \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_g \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_h \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_i \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_j \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_k \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_l \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_m \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_n \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_o \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_p \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_q \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_r \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_s \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_t \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_u \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_v \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_w \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_x \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_y \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_z \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_1 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_5 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_6 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_7 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_8 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_9 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scan_0 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.enter \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.escape \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.backspace \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.tab \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.space \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.minus \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.equals \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.leftbracket \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.rightbracket \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.backslash \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.nonushash \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.semicolon \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.apostrophe \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.grave \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.comma \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.period \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.slash \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.capslock \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f1 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f5 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f6 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f7 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f8 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f9 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f10 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f11 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f12 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.printscreen \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.scrolllock \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.pause \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.insert \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.home \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.pageup \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.delete \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.end \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.pagedown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.right \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.left \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.down \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.up \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.numlockclear \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_divide \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_multiply \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_minus \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_plus \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_enter \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_1 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_5 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_6 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_7 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_8 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_9 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_0 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_period \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.nonusbackslash \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.application \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.power \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_equals \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f13 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f14 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f15 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f16 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f17 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f18 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f19 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f20 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f21 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f22 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f23 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.f24 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.execute \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.help \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.menu \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.select \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.stop \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.again \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.undo \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.cut \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.copy \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.paste \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.find \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.mute \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.volumeup \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.volumedown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_comma \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_equalsas400 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.international1 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.international2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.international3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.international4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.international5 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.international6 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.international7 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.international8 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.international9 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lang1 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lang2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lang3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lang4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lang5 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lang6 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lang7 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lang8 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lang9 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.alterase \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.sysreq \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.cancel \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.clear \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.prior \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.return2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.separator \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.out \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.oper \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.clearagain \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.crsel \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.exsel \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_00 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_000 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.thousandsseparator \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.decimalseparator \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.currencyunit \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.currencysubunit \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_leftparen \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_rightparen \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_leftbrace \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_rightbrace \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_tab \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_backspace \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_a \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_b \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_c \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_d \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_e \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_f \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_xor \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_power \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_percent \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_less \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_greater \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_ampersand \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_dblampersand \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_verticalbar \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_dblverticalbar \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_colon \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_hash \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_space \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_at \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_exclam \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_memstore \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_memrecall \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_memclear \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_memadd \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_memsubtract \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_memmultiply \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_memdivide \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_plusminus \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_clear \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_clearentry \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_binary \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_octal \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_decimal \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kp_hexadecimal \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lctrl \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lshift \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lalt \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.lmeta \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.rctrl \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.rshift \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.ralt \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.rmeta \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.mode \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.audionext \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.audioprev \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.audiostop \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.audioplay \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.audiomute \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.mediaselect \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.www \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.mail \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.calculator \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.computer \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.ac_search \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.ac_home \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.ac_back \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.ac_forward \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.ac_stop \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.ac_refresh \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.ac_bookmarks \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.brightnessdown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.brightnessup \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.displayswitch \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kbdillumtoggle \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kbdillumdown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.kbdillumup \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.eject \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.sleep \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.app1 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.app2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scan.MAX \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/input/#systemcursor","title":"SystemCursor","text":"<p><code>import \"luxe: input\" for SystemCursor</code></p> <p>no docs found</p> <ul> <li>invalid</li> <li>default</li> <li>hand</li> <li>no</li> <li>typing</li> <li>wait</li> <li>wait_arrow</li> <li>crosshair</li> <li>move</li> <li>resize_bottom_right</li> <li>resize_bottom_left</li> <li>resize_horizontal</li> <li>resize_vertical</li> <li>name(value: <code>SystemCursor</code>)</li> </ul> <p> SystemCursor.invalid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.default \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.hand \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.no \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.typing \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.wait \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.wait_arrow \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.crosshair \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.move \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.resize_bottom_right \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.resize_bottom_left \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.resize_horizontal \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.resize_vertical \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SystemCursor.name(value: <code>SystemCursor</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/input/#textevent","title":"TextEvent","text":"<p><code>import \"luxe: input\" for TextEvent</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>edit</li> <li>input</li> <li>name(value: <code>Any</code>)</li> </ul> <p> TextEvent.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextEvent.edit \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextEvent.input \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextEvent.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/io/","title":"Io","text":""},{"location":"api/v/next/io/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/io/#luxe-io-module","title":"<code>luxe: io</code> module","text":"<ul> <li>DirNode </li> <li>Flags </li> <li>PlotType </li> <li>ProcFlags </li> </ul>"},{"location":"api/v/next/io/#dirnode","title":"DirNode","text":"<p><code>import \"luxe: io\" for DirNode</code></p> <p>no docs found</p> <ul> <li>path</li> <li>name</li> <li>ext</li> <li>is_regular</li> <li>is_directory</li> <li>new(in_path: <code>Any</code>, in_name: <code>Any</code>, in_ext: <code>Any</code>, in_is_regular: <code>Any</code>, in_is_directory: <code>Any</code>)</li> </ul> <p> DirNode.path \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> DirNode.name \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> DirNode.ext \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> DirNode.is_regular \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> DirNode.is_directory \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> DirNode.new(in_path: <code>Any</code>, in_name: <code>Any</code>, in_ext: <code>Any</code>, in_is_regular: <code>Any</code>, in_is_directory: <code>Any</code>) \u00b6 returns <code>DirNode</code></p> <p>no docs found   </p>"},{"location":"api/v/next/io/#flags","title":"Flags","text":"<p><code>import \"luxe: io\" for Flags</code></p> <p>no docs found</p> <ul> <li>new(args: <code>Any</code>)</li> <li>all()</li> <li>has(flag: <code>Any</code>)</li> <li>value(flag: <code>Any</code>)</li> <li>value(flag: <code>Any</code>, require: <code>Any</code>)</li> <li>values(flag: <code>Any</code>)</li> <li>values(flag: <code>Any</code>, require: <code>Any</code>)</li> </ul> <p> Flags.new(args: <code>Any</code>) \u00b6 returns <code>Flags</code></p> <p>no docs found   </p> <p> Flags.all() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Flags.has(flag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Flags.value(flag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Flags.value(flag: <code>Any</code>, require: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Flags.values(flag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Flags.values(flag: <code>Any</code>, require: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/io/#plottype","title":"PlotType","text":"<p><code>import \"luxe: io\" for PlotType</code></p> <p>no docs found</p> <ul> <li>normal</li> <li>counter</li> </ul> <p> PlotType.normal \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PlotType.counter \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/io/#procflags","title":"ProcFlags","text":"<p><code>import \"luxe: io\" for ProcFlags</code></p> <p>no docs found</p> <ul> <li>none</li> <li>setuid</li> <li>setgid</li> <li>windows_verbatim_arguments</li> <li>detached</li> <li>windows_hide</li> <li>windows_hide_console</li> <li>windows_hide_gui</li> </ul> <p> ProcFlags.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ProcFlags.setuid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ProcFlags.setgid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ProcFlags.windows_verbatim_arguments \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ProcFlags.detached \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ProcFlags.windows_hide \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ProcFlags.windows_hide_console \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ProcFlags.windows_hide_gui \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/lx/","title":"Lx","text":""},{"location":"api/v/next/lx/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/lx/#luxe-lx-module","title":"<code>luxe: lx</code> module","text":"<ul> <li>LX </li> <li>LXMerge </li> </ul>"},{"location":"api/v/next/lx/#lx","title":"LX","text":"<p><code>import \"luxe: lx\" for LX</code></p> <p>no docs found</p> <ul> <li>parse_bytes(source_name: <code>Any</code>, bytes: <code>Any</code>)</li> <li>read(path: <code>Any</code>)</li> <li>read(source_id: <code>Any</code>, path: <code>Any</code>)</li> <li>parse(data: <code>Any</code>)</li> <li>parse(source_path: <code>Any</code>, data: <code>Any</code>)</li> <li>apply(from: <code>Any</code>, to: <code>Any</code>)</li> <li>clone(lx: <code>Any</code>)</li> <li>equal(lxA: <code>Any</code>, lxB: <code>Any</code>)</li> <li>delta(lxA: <code>Any</code>, lxB: <code>Any</code>)</li> <li>delta_apply(lx: <code>Any</code>, delta: <code>Any</code>)</li> <li>delta_unapply(lx: <code>Any</code>, delta: <code>Any</code>)</li> <li>key_get(lx: <code>Any</code>, key: <code>Any</code>)</li> <li>key_get_via_list(lx: <code>Any</code>, key: <code>Any</code>)</li> <li>key_remove(lx: <code>Any</code>, key: <code>Any</code>)</li> <li>key_remove_via_list(lx: <code>Any</code>, key: <code>Any</code>)</li> <li>key_set(lx: <code>Any</code>, key: <code>Any</code>, value: <code>Any</code>)</li> <li>key_set_via_list(lx: <code>Any</code>, key: <code>Any</code>, value: <code>Any</code>)</li> <li>stringify(root: <code>Any</code>)</li> <li>stringify(root: <code>Any</code>, spaces: <code>Any</code>)</li> <li>stringify(root: <code>Any</code>, spaces: <code>Any</code>, with_root: <code>Any</code>)</li> <li>stringify_to_bytes(root: <code>Any</code>, max_size: <code>Any</code>, spaces: <code>Any</code>, with_root: <code>Any</code>)</li> <li>write(contents: <code>Any</code>, path: <code>Any</code>)</li> <li>write(contents: <code>Any</code>, path: <code>Any</code>, spaces: <code>Any</code>)</li> <li>write(contents: <code>Any</code>, path: <code>Any</code>, spaces: <code>Any</code>, with_root: <code>Any</code>)</li> <li>stringify_to_file(root: <code>Any</code>, path: <code>Any</code>)</li> <li>stringify_to_file(root: <code>Any</code>, path: <code>Any</code>, spaces: <code>Any</code>, with_root: <code>Any</code>)</li> <li>flatten(lx: <code>Any</code>)</li> <li>flatten(lx: <code>Any</code>, delimiter: <code>Any</code>)</li> </ul> <p> LX.parse_bytes(source_name: <code>Any</code>, bytes: <code>Any</code>) \u00b6 returns <code>Result</code></p> <p>no docs found   </p> <p> LX.read(path: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.read(source_id: <code>Any</code>, path: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.parse(data: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.parse(source_path: <code>Any</code>, data: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.apply(from: <code>Any</code>, to: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.clone(lx: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.equal(lxA: <code>Any</code>, lxB: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.delta(lxA: <code>Any</code>, lxB: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.delta_apply(lx: <code>Any</code>, delta: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.delta_unapply(lx: <code>Any</code>, delta: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.key_get(lx: <code>Any</code>, key: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.key_get_via_list(lx: <code>Any</code>, key: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.key_remove(lx: <code>Any</code>, key: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.key_remove_via_list(lx: <code>Any</code>, key: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.key_set(lx: <code>Any</code>, key: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.key_set_via_list(lx: <code>Any</code>, key: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.stringify(root: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.stringify(root: <code>Any</code>, spaces: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.stringify(root: <code>Any</code>, spaces: <code>Any</code>, with_root: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.stringify_to_bytes(root: <code>Any</code>, max_size: <code>Any</code>, spaces: <code>Any</code>, with_root: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.write(contents: <code>Any</code>, path: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.write(contents: <code>Any</code>, path: <code>Any</code>, spaces: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.write(contents: <code>Any</code>, path: <code>Any</code>, spaces: <code>Any</code>, with_root: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.stringify_to_file(root: <code>Any</code>, path: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.stringify_to_file(root: <code>Any</code>, path: <code>Any</code>, spaces: <code>Any</code>, with_root: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.flatten(lx: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LX.flatten(lx: <code>Any</code>, delimiter: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/lx/#lxmerge","title":"LXMerge","text":"<p><code>import \"luxe: lx\" for LXMerge</code></p> <p>no docs found</p> <ul> <li>merge_map(from_map: <code>Map</code>, to_map: <code>Map</code>)</li> <li>merge_list(from_list: <code>List</code>, to_list: <code>List</code>)</li> <li>merge(from: <code>Any</code>, to: <code>Any</code>)</li> </ul> <p> LXMerge.merge_map(from_map: <code>Map</code>, to_map: <code>Map</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LXMerge.merge_list(from_list: <code>List</code>, to_list: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LXMerge.merge(from: <code>Any</code>, to: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/mat4/","title":"Mat4","text":""},{"location":"api/v/next/mat4/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/mat4/#luxe-mat4-module","title":"<code>luxe: mat4</code> module","text":"<ul> <li>Matrix </li> </ul>"},{"location":"api/v/next/mat4/#matrix","title":"Matrix","text":"<p><code>import \"luxe: mat4\" for Matrix</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>m</li> <li>ortho(left: <code>Any</code>, right: <code>Any</code>, top: <code>Any</code>, bottom: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>)</li> <li>make_angle_axis(axis: <code>Any</code>, theta: <code>Any</code>)</li> <li>apply_to_float3(vec: <code>Float3</code>)</li> <li>set(n11: <code>Any</code>, n12: <code>Any</code>, n13: <code>Any</code>, n14: <code>Any</code>, n21: <code>Any</code>, n22: <code>Any</code>, n23: <code>Any</code>, n24: <code>Any</code>, n31: <code>Any</code>, n32: <code>Any</code>, n33: <code>Any</code>, n34: <code>Any</code>, n41: <code>Any</code>, n42: <code>Any</code>, n43: <code>Any</code>, n44: <code>Any</code>)</li> <li>pos_x</li> <li>pos_y</li> <li>pos_z</li> <li>pos_x=(v : Any)</li> <li>pos_y=(v : Any)</li> <li>pos_z=(v : Any)</li> <li>pos</li> <li>pos=(v : Any)</li> <li>scale_x</li> <li>scale_y</li> <li>scale_z</li> </ul> <p> Matrix.new() \u00b6 returns <code>Matrix</code></p> <p>no docs found   </p> <p> Matrix.m \u00b6 returns <code>Floats</code></p> <p>no docs found   </p> <p> Matrix.ortho(left: <code>Any</code>, right: <code>Any</code>, top: <code>Any</code>, bottom: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.make_angle_axis(axis: <code>Any</code>, theta: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.apply_to_float3(vec: <code>Float3</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.set(n11: <code>Any</code>, n12: <code>Any</code>, n13: <code>Any</code>, n14: <code>Any</code>, n21: <code>Any</code>, n22: <code>Any</code>, n23: <code>Any</code>, n24: <code>Any</code>, n31: <code>Any</code>, n32: <code>Any</code>, n33: <code>Any</code>, n34: <code>Any</code>, n41: <code>Any</code>, n42: <code>Any</code>, n43: <code>Any</code>, n44: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.pos_x \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.pos_y \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.pos_z \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.pos_x=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.pos_y=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.pos_z=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.pos \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.pos=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.scale_x \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.scale_y \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Matrix.scale_z \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/math/","title":"Math","text":""},{"location":"api/v/next/math/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/math/#luxe-math-module","title":"<code>luxe: math</code> module","text":"<ul> <li>Math </li> </ul>"},{"location":"api/v/next/math/#math","title":"Math","text":"<p><code>import \"luxe: math\" for Math</code></p> <p>Utility class with static math functions.</p> <ul> <li>add(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>add2D(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>add_to(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>add2D_to(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>sub(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>sub2D(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>sub_to(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>sub2D_to(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>mults(a: <code>Vec</code>, b: <code>Num</code>)</li> <li>mult(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>mult2D(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>mult_to(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>mults_to(a: <code>Vec</code>, b: <code>Num</code>)</li> <li>mult2D_to(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>scale(a: <code>Vec</code>, s: <code>Num</code>)</li> <li>scale2D(a: <code>Vec</code>, s: <code>Num</code>)</li> <li>scale_to(a: <code>Vec</code>, s: <code>Num</code>)</li> <li>scale2D_to(a: <code>Vec</code>, s: <code>Num</code>)</li> <li>divide(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>divide_to(vec: <code>Vec</code>, other: <code>Vec</code>)</li> <li>div(a: <code>Vec</code>, s: <code>Num</code>)</li> <li>div2D(a: <code>Vec</code>, s: <code>Num</code>)</li> <li>div_to(a: <code>Vec</code>, s: <code>Num</code>)</li> <li>div2D_to(a: <code>Vec</code>, s: <code>Num</code>)</li> <li>equal(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>length(x: <code>Num</code>, y: <code>Num</code>)</li> <li>length(x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>length(vec: <code>Vec</code>)</li> <li>length2D(vec: <code>Vec</code>)</li> <li>length_sq(x: <code>Num</code>, y: <code>Num</code>)</li> <li>length_sq(x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>length_sq(vec: <code>Vec</code>)</li> <li>length_sq2D(vec: <code>Vec</code>)</li> <li>dot(x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, other_x: <code>Num</code>, other_y: <code>Num</code>, other_z: <code>Num</code>)</li> <li>dot(x: <code>Num</code>, y: <code>Num</code>, other_x: <code>Num</code>, other_y: <code>Num</code>)</li> <li>dot(vec: <code>Vec</code>, other: <code>Vec</code>)</li> <li>dot2D(vec: <code>Vec</code>, other: <code>Vec</code>)</li> <li>cross(a: <code>Vec</code>, b: <code>Vec</code>)</li> <li>angle(from: <code>Vec</code>, to: <code>Vec</code>)</li> <li>angle(v1: <code>Vec</code>, v2: <code>Vec</code>, up: <code>Vec</code>)</li> <li>angle2D(from: <code>Vec</code>, to: <code>Vec</code>)</li> <li>angle2D(from_x: <code>Num</code>, from_y: <code>Num</code>, to_x: <code>Num</code>, to_y: <code>Num</code>)</li> <li>normalize2D(vec: <code>Vec</code>)</li> <li>normalized(vec: <code>Vec</code>)</li> <li>normalized2D(vec: <code>Vec</code>)</li> <li>normalize(vec: <code>Vec</code>)</li> <li>dist(x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, other_x: <code>Num</code>, other_y: <code>Num</code>, other_z: <code>Num</code>)</li> <li>dist(vec: <code>Vec</code>, other: <code>Vec</code>)</li> <li>dist2D(vec: <code>Vec</code>, other: <code>Vec</code>)</li> <li>dist2D(x: <code>Num</code>, y: <code>Num</code>, other_x: <code>Num</code>, other_y: <code>Num</code>)</li> <li>dir2D(pos: <code>Vec</code>, target: <code>Vec</code>)</li> <li>dir(pos: <code>Vec</code>, target: <code>Vec</code>)</li> <li>rotate(vec: <code>Vec</code>, axis: <code>Vec</code>, angle: <code>Num</code>)</li> <li>rotate_by_quat(vec: <code>Vec</code>, quat: <code>Float4</code>)</li> <li>quat_from_euler(vec: <code>Vec</code>)</li> <li>rotate(vec: <code>Vec</code>, ox: <code>Num</code>, oy: <code>Num</code>, angle: <code>Num</code>)</li> <li>ray_intersect_plane(plane_x: <code>Num</code>, plane_y: <code>Num</code>, plane_z: <code>Num</code>, normal_x: <code>Num</code>, normal_y: <code>Num</code>, normal_z: <code>Num</code>, ray_x: <code>Num</code>, ray_y: <code>Num</code>, ray_z: <code>Num</code>, ray_dir_x: <code>Num</code>, ray_dir_y: <code>Num</code>, ray_dir_z: <code>Num</code>)</li> <li>closest_point_on_plane(plane_x: <code>Num</code>, plane_y: <code>Num</code>, plane_z: <code>Num</code>, normal_x: <code>Num</code>, normal_y: <code>Num</code>, normal_z: <code>Num</code>, point_x: <code>Num</code>, point_y: <code>Num</code>, point_z: <code>Num</code>)</li> <li>closest_point_on_line(line_x: <code>Num</code>, line_y: <code>Num</code>, line_z: <code>Num</code>, line_end_x: <code>Num</code>, line_end_y: <code>Num</code>, line_end_z: <code>Num</code>, point_x: <code>Num</code>, point_y: <code>Num</code>, point_z: <code>Num</code>)</li> <li>closest_point_on_line(line: <code>Vec</code>, line_end: <code>Vec</code>, point: <code>Vec</code>)</li> <li>in_rect(x: <code>Num</code>, y: <code>Num</code>, rx: <code>Num</code>, ry: <code>Num</code>, rw: <code>Num</code>, rh: <code>Num</code>)</li> <li>wrap(value: <code>Num</code>, modulus: <code>Num</code>)</li> <li>overlaps(x0: <code>Num</code>, y0: <code>Num</code>, w0: <code>Num</code>, h0: <code>Num</code>, x1: <code>Num</code>, y1: <code>Num</code>, w1: <code>Num</code>, h1: <code>Num</code>)</li> <li>sign(x: <code>Num</code>)</li> <li>sign0(x: <code>Num</code>)</li> <li>atan2(y: <code>Num</code>, x: <code>Num</code>)</li> <li>degrees(radians: <code>Num</code>)</li> <li>radians(degrees: <code>Num</code>)</li> <li>clamp(value: <code>Num</code>, a: <code>Num</code>, b: <code>Num</code>)</li> <li>min(a: <code>Num</code>, b: <code>Num</code>)</li> <li>max(a: <code>Num</code>, b: <code>Num</code>)</li> <li>floor_around_zero(a: <code>Num</code>)</li> <li>ceil_around_zero(a: <code>Num</code>)</li> <li>fixed(value: <code>Num</code>)</li> <li>fixed(value: <code>Num</code>, precision: <code>Num</code>)</li> <li>angle_delta(from: <code>Num</code>, to: <code>Num</code>)</li> <li>lerp2D(a: <code>Vec</code>, b: <code>Vec</code>, t: <code>Num</code>)</li> <li>lerp3D(a: <code>Vec</code>, b: <code>Vec</code>, t: <code>Num</code>)</li> <li>smooth_t(t: <code>Num</code>, smoothness: <code>Num</code>)</li> <li>smoother_t(t: <code>Num</code>, smoothness: <code>Num</code>)</li> <li>lerp(a: <code>Num</code>, b: <code>Num</code>, t: <code>Num</code>)</li> <li>lerp_angle(a: <code>Num</code>, b: <code>Num</code>, t: <code>Num</code>)</li> <li>weighted_avg(value: <code>Num</code>, target: <code>Num</code>, slowness: <code>Num</code>)</li> <li>within_range(value: <code>Num</code>, start_range: <code>Num</code>, end_range: <code>Num</code>)</li> <li>approx(one: <code>Num</code>, other: <code>Num</code>)</li> <li>approx(one: <code>Num</code>, other: <code>Num</code>, epsilon: <code>Num</code>)</li> <li>wrap_angle(degrees: <code>Num</code>)</li> <li>wrap_angle(degrees: <code>Num</code>, lower: <code>Num</code>, upper: <code>Num</code>)</li> <li>wrap_radians(radians: <code>Num</code>, lower: <code>Num</code>, upper: <code>Num</code>)</li> <li>nearest_power_of_two(value: <code>Num</code>)</li> <li>map_linear(value: <code>Num</code>, a1: <code>Num</code>, a2: <code>Num</code>, b1: <code>Num</code>, b2: <code>Num</code>)</li> <li>smoothstep(x: <code>Num</code>, min: <code>Num</code>, max: <code>Num</code>)</li> <li>smootherstep(x: <code>Num</code>, min: <code>Num</code>, max: <code>Num</code>)</li> <li>smoothstepx(x: <code>Num</code>, round: <code>Num</code>, steep: <code>Num</code>)</li> <li>random_point_in_unit_circle(rng: <code>Random</code>)</li> <li>slerp(a: <code>Quat</code>, b: <code>Quat</code>, t: <code>Num</code>)</li> </ul> <p> Math.add(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Add two 3D vectors together componentwise, returning the result   </p> <p> Math.add2D(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Add two vector2s together componentwise, returning the result   </p> <p> Math.add_to(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Add two 3D vectors together componentwise, updating the first vector   </p> <p> Math.add2D_to(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Add two 2D vectors together componentwise, updating the first vector   </p> <p> Math.sub(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Subtract two 3D vectors together componentwise, returning the result   </p> <p> Math.sub2D(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Subtract two 2D vectors together componentwise, returning the result   </p> <p> Math.sub_to(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Subtract two 3D vectors together componentwise, updating the first vector   </p> <p> Math.sub2D_to(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Subtract two 2D vectors together componentwise, updating the first vector   </p> <p> Math.mults(a: <code>Vec</code>, b: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Multiply a 3D vector by a scalar, returning the result   </p> <p> Math.mult(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Multiply two 3D vectors together componentwise, returning the result   </p> <p> Math.mult2D(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Multiply two 2D vectors together componentwise, returning the result   </p> <p> Math.mult_to(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Multiply two 3D vectors together componentwise, updating the first vector   </p> <p> Math.mults_to(a: <code>Vec</code>, b: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Multiply a 3D vector by a scalar, updating the vector   </p> <p> Math.mult2D_to(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Multiply two 2D vectors together componentwise, updating the first vector   </p> <p> Math.scale(a: <code>Vec</code>, s: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Multiply a 3D vector by a scalar, returning the result   </p> <p> Math.scale2D(a: <code>Vec</code>, s: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Multiply a 2D vector by a scalar, returning the result   </p> <p> Math.scale_to(a: <code>Vec</code>, s: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Multiply a 3D vector by a scalar, updating the vector   </p> <p> Math.scale2D_to(a: <code>Vec</code>, s: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Multiply a 2D vector by a scalar, updating the vector   </p> <p> Math.divide(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Divide a 3D vector by another, returning the result   </p> <p> Math.divide_to(vec: <code>Vec</code>, other: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Divide a 3D vector by another, updating the vector   </p> <p> Math.div(a: <code>Vec</code>, s: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Divide a 3D vector by a scalar, returning the result   </p> <p> Math.div2D(a: <code>Vec</code>, s: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Divide a 2D vector by a scalar, returning the result   </p> <p> Math.div_to(a: <code>Vec</code>, s: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Divide a 3D vector by a scalar, updating the vector   </p> <p> Math.div2D_to(a: <code>Vec</code>, s: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Divide a 2D vector by a scalar, updating the vector   </p> <p> Math.equal(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>Bool</code></p> <p>Checks if two vectors are equal. Vectors of different dimensions (e.g. 2D and 3D) are considered unequal   </p> <p> Math.length(x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Length of a 2d vector.   </p> <p> Math.length(x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Length of a 3d vector.   </p> <p> Math.length(vec: <code>Vec</code>) \u00b6 returns <code>Num</code></p> <p>Length of a 3d vector.   </p> <p> Math.length2D(vec: <code>Vec</code>) \u00b6 returns <code>Num</code></p> <p>Length of a 2d vector.   </p> <p> Math.length_sq(x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Squared length of a 2d vector (slightly cheaper than length).   </p> <p> Math.length_sq(x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Squared length of a 3d vector (slightly cheaper than length).   </p> <p> Math.length_sq(vec: <code>Vec</code>) \u00b6 returns <code>Num</code></p> <p>Squared length of a 3d vector.   </p> <p> Math.length_sq2D(vec: <code>Vec</code>) \u00b6 returns <code>Num</code></p> <p>Squared length of a 2d vector.   </p> <p> Math.dot(x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, other_x: <code>Num</code>, other_y: <code>Num</code>, other_z: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Dot product (or scalar product) of two 3d vectors.   </p> <p> Math.dot(x: <code>Num</code>, y: <code>Num</code>, other_x: <code>Num</code>, other_y: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Dot product (or scalar product) of two 2d vectors.   </p> <p> Math.dot(vec: <code>Vec</code>, other: <code>Vec</code>) \u00b6 returns <code>Num</code></p> <p>Dot product (or scalar product) of two 3d vectors.   </p> <p> Math.dot2D(vec: <code>Vec</code>, other: <code>Vec</code>) \u00b6 returns <code>Num</code></p> <p>Dot product (or scalar product) of two 2d vectors.   </p> <p> Math.cross(a: <code>Vec</code>, b: <code>Vec</code>) \u00b6 returns <code>Vec</code></p> <p>Cross product of two 3d vectors.  Result will always be orthogonal to both input vectors (and [0, 0, 0] if the arguments are parallel)   </p> <p> Math.angle(from: <code>Vec</code>, to: <code>Vec</code>) \u00b6 returns <code>Num</code></p> <p>Unsigned angle between two 3d vectors.   </p> <p> Math.angle(v1: <code>Vec</code>, v2: <code>Vec</code>, up: <code>Vec</code>) \u00b6 returns <code>Num</code></p> <p>Signed angle between two 3d vectors.   </p> <p> Math.angle2D(from: <code>Vec</code>, to: <code>Vec</code>) \u00b6 returns <code>Num</code></p> <p>Signed angle between two 2d vectors.   </p> <p> Math.angle2D(from_x: <code>Num</code>, from_y: <code>Num</code>, to_x: <code>Num</code>, to_y: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Signed angle between two 2d vectors.   </p> <p> Math.normalize2D(vec: <code>Vec</code>) \u00b6 returns <code>None</code></p> <p>Normalize 2d vector. Changes input vector and doesnt return anything. 0 length vectors remain untouched.   </p> <p> Math.normalized(vec: <code>Vec</code>) \u00b6 returns <code>None</code></p> <p>Normalize 3d vector. Returns the result.   </p> <p> Math.normalized2D(vec: <code>Vec</code>) \u00b6 returns <code>None</code></p> <p>Normalize 2d vector. Returns the result.   </p> <p> Math.normalize(vec: <code>Vec</code>) \u00b6 returns <code>None</code></p> <p>Normalize 3d vector. Changes input vector and doesnt return anything. 0 length vectors remain untouched.   </p> <p> Math.dist(x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, other_x: <code>Num</code>, other_y: <code>Num</code>, other_z: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Distance between two 3d vectors.   </p> <p> Math.dist(vec: <code>Vec</code>, other: <code>Vec</code>) \u00b6 returns <code>Num</code></p> <p>Distance between two 3d vectors.   </p> <p> Math.dist2D(vec: <code>Vec</code>, other: <code>Vec</code>) \u00b6 returns <code>Num</code></p> <p>Distance between two 2d vectors.   </p> <p> Math.dist2D(x: <code>Num</code>, y: <code>Num</code>, other_x: <code>Num</code>, other_y: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Distance between two 2d vectors.   </p> <p> Math.dir2D(pos: <code>Vec</code>, target: <code>Vec</code>) \u00b6 returns <code>Vec</code></p> <p>Directional vector (length 1 unless the arguments are the same) between two 2d vectors.   </p> <p> Math.dir(pos: <code>Vec</code>, target: <code>Vec</code>) \u00b6 returns <code>Vec</code></p> <p>Directional vector (length 1 unless the arguments are the same) between two 3d vectors.   </p> <p> Math.rotate(vec: <code>Vec</code>, axis: <code>Vec</code>, angle: <code>Num</code>) \u00b6 returns <code>Vec</code></p> <p>Rotate a 3d vector around the given axis by angle degrees   </p> <p> Math.rotate_by_quat(vec: <code>Vec</code>, quat: <code>Float4</code>) \u00b6 returns <code>Vec</code></p> <p>Rotate a 3d vector using the given quaternion   </p> <p> Math.quat_from_euler(vec: <code>Vec</code>) \u00b6 returns <code>Float4</code></p> <p>Create a quaternion from float3 euler (radians)   </p> <p> Math.rotate(vec: <code>Vec</code>, ox: <code>Num</code>, oy: <code>Num</code>, angle: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Rotate 2d vector around another 2d vector. This rotates the input vector and doesnt return anything.   </p> <p> Math.ray_intersect_plane(plane_x: <code>Num</code>, plane_y: <code>Num</code>, plane_z: <code>Num</code>, normal_x: <code>Num</code>, normal_y: <code>Num</code>, normal_z: <code>Num</code>, ray_x: <code>Num</code>, ray_y: <code>Num</code>, ray_z: <code>Num</code>, ray_dir_x: <code>Num</code>, ray_dir_y: <code>Num</code>, ray_dir_z: <code>Num</code>) \u00b6 returns <code>Vec</code></p> <p>Intersection point between an infinitely long ray and a infinitely big plane. Returns <code>null</code> if parallel.   </p> <p> Math.closest_point_on_plane(plane_x: <code>Num</code>, plane_y: <code>Num</code>, plane_z: <code>Num</code>, normal_x: <code>Num</code>, normal_y: <code>Num</code>, normal_z: <code>Num</code>, point_x: <code>Num</code>, point_y: <code>Num</code>, point_z: <code>Num</code>) \u00b6 returns <code>Vec</code></p> <p>Closest point on an infinite plane to a point.   </p> <p> Math.closest_point_on_line(line_x: <code>Num</code>, line_y: <code>Num</code>, line_z: <code>Num</code>, line_end_x: <code>Num</code>, line_end_y: <code>Num</code>, line_end_z: <code>Num</code>, point_x: <code>Num</code>, point_y: <code>Num</code>, point_z: <code>Num</code>) \u00b6 returns <code>Vec</code></p> <p>Closest point on an infinite line to a point. The progress from line start to line end in 4<sup>th</sup> component of return value. Line is constructed by 2 points on the line,  but the closest point can also be before the start of after the end  (in that case the 4<sup>th</sup> component of the return value wont be in the 0-1 range).   </p> <p> Math.closest_point_on_line(line: <code>Vec</code>, line_end: <code>Vec</code>, point: <code>Vec</code>) \u00b6 returns <code>Vec</code></p> <p>Closest point on an infinite line to a point. The progress from line start to line end in 4<sup>th</sup> component of return value. Line is constructed by 2 points on the line,  but the closest point can also be before the start of after the end  (in that case the 4<sup>th</sup> component of the return value wont be in the 0-1 range).   </p> <p> Math.in_rect(x: <code>Num</code>, y: <code>Num</code>, rx: <code>Num</code>, ry: <code>Num</code>, rw: <code>Num</code>, rh: <code>Num</code>) \u00b6 returns <code>Bool</code></p> <p>Checks if a 2d point is inside a rectangle. Only works for positive rectangle sizes.   </p> <p> Math.wrap(value: <code>Num</code>, modulus: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Math.overlaps(x0: <code>Num</code>, y0: <code>Num</code>, w0: <code>Num</code>, h0: <code>Num</code>, x1: <code>Num</code>, y1: <code>Num</code>, w1: <code>Num</code>, h1: <code>Num</code>) \u00b6 returns <code>Bool</code></p> <p>Checks if two rectangles overlap. Only works for positive rectangle sizes.   </p> <p> Math.sign(x: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>The sign of the number, expressed as a -1, 1 or 0, for negative and positive numbers, and zero.   </p> <p> Math.sign0(x: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>The sign of the number, expressed as a -1 0r 1, for negative and positive numbers, zero is positive.   </p> <p> Math.atan2(y: <code>Num</code>, x: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>The arc tangent of <code>y</code> when divided by <code>x</code>,      using the signs of the two numbers to determine the quadrant of the result.      (equivalient to <code>y.atan(x)</code>)   </p> <p> Math.degrees(radians: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Convert radians (0...2*PI) to degree (0...360).   </p> <p> Math.radians(degrees: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Convert degree (0...360) to radians (0...2*PI).   </p> <p> Math.clamp(value: <code>Num</code>, a: <code>Num</code>, b: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Clamp <code>value</code> between <code>a</code> and <code>b</code> (result will never be smaller than a or bigger than b).      Equivalent to <code>value.clamp(a, b)</code>.   </p> <p> Math.min(a: <code>Num</code>, b: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>The smaller of two numbers. Eqivalent to <code>a.min(b)</code>.   </p> <p> Math.max(a: <code>Num</code>, b: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>The larger of two numbers. Eqivalent to <code>a.max(b)</code>.   </p> <p> Math.floor_around_zero(a: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Round towards zero. (floor when positive, ceil when negative)   </p> <p> Math.ceil_around_zero(a: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Round away from zero. (ceil when positive, floor when negative)   </p> <p> Math.fixed(value: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Round number to 3 digits after comma precision.   </p> <p> Math.fixed(value: <code>Num</code>, precision: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Round number to <code>precision</code> digits after comma precision.   </p> <p> Math.angle_delta(from: <code>Num</code>, to: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Signed difference between two (degree) angles. Always in -180...180 range.   </p> <p> Math.lerp2D(a: <code>Vec</code>, b: <code>Vec</code>, t: <code>Num</code>) \u00b6 returns <code>Vec</code></p> <p>Linearly interpolate between two vectors. Returns <code>a</code> when <code>t</code> is <code>0</code> and <code>b</code> when <code>t</code> is <code>1</code>, with values inbetween interpolating inbetween. If <code>t</code> is outside 0-1 range, the output will be extrapolated.   </p> <p> Math.lerp3D(a: <code>Vec</code>, b: <code>Vec</code>, t: <code>Num</code>) \u00b6 returns <code>Vec</code></p> <p>Linearly interpolate between two vectors. Returns <code>a</code> when <code>t</code> is <code>0</code> and <code>b</code> when <code>t</code> is <code>1</code>, with values inbetween interpolating inbetween. If <code>t</code> is outside 0-1 range, the output will be extrapolated.   </p> <p> Math.smooth_t(t: <code>Num</code>, smoothness: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Get a smooth time t for lerping, based on a smoothness value. e.g t = smooth_t(delta, 1.25). exponential decay   </p> <p> Math.smoother_t(t: <code>Num</code>, smoothness: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Get a smooth time t for lerping, based on a smoothness value. e.g t = smoother_t(delta, 1.25). s curve like shape   </p> <p> Math.lerp(a: <code>Num</code>, b: <code>Num</code>, t: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Linearly interpolate between two numbers. Returns <code>a</code> when <code>t</code> is <code>0</code> and <code>b</code> when <code>t</code> is <code>1</code>, with values inbetween interpolating inbetween. If <code>t</code> is outside 0-1 range, the output will be extrapolated.   </p> <p> Math.lerp_angle(a: <code>Num</code>, b: <code>Num</code>, t: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Interpolates between angles. Always in 0...360 range.   </p> <p> Math.weighted_avg(value: <code>Num</code>, target: <code>Num</code>, slowness: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Math.within_range(value: <code>Num</code>, start_range: <code>Num</code>, end_range: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Checks whether <code>value</code> is inbetween <code>start_range</code> and <code>end_range</code> (inclusive).   </p> <p> Math.approx(one: <code>Num</code>, other: <code>Num</code>) \u00b6 returns <code>Bool</code></p> <p>Checks whether two values are approximately the same (with a max difference of 0.001).   </p> <p> Math.approx(one: <code>Num</code>, other: <code>Num</code>, epsilon: <code>Num</code>) \u00b6 returns <code>Bool</code></p> <p>Checks whether two values are approximately the same (with a max difference of <code>epsilon</code>).   </p> <p> Math.wrap_angle(degrees: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Bring angle into 0...360 degree space.   </p> <p> Math.wrap_angle(degrees: <code>Num</code>, lower: <code>Num</code>, upper: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Bring angle into lower...upper degree space.   </p> <p> Math.wrap_radians(radians: <code>Num</code>, lower: <code>Num</code>, upper: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Math.nearest_power_of_two(value: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Math.map_linear(value: <code>Num</code>, a1: <code>Num</code>, a2: <code>Num</code>, b1: <code>Num</code>, b2: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Remap value from <code>a1...a2</code> space to <code>b1...b2</code> space (unclamped).   </p> <p> Math.smoothstep(x: <code>Num</code>, min: <code>Num</code>, max: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Smoothed inverse lerp using cubic hermite interpolation. Output is clamped between 0 and 1.   </p> <p> Math.smootherstep(x: <code>Num</code>, min: <code>Num</code>, max: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Alternate smooth inverse interpolation with derivative of 0 at min and max points. Output is clamped between 0 and 1.   </p> <p> Math.smoothstepx(x: <code>Num</code>, round: <code>Num</code>, steep: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Math.random_point_in_unit_circle(rng: <code>Random</code>) \u00b6 returns <code>Num</code></p> <p>Random 2d point in circle of radius 1. Has uniform distribution.   </p> <p> Math.slerp(a: <code>Quat</code>, b: <code>Quat</code>, t: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/noise/","title":"Noise","text":""},{"location":"api/v/next/noise/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/noise/#luxe-noise-module","title":"<code>luxe: noise</code> module","text":"<ul> <li>Noise </li> <li>NoiseCellularDistanceFunc </li> <li>NoiseCellularReturnType </li> <li>NoiseDomainWarpType </li> <li>NoiseFractalType </li> <li>NoiseRotationType3D </li> <li>NoiseType </li> </ul>"},{"location":"api/v/next/noise/#noise","title":"Noise","text":"<p><code>import \"luxe: noise\" for Noise</code></p> <p>no docs found</p> <ul> <li>create(type: <code>NoiseType</code>)</li> <li>create(type: <code>NoiseType</code>, seed: <code>Num</code>)</li> <li>destroy(handle: <code>Noise</code>)</li> <li>valid(handle: <code>Noise</code>)</li> <li>get2D(handle: <code>Noise</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>get3D(handle: <code>Noise</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>set_seed(handle: <code>Noise</code>, seed: <code>Num</code>)</li> <li>domain_warp2D(handle: <code>Noise</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>domain_warp3D(handle: <code>Noise</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>set_rotation_type3D(handle: <code>Noise</code>, type: <code>NoiseRotationType3D</code>)</li> <li>set_fractal_type(handle: <code>Noise</code>, type: <code>NoiseFractalType</code>)</li> <li>set_fractal_octaves(handle: <code>Noise</code>, octaves: <code>Num</code>)</li> <li>set_fractal_lacunarity(handle: <code>Noise</code>, lacunarity: <code>Num</code>)</li> <li>set_fractal_gain(handle: <code>Noise</code>, gain: <code>Num</code>)</li> <li>set_fractal_weighted_strength(handle: <code>Noise</code>, weighted_strength: <code>Num</code>)</li> <li>set_fractal_ping_pong_strength(handle: <code>Noise</code>, ping_pong_strength: <code>Num</code>)</li> <li>set_cellular_distance_func(handle: <code>Noise</code>, distance_func: <code>NoiseCellularDistanceFunc</code>)</li> <li>set_cellular_return_type(handle: <code>Noise</code>, type: <code>NoiseCellularReturnType</code>)</li> <li>set_cellular_jitter(handle: <code>Noise</code>, jitter: <code>Num</code>)</li> <li>set_domain_warp_type(handle: <code>Noise</code>, type: <code>NoiseDomainWarpType</code>)</li> <li>set_domain_warp_amp(handle: <code>Noise</code>, amp: <code>Num</code>)</li> </ul> <p> Noise.create(type: <code>NoiseType</code>) \u00b6 returns <code>Noise</code></p> <p>no docs found   </p> <p> Noise.create(type: <code>NoiseType</code>, seed: <code>Num</code>) \u00b6 returns <code>Noise</code></p> <p>no docs found   </p> <p> Noise.destroy(handle: <code>Noise</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.valid(handle: <code>Noise</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Noise.get2D(handle: <code>Noise</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Noise.get3D(handle: <code>Noise</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Noise.set_seed(handle: <code>Noise</code>, seed: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.domain_warp2D(handle: <code>Noise</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>Vec2</code></p> <p>no docs found   </p> <p> Noise.domain_warp3D(handle: <code>Noise</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>Vec3</code></p> <p>no docs found   </p> <p> Noise.set_rotation_type3D(handle: <code>Noise</code>, type: <code>NoiseRotationType3D</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.set_fractal_type(handle: <code>Noise</code>, type: <code>NoiseFractalType</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.set_fractal_octaves(handle: <code>Noise</code>, octaves: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.set_fractal_lacunarity(handle: <code>Noise</code>, lacunarity: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.set_fractal_gain(handle: <code>Noise</code>, gain: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.set_fractal_weighted_strength(handle: <code>Noise</code>, weighted_strength: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.set_fractal_ping_pong_strength(handle: <code>Noise</code>, ping_pong_strength: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.set_cellular_distance_func(handle: <code>Noise</code>, distance_func: <code>NoiseCellularDistanceFunc</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.set_cellular_return_type(handle: <code>Noise</code>, type: <code>NoiseCellularReturnType</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.set_cellular_jitter(handle: <code>Noise</code>, jitter: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.set_domain_warp_type(handle: <code>Noise</code>, type: <code>NoiseDomainWarpType</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Noise.set_domain_warp_amp(handle: <code>Noise</code>, amp: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p>"},{"location":"api/v/next/noise/#noisecellulardistancefunc","title":"NoiseCellularDistanceFunc","text":"<p><code>import \"luxe: noise\" for NoiseCellularDistanceFunc</code></p> <p>no docs found</p> <ul> <li>euclidean</li> <li>euclidean_sq</li> <li>manhattan</li> <li>hybrid</li> </ul> <p> NoiseCellularDistanceFunc.euclidean \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseCellularDistanceFunc.euclidean_sq \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseCellularDistanceFunc.manhattan \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseCellularDistanceFunc.hybrid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/noise/#noisecellularreturntype","title":"NoiseCellularReturnType","text":"<p><code>import \"luxe: noise\" for NoiseCellularReturnType</code></p> <p>no docs found</p> <ul> <li>cell_value</li> <li>distance</li> <li>distance2</li> <li>distance2_add</li> <li>distance2_sub</li> <li>distance2_mul</li> <li>distance2_div</li> </ul> <p> NoiseCellularReturnType.cell_value \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseCellularReturnType.distance \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseCellularReturnType.distance2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseCellularReturnType.distance2_add \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseCellularReturnType.distance2_sub \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseCellularReturnType.distance2_mul \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseCellularReturnType.distance2_div \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/noise/#noisedomainwarptype","title":"NoiseDomainWarpType","text":"<p><code>import \"luxe: noise\" for NoiseDomainWarpType</code></p> <p>no docs found</p> <ul> <li>open_simplex2</li> <li>open_simplex2_reduced</li> <li>basic_grid</li> </ul> <p> NoiseDomainWarpType.open_simplex2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseDomainWarpType.open_simplex2_reduced \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseDomainWarpType.basic_grid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/noise/#noisefractaltype","title":"NoiseFractalType","text":"<p><code>import \"luxe: noise\" for NoiseFractalType</code></p> <p>no docs found</p> <ul> <li>none</li> <li>fbm</li> <li>ridged</li> <li>pingpong</li> <li>domain_warp_progressive</li> <li>domain_warp_independent</li> </ul> <p> NoiseFractalType.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseFractalType.fbm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseFractalType.ridged \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseFractalType.pingpong \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseFractalType.domain_warp_progressive \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseFractalType.domain_warp_independent \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/noise/#noiserotationtype3d","title":"NoiseRotationType3D","text":"<p><code>import \"luxe: noise\" for NoiseRotationType3D</code></p> <p>no docs found</p> <ul> <li>none</li> <li>improve_xy_planes</li> <li>improve_xz_planes</li> </ul> <p> NoiseRotationType3D.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseRotationType3D.improve_xy_planes \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseRotationType3D.improve_xz_planes \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/noise/#noisetype","title":"NoiseType","text":"<p><code>import \"luxe: noise\" for NoiseType</code></p> <p>no docs found</p> <ul> <li>open_simplex2</li> <li>open_simplex2s</li> <li>cellular</li> <li>perlin</li> <li>value_cubic</li> <li>value</li> </ul> <p> NoiseType.open_simplex2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseType.open_simplex2s \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseType.cellular \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseType.perlin \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseType.value_cubic \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NoiseType.value \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/plot/","title":"Plot","text":""},{"location":"api/v/next/plot/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/plot/#luxe-plot-module","title":"<code>luxe: plot</code> module","text":"<ul> <li>Plot </li> </ul>"},{"location":"api/v/next/plot/#plot","title":"Plot","text":"<p><code>import \"luxe: plot\" for Plot</code></p> <p>A service API to plot values for games + debugging. Can plot values from anywhere as a counter or as a running history. Counter plots add values to their total and add the total to the history at the end of the frame.</p> <ul> <li>define(id: <code>String</code>, type: <code>PlotType</code>)</li> <li>define(id: <code>String</code>, type: <code>PlotType</code>, max_history: <code>Num</code>)</li> <li>update(id: <code>String</code>, value: <code>Num</code>)</li> <li>list()</li> <li>history(id: <code>String</code>)</li> <li>latest(id: <code>String</code>)</li> <li>average(id: <code>String</code>)</li> </ul> <p> Plot.define(id: <code>String</code>, type: <code>PlotType</code>) \u00b6 returns <code>unknown</code></p> <p>Define a new plot by id, with the given <code>type</code>. The max history defaults to 60 values if not specified.   </p> <p> Plot.define(id: <code>String</code>, type: <code>PlotType</code>, max_history: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Define a new plot by id, with the given <code>type</code> and <code>max_history</code> </p> <p> Plot.update(id: <code>String</code>, value: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Update a given plot by id, with the given <code>value</code>.  For <code>PlotType.normal</code> this will add the value to the history. For <code>PlotType.counter</code> this will add the value to the total so far this frame.   </p> <p> Plot.list() \u00b6 returns <code>unknown</code></p> <p>Get a list of plots defined, as string id (e.g Strings.get(id) is needed)   </p> <p> Plot.history(id: <code>String</code>) \u00b6 returns <code>List</code></p> <p>Get the history for a given plot, as a list of values   </p> <p> Plot.latest(id: <code>String</code>) \u00b6 returns <code>Num</code></p> <p>Get the latest value for a given plot   </p> <p> Plot.average(id: <code>String</code>) \u00b6 returns <code>Num</code></p> <p>Get the average value for a given plot, averaging out the history   </p>"},{"location":"api/v/next/pqueue/","title":"Pqueue","text":""},{"location":"api/v/next/pqueue/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/pqueue/#luxe-pqueue-module","title":"<code>luxe: pqueue</code> module","text":"<ul> <li>MaxPQ </li> <li>MinPQ </li> </ul>"},{"location":"api/v/next/pqueue/#maxpq","title":"MaxPQ","text":"<p><code>import \"luxe: pqueue\" for MaxPQ</code></p> <p>A priority queue that returns larger values first.</p> <p>A priority queue holds various values and will sort them into an ordered list by priority. When queried via <code>peek</code> or values removed via <code>pop</code> the values are sorted.</p> <ul> <li>value</li> <li>count</li> <li>new()</li> <li>new(get_priority_fn: <code>Any</code>)</li> <li>add(value: <code>Any</code>)</li> <li>pop()</li> <li>peek()</li> </ul> <p> MaxPQ.value \u00b6 returns <code>unknown</code></p> <p>Returns the internal array. Read only, modify the queue via <code>add</code> and <code>pop</code>.   </p> <p> MaxPQ.count \u00b6 returns <code>unknown</code></p> <p>Returns the number of items in the priority queue.   </p> <p> MaxPQ.new() \u00b6 returns <code>MaxPQ</code></p> <p>Create a new priority queue.   </p> <p> MaxPQ.new(get_priority_fn: <code>Any</code>) \u00b6 returns <code>MaxPQ</code></p> <p>Create a new priority queue with a callback for the priority of a value. The callback takes one parameter, the value, and should return a priority number  for that value.   </p> <p> MaxPQ.add(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Add a value to the queue.   </p> <p> MaxPQ.pop() \u00b6 returns <code>unknown</code></p> <p>Return the next value, removing it from the queue.   </p> <p> MaxPQ.peek() \u00b6 returns <code>unknown</code></p> <p>Return the next value without removing it from the queue.   </p>"},{"location":"api/v/next/pqueue/#minpq","title":"MinPQ","text":"<p><code>import \"luxe: pqueue\" for MinPQ</code></p> <p>A priority queue that returns smaller values first.</p> <p>A priority queue holds various values and will sort them into an ordered list by priority. When queried via <code>peek</code> or values removed via <code>pop</code> the values are sorted.</p> <ul> <li>value</li> <li>count</li> <li>new()</li> <li>new(get_priority_fn: <code>Any</code>)</li> <li>add(value: <code>Any</code>)</li> <li>pop()</li> <li>peek()</li> </ul> <p> MinPQ.value \u00b6 returns <code>unknown</code></p> <p>Returns the internal array. Read only, modify the queue via <code>add</code> and <code>pop</code>.   </p> <p> MinPQ.count \u00b6 returns <code>unknown</code></p> <p>Returns the number of items in the priority queue.   </p> <p> MinPQ.new() \u00b6 returns <code>MinPQ</code></p> <p>Create a new priority queue.   </p> <p> MinPQ.new(get_priority_fn: <code>Any</code>) \u00b6 returns <code>MinPQ</code></p> <p>Create a new priority queue with a callback for the priority of a value. The callback takes one parameter, the value, and should return a priority number  for that value.   </p> <p> MinPQ.add(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Add a value to the queue.   </p> <p> MinPQ.pop() \u00b6 returns <code>unknown</code></p> <p>Return the next value, removing it from the queue.   </p> <p> MinPQ.peek() \u00b6 returns <code>unknown</code></p> <p>Return the next value without removing it from the queue.   </p>"},{"location":"api/v/next/regex/","title":"Regex","text":""},{"location":"api/v/next/regex/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/regex/#luxe-regex-module","title":"<code>luxe: regex</code> module","text":"<ul> <li>RegexInfo </li> <li>RegexMatch </li> <li>RegexSubMatch </li> </ul>"},{"location":"api/v/next/regex/#regexinfo","title":"RegexInfo","text":"<p><code>import \"luxe: regex\" for RegexInfo</code></p> <p>A regular expression result, containing one or more matches</p> <ul> <li>matched</li> <li>match</li> <li>[index : Num]</li> </ul> <p> RegexInfo.matched \u00b6 returns <code>Bool</code></p> <p>True if there was any match   </p> <p> RegexInfo.match \u00b6 returns <code>List</code></p> <p>Returns the match results, a List of <code>RegexMatch</code>. Only valid if <code>matched</code> is true   </p> <p> RegexInfo [index : Num] \u00b6 returns <code>RegexMatch</code></p> <p>Convenience to access a specific match by index   </p>"},{"location":"api/v/next/regex/#regexmatch","title":"RegexMatch","text":"<p><code>import \"luxe: regex\" for RegexMatch</code></p> <p>A single match in a regular expression result.</p> <ul> <li>subcount</li> <li>string</li> <li>offset</li> <li>count</li> <li>index</li> <li>[index : Num]</li> </ul> <p> RegexMatch.subcount \u00b6 returns <code>Num</code></p> <p>Number of sub matches (groups), not including 0 which is the full match   </p> <p> RegexMatch.string \u00b6 returns <code>String</code></p> <p>The matched string   </p> <p> RegexMatch.offset \u00b6 returns <code>Num</code></p> <p>The offset of the match in the original string   </p> <p> RegexMatch.count \u00b6 returns <code>Num</code></p> <p>The length of the match string   </p> <p> RegexMatch.index \u00b6 returns <code>Num</code></p> <p>Index of this match in the match results   </p> <p> RegexMatch [index : Num] \u00b6 returns <code>RegexSubMatch</code></p> <p>Access to a specific group/sub match by index. 0 is the full match, groups are 1-indexed   </p>"},{"location":"api/v/next/regex/#regexsubmatch","title":"RegexSubMatch","text":"<p><code>import \"luxe: regex\" for RegexSubMatch</code></p> <p>A single group/sub match in a regular expression match.</p> <ul> <li>count</li> <li>offset</li> <li>string</li> <li>index</li> <li>[index : Num]</li> </ul> <p> RegexSubMatch.count \u00b6 returns <code>Num</code></p> <p>The length of the sub/group   </p> <p> RegexSubMatch.offset \u00b6 returns <code>Num</code></p> <p>The offset of the sub/group in the original match   </p> <p> RegexSubMatch.string \u00b6 returns <code>String</code></p> <p>The string of the sub/group   </p> <p> RegexSubMatch.index \u00b6 returns <code>Num</code></p> <p>The index of this sub/group in the match   </p> <p> RegexSubMatch [index : Num] \u00b6 returns <code>Any</code></p> <p>Returns info about this sub match by index. 0 returns <code>count</code>, 1 returns <code>offset</code>, 2 returns <code>string</code> </p>"},{"location":"api/v/next/render/","title":"Render","text":""},{"location":"api/v/next/render/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/render/#luxe-render-module","title":"<code>luxe: render</code> module","text":"<ul> <li>Atlas </li> <li>BlendFactor </li> <li>BlendOperation </li> <li>Clip </li> <li>ColorWriteMask </li> <li>CompareFunction </li> <li>ComputeLayerDesc </li> <li>ComputeLayerInput </li> <li>CullMode </li> <li>Geometry </li> <li>Image </li> <li>ImageDesc </li> <li>ImageType </li> <li>ImageUsage </li> <li>IndexType </li> <li>InputBuffer </li> <li>LayerCompute </li> <li>LayerPass </li> <li>LoadAction </li> <li>Material </li> <li>MaterialDesc </li> <li>MaterialFunction </li> <li>MaterialInput </li> <li>MaterialInputBlock </li> <li>MaterialInputImage </li> <li>MaterialInputType </li> <li>MaterialReplace </li> <li>PassLayerDesc </li> <li>PixelFormat </li> <li>Pose </li> <li>PoseGraph </li> <li>PoseNode </li> <li>Primitive </li> <li>Render </li> <li>RenderDest </li> <li>RenderDestColor </li> <li>RenderDestDepth </li> <li>RenderDestStencil </li> <li>RenderLayerDesc </li> <li>RenderPathContext </li> <li>RenderViewDesc </li> <li>SamplerAddressMode </li> <li>SamplerMinMagFilter </li> <li>SamplerMipFilter </li> <li>SamplerState </li> <li>SortType </li> <li>StencilOperation </li> <li>StoreAction </li> <li>TextAlign </li> <li>TextAttrType </li> <li>TextWrapMode </li> <li>VertexAttr </li> <li>VertexAttrFormat </li> <li>VertexFormat </li> <li>VertexInputRate </li> <li>VertexLayout </li> <li>Winding </li> </ul>"},{"location":"api/v/next/render/#atlas","title":"Atlas","text":"<p><code>import \"luxe: render\" for Atlas</code></p> <p>no docs found</p> <ul> <li>create(size: <code>Any</code>, material: <code>Any</code>)</li> <li>destroy(atlas: <code>Any</code>)</li> <li>valid(atlas: <code>Any</code>)</li> <li>get_size(atlas: <code>Any</code>)</li> <li>get_material(atlas: <code>Any</code>)</li> <li>rect_add(atlas: <code>Any</code>, atlas_image_id: <code>Any</code>, frame: <code>Any</code>, rect: <code>Any</code>, rotated: <code>Any</code>)</li> <li>rect_remove(atlas: <code>Any</code>, atlas_image_id: <code>Any</code>)</li> <li>rect_get_frame(atlas: <code>Any</code>, atlas_image: <code>Any</code>)</li> <li>rect_get_rect(atlas: <code>Any</code>, atlas_image: <code>Any</code>)</li> <li>rect_get_rotated(atlas: <code>Any</code>, atlas_image: <code>Any</code>)</li> <li>rect_exists(atlas: <code>Any</code>, atlas_image: <code>Any</code>)</li> </ul> <p> Atlas.create(size: <code>Any</code>, material: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Atlas.destroy(atlas: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Atlas.valid(atlas: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Atlas.get_size(atlas: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Atlas.get_material(atlas: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Atlas.rect_add(atlas: <code>Any</code>, atlas_image_id: <code>Any</code>, frame: <code>Any</code>, rect: <code>Any</code>, rotated: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Atlas.rect_remove(atlas: <code>Any</code>, atlas_image_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Atlas.rect_get_frame(atlas: <code>Any</code>, atlas_image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Atlas.rect_get_rect(atlas: <code>Any</code>, atlas_image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Atlas.rect_get_rotated(atlas: <code>Any</code>, atlas_image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Atlas.rect_exists(atlas: <code>Any</code>, atlas_image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#blendfactor","title":"BlendFactor","text":"<p><code>import \"luxe: render\" for BlendFactor</code></p> <p>no docs found</p> <ul> <li>zero</li> <li>one</li> <li>source_color</li> <li>one_minus_source_color</li> <li>source_alpha</li> <li>one_minus_source_alpha</li> <li>destination_color</li> <li>one_minus_destination_color</li> <li>destination_alpha</li> <li>one_minus_destination_alpha</li> <li>source_alpha_saturated</li> <li>blend_color</li> <li>one_minus_blend_color</li> <li>blend_alpha</li> <li>one_minus_blend_alpha</li> <li>invalid</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> BlendFactor.zero \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.one \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.source_color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.one_minus_source_color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.source_alpha \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.one_minus_source_alpha \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.destination_color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.one_minus_destination_color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.destination_alpha \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.one_minus_destination_alpha \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.source_alpha_saturated \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.blend_color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.one_minus_blend_color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.blend_alpha \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.one_minus_blend_alpha \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.invalid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendFactor.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#blendoperation","title":"BlendOperation","text":"<p><code>import \"luxe: render\" for BlendOperation</code></p> <p>no docs found</p> <ul> <li>add</li> <li>subtract</li> <li>reverse_subtract</li> <li>min</li> <li>max</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> BlendOperation.add \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendOperation.subtract \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendOperation.reverse_subtract \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendOperation.min \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendOperation.max \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BlendOperation.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#clip","title":"Clip","text":"<p><code>import \"luxe: render\" for Clip</code></p> <p>no docs found</p> <ul> <li>get_duration(clip: <code>Clip</code>)</li> </ul> <p> Clip.get_duration(clip: <code>Clip</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#colorwritemask","title":"ColorWriteMask","text":"<p><code>import \"luxe: render\" for ColorWriteMask</code></p> <p>no docs found</p> <ul> <li>none</li> <li>red</li> <li>green</li> <li>blue</li> <li>alpha</li> <li>all</li> <li>invalid</li> <li>from_map(value: <code>Any</code>)</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> ColorWriteMask.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorWriteMask.red \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorWriteMask.green \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorWriteMask.blue \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorWriteMask.alpha \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorWriteMask.all \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorWriteMask.invalid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorWriteMask.from_map(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorWriteMask.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#comparefunction","title":"CompareFunction","text":"<p><code>import \"luxe: render\" for CompareFunction</code></p> <p>no docs found</p> <ul> <li>never</li> <li>less</li> <li>equal</li> <li>less_equal</li> <li>greater</li> <li>not_equal</li> <li>greater_equal</li> <li>always</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> CompareFunction.never \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CompareFunction.less \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CompareFunction.equal \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CompareFunction.less_equal \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CompareFunction.greater \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CompareFunction.not_equal \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CompareFunction.greater_equal \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CompareFunction.always \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CompareFunction.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#computelayerdesc","title":"ComputeLayerDesc","text":"<p><code>import \"luxe: render\" for ComputeLayerDesc</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>display_id</li> <li>display_id=(v : String)</li> <li>compute_id</li> <li>compute_id=(v : String)</li> <li>dimensions</li> <li>inputs</li> <li>inputs=(v : List)</li> <li>x</li> <li>x=(v : Num)</li> <li>y</li> <li>y=(v : Num)</li> <li>z</li> <li>z=(v : Num)</li> </ul> <p> ComputeLayerDesc.new() \u00b6 returns <code>ComputeLayerDesc</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.display_id \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.display_id=(v : String) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.compute_id \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.compute_id=(v : String) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.dimensions \u00b6 returns <code>Float3</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.inputs \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.inputs=(v : List) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.x \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.x=(v : Num) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.y \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.y=(v : Num) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.z \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ComputeLayerDesc.z=(v : Num) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#computelayerinput","title":"ComputeLayerInput","text":"<p><code>import \"luxe: render\" for ComputeLayerInput</code></p> <p>no docs found</p> <ul> <li>library</li> <li>type</li> <li>input</li> <li>buffer</li> <li>new(library: <code>Any</code>, type: <code>String</code>, input: <code>String</code>, buffer: <code>InputBuffer</code>)</li> </ul> <p> ComputeLayerInput.library \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> ComputeLayerInput.type \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> ComputeLayerInput.input \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> ComputeLayerInput.buffer \u00b6 returns <code>InputBuffer</code></p> <p>no docs found   </p> <p> ComputeLayerInput.new(library: <code>Any</code>, type: <code>String</code>, input: <code>String</code>, buffer: <code>InputBuffer</code>) \u00b6 returns <code>ComputeLayerInput</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#cullmode","title":"CullMode","text":"<p><code>import \"luxe: render\" for CullMode</code></p> <p>no docs found</p> <ul> <li>none</li> <li>front</li> <li>back</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> CullMode.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CullMode.front \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CullMode.back \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CullMode.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#geometry","title":"Geometry","text":"<p><code>import \"luxe: render\" for Geometry</code></p> <p>no docs found</p> <ul> <li>create(primitive: <code>Any</code>, material: <code>Any</code>, index_count: <code>Any</code>, index_type: <code>Any</code>, index_buffer: <code>Any</code>)</li> <li>create(primitive: <code>Any</code>, material: <code>Any</code>, vert_count: <code>Any</code>)</li> <li>destroy(geo: <code>Any</code>)</li> <li>valid(geo: <code>Any</code>)</li> <li>set_world_matrix(geo: <code>Any</code>, world: <code>Any</code>)</li> <li>set_vertex_buffer(geo: <code>Any</code>, index: <code>Any</code>, vertex_buffer: <code>Any</code>)</li> <li>get_vertex_buffer(geo: <code>Any</code>, index: <code>Any</code>)</li> <li>get_index_buffer(geo: <code>Any</code>)</li> <li>set_instance_count(geo: <code>Any</code>, count: <code>Any</code>)</li> <li>get_instance_count(geo: <code>Any</code>)</li> <li>set_vert_count(geo: <code>Any</code>, count: <code>Any</code>)</li> <li>set_material(geo: <code>Any</code>, material: <code>Any</code>)</li> <li>set_stencil_references(geo: <code>Any</code>, back: <code>Any</code>, front: <code>Any</code>)</li> <li>set_stencil_reference(geo: <code>Any</code>, value: <code>Any</code>)</li> <li>set_aabb(geo: <code>Any</code>, center_x: <code>Any</code>, center_y: <code>Any</code>, center_z: <code>Any</code>, radius_x: <code>Any</code>, radius_y: <code>Any</code>, radius_z: <code>Any</code>)</li> <li>get_aabb(geo: <code>Any</code>)</li> <li>get_world_obb(geo: <code>Any</code>)</li> <li>get_vert_count(geo: <code>Any</code>)</li> <li>get_material(geo: <code>Any</code>)</li> <li>obb_intersect_ray(geo: <code>Any</code>, ray_x: <code>Any</code>, ray_y: <code>Any</code>, ray_z: <code>Any</code>, ray_dir_x: <code>Any</code>, ray_dir_y: <code>Any</code>, ray_dir_z: <code>Any</code>)</li> <li>layer_include_add(geo: <code>Any</code>, layer_id: <code>Any</code>)</li> <li>layer_include_remove(geo: <code>Any</code>, layer_id: <code>Any</code>)</li> <li>layer_exclude_add(geo: <code>Any</code>, layer_id: <code>Any</code>)</li> <li>layer_exclude_remove(geo: <code>Any</code>, layer_id: <code>Any</code>)</li> </ul> <p> Geometry.create(primitive: <code>Any</code>, material: <code>Any</code>, index_count: <code>Any</code>, index_type: <code>Any</code>, index_buffer: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.create(primitive: <code>Any</code>, material: <code>Any</code>, vert_count: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.destroy(geo: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.valid(geo: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.set_world_matrix(geo: <code>Any</code>, world: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.set_vertex_buffer(geo: <code>Any</code>, index: <code>Any</code>, vertex_buffer: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.get_vertex_buffer(geo: <code>Any</code>, index: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.get_index_buffer(geo: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.set_instance_count(geo: <code>Any</code>, count: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.get_instance_count(geo: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.set_vert_count(geo: <code>Any</code>, count: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.set_material(geo: <code>Any</code>, material: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.set_stencil_references(geo: <code>Any</code>, back: <code>Any</code>, front: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.set_stencil_reference(geo: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.set_aabb(geo: <code>Any</code>, center_x: <code>Any</code>, center_y: <code>Any</code>, center_z: <code>Any</code>, radius_x: <code>Any</code>, radius_y: <code>Any</code>, radius_z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.get_aabb(geo: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.get_world_obb(geo: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.get_vert_count(geo: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.get_material(geo: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.obb_intersect_ray(geo: <code>Any</code>, ray_x: <code>Any</code>, ray_y: <code>Any</code>, ray_z: <code>Any</code>, ray_dir_x: <code>Any</code>, ray_dir_y: <code>Any</code>, ray_dir_z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.layer_include_add(geo: <code>Any</code>, layer_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.layer_include_remove(geo: <code>Any</code>, layer_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.layer_exclude_add(geo: <code>Any</code>, layer_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Geometry.layer_exclude_remove(geo: <code>Any</code>, layer_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#image","title":"Image","text":"<p><code>import \"luxe: render\" for Image</code></p> <p>no docs found</p> <ul> <li>create(desc: <code>Any</code>)</li> <li>redefine(image: <code>Any</code>, desc: <code>Any</code>)</li> <li>destroy(name: <code>Any</code>)</li> <li>valid(name: <code>Any</code>)</li> <li>get_resource(name: <code>Any</code>)</li> <li>generate_mipmaps(image: <code>Any</code>)</li> <li>update(image: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, level: <code>Any</code>, slice: <code>Any</code>, bytes: <code>Any</code>)</li> <li>get_type(image: <code>Any</code>)</li> <li>get_width(image: <code>Any</code>)</li> <li>get_height(image: <code>Any</code>)</li> <li>get_depth(image: <code>Any</code>)</li> <li>get_pixel_format(image: <code>Any</code>)</li> <li>get_mipmap_levels(image: <code>Any</code>)</li> <li>get_array_length(image: <code>Any</code>)</li> <li>get_sample_count(image: <code>Any</code>)</li> <li>get_bytes(image: <code>Any</code>, into_bytes: <code>Any</code>)</li> </ul> <p> Image.create(desc: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.redefine(image: <code>Any</code>, desc: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.destroy(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.valid(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.get_resource(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.generate_mipmaps(image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.update(image: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, level: <code>Any</code>, slice: <code>Any</code>, bytes: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.get_type(image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.get_width(image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.get_height(image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.get_depth(image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.get_pixel_format(image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.get_mipmap_levels(image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.get_array_length(image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.get_sample_count(image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Image.get_bytes(image: <code>Any</code>, into_bytes: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#imagedesc","title":"ImageDesc","text":"<p><code>import \"luxe: render\" for ImageDesc</code></p> <p>no docs found</p> <ul> <li>display_id</li> <li>display_id=(v : Any)</li> <li>type</li> <li>type=(v : Any)</li> <li>pixel_format</li> <li>pixel_format=(v : Any)</li> <li>width</li> <li>width=(v : Any)</li> <li>height</li> <li>height=(v : Any)</li> <li>depth</li> <li>depth=(v : Any)</li> <li>mipmap_levels</li> <li>mipmap_levels=(v : Any)</li> <li>array_length</li> <li>array_length=(v : Any)</li> <li>sample_count</li> <li>sample_count=(v : Any)</li> <li>usage</li> <li>usage=(v : Any)</li> <li>new()</li> </ul> <p> ImageDesc.display_id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.display_id=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.type \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.type=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.pixel_format \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.pixel_format=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.width \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.width=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.height \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.height=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.depth \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.depth=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.mipmap_levels \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.mipmap_levels=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.array_length \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.array_length=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.sample_count \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.sample_count=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.usage \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.usage=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageDesc.new() \u00b6 returns <code>ImageDesc</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#imagetype","title":"ImageType","text":"<p><code>import \"luxe: render\" for ImageType</code></p> <p>no docs found</p> <ul> <li>invalid</li> <li>image1D</li> <li>image1DArray</li> <li>image2D</li> <li>image2DArray</li> <li>image2DMultisample</li> <li>imageCube</li> <li>imageCubeArray</li> <li>image3D</li> <li>from_string(value: <code>Any</code>)</li> <li>name(value: <code>Any</code>)</li> </ul> <p> ImageType.invalid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageType.image1D \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageType.image1DArray \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageType.image2D \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageType.image2DArray \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageType.image2DMultisample \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageType.imageCube \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageType.imageCubeArray \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageType.image3D \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageType.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageType.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#imageusage","title":"ImageUsage","text":"<p><code>import \"luxe: render\" for ImageUsage</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>shader_read</li> <li>shader_write</li> <li>shader_read_write</li> <li>render_target</li> <li>pixel_format_view</li> <li>stream</li> </ul> <p> ImageUsage.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageUsage.shader_read \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageUsage.shader_write \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageUsage.shader_read_write \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageUsage.render_target \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageUsage.pixel_format_view \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ImageUsage.stream \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#indextype","title":"IndexType","text":"<p><code>import \"luxe: render\" for IndexType</code></p> <p>no docs found</p> <ul> <li>none</li> <li>u16</li> <li>u32</li> <li>size_of(value: <code>Any</code>)</li> </ul> <p> IndexType.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> IndexType.u16 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> IndexType.u32 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> IndexType.size_of(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#inputbuffer","title":"InputBuffer","text":"<p><code>import \"luxe: render\" for InputBuffer</code></p> <p>no docs found</p> <ul> <li>create(library: <code>String</code>, type: <code>String</code>, input: <code>String</code>, N: <code>Num</code>)</li> <li>set(buffer: <code>InputBuffer</code>, data: <code>String</code>)</li> </ul> <p> InputBuffer.create(library: <code>String</code>, type: <code>String</code>, input: <code>String</code>, N: <code>Num</code>) \u00b6 returns <code>InputBuffer</code></p> <p>no docs found   </p> <p> InputBuffer.set(buffer: <code>InputBuffer</code>, data: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#layercompute","title":"LayerCompute","text":"<p><code>import \"luxe: render\" for LayerCompute</code></p> <p>no docs found</p> <ul> <li>id</li> <li>id=(v : Any)</li> <li>new(desc: <code>ComputeLayerDesc</code>)</li> <li>update(desc: <code>ComputeLayerDesc</code>)</li> <li>queue(path: <code>RenderPath</code>)</li> </ul> <p> LayerCompute.id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LayerCompute.id=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LayerCompute.new(desc: <code>ComputeLayerDesc</code>) \u00b6 returns <code>LayerCompute</code></p> <p>no docs found   </p> <p> LayerCompute.update(desc: <code>ComputeLayerDesc</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LayerCompute.queue(path: <code>RenderPath</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#layerpass","title":"LayerPass","text":"<p><code>import \"luxe: render\" for LayerPass</code></p> <p>no docs found</p> <ul> <li>id</li> <li>id=(v : Any)</li> <li>new(pass: <code>Any</code>)</li> <li>queue(path: <code>Any</code>)</li> <li>new(path: <code>Any</code>, pass: <code>Any</code>)</li> <li>create_dest(pass: <code>Any</code>)</li> <li>update_material(desc: <code>Any</code>)</li> <li>create_material(pass: <code>PassLayerDesc</code>)</li> </ul> <p> LayerPass.id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LayerPass.id=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LayerPass.new(pass: <code>Any</code>) \u00b6 returns <code>LayerPass</code></p> <p>no docs found   </p> <p> LayerPass.queue(path: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LayerPass.new(path: <code>Any</code>, pass: <code>Any</code>) \u00b6 returns <code>LayerPass</code></p> <p>no docs found   </p> <p> LayerPass.create_dest(pass: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LayerPass.update_material(desc: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LayerPass.create_material(pass: <code>PassLayerDesc</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#loadaction","title":"LoadAction","text":"<p><code>import \"luxe: render\" for LoadAction</code></p> <p>no docs found</p> <ul> <li>dont_care</li> <li>load</li> <li>clear</li> </ul> <p> LoadAction.dont_care \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LoadAction.load \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> LoadAction.clear \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#material","title":"Material","text":"<p><code>import \"luxe: render\" for Material</code></p> <p>no docs found</p> <ul> <li>create(basis_type: <code>Any</code>)</li> <li>clone(material: <code>Any</code>)</li> <li>destroy(material: <code>Any</code>)</li> <li>valid(material: <code>Any</code>)</li> <li>undefine(name: <code>Any</code>)</li> <li>get_source_id(material: <code>Any</code>)</li> <li>set_source_id(material: <code>Any</code>, source_id: <code>Any</code>)</li> <li>set_stencil_references(material: <code>Any</code>, back: <code>Any</code>, front: <code>Any</code>)</li> <li>set_stencil_reference(material: <code>Any</code>, value: <code>Any</code>)</li> <li>get_input_image(material: <code>Any</code>, name: <code>Any</code>)</li> <li>has_input(material: <code>Any</code>, name: <code>Any</code>)</li> <li>is_input_array(material: <code>Any</code>, name: <code>Any</code>)</li> <li>set_input(material: <code>Any</code>, name: <code>Any</code>, value: <code>Any</code>)</li> <li>define(name: <code>Any</code>, desc: <code>Any</code>)</li> </ul> <p> Material.create(basis_type: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.clone(material: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.destroy(material: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.valid(material: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.undefine(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.get_source_id(material: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.set_source_id(material: <code>Any</code>, source_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.set_stencil_references(material: <code>Any</code>, back: <code>Any</code>, front: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.set_stencil_reference(material: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.get_input_image(material: <code>Any</code>, name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.has_input(material: <code>Any</code>, name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.is_input_array(material: <code>Any</code>, name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.set_input(material: <code>Any</code>, name: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Material.define(name: <code>Any</code>, desc: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#materialdesc","title":"MaterialDesc","text":"<p><code>import \"luxe: render\" for MaterialDesc</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>vertex_format</li> <li>vertex_format=(v : Any)</li> <li>vertex</li> <li>vertex=(v : Any)</li> <li>fragment</li> <li>fragment=(v : Any)</li> <li>geometry</li> <li>geometry=(v : Any)</li> <li>depth_bias_enabled</li> <li>depth_bias_enabled=(v : Any)</li> <li>depth_bias</li> <li>depth_bias=(v : Any)</li> <li>depth_bias_slope_scale</li> <li>depth_bias_slope_scale=(v : Any)</li> <li>depth_test</li> <li>depth_test=(v : Any)</li> <li>depth_write</li> <li>depth_write=(v : Any)</li> <li>depth_compare</li> <li>depth_compare=(v : Any)</li> <li>stencil_test</li> <li>stencil_test=(v : Any)</li> <li>write_mask</li> <li>write_mask=(v : Any)</li> <li>blending</li> <li>blending=(v : Any)</li> <li>alpha_blend</li> <li>alpha_blend=(v : Any)</li> <li>rgb_blend</li> <li>rgb_blend=(v : Any)</li> <li>src_alpha</li> <li>src_alpha=(v : Any)</li> <li>src_rgb</li> <li>src_rgb=(v : Any)</li> <li>dest_alpha</li> <li>dest_alpha=(v : Any)</li> <li>dest_rgb</li> <li>dest_rgb=(v : Any)</li> <li>blend_color</li> <li>blend_color=(v : Any)</li> <li>cull</li> <li>cull=(v : Any)</li> <li>winding</li> <li>winding=(v : Any)</li> <li>layers</li> <li>layers=(v : Any)</li> <li>inputs</li> <li>inputs=(v : Any)</li> <li>blocks</li> <li>blocks=(v : Any)</li> <li>replace</li> <li>replace=(v : Any)</li> <li>stencil_back_failure_stencil</li> <li>stencil_back_failure_stencil=(v : Any)</li> <li>stencil_back_failure_depth</li> <li>stencil_back_failure_depth=(v : Any)</li> <li>stencil_back_pass_depth_stencil</li> <li>stencil_back_pass_depth_stencil=(v : Any)</li> <li>stencil_back_compare</li> <li>stencil_back_compare=(v : Any)</li> <li>stencil_back_mask_read</li> <li>stencil_back_mask_read=(v : Any)</li> <li>stencil_back_mask_write</li> <li>stencil_back_mask_write=(v : Any)</li> <li>stencil_back_reference</li> <li>stencil_back_reference=(v : Any)</li> <li>stencil_front_failure_stencil</li> <li>stencil_front_failure_stencil=(v : Any)</li> <li>stencil_front_failure_depth</li> <li>stencil_front_failure_depth=(v : Any)</li> <li>stencil_front_pass_depth_stencil</li> <li>stencil_front_pass_depth_stencil=(v : Any)</li> <li>stencil_front_compare</li> <li>stencil_front_compare=(v : Any)</li> <li>stencil_front_mask_read</li> <li>stencil_front_mask_read=(v : Any)</li> <li>stencil_front_mask_write</li> <li>stencil_front_mask_write=(v : Any)</li> <li>stencil_front_reference</li> <li>stencil_front_reference=(v : Any)</li> </ul> <p> MaterialDesc.new() \u00b6 returns <code>MaterialDesc</code></p> <p>no docs found   </p> <p> MaterialDesc.vertex_format \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.vertex_format=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.vertex \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.vertex=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.fragment \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.fragment=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.geometry \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.geometry=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.depth_bias_enabled \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.depth_bias_enabled=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.depth_bias \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.depth_bias=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.depth_bias_slope_scale \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.depth_bias_slope_scale=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.depth_test \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.depth_test=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.depth_write \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.depth_write=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.depth_compare \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.depth_compare=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_test \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_test=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.write_mask \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.write_mask=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.blending \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.blending=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.alpha_blend \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.alpha_blend=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.rgb_blend \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.rgb_blend=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.src_alpha \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.src_alpha=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.src_rgb \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.src_rgb=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.dest_alpha \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.dest_alpha=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.dest_rgb \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.dest_rgb=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.blend_color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.blend_color=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.cull \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.cull=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.winding \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.winding=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.layers \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.layers=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.inputs \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.inputs=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.blocks \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.blocks=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.replace \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.replace=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_failure_stencil \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_failure_stencil=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_failure_depth \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_failure_depth=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_pass_depth_stencil \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_pass_depth_stencil=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_compare \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_compare=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_mask_read \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_mask_read=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_mask_write \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_mask_write=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_reference \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_back_reference=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_failure_stencil \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_failure_stencil=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_failure_depth \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_failure_depth=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_pass_depth_stencil \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_pass_depth_stencil=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_compare \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_compare=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_mask_read \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_mask_read=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_mask_write \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_mask_write=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_reference \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialDesc.stencil_front_reference=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#materialfunction","title":"MaterialFunction","text":"<p><code>import \"luxe: render\" for MaterialFunction</code></p> <p>no docs found</p> <ul> <li>library</li> <li>library=(v : Any)</li> <li>function</li> <li>function=(v : Any)</li> <li>new()</li> </ul> <p> MaterialFunction.library \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialFunction.library=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialFunction.function \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialFunction.function=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialFunction.new() \u00b6 returns <code>MaterialFunction</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#materialinput","title":"MaterialInput","text":"<p><code>import \"luxe: render\" for MaterialInput</code></p> <p>no docs found</p> <ul> <li>name</li> <li>name=(name : Any)</li> <li>type</li> <li>type=(type : Any)</li> <li>value</li> <li>value=(value : Any)</li> <li>count</li> <li>count=(count : Any)</li> <li>new()</li> <li>new(name: <code>Any</code>, type: <code>Any</code>, value: <code>Any</code>, count: <code>Any</code>)</li> <li>new(name: <code>Any</code>, type: <code>Any</code>, value: <code>Any</code>)</li> <li>init(name: <code>Any</code>, type: <code>Any</code>, value: <code>Any</code>, count: <code>Any</code>)</li> </ul> <p> MaterialInput.name \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInput.name=(name : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInput.type \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInput.type=(type : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInput.value \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInput.value=(value : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInput.count \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInput.count=(count : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInput.new() \u00b6 returns <code>MaterialInput</code></p> <p>no docs found   </p> <p> MaterialInput.new(name: <code>Any</code>, type: <code>Any</code>, value: <code>Any</code>, count: <code>Any</code>) \u00b6 returns <code>MaterialInput</code></p> <p>no docs found   </p> <p> MaterialInput.new(name: <code>Any</code>, type: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>MaterialInput</code></p> <p>no docs found   </p> <p> MaterialInput.init(name: <code>Any</code>, type: <code>Any</code>, value: <code>Any</code>, count: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#materialinputblock","title":"MaterialInputBlock","text":"<p><code>import \"luxe: render\" for MaterialInputBlock</code></p> <p>no docs found</p> <ul> <li>get_defined(name: <code>Any</code>)</li> <li>has_input(block: <code>Any</code>, name: <code>Any</code>)</li> <li>is_input_array(block: <code>Any</code>, name: <code>Any</code>)</li> <li>set_floats(block: <code>MaterialInputBlock</code>, name: <code>String</code>, value: <code>Floats</code>)</li> <li>set_bytes(block: <code>MaterialInputBlock</code>, name: <code>String</code>, value: <code>Bytes</code>)</li> <li>set(block: <code>Any</code>, name: <code>Any</code>, value: <code>Any</code>)</li> </ul> <p> MaterialInputBlock.get_defined(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputBlock.has_input(block: <code>Any</code>, name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputBlock.is_input_array(block: <code>Any</code>, name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputBlock.set_floats(block: <code>MaterialInputBlock</code>, name: <code>String</code>, value: <code>Floats</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputBlock.set_bytes(block: <code>MaterialInputBlock</code>, name: <code>String</code>, value: <code>Bytes</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputBlock.set(block: <code>Any</code>, name: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#materialinputimage","title":"MaterialInputImage","text":"<p><code>import \"luxe: render\" for MaterialInputImage</code></p> <p>no docs found</p> <ul> <li>image</li> <li>image=(image : Any)</li> <li>type</li> <li>type=(type : Any)</li> <li>sampler</li> <li>sampler=(value : Any)</li> <li>new()</li> <li>new(in_image: <code>Any</code>, in_sampler: <code>Any</code>)</li> <li>new(in_image: <code>Any</code>, in_sampler: <code>Any</code>, in_type: <code>Any</code>)</li> </ul> <p> MaterialInputImage.image \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputImage.image=(image : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputImage.type \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputImage.type=(type : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputImage.sampler \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputImage.sampler=(value : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputImage.new() \u00b6 returns <code>MaterialInputImage</code></p> <p>no docs found   </p> <p> MaterialInputImage.new(in_image: <code>Any</code>, in_sampler: <code>Any</code>) \u00b6 returns <code>MaterialInputImage</code></p> <p>no docs found   </p> <p> MaterialInputImage.new(in_image: <code>Any</code>, in_sampler: <code>Any</code>, in_type: <code>Any</code>) \u00b6 returns <code>MaterialInputImage</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#materialinputtype","title":"MaterialInputType","text":"<p><code>import \"luxe: render\" for MaterialInputType</code></p> <p>no docs found</p> <ul> <li>invalid</li> <li>bool</li> <li>bool2</li> <li>bool4</li> <li>int</li> <li>int2</li> <li>int4</li> <li>uint</li> <li>uint2</li> <li>uint4</li> <li>float</li> <li>float2</li> <li>float4</li> <li>mat4</li> <li>image</li> <li>from_string(value: <code>Any</code>)</li> <li>name(value: <code>Any</code>)</li> <li>size_of(value: <code>Any</code>)</li> <li>default_of(value: <code>Any</code>)</li> </ul> <p> MaterialInputType.invalid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.bool \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.bool2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.bool4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.int \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.int2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.int4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.uint2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.uint4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.float \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.float2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.float4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.mat4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.image \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.size_of(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialInputType.default_of(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#materialreplace","title":"MaterialReplace","text":"<p><code>import \"luxe: render\" for MaterialReplace</code></p> <p>no docs found</p> <ul> <li>tag</li> <li>tag=(v : Any)</li> <li>basis</li> <li>basis=(v : Any)</li> <li>new()</li> </ul> <p> MaterialReplace.tag \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialReplace.tag=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialReplace.basis \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialReplace.basis=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MaterialReplace.new() \u00b6 returns <code>MaterialReplace</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#passlayerdesc","title":"PassLayerDesc","text":"<p><code>import \"luxe: render\" for PassLayerDesc</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>display_id</li> <li>display_id=(v : Any)</li> <li>dest</li> <li>dest=(v : Any)</li> <li>basis</li> <li>basis=(v : Any)</li> <li>inputs</li> <li>inputs=(v : Any)</li> <li>targets</li> <li>targets=(v : Any)</li> <li>vertex=(v : Any)</li> <li>vertex</li> <li>fragment=(v : Any)</li> <li>fragment</li> <li>clear_color</li> <li>clear_color=(v : Any)</li> <li>clear_depth</li> <li>clear_depth=(v : Any)</li> <li>blending</li> <li>blending=(v : Any)</li> <li>write_mask</li> <li>write_mask=(v : Any)</li> <li>depth_test</li> <li>depth_test=(v : Any)</li> <li>depth_write</li> <li>depth_write=(v : Any)</li> <li>depth_compare</li> <li>depth_compare=(v : Any)</li> </ul> <p> PassLayerDesc.new() \u00b6 returns <code>PassLayerDesc</code></p> <p>no docs found   </p> <p> PassLayerDesc.display_id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.display_id=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.dest \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.dest=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.basis \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.basis=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.inputs \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.inputs=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.targets \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.targets=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.vertex=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.vertex \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.fragment=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.fragment \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.clear_color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.clear_color=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.clear_depth \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.clear_depth=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.blending \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.blending=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.write_mask \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.write_mask=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.depth_test \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.depth_test=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.depth_write \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.depth_write=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.depth_compare \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PassLayerDesc.depth_compare=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#pixelformat","title":"PixelFormat","text":"<p><code>import \"luxe: render\" for PixelFormat</code></p> <p>no docs found</p> <ul> <li>invalid</li> <li>rgb8Unorm</li> <li>rgb8Unorm_srgb</li> <li>rgb8Snorm</li> <li>rgb8Uint</li> <li>rgb8Sint</li> <li>rgb16Unorm</li> <li>rgb16Snorm</li> <li>rgb16Uint</li> <li>rgb16Sint</li> <li>rgb16Float</li> <li>rgb32Uint</li> <li>rgb32Sint</li> <li>rgb32Float</li> <li>rgba8Unorm</li> <li>rgba8Unorm_srgb</li> <li>rgba8Snorm</li> <li>rgba8Uint</li> <li>rgba8Sint</li> <li>rgba16Unorm</li> <li>rgba16Snorm</li> <li>rgba16Uint</li> <li>rgba16Sint</li> <li>rgba16Float</li> <li>rgba32Uint</li> <li>rgba32Sint</li> <li>rgba32Float</li> <li>r11g11b10Float</li> <li>bgra8Unorm</li> <li>bgra8Unorm_srgb</li> <li>depth16Unorm</li> <li>depth32Float</li> <li>stencil8</li> <li>depth24Unorm_stencil8</li> <li>depth32Float_stencil8</li> <li>bc1_rgba</li> <li>bc3_rgba</li> <li>r8Unorm</li> <li>r8Snorm</li> <li>r8Uint</li> <li>r8Sint</li> <li>rg8Unorm</li> <li>rg8Snorm</li> <li>rg8Uint</li> <li>rg8Sint</li> <li>r16Uint</li> <li>r16Sint</li> <li>r16Float</li> <li>rg16Uint</li> <li>rg16Sint</li> <li>rg16Float</li> <li>r32Uint</li> <li>r32Sint</li> <li>r32Float</li> <li>rg32Uint</li> <li>rg32Sint</li> <li>rg32Float</li> <li>from_string(value: <code>Any</code>)</li> <li>name(value: <code>Any</code>)</li> </ul> <p> PixelFormat.invalid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb8Unorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb8Unorm_srgb \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb8Snorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb8Uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb8Sint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb16Unorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb16Snorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb16Uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb16Sint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb16Float \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb32Uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb32Sint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgb32Float \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba8Unorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba8Unorm_srgb \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba8Snorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba8Uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba8Sint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba16Unorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba16Snorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba16Uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba16Sint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba16Float \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba32Uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba32Sint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rgba32Float \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.r11g11b10Float \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.bgra8Unorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.bgra8Unorm_srgb \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.depth16Unorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.depth32Float \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.stencil8 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.depth24Unorm_stencil8 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.depth32Float_stencil8 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.bc1_rgba \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.bc3_rgba \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.r8Unorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.r8Snorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.r8Uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.r8Sint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rg8Unorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rg8Snorm \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rg8Uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rg8Sint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.r16Uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.r16Sint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.r16Float \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rg16Uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rg16Sint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rg16Float \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.r32Uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.r32Sint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.r32Float \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rg32Uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rg32Sint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.rg32Float \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PixelFormat.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#pose","title":"Pose","text":"<p><code>import \"luxe: render\" for Pose</code></p> <p>no docs found</p> <ul> <li>create(skeleton: <code>Skeleton</code>)</li> <li>destroy(pose: <code>Pose</code>)</li> <li>reset(pose: <code>Pose</code>)</li> <li>copy(from: <code>Pose</code>, to: <code>Pose</code>)</li> <li>get_bone_pos_joint(pose: <code>Pose</code>, bone_id: <code>String</code>)</li> <li>get_bone_pos(pose: <code>Pose</code>, bone_id: <code>String</code>)</li> <li>get_bone_up(pose: <code>Pose</code>, bone_id: <code>String</code>)</li> <li>get_bone_forward(pose: <code>Pose</code>, bone_id: <code>String</code>)</li> <li>get_bone_right(pose: <code>Pose</code>, bone_id: <code>String</code>)</li> </ul> <p> Pose.create(skeleton: <code>Skeleton</code>) \u00b6 returns <code>Pose</code></p> <p>no docs found   </p> <p> Pose.destroy(pose: <code>Pose</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Pose.reset(pose: <code>Pose</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Pose.copy(from: <code>Pose</code>, to: <code>Pose</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Pose.get_bone_pos_joint(pose: <code>Pose</code>, bone_id: <code>String</code>) \u00b6 returns <code>Float3</code></p> <p>no docs found   </p> <p> Pose.get_bone_pos(pose: <code>Pose</code>, bone_id: <code>String</code>) \u00b6 returns <code>Float3</code></p> <p>no docs found   </p> <p> Pose.get_bone_up(pose: <code>Pose</code>, bone_id: <code>String</code>) \u00b6 returns <code>Float3</code></p> <p>no docs found   </p> <p> Pose.get_bone_forward(pose: <code>Pose</code>, bone_id: <code>String</code>) \u00b6 returns <code>Float3</code></p> <p>no docs found   </p> <p> Pose.get_bone_right(pose: <code>Pose</code>, bone_id: <code>String</code>) \u00b6 returns <code>Float3</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#posegraph","title":"PoseGraph","text":"<p><code>import \"luxe: render\" for PoseGraph</code></p> <p>no docs found</p> <ul> <li>create(skeleton: <code>Skeleton</code>)</li> <li>destroy(graph: <code>PoseGraph</code>)</li> <li>valid(graph: <code>PoseGraph</code>)</li> <li>tick(graph: <code>PoseGraph</code>, delta: <code>Num</code>)</li> <li>pose(graph: <code>PoseGraph</code>)</li> <li>set_time(graph: <code>PoseGraph</code>, time: <code>Num</code>)</li> <li>get_time(graph: <code>PoseGraph</code>)</li> <li>node_add(graph: <code>PoseGraph</code>, node: <code>PoseNode</code>)</li> <li>node_remove(graph: <code>PoseGraph</code>, index: <code>Num</code>)</li> <li>node_at(graph: <code>PoseGraph</code>, index: <code>Num</code>)</li> <li>node_index(graph: <code>PoseGraph</code>, node: <code>PoseNode</code>)</li> <li>node_count(graph: <code>PoseGraph</code>)</li> </ul> <p> PoseGraph.create(skeleton: <code>Skeleton</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PoseGraph.destroy(graph: <code>PoseGraph</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PoseGraph.valid(graph: <code>PoseGraph</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> PoseGraph.tick(graph: <code>PoseGraph</code>, delta: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PoseGraph.pose(graph: <code>PoseGraph</code>) \u00b6 returns <code>Pose</code></p> <p>no docs found   </p> <p> PoseGraph.set_time(graph: <code>PoseGraph</code>, time: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PoseGraph.get_time(graph: <code>PoseGraph</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> PoseGraph.node_add(graph: <code>PoseGraph</code>, node: <code>PoseNode</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PoseGraph.node_remove(graph: <code>PoseGraph</code>, index: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PoseGraph.node_at(graph: <code>PoseGraph</code>, index: <code>Num</code>) \u00b6 returns <code>PoseNode</code></p> <p>no docs found   </p> <p> PoseGraph.node_index(graph: <code>PoseGraph</code>, node: <code>PoseNode</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> PoseGraph.node_count(graph: <code>PoseGraph</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#posenode","title":"PoseNode","text":"<p><code>import \"luxe: render\" for PoseNode</code></p> <p>no docs found</p> <ul> <li>create(node_type_id: <code>String</code>)</li> <li>destroy(node: <code>PoseNode</code>)</li> <li>valid(node: <code>PoseNode</code>)</li> <li>pose(node: <code>PoseNode</code>)</li> <li>block(node: <code>PoseNode</code>)</li> <li>input(node: <code>PoseNode</code>)</li> </ul> <p> PoseNode.create(node_type_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PoseNode.destroy(node: <code>PoseNode</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PoseNode.valid(node: <code>PoseNode</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> PoseNode.pose(node: <code>PoseNode</code>) \u00b6 returns <code>Pose</code></p> <p>no docs found   </p> <p> PoseNode.block(node: <code>PoseNode</code>) \u00b6 returns <code>Block</code></p> <p>no docs found   </p> <p> PoseNode.input(node: <code>PoseNode</code>) \u00b6 returns <code>Any</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#primitive","title":"Primitive","text":"<p><code>import \"luxe: render\" for Primitive</code></p> <p>no docs found</p> <ul> <li>point</li> <li>line</li> <li>line_strip</li> <li>triangle</li> <li>triangle_strip</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> Primitive.point \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Primitive.line \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Primitive.line_strip \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Primitive.triangle \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Primitive.triangle_strip \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Primitive.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#render","title":"Render","text":"<p><code>import \"luxe: render\" for Render</code></p> <p>no docs found</p> <ul> <li>dispatch(library: <code>String</code>, function: <code>String</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>submit(set: <code>RenderSet</code>, target_path: <code>RenderPath</code>, target_resource: <code>String</code>, target_region: <code>Float4</code>, mat_proj: <code>Floats</code>, mat_view: <code>Floats</code>)</li> <li>submit_now(set: <code>RenderSet</code>, target_path: <code>RenderPath</code>, target_resource: <code>String</code>, target_region: <code>Float4</code>, mat_proj: <code>Floats</code>, mat_view: <code>Floats</code>)</li> <li>submit_fn(set: <code>RenderSet</code>, target_path: <code>String</code>, target_resource: <code>String</code>, target_region: <code>Float4</code>, mat_proj: <code>Floats</code>, mat_view: <code>Floats</code>, settings: <code>Maps</code>, fn: <code>Fn</code>)</li> <li>create_set()</li> <li>destroy_set(set: <code>RenderSet</code>)</li> <li>valid_set(set: <code>RenderSet</code>)</li> <li>set_add(set: <code>RenderSet</code>, geo: <code>Geometry</code>)</li> <li>set_remove(set: <code>RenderSet</code>, geo: <code>Geometry</code>)</li> <li>set_get_geometry(set: <code>RenderSet</code>, into: <code>List</code>)</li> <li>set_get_count(set: <code>RenderSet</code>)</li> <li>create_path()</li> <li>destroy_path(path: <code>RenderPath</code>)</li> <li>valid_path(path: <code>RenderPath</code>)</li> <li>window_w()</li> <li>window_h()</li> <li>window_state()</li> <li>window_focus()</li> <li>window_hide(state: <code>Any</code>)</li> <li>drawable_w()</li> <li>drawable_h()</li> <li>drawable_ratio()</li> <li>window_set_title(title: <code>String</code>)</li> <li>get_path_vertices(into_pos: <code>Any</code>, offset_pos: <code>Any</code>, stride_pos: <code>Any</code>, into_color: <code>Any</code>, offset_color: <code>Any</code>, stride_color: <code>Any</code>, points: <code>Any</code>, color: <code>Any</code>, thickness: <code>Any</code>, cap: <code>Any</code>, join: <code>Any</code>, closed: <code>Any</code>, miter_limit: <code>Any</code>)</li> <li>get_path_vertex_count(points: <code>Any</code>, thickness: <code>Any</code>, cap: <code>Any</code>, join: <code>Any</code>, closed: <code>Any</code>, miter_limit: <code>Any</code>)</li> <li>push_render_dest(dest: <code>Any</code>, into: <code>Any</code>)</li> <li>path_add_render_layers(path: <code>Any</code>, name: <code>Any</code>, layers_add: <code>Any</code>, layer: <code>Any</code>)</li> <li>path_add_render_layers(path: <code>Any</code>, name: <code>Any</code>, layers_add: <code>Any</code>, layers_exclude: <code>Any</code>, layer: <code>RenderLayerDesc</code>)</li> <li>path_add_render_layer(path: <code>Any</code>, name: <code>Any</code>, layer: <code>RenderLayerDesc</code>)</li> <li>path_add_compute_layer(path: <code>Any</code>, compute_id: <code>Any</code>, display: <code>Any</code>, dimensions: <code>Any</code>, inputs: <code>Any</code>)</li> <li>path_add_pass_layer(path: <code>Any</code>, name: <code>Any</code>, dest: <code>Any</code>, material: <code>Any</code>)</li> <li>path_remove(path: <code>Any</code>, name: <code>Any</code>)</li> <li>path_update(path: <code>Any</code>, name: <code>Any</code>, layer: <code>RenderLayerDesc</code>)</li> <li>define_compute(name: <code>String</code>, library: <code>String</code>, function: <code>String</code>, blocks: <code>List</code>)</li> <li>undefine_compute(name: <code>Any</code>)</li> <li>undefine_sampler_state(name: <code>Any</code>)</li> <li>define_sampler_state(name: <code>Any</code>, desc: <code>Any</code>)</li> <li>define_vertex_format(name: <code>Any</code>, desc: <code>Any</code>)</li> <li>undefine_vertex_format(name: <code>Any</code>)</li> <li>define_resource(name: <code>Any</code>, image: <code>Any</code>)</li> <li>resource_get_image(name: <code>Any</code>)</li> <li>undefine_resource(name: <code>Any</code>)</li> <li>create_vertex_buffer(data: <code>Any</code>, length: <code>Any</code>)</li> <li>vertex_buffer_get_size(vertex_buffer: <code>Any</code>)</li> <li>vertex_buffer_get_data(vertex_buffer: <code>Any</code>, into: <code>Any</code>, length: <code>Any</code>, offset: <code>Any</code>)</li> <li>vertex_buffer_replace(vertex_buffer: <code>Any</code>, data: <code>Any</code>, length: <code>Any</code>)</li> <li>vertex_buffer_update(vertex_buffer: <code>Any</code>, data: <code>Any</code>, length: <code>Any</code>, data_src_offset: <code>Any</code>, dest_offset: <code>Any</code>)</li> <li>destroy_vertex_buffer(vertex_buffer: <code>Any</code>)</li> <li>create_index_buffer(data: <code>Any</code>, length: <code>Any</code>)</li> <li>create_index_buffer32(data: <code>Any</code>, length: <code>Any</code>)</li> <li>index_buffer_get_size(index_buffer: <code>Any</code>)</li> <li>index_buffer_get_data(index_buffer: <code>Any</code>, into: <code>Any</code>, length: <code>Any</code>, offset: <code>Any</code>)</li> <li>index_buffer_replace(index_buffer: <code>Any</code>, data: <code>Any</code>, length: <code>Any</code>)</li> <li>index_buffer_update(index_buffer: <code>Any</code>, data: <code>Any</code>, length: <code>Any</code>, data_src_offset: <code>Any</code>, dest_offset: <code>Any</code>)</li> <li>destroy_index_buffer(index_buffer: <code>Any</code>)</li> <li>create_text(material: <code>Any</code>, default_size: <code>Any</code>, default_font: <code>Any</code>, default_color: <code>Any</code>, render_set: <code>Any</code>)</li> <li>destroy_text(text: <code>Any</code>)</li> <li>valid_text(text: <code>Any</code>)</li> <li>text_attr_clear(text: <code>Any</code>)</li> <li>text_set_text_buffer(text: <code>Any</code>, string: <code>Any</code>)</li> <li>text_set_attr(text: <code>Text</code>, start: <code>Num</code>, length: <code>Num</code>, type: <code>TextAttrType</code>, key: <code>String</code>, value: <code>Any</code>)</li> <li>text_set_outline(text: <code>Text</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>)</li> <li>text_set_shadow(text: <code>Text</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>)</li> <li>text_set_pos(text: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>)</li> <li>text_set_align(text: <code>Any</code>, align: <code>Any</code>, align_vertical: <code>Any</code>)</li> <li>text_set_bounds(text: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>)</li> <li>text_commit(text: <code>Any</code>)</li> <li>text_get_geometry(text: <code>Any</code>)</li> <li>text_get_extents(text: <code>Any</code>, offset: <code>Any</code>, count: <code>Any</code>)</li> <li>text_get_extents(text: <code>Any</code>)</li> <li>text_get_character_bounds(text: <code>Any</code>, index: <code>Any</code>)</li> <li>text_set_text(text: <code>Any</code>, string: <code>Any</code>)</li> <li>kVertexAttributes</li> <li>kColorTargets</li> <li>kMaterialLayerTargets</li> <li>kMaterialInputs</li> <li>kMaterialReplace</li> <li>kMaterialPassUsage</li> <li>kStencilUnset</li> </ul> <p> Render.dispatch(library: <code>String</code>, function: <code>String</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Dispatch a compute function directly (todo: doesn't have a way to get inputs atm)   </p> <p> Render.submit(set: <code>RenderSet</code>, target_path: <code>RenderPath</code>, target_resource: <code>String</code>, target_region: <code>Float4</code>, mat_proj: <code>Floats</code>, mat_view: <code>Floats</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.submit_now(set: <code>RenderSet</code>, target_path: <code>RenderPath</code>, target_resource: <code>String</code>, target_region: <code>Float4</code>, mat_proj: <code>Floats</code>, mat_view: <code>Floats</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.submit_fn(set: <code>RenderSet</code>, target_path: <code>String</code>, target_resource: <code>String</code>, target_region: <code>Float4</code>, mat_proj: <code>Floats</code>, mat_view: <code>Floats</code>, settings: <code>Maps</code>, fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.create_set() \u00b6 returns <code>RenderSet</code></p> <p>no docs found   </p> <p> Render.destroy_set(set: <code>RenderSet</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Render.valid_set(set: <code>RenderSet</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.set_add(set: <code>RenderSet</code>, geo: <code>Geometry</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.set_remove(set: <code>RenderSet</code>, geo: <code>Geometry</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.set_get_geometry(set: <code>RenderSet</code>, into: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.set_get_count(set: <code>RenderSet</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.create_path() \u00b6 returns <code>RenderPath</code></p> <p>no docs found   </p> <p> Render.destroy_path(path: <code>RenderPath</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.valid_path(path: <code>RenderPath</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.window_w() \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Render.window_h() \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Render.window_state() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.window_focus() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.window_hide(state: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.drawable_w() \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Render.drawable_h() \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Render.drawable_ratio() \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Render.window_set_title(title: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Render.get_path_vertices(into_pos: <code>Any</code>, offset_pos: <code>Any</code>, stride_pos: <code>Any</code>, into_color: <code>Any</code>, offset_color: <code>Any</code>, stride_color: <code>Any</code>, points: <code>Any</code>, color: <code>Any</code>, thickness: <code>Any</code>, cap: <code>Any</code>, join: <code>Any</code>, closed: <code>Any</code>, miter_limit: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.get_path_vertex_count(points: <code>Any</code>, thickness: <code>Any</code>, cap: <code>Any</code>, join: <code>Any</code>, closed: <code>Any</code>, miter_limit: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.push_render_dest(dest: <code>Any</code>, into: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.path_add_render_layers(path: <code>Any</code>, name: <code>Any</code>, layers_add: <code>Any</code>, layer: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.path_add_render_layers(path: <code>Any</code>, name: <code>Any</code>, layers_add: <code>Any</code>, layers_exclude: <code>Any</code>, layer: <code>RenderLayerDesc</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.path_add_render_layer(path: <code>Any</code>, name: <code>Any</code>, layer: <code>RenderLayerDesc</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.path_add_compute_layer(path: <code>Any</code>, compute_id: <code>Any</code>, display: <code>Any</code>, dimensions: <code>Any</code>, inputs: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.path_add_pass_layer(path: <code>Any</code>, name: <code>Any</code>, dest: <code>Any</code>, material: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.path_remove(path: <code>Any</code>, name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.path_update(path: <code>Any</code>, name: <code>Any</code>, layer: <code>RenderLayerDesc</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.define_compute(name: <code>String</code>, library: <code>String</code>, function: <code>String</code>, blocks: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.undefine_compute(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.undefine_sampler_state(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.define_sampler_state(name: <code>Any</code>, desc: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.define_vertex_format(name: <code>Any</code>, desc: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.undefine_vertex_format(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.define_resource(name: <code>Any</code>, image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.resource_get_image(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.undefine_resource(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.create_vertex_buffer(data: <code>Any</code>, length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.vertex_buffer_get_size(vertex_buffer: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.vertex_buffer_get_data(vertex_buffer: <code>Any</code>, into: <code>Any</code>, length: <code>Any</code>, offset: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.vertex_buffer_replace(vertex_buffer: <code>Any</code>, data: <code>Any</code>, length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.vertex_buffer_update(vertex_buffer: <code>Any</code>, data: <code>Any</code>, length: <code>Any</code>, data_src_offset: <code>Any</code>, dest_offset: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.destroy_vertex_buffer(vertex_buffer: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.create_index_buffer(data: <code>Any</code>, length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.create_index_buffer32(data: <code>Any</code>, length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.index_buffer_get_size(index_buffer: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.index_buffer_get_data(index_buffer: <code>Any</code>, into: <code>Any</code>, length: <code>Any</code>, offset: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.index_buffer_replace(index_buffer: <code>Any</code>, data: <code>Any</code>, length: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.index_buffer_update(index_buffer: <code>Any</code>, data: <code>Any</code>, length: <code>Any</code>, data_src_offset: <code>Any</code>, dest_offset: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.destroy_index_buffer(index_buffer: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.create_text(material: <code>Any</code>, default_size: <code>Any</code>, default_font: <code>Any</code>, default_color: <code>Any</code>, render_set: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.destroy_text(text: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.valid_text(text: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_attr_clear(text: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_set_text_buffer(text: <code>Any</code>, string: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_set_attr(text: <code>Text</code>, start: <code>Num</code>, length: <code>Num</code>, type: <code>TextAttrType</code>, key: <code>String</code>, value: <code>Any</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Render.text_set_outline(text: <code>Text</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_set_shadow(text: <code>Text</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_set_pos(text: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_set_align(text: <code>Any</code>, align: <code>Any</code>, align_vertical: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_set_bounds(text: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_commit(text: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_get_geometry(text: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_get_extents(text: <code>Any</code>, offset: <code>Any</code>, count: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_get_extents(text: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_get_character_bounds(text: <code>Any</code>, index: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.text_set_text(text: <code>Any</code>, string: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.kVertexAttributes \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.kColorTargets \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.kMaterialLayerTargets \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.kMaterialInputs \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.kMaterialReplace \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.kMaterialPassUsage \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Render.kStencilUnset \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#renderdest","title":"RenderDest","text":"<p><code>import \"luxe: render\" for RenderDest</code></p> <p>no docs found</p> <ul> <li>target_region</li> <li>color</li> <li>depth</li> <li>stencil</li> <li>color=(color : Any)</li> <li>depth=(depth : Any)</li> <li>stencil=(stencil : Any)</li> <li>new()</li> </ul> <p> RenderDest.target_region \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDest.color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDest.depth \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDest.stencil \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDest.color=(color : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDest.depth=(depth : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDest.stencil=(stencil : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDest.new() \u00b6 returns <code>RenderDest</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#renderdestcolor","title":"RenderDestColor","text":"<p><code>import \"luxe: render\" for RenderDestColor</code></p> <p>no docs found</p> <ul> <li>render_target</li> <li>render_target=(render_target : Any)</li> <li>clear_color</li> <li>clear_color=(clear_color : Any)</li> <li>load_action</li> <li>load_action=(load_action : Any)</li> <li>store_action</li> <li>store_action=(store_action : Any)</li> <li>level</li> <li>level=(level : Any)</li> <li>slice</li> <li>slice=(slice : Any)</li> <li>depth</li> <li>depth=(depth : Any)</li> <li>new()</li> </ul> <p> RenderDestColor.render_target \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.render_target=(render_target : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.clear_color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.clear_color=(clear_color : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.load_action \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.load_action=(load_action : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.store_action \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.store_action=(store_action : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.level \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.level=(level : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.slice \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.slice=(slice : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.depth \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.depth=(depth : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestColor.new() \u00b6 returns <code>RenderDestColor</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#renderdestdepth","title":"RenderDestDepth","text":"<p><code>import \"luxe: render\" for RenderDestDepth</code></p> <p>no docs found</p> <ul> <li>render_target</li> <li>render_target=(render_target : Any)</li> <li>clear_depth</li> <li>clear_depth=(clear_depth : Any)</li> <li>load_action</li> <li>load_action=(load_action : Any)</li> <li>store_action</li> <li>store_action=(store_action : Any)</li> <li>level</li> <li>level=(level : Any)</li> <li>slice</li> <li>slice=(slice : Any)</li> <li>depth</li> <li>depth=(depth : Any)</li> <li>new()</li> </ul> <p> RenderDestDepth.render_target \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.render_target=(render_target : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.clear_depth \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.clear_depth=(clear_depth : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.load_action \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.load_action=(load_action : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.store_action \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.store_action=(store_action : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.level \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.level=(level : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.slice \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.slice=(slice : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.depth \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.depth=(depth : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestDepth.new() \u00b6 returns <code>RenderDestDepth</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#renderdeststencil","title":"RenderDestStencil","text":"<p><code>import \"luxe: render\" for RenderDestStencil</code></p> <p>no docs found</p> <ul> <li>render_target</li> <li>render_target=(render_target : Any)</li> <li>clear_stencil</li> <li>clear_stencil=(clear_stencil : Any)</li> <li>load_action</li> <li>load_action=(load_action : Any)</li> <li>store_action</li> <li>store_action=(store_action : Any)</li> <li>level</li> <li>level=(level : Any)</li> <li>slice</li> <li>slice=(slice : Any)</li> <li>depth</li> <li>depth=(depth : Any)</li> <li>new()</li> </ul> <p> RenderDestStencil.render_target \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.render_target=(render_target : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.clear_stencil \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.clear_stencil=(clear_stencil : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.load_action \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.load_action=(load_action : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.store_action \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.store_action=(store_action : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.level \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.level=(level : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.slice \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.slice=(slice : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.depth \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.depth=(depth : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderDestStencil.new() \u00b6 returns <code>RenderDestStencil</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#renderlayerdesc","title":"RenderLayerDesc","text":"<p><code>import \"luxe: render\" for RenderLayerDesc</code></p> <p>no docs found</p> <ul> <li>display_id</li> <li>display_id=(display_id : Any)</li> <li>sort</li> <li>sort=(sort : Any)</li> <li>material_override</li> <li>material_override=(material_override : Any)</li> <li>replace_tag</li> <li>replace_tag=(replace_tag : Any)</li> <li>dest</li> <li>dest=(dest : Any)</li> <li>new()</li> </ul> <p> RenderLayerDesc.display_id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderLayerDesc.display_id=(display_id : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderLayerDesc.sort \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderLayerDesc.sort=(sort : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderLayerDesc.material_override \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderLayerDesc.material_override=(material_override : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderLayerDesc.replace_tag \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderLayerDesc.replace_tag=(replace_tag : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderLayerDesc.dest \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderLayerDesc.dest=(dest : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderLayerDesc.new() \u00b6 returns <code>RenderLayerDesc</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#renderpathcontext","title":"RenderPathContext","text":"<p><code>import \"luxe: render\" for RenderPathContext</code></p> <p>no docs found</p> <ul> <li>settings</li> <li>new(path: <code>String</code>, settings: <code>Map</code>)</li> <li>path</li> <li>change_path(path: <code>String</code>)</li> <li>layer_render(name: <code>String</code>, render_layer_desc: <code>RenderLayerDesc</code>)</li> <li>layers_render(name: <code>Any</code>, layers_add: <code>Any</code>, render_layer_desc: <code>Any</code>)</li> <li>layers_render(name: <code>Any</code>, layers_add: <code>Any</code>, layers_exclude: <code>Any</code>, render_layer_desc: <code>Any</code>)</li> <li>layer_pass(pass_layer_desc: <code>Any</code>)</li> <li>layer_compute(compute_layer_desc: <code>ComputeLayerDesc</code>)</li> <li>get(key: <code>Any</code>, default: <code>Any</code>)</li> <li>set(key: <code>Any</code>, value: <code>Any</code>)</li> </ul> <p> RenderPathContext.settings \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> RenderPathContext.new(path: <code>String</code>, settings: <code>Map</code>) \u00b6 returns <code>RenderPathContext</code></p> <p>no docs found   </p> <p> RenderPathContext.path \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> RenderPathContext.change_path(path: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderPathContext.layer_render(name: <code>String</code>, render_layer_desc: <code>RenderLayerDesc</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderPathContext.layers_render(name: <code>Any</code>, layers_add: <code>Any</code>, render_layer_desc: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderPathContext.layers_render(name: <code>Any</code>, layers_add: <code>Any</code>, layers_exclude: <code>Any</code>, render_layer_desc: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderPathContext.layer_pass(pass_layer_desc: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderPathContext.layer_compute(compute_layer_desc: <code>ComputeLayerDesc</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderPathContext.get(key: <code>Any</code>, default: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderPathContext.set(key: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#renderviewdesc","title":"RenderViewDesc","text":"<p><code>import \"luxe: render\" for RenderViewDesc</code></p> <p>no docs found</p> <ul> <li>target</li> <li>target=(v : Any)</li> <li>target(v: <code>Any</code>)</li> <li>path</li> <li>path=(v : Any)</li> <li>path(v: <code>Any</code>)</li> <li>region</li> <li>region=(v : Any)</li> <li>region(v: <code>Any</code>)</li> <li>settings</li> <li>settings=(v : Any)</li> <li>settings(v: <code>Any</code>)</li> <li>new(target_resource: <code>Any</code>, target_path: <code>Any</code>, target_region: <code>Any</code>, target_settings: <code>Any</code>)</li> <li>new()</li> </ul> <p> RenderViewDesc.target \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderViewDesc.target=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderViewDesc.target(v: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderViewDesc.path \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderViewDesc.path=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderViewDesc.path(v: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderViewDesc.region \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderViewDesc.region=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderViewDesc.region(v: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderViewDesc.settings \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderViewDesc.settings=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderViewDesc.settings(v: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RenderViewDesc.new(target_resource: <code>Any</code>, target_path: <code>Any</code>, target_region: <code>Any</code>, target_settings: <code>Any</code>) \u00b6 returns <code>RenderViewDesc</code></p> <p>no docs found   </p> <p> RenderViewDesc.new() \u00b6 returns <code>RenderViewDesc</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#sampleraddressmode","title":"SamplerAddressMode","text":"<p><code>import \"luxe: render\" for SamplerAddressMode</code></p> <p>no docs found</p> <ul> <li>clamp_to_edge</li> <li>repeat</li> <li>mirror_repeat</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> SamplerAddressMode.clamp_to_edge \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerAddressMode.repeat \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerAddressMode.mirror_repeat \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerAddressMode.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#samplerminmagfilter","title":"SamplerMinMagFilter","text":"<p><code>import \"luxe: render\" for SamplerMinMagFilter</code></p> <p>no docs found</p> <ul> <li>nearest</li> <li>linear</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> SamplerMinMagFilter.nearest \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerMinMagFilter.linear \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerMinMagFilter.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#samplermipfilter","title":"SamplerMipFilter","text":"<p><code>import \"luxe: render\" for SamplerMipFilter</code></p> <p>no docs found</p> <ul> <li>none</li> <li>nearest</li> <li>linear</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> SamplerMipFilter.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerMipFilter.nearest \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerMipFilter.linear \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerMipFilter.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#samplerstate","title":"SamplerState","text":"<p><code>import \"luxe: render\" for SamplerState</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>address_r</li> <li>address_r=(v : Any)</li> <li>address_s</li> <li>address_s=(v : Any)</li> <li>address_t</li> <li>address_t=(v : Any)</li> <li>filter_min</li> <li>filter_min=(v : Any)</li> <li>filter_mag</li> <li>filter_mag=(v : Any)</li> <li>filter_mip</li> <li>filter_mip=(v : Any)</li> </ul> <p> SamplerState.new() \u00b6 returns <code>SamplerState</code></p> <p>no docs found   </p> <p> SamplerState.address_r \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerState.address_r=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerState.address_s \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerState.address_s=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerState.address_t \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerState.address_t=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerState.filter_min \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerState.filter_min=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerState.filter_mag \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerState.filter_mag=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerState.filter_mip \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SamplerState.filter_mip=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#sorttype","title":"SortType","text":"<p><code>import \"luxe: render\" for SortType</code></p> <p>no docs found</p> <ul> <li>front_to_back</li> <li>back_to_front</li> <li>sort_by_z</li> <li>sort_by_z_reverse</li> <li>none</li> </ul> <p> SortType.front_to_back \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SortType.back_to_front \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SortType.sort_by_z \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SortType.sort_by_z_reverse \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SortType.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#stenciloperation","title":"StencilOperation","text":"<p><code>import \"luxe: render\" for StencilOperation</code></p> <p>no docs found</p> <ul> <li>keep</li> <li>zero</li> <li>replace</li> <li>increment_clamp</li> <li>decrement_clamp</li> <li>invert</li> <li>increment_wrap</li> <li>decrement_wrap</li> <li>invalid</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> StencilOperation.keep \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> StencilOperation.zero \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> StencilOperation.replace \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> StencilOperation.increment_clamp \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> StencilOperation.decrement_clamp \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> StencilOperation.invert \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> StencilOperation.increment_wrap \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> StencilOperation.decrement_wrap \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> StencilOperation.invalid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> StencilOperation.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#storeaction","title":"StoreAction","text":"<p><code>import \"luxe: render\" for StoreAction</code></p> <p>no docs found</p> <ul> <li>dont_care</li> <li>store</li> </ul> <p> StoreAction.dont_care \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> StoreAction.store \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#textalign","title":"TextAlign","text":"<p><code>import \"luxe: render\" for TextAlign</code></p> <p>no docs found</p> <ul> <li>left</li> <li>center</li> <li>right</li> <li>top</li> <li>bottom</li> <li>from_string(value: <code>Any</code>)</li> <li>name(value: <code>Any</code>)</li> </ul> <p> TextAlign.left \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAlign.center \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAlign.right \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAlign.top \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAlign.bottom \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAlign.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAlign.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#textattrtype","title":"TextAttrType","text":"<p><code>import \"luxe: render\" for TextAttrType</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>handle32</li> <li>handle64</li> <li>number</li> <li>string</li> <li>color</li> <li>float2</li> <li>name(value: <code>Any</code>)</li> </ul> <p> TextAttrType.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAttrType.handle32 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAttrType.handle64 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAttrType.number \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAttrType.string \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAttrType.color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAttrType.float2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAttrType.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#textwrapmode","title":"TextWrapMode","text":"<p><code>import \"luxe: render\" for TextWrapMode</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>none</li> <li>word</li> <li>from_string(value: <code>Any</code>)</li> <li>name(value: <code>Any</code>)</li> </ul> <p> TextWrapMode.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextWrapMode.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextWrapMode.word \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextWrapMode.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextWrapMode.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#vertexattr","title":"VertexAttr","text":"<p><code>import \"luxe: render\" for VertexAttr</code></p> <p>no docs found</p> <ul> <li>new(name: <code>Any</code>)</li> <li>name</li> <li>name=(v : Any)</li> <li>format</li> <li>format=(v : Any)</li> <li>offset</li> <li>offset=(v : Any)</li> <li>buffer_index</li> <li>buffer_index=(v : Any)</li> </ul> <p> VertexAttr.new(name: <code>Any</code>) \u00b6 returns <code>VertexAttr</code></p> <p>no docs found   </p> <p> VertexAttr.name \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttr.name=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttr.format \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttr.format=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttr.offset \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttr.offset=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttr.buffer_index \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttr.buffer_index=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#vertexattrformat","title":"VertexAttrFormat","text":"<p><code>import \"luxe: render\" for VertexAttrFormat</code></p> <p>no docs found</p> <ul> <li>invalid</li> <li>bool</li> <li>bool2</li> <li>bool3</li> <li>bool4</li> <li>int</li> <li>int2</li> <li>int3</li> <li>int4</li> <li>uint</li> <li>uint2</li> <li>uint3</li> <li>uint4</li> <li>float</li> <li>float2</li> <li>float3</li> <li>float4</li> <li>double</li> <li>double2</li> <li>double3</li> <li>double4</li> <li>mat4</li> <li>from_string(value: <code>Any</code>)</li> <li>size_of(value: <code>Any</code>)</li> </ul> <p> VertexAttrFormat.invalid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.bool \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.bool2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.bool3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.bool4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.int \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.int2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.int3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.int4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.uint \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.uint2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.uint3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.uint4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.float \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.float2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.float3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.float4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.double \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.double2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.double3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.double4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.mat4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexAttrFormat.size_of(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#vertexformat","title":"VertexFormat","text":"<p><code>import \"luxe: render\" for VertexFormat</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>attributes</li> <li>attributes=(v : Any)</li> <li>layouts</li> <li>layouts=(v : Any)</li> </ul> <p> VertexFormat.new() \u00b6 returns <code>VertexFormat</code></p> <p>no docs found   </p> <p> VertexFormat.attributes \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexFormat.attributes=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexFormat.layouts \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexFormat.layouts=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#vertexinputrate","title":"VertexInputRate","text":"<p><code>import \"luxe: render\" for VertexInputRate</code></p> <p>no docs found</p> <ul> <li>vertex</li> <li>instance</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> VertexInputRate.vertex \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexInputRate.instance \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexInputRate.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#vertexlayout","title":"VertexLayout","text":"<p><code>import \"luxe: render\" for VertexLayout</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>stride</li> <li>stride=(v : Any)</li> </ul> <p> VertexLayout.new() \u00b6 returns <code>VertexLayout</code></p> <p>no docs found   </p> <p> VertexLayout.stride \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> VertexLayout.stride=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/#winding","title":"Winding","text":"<p><code>import \"luxe: render\" for Winding</code></p> <p>no docs found</p> <ul> <li>clockwise</li> <li>counter_clockwise</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> Winding.clockwise \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Winding.counter_clockwise \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Winding.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/sat2D/","title":"sat2D","text":""},{"location":"api/v/next/sat2D/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/sat2D/#luxe-sat2d-module","title":"<code>luxe: sat2D</code> module","text":"<ul> <li>SAT2D </li> </ul>"},{"location":"api/v/next/sat2D/#sat2d","title":"SAT2D","text":"<p><code>import \"luxe: sat2D\" for SAT2D</code></p> <p>The SAT2D API is a collision and query API for the luxe: shape2D shapes and types. It implements the \"separating axis theorom\" for collision.  Note The return values in the API are not user friendly atm, this will improve. They return lists with various values packed inside.</p> <ul> <li>collide_shape(shape1: <code>Any</code>, shape2: <code>Any</code>)</li> <li>collide_shapes(shape: <code>Any</code>, list: <code>Any</code>)</li> <li>contains(shape: <code>Any</code>, point: <code>Any</code>)</li> <li>sweep_shape(shape1: <code>Any</code>, shape2: <code>Any</code>, vel: <code>Any</code>)</li> <li>raycast_ray(ray1: <code>Any</code>, ray2: <code>Any</code>)</li> <li>raycast_rays(ray: <code>Any</code>, rays: <code>Any</code>)</li> <li>raycast_shape(ray: <code>Any</code>, shape: <code>Any</code>)</li> <li>raycast_shapes(ray: <code>Any</code>, shapes: <code>Any</code>)</li> </ul> <p> SAT2D.collide_shape(shape1: <code>Any</code>, shape2: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Check if two <code>Shape2D</code> instances are colliding. Returns a result with several values in a <code>List</code>.</p> <p>The results include a <code>separation</code> value for x and y axis, which is how much to move <code>shape1</code> to cancel out the overlap. An example of using this: move a player <code>shape2D</code> collider, check for collision, and then move them back by <code>separation</code> so that they do not collide anymore.</p> <pre><code>[\n  shape1,       //the original shapes\n  shape2,\n  overlap,      //amount the shapes overlap\n  separation_x, //the amount to separate on the x axis\n  separation_y, //the amount to separate on the y axis\n  normal_x,     //the normal of the collision\n  normal_y      //the amount to separate on the y axis\n]\n</code></pre> <p> SAT2D.collide_shapes(shape: <code>Any</code>, list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Like <code>collide_shape</code> for details on the results, but checks multiple shapes against a single one.  For example <code>SAT2D.collide_shapes(player, walls)</code>, where walls is a list of <code>Shape2D</code> to collide against.</p> <p>Note this returns a list of results, and each result is a list described by <code>collide_shape</code>.</p> <pre><code>//:todo: example. see samples/wip/shape2D\n</code></pre> <p> SAT2D.contains(shape: <code>Any</code>, point: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Returns true if the given <code>Shape2D</code> contains <code>point</code>.   </p> <p> SAT2D.sweep_shape(shape1: <code>Any</code>, shape2: <code>Any</code>, vel: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p> SAT2D.raycast_ray(ray1: <code>Any</code>, ray2: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p> SAT2D.raycast_rays(ray: <code>Any</code>, rays: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p> SAT2D.raycast_shape(ray: <code>Any</code>, shape: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p> SAT2D.raycast_shapes(ray: <code>Any</code>, shapes: <code>Any</code>) \u00b6 returns <code>unknown</code></p>"},{"location":"api/v/next/save/","title":"Save","text":""},{"location":"api/v/next/save/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/save/#luxe-save-module","title":"<code>luxe: save</code> module","text":"<ul> <li>Save </li> <li>SaveScope </li> </ul>"},{"location":"api/v/next/save/#save","title":"Save","text":"<p><code>import \"luxe: save\" for Save</code></p> <p>A cross platform save system with a Key/Value store and file storage for a user, and save slots.</p> <pre><code>  //create a new save profile. loads the default save slot for single save use\n  var save = Save.create(\"organization\", \"game\")\n  \n  //OR\n\n  //create a new slot and set it as the active save slot \n  Save.new_slot(save)\n  \n  //OR\n\n  //Load a save slot from e.g Save.list()\n  var list = Save.list(save)\n  //activate the first slot\n  Save.set_slot(save, list[0])\n\n  \n  //Set some slot specific values\n  Save.set(save, \"key\", \"value\")\n  //Set some user specific values\n  Save.set(save, \"key\", \"value\", SaveScope.user)\n\n  //Get some values from the slot\n  var name = Save.get(save, \"name\", \"default_name\")\n  //get user values, like settings\n  var setting = Save.get(save, \"setting\", false, SaveScope.user)\n</code></pre> <ul> <li>create(org: <code>String</code>, app: <code>String</code>)</li> <li>create(org: <code>String</code>, app: <code>String</code>, user_id: <code>String</code>)</li> <li>save(save: <code>Save</code>)</li> <li>new_slot(save: <code>Save</code>)</li> <li>set_slot(save: <code>Save</code>, slot: <code>String</code>)</li> <li>list(save: <code>Save</code>)</li> <li>file_exists(save: <code>Save</code>, file_id: <code>String</code>)</li> <li>file_exists(save: <code>Save</code>, file_id: <code>String</code>, kind: <code>SaveScope</code>)</li> <li>set_file(save: <code>Save</code>, file_id: <code>String</code>, file_contents: <code>String</code>)</li> <li>set_file(save: <code>Save</code>, file_id: <code>String</code>, file_contents: <code>String</code>, kind: <code>SaveScope</code>)</li> <li>get_file(save: <code>Save</code>, file_id: <code>String</code>)</li> <li>get_file(save: <code>Save</code>, file_id: <code>String</code>, kind: <code>SaveScope</code>)</li> <li>set(save: <code>Save</code>, key: <code>String</code>, value: <code>Any</code>)</li> <li>set(save: <code>Save</code>, key: <code>String</code>, value: <code>Any</code>, kind: <code>SaveScope</code>)</li> <li>get(save: <code>Save</code>, key: <code>String</code>, default: <code>Any</code>)</li> <li>get(save: <code>Save</code>, key: <code>String</code>, default: <code>Any</code>, kind: <code>SaveScope</code>)</li> <li>has(save: <code>Save</code>, key: <code>String</code>)</li> <li>has(save: <code>Save</code>, key: <code>String</code>, kind: <code>SaveScope</code>)</li> <li>get_keys(save: <code>Save</code>)</li> <li>get_keys(save: <code>Save</code>, kind: <code>SaveScope</code>)</li> <li>slot_clear(save: <code>Save</code>, slot: <code>String</code>)</li> <li>slot_backup(save: <code>Save</code>, slot: <code>String</code>)</li> <li>slot_modified_time(save: <code>Save</code>, slot: <code>String</code>)</li> <li>slot_file_exists(save: <code>Save</code>, slot: <code>String</code>, file_id: <code>String</code>)</li> <li>slot_set_file(save: <code>Save</code>, slot: <code>String</code>, file_id: <code>String</code>, file_contents: <code>String</code>)</li> <li>slot_get_file(save: <code>Save</code>, slot: <code>String</code>, file_id: <code>String</code>)</li> </ul> <p> Save.create(org: <code>String</code>, app: <code>String</code>) \u00b6 returns <code>Save</code></p> <p>Create a save slot for the given organization/app name pair. Defaults to 'user' for user id   </p> <p> Save.create(org: <code>String</code>, app: <code>String</code>, user_id: <code>String</code>) \u00b6 returns <code>Save</code></p> <p>Create a save slot for the given user and organization/app name pair. e.g If you have a steam user ID, you'd pass it in here as a string.   </p> <p> Save.save(save: <code>Save</code>) \u00b6 returns <code>unknown</code></p> <p>Flush the data for this profile to storage. Unless auto save on key change is off, unnecessary   </p> <p> Save.new_slot(save: <code>Save</code>) \u00b6 returns <code>None</code></p> <p>Set the current active save slot to a new slot ID.   </p> <p> Save.set_slot(save: <code>Save</code>, slot: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Set the current active save slot to a Slot ID (from Save.list or otherwise).   </p> <p> Save.list(save: <code>Save</code>) \u00b6 returns <code>unknown</code></p> <p>Return a list of save slot uuids for use with the slot query apis, sorted by modified time (latest first)   </p> <p> Save.file_exists(save: <code>Save</code>, file_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Returns true if the given file path can be found for the active save slot   </p> <p> Save.file_exists(save: <code>Save</code>, file_id: <code>String</code>, kind: <code>SaveScope</code>) \u00b6 returns <code>unknown</code></p> <p>Returns true if the given file path can be found   </p> <p> Save.set_file(save: <code>Save</code>, file_id: <code>String</code>, file_contents: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Save the contents of a file at the given path for the active save slot. The path is a relative style path, like <code>some/file/here</code> </p> <p> Save.set_file(save: <code>Save</code>, file_id: <code>String</code>, file_contents: <code>String</code>, kind: <code>SaveScope</code>) \u00b6 returns <code>unknown</code></p> <p>Save the contents of a file at the given path. The path is a relative style path, like <code>some/file/here</code> </p> <p> Save.get_file(save: <code>Save</code>, file_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Return the contents of the file with the given path for the active save slot. If not found, returns null   </p> <p> Save.get_file(save: <code>Save</code>, file_id: <code>String</code>, kind: <code>SaveScope</code>) \u00b6 returns <code>unknown</code></p> <p>Return the contents of the file with the given path. If not found, returns null   </p> <p> Save.set(save: <code>Save</code>, key: <code>String</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Set the value for a key to the given value, for the active save slot   </p> <p> Save.set(save: <code>Save</code>, key: <code>String</code>, value: <code>Any</code>, kind: <code>SaveScope</code>) \u00b6 returns <code>unknown</code></p> <p>Set the value for a key to the given value   </p> <p> Save.get(save: <code>Save</code>, key: <code>String</code>, default: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Returns the value for the given key if found, otherwise returns the default provided, for the active save slot   </p> <p> Save.get(save: <code>Save</code>, key: <code>String</code>, default: <code>Any</code>, kind: <code>SaveScope</code>) \u00b6 returns <code>unknown</code></p> <p>Returns the value for the given key if found, otherwise returns the default provided   </p> <p> Save.has(save: <code>Save</code>, key: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Returns true if the given key can be found, for the active save slot   </p> <p> Save.has(save: <code>Save</code>, key: <code>String</code>, kind: <code>SaveScope</code>) \u00b6 returns <code>unknown</code></p> <p>Returns true if the given key can be found   </p> <p> Save.get_keys(save: <code>Save</code>) \u00b6 returns <code>unknown</code></p> <p>Returns a list of knowns keys, for the active save slot   </p> <p> Save.get_keys(save: <code>Save</code>, kind: <code>SaveScope</code>) \u00b6 returns <code>unknown</code></p> <p>Returns a list of knowns keys   </p> <p> Save.slot_clear(save: <code>Save</code>, slot: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Slot query. Delete a save slot, return true or false for success   </p> <p> Save.slot_backup(save: <code>Save</code>, slot: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Slot query. Makes a backup of the slot, returns a slot ID of the backup if successful, null if false   </p> <p> Save.slot_modified_time(save: <code>Save</code>, slot: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Slot query. Returns the modified time for the given save slot ID   </p> <p> Save.slot_file_exists(save: <code>Save</code>, slot: <code>String</code>, file_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Slot query. Returns true if the given file path can be found for the given save slot ID   </p> <p> Save.slot_set_file(save: <code>Save</code>, slot: <code>String</code>, file_id: <code>String</code>, file_contents: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Slot query. Save the contents of a file at the given path for the given slot ID. The path is a relative style path, like <code>some/file/here</code> </p> <p> Save.slot_get_file(save: <code>Save</code>, slot: <code>String</code>, file_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Slot query. Return the contents of the file with the given path for the given slot ID. If not found, returns null   </p>"},{"location":"api/v/next/save/#savescope","title":"SaveScope","text":"<p><code>import \"luxe: save\" for SaveScope</code></p> <p>no docs found</p> <ul> <li>slot</li> <li>user</li> </ul> <p> SaveScope.slot \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SaveScope.user \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/selection/","title":"Selection","text":""},{"location":"api/v/next/selection/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/selection/#luxe-selection-module","title":"<code>luxe: selection</code> module","text":"<ul> <li>Selection </li> </ul>"},{"location":"api/v/next/selection/#selection","title":"Selection","text":"<p><code>import \"luxe: selection\" for Selection</code></p> <p>no docs found</p> <ul> <li>CHANGE</li> <li>DESELECT</li> <li>SELECT</li> <li>INVALID</li> <li>PRE_CHANGE</li> <li>id</li> <li>events</li> <li>selected</li> <li>any()</li> <li>is_selected(value: <code>Any</code>)</li> <li>is_selected(value: <code>Any</code>, non_transient_only: <code>Bool</code>)</li> <li>is_invalid_selection(value: <code>Any</code>)</li> <li>count</li> <li>first</li> <li>last</li> <li>transient</li> <li>new(context: <code>String</code>)</li> <li>destroy()</li> <li>emit(kind: <code>Any</code>, items: <code>List</code>)</li> <li>start_transient(change: <code>Fn</code>)</li> <li>end_transient()</li> <li>sync(other: <code>Selection</code>)</li> <li>unsync(other: <code>Selection</code>)</li> <li>deselect()</li> <li>deselect(item: <code>Any</code>)</li> <li>deselect_items(items: <code>List</code>)</li> <li>select(item: <code>Any</code>)</li> <li>select(item: <code>Any</code>, plural: <code>Bool</code>)</li> <li>select_items(items: <code>List</code>)</li> <li>select_items(items: <code>List</code>, plural: <code>Bool</code>)</li> <li>toggle(item: <code>Any</code>)</li> <li>notify()</li> <li>set_invalid_handler(fn: <code>Fn</code>)</li> </ul> <p> Selection.CHANGE \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Selection.DESELECT \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Selection.SELECT \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Selection.INVALID \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Selection.PRE_CHANGE \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Selection.id \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Selection.events \u00b6 returns <code>Events</code></p> <p>no docs found   </p> <p> Selection.selected \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Selection.any() \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Selection.is_selected(value: <code>Any</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Selection.is_selected(value: <code>Any</code>, non_transient_only: <code>Bool</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Selection.is_invalid_selection(value: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>returns a string as a reason if not able to select, otherwise returns null   </p> <p> Selection.count \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Selection.first \u00b6 returns <code>Any</code></p> <p>no docs found   </p> <p> Selection.last \u00b6 returns <code>Any</code></p> <p>no docs found   </p> <p> Selection.transient \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Selection.new(context: <code>String</code>) \u00b6 returns <code>Selection</code></p> <p>no docs found   </p> <p> Selection.destroy() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Selection.emit(kind: <code>Any</code>, items: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Selection.start_transient(change: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>Start a transient selection where changes will be stored separately and notifed of a change directly   </p> <p> Selection.end_transient() \u00b6 returns <code>None</code></p> <p>End a transient selection, read .selected before calling to capture the transient selection   </p> <p> Selection.sync(other: <code>Selection</code>) \u00b6 returns <code>unknown</code></p> <p>Sync selection with another instance.   </p> <p> Selection.unsync(other: <code>Selection</code>) \u00b6 returns <code>unknown</code></p> <p>Stop syncing selection.   </p> <p> Selection.deselect() \u00b6 returns <code>unknown</code></p> <p>Clear the selection. emits <code>DESELECT</code> with a list of items deselected   </p> <p> Selection.deselect(item: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Deselect the given item. emits <code>DESELECT</code> with a list containing the item   </p> <p> Selection.deselect_items(items: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>Deselect the given items. emits <code>DESELECT</code> with a list containing the items (ones that were actually selected)   </p> <p> Selection.select(item: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>select the given item. emits <code>SELECT</code> with a list containing the item   </p> <p> Selection.select(item: <code>Any</code>, plural: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>Select the given item, and if plural is true, the item              is added to the existing selection. If not, the selection             is cleared and only this item is selected afterward.              Emits <code>SELECT</code> with a list containing the item   </p> <p> Selection.select_items(items: <code>List</code>) \u00b6 returns <code>None</code></p> <p>Select multiple items. Replaces the current selection. Emits <code>SELECT</code> with a list containing the items   </p> <p> Selection.select_items(items: <code>List</code>, plural: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Select the given items, and if plural is true, the items              are added to the existing selection. If not, the selection             is cleared and only the items are selected afterward.              Emits <code>SELECT</code> with a list containing the items   </p> <p> Selection.toggle(item: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Selection.notify() \u00b6 returns <code>None</code></p> <p>send a change event for the selection   </p> <p> Selection.set_invalid_handler(fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/semver/","title":"Semver","text":""},{"location":"api/v/next/semver/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/semver/#luxe-semver-module","title":"<code>luxe: semver</code> module","text":"<ul> <li>Comparator </li> <li>SemVer </li> <li>SemVerRange </li> <li>SemVerSubset </li> <li>SemVerSubsetInterval </li> </ul>"},{"location":"api/v/next/semver/#comparator","title":"Comparator","text":"<p><code>import \"luxe: semver\" for Comparator</code></p> <p>no docs found</p> <ul> <li>value</li> <li>semver</li> <li>operator</li> <li>loose</li> <li>any</li> <li>new(comp: <code>Any</code>)</li> <li>new(comp: <code>Any</code>, loose: <code>Any</code>)</li> <li>create(comp: <code>Any</code>, loose: <code>Any</code>)</li> <li>inverted()</li> <li>test(version: <code>Any</code>)</li> <li>parse(comp: <code>Any</code>)</li> <li>debug(a: <code>Any</code>)</li> <li>intersects(comp: <code>Any</code>)</li> <li>intersects(comp: <code>Any</code>, loose: <code>Any</code>)</li> </ul> <p> Comparator.value \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Comparator.semver \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Comparator.operator \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Comparator.loose \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Comparator.any \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Comparator.new(comp: <code>Any</code>) \u00b6 returns <code>Comparator</code></p> <p>no docs found   </p> <p> Comparator.new(comp: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>Comparator</code></p> <p>no docs found   </p> <p> Comparator.create(comp: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>Comparator</code></p> <p>no docs found   </p> <p> Comparator.inverted() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Comparator.test(version: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Comparator.parse(comp: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Comparator.debug(a: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Comparator.intersects(comp: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Comparator.intersects(comp: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/semver/#semver","title":"SemVer","text":"<p><code>import \"luxe: semver\" for SemVer</code></p> <p>no docs found</p> <ul> <li>SPEC</li> <li>loose</li> <li>version</li> <li>major</li> <li>minor</li> <li>patch</li> <li>build</li> <li>prerelease</li> <li>raw</li> <li>new(version: <code>Any</code>)</li> <li>new(version: <code>Any</code>, loose: <code>Any</code>)</li> <li>create(version: <code>Any</code>, loose: <code>Any</code>)</li> <li>format()</li> <li>!=(other: <code>Any</code>)</li> <li>==(other: <code>Any</code>)</li> <li>&lt;=(other: <code>Any</code>)</li> <li>&gt;=(other: <code>Any</code>)</li> <li>&gt;(other: <code>Any</code>)</li> <li>&lt;(other: <code>Any</code>)</li> <li>inc(release: <code>Any</code>)</li> <li>inc(release: <code>Any</code>, identifier: <code>Any</code>)</li> <li>compare(other: <code>Any</code>)</li> <li>inc(version: <code>Any</code>, release: <code>Any</code>)</li> <li>inc(version: <code>Any</code>, release: <code>Any</code>, identifier: <code>Any</code>)</li> <li>inc(version: <code>Any</code>, release: <code>Any</code>, loose: <code>Any</code>, identifier: <code>Any</code>)</li> <li>parse(version: <code>Any</code>)</li> <li>parse(version: <code>Any</code>, loose: <code>Any</code>)</li> <li>valid(version: <code>Any</code>)</li> <li>valid(version: <code>Any</code>, loose: <code>Any</code>)</li> <li>clean(version: <code>Any</code>)</li> <li>clean(version: <code>Any</code>, loose: <code>Any</code>)</li> <li>diff(version1: <code>Any</code>, version2: <code>Any</code>)</li> <li>major(a: <code>Any</code>)</li> <li>major(a: <code>Any</code>, loose: <code>Any</code>)</li> <li>minor(a: <code>Any</code>)</li> <li>minor(a: <code>Any</code>, loose: <code>Any</code>)</li> <li>patch(a: <code>Any</code>)</li> <li>patch(a: <code>Any</code>, loose: <code>Any</code>)</li> <li>prerelease(a: <code>Any</code>)</li> <li>prerelease(a: <code>Any</code>, loose: <code>Any</code>)</li> <li>compare(a: <code>Any</code>, b: <code>Any</code>)</li> <li>compare(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>)</li> <li>rcompare(a: <code>Any</code>, b: <code>Any</code>)</li> <li>rcompare(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>)</li> <li>sort(list: <code>Any</code>)</li> <li>sort(list: <code>Any</code>, loose: <code>Any</code>)</li> <li>rsort(list: <code>Any</code>)</li> <li>rsort(list: <code>Any</code>, loose: <code>Any</code>)</li> <li>gt(a: <code>Any</code>, b: <code>Any</code>)</li> <li>gt(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>)</li> <li>lt(a: <code>Any</code>, b: <code>Any</code>)</li> <li>lt(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>)</li> <li>gte(a: <code>Any</code>, b: <code>Any</code>)</li> <li>gte(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>)</li> <li>lte(a: <code>Any</code>, b: <code>Any</code>)</li> <li>lte(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>)</li> <li>eq(a: <code>Any</code>, b: <code>Any</code>)</li> <li>eq(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>)</li> <li>neq(a: <code>Any</code>, b: <code>Any</code>)</li> <li>neq(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>)</li> <li>cmp(a: <code>Any</code>, op: <code>Any</code>, b: <code>Any</code>)</li> <li>cmp(a: <code>Any</code>, op: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>)</li> <li>max_satisfying(versions: <code>Any</code>, range: <code>Any</code>)</li> <li>max_satisfying(versions: <code>Any</code>, range: <code>Any</code>, loose: <code>Any</code>)</li> <li>min_satisfying(versions: <code>Any</code>, range: <code>Any</code>)</li> <li>min_satisfying(versions: <code>Any</code>, range: <code>Any</code>, loose: <code>Any</code>)</li> <li>satisfies(version: <code>Any</code>, range: <code>Any</code>)</li> <li>satisfies(version: <code>Any</code>, range: <code>Any</code>, loose: <code>Any</code>)</li> <li>valid_range(range: <code>Any</code>)</li> <li>valid_range(range: <code>Any</code>, loose: <code>Any</code>)</li> <li>ltr(version: <code>Any</code>, range: <code>Any</code>)</li> <li>ltr(version: <code>Any</code>, range: <code>Any</code>, loose: <code>Any</code>)</li> <li>gtr(version: <code>Any</code>, range: <code>Any</code>)</li> <li>gtr(version: <code>Any</code>, range: <code>Any</code>, loose: <code>Any</code>)</li> <li>outside(version: <code>Any</code>, range: <code>Any</code>, hilo: <code>Any</code>)</li> <li>outside(version: <code>Any</code>, range: <code>Any</code>, hilo: <code>Any</code>, loose: <code>Any</code>)</li> <li>debug(a: <code>Any</code>)</li> <li>compare_main(other: <code>Any</code>)</li> <li>first_not_zero(a: <code>Any</code>, b: <code>Any</code>)</li> <li>first_not_zero(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>)</li> <li>compare_pre(other: <code>Any</code>)</li> <li>compare_identifiers(a: <code>Any</code>, b: <code>Any</code>)</li> </ul> <p> SemVer.SPEC \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.loose \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.version \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.major \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.minor \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.patch \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.build \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.prerelease \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.raw \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.new(version: <code>Any</code>) \u00b6 returns <code>SemVer</code></p> <p>no docs found   </p> <p> SemVer.new(version: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>SemVer</code></p> <p>no docs found   </p> <p> SemVer.create(version: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>SemVer</code></p> <p>no docs found   </p> <p> SemVer.format() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer !=(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer ==(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p>&lt;endpoint module=\"luxe: semver\" class=\"SemVer\" signature=\"&lt;=(other : Any)\"&gt; &lt;signature id=\"SemVer.&lt;=\"&gt;SemVer &lt;=(other: <code>Any</code>) &lt;a class=\"headerlink\" href=\"#SemVer.&lt;=\" title=\"Permanent link\"&gt;\u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> other: <code>Any</code>)  returns <code>unknown</code> <p>no docs found   </p> <p> other: <code>Any</code>)  returns <code>unknown</code> <p>no docs found   </p> <p>&lt;endpoint module=\"luxe: semver\" class=\"SemVer\" signature=\"&lt;(other : Any)\"&gt; &lt;signature id=\"SemVer.&lt;\"&gt;SemVer &lt;(other: <code>Any</code>) &lt;a class=\"headerlink\" href=\"#SemVer.&lt;\" title=\"Permanent link\"&gt;\u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.inc(release: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.inc(release: <code>Any</code>, identifier: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.compare(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.inc(version: <code>Any</code>, release: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.inc(version: <code>Any</code>, release: <code>Any</code>, identifier: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.inc(version: <code>Any</code>, release: <code>Any</code>, loose: <code>Any</code>, identifier: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.parse(version: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.parse(version: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.valid(version: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.valid(version: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.clean(version: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.clean(version: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.diff(version1: <code>Any</code>, version2: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.major(a: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.major(a: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.minor(a: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.minor(a: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.patch(a: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.patch(a: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.prerelease(a: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.prerelease(a: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.compare(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.compare(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.rcompare(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.rcompare(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.sort(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.sort(list: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.rsort(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.rsort(list: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.gt(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.gt(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.lt(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.lt(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.gte(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.gte(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.lte(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.lte(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.eq(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.eq(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.neq(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.neq(a: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.cmp(a: <code>Any</code>, op: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.cmp(a: <code>Any</code>, op: <code>Any</code>, b: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.max_satisfying(versions: <code>Any</code>, range: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.max_satisfying(versions: <code>Any</code>, range: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.min_satisfying(versions: <code>Any</code>, range: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.min_satisfying(versions: <code>Any</code>, range: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.satisfies(version: <code>Any</code>, range: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.satisfies(version: <code>Any</code>, range: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.valid_range(range: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.valid_range(range: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.ltr(version: <code>Any</code>, range: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.ltr(version: <code>Any</code>, range: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.gtr(version: <code>Any</code>, range: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.gtr(version: <code>Any</code>, range: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.outside(version: <code>Any</code>, range: <code>Any</code>, hilo: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.outside(version: <code>Any</code>, range: <code>Any</code>, hilo: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.debug(a: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.compare_main(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.first_not_zero(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.first_not_zero(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.compare_pre(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVer.compare_identifiers(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/semver/#semverrange","title":"Semver","text":"<p><code>import \"luxe: semver\" for SemVerRange</code></p> <p>no docs found</p> <ul> <li>any</li> <li>empty</li> <li>debug(a: <code>Any</code>)</li> <li>set</li> <li>loose</li> <li>range</li> <li>raw</li> <li>isEmpty</li> <li>isAny</li> <li>new(range: <code>Any</code>)</li> <li>new(range: <code>Any</code>, loose: <code>Any</code>)</li> <li>create(range: <code>Any</code>, loose: <code>Any</code>)</li> <li>format()</li> <li>union(other: <code>Any</code>)</li> <li>intersects(range: <code>Any</code>)</li> <li>intersects(range: <code>Any</code>, loose: <code>Any</code>)</li> <li>pick_not_infinite(a: <code>Any</code>, b: <code>Any</code>)</li> <li>pick_infinite(a: <code>Any</code>, b: <code>Any</code>)</li> <li>comparator_intersection(a: <code>Any</code>, b: <code>Any</code>)</li> <li>intersection(other: <code>Any</code>)</li> <li>inverted()</li> <li>subset_contains(other: <code>Any</code>)</li> <li>subset_contains(other: <code>Any</code>, loose: <code>Any</code>)</li> <li>subset_of(other: <code>Any</code>)</li> <li>subset_of(other: <code>Any</code>, loose: <code>Any</code>)</li> <li>subset(needle: <code>Any</code>, haystack: <code>Any</code>)</li> <li>subset(needle: <code>Any</code>, haystack: <code>Any</code>, loose: <code>Any</code>)</li> <li>test(version: <code>Any</code>)</li> <li>is_x(id: <code>Any</code>)</li> <li>test_set(set: <code>Any</code>, version: <code>Any</code>)</li> <li>parse_range(range: <code>Any</code>)</li> <li>parse_comparator(comp: <code>Any</code>, loose: <code>Any</code>)</li> <li>replace_carets(comp: <code>Any</code>, loose: <code>Any</code>)</li> <li>replace_caret(comp: <code>Any</code>, loose: <code>Any</code>)</li> <li>replace_tildes(comp: <code>Any</code>, loose: <code>Any</code>)</li> <li>replace_tilde(comp: <code>Any</code>, loose: <code>Any</code>)</li> <li>replace_x_ranges(comp: <code>Any</code>, loose: <code>Any</code>)</li> <li>replace_x_range(comp: <code>Any</code>, loose: <code>Any</code>)</li> <li>replace_stars(comp: <code>Any</code>, loose: <code>Any</code>)</li> </ul> <p> SemVerRange.any \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.empty \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.debug(a: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.set \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.loose \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.range \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.raw \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.isEmpty \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.isAny \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.new(range: <code>Any</code>) \u00b6 returns <code>SemVerRange</code></p> <p>no docs found   </p> <p> SemVerRange.new(range: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>SemVerRange</code></p> <p>no docs found   </p> <p> SemVerRange.create(range: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>SemVerRange</code></p> <p>no docs found   </p> <p> SemVerRange.format() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.union(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.intersects(range: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.intersects(range: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.pick_not_infinite(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.pick_infinite(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.comparator_intersection(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.intersection(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.inverted() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.subset_contains(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.subset_contains(other: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.subset_of(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.subset_of(other: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.subset(needle: <code>Any</code>, haystack: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.subset(needle: <code>Any</code>, haystack: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.test(version: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.is_x(id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.test_set(set: <code>Any</code>, version: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.parse_range(range: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.parse_comparator(comp: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.replace_carets(comp: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.replace_caret(comp: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.replace_tildes(comp: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.replace_tilde(comp: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.replace_x_ranges(comp: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.replace_x_range(comp: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerRange.replace_stars(comp: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/semver/#semversubset","title":"Semver","text":"<p><code>import \"luxe: semver\" for SemVerSubset</code></p> <p>no docs found</p> <ul> <li>subset(needle: <code>Any</code>, haystack: <code>Any</code>)</li> <li>subset(needle: <code>Any</code>, haystack: <code>Any</code>, loose: <code>Any</code>)</li> <li>gen_interval(comparators: <code>Any</code>)</li> <li>orderEq(v1: <code>Any</code>, v2: <code>Any</code>)</li> <li>orderGt(v1: <code>Any</code>, v2: <code>Any</code>)</li> <li>orderLt(v1: <code>Any</code>, v2: <code>Any</code>)</li> <li>isSubset(needle: <code>Any</code>, haystack: <code>Any</code>)</li> </ul> <p> SemVerSubset.subset(needle: <code>Any</code>, haystack: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerSubset.subset(needle: <code>Any</code>, haystack: <code>Any</code>, loose: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerSubset.gen_interval(comparators: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerSubset.orderEq(v1: <code>Any</code>, v2: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerSubset.orderGt(v1: <code>Any</code>, v2: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerSubset.orderLt(v1: <code>Any</code>, v2: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerSubset.isSubset(needle: <code>Any</code>, haystack: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/semver/#semversubsetinterval","title":"Semver","text":"<p><code>import \"luxe: semver\" for SemVerSubsetInterval</code></p> <p>no docs found</p> <ul> <li>left</li> <li>right</li> <li>leftValue</li> <li>rightValue</li> <li>new(left: <code>Any</code>, leftValue: <code>Any</code>, rightValue: <code>Any</code>, right: <code>Any</code>)</li> </ul> <p> SemVerSubsetInterval.left \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerSubsetInterval.right \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerSubsetInterval.leftValue \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerSubsetInterval.rightValue \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SemVerSubsetInterval.new(left: <code>Any</code>, leftValue: <code>Any</code>, rightValue: <code>Any</code>, right: <code>Any</code>) \u00b6 returns <code>SemVerSubsetInterval</code></p> <p>no docs found   </p>"},{"location":"api/v/next/settings/","title":"Settings","text":""},{"location":"api/v/next/settings/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/settings/#luxe-settings-module","title":"<code>luxe: settings</code> module","text":"<ul> <li>Settings </li> <li>SettingsType </li> </ul>"},{"location":"api/v/next/settings/#settings","title":"Settings","text":"<p><code>import \"luxe: settings\" for Settings</code></p> <p>no docs found</p> <ul> <li>apply(settings_id: <code>String</code>)</li> <li>apply(settings_id: <code>String</code>, settings_lx_data: <code>String</code>)</li> <li>unapply(settings_id: <code>String</code>)</li> <li>forget(key: <code>String</code>)</li> <li>has(key: <code>String</code>)</li> <li>get(key: <code>String</code>, default: <code>Any</code>)</li> <li>set_string(key: <code>String</code>, value: <code>String</code>, length: <code>Num</code>)</li> <li>set_number(key: <code>String</code>, value: <code>Num</code>)</li> <li>set_bool(key: <code>String</code>, value: <code>Bool</code>)</li> <li>set_float2(key: <code>String</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>set_float3(key: <code>String</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>set_float4(key: <code>String</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>)</li> <li>set(key: <code>String</code>, value: <code>Any</code>)</li> </ul> <p> Settings.apply(settings_id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Settings.apply(settings_id: <code>String</code>, settings_lx_data: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Settings.unapply(settings_id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Settings.forget(key: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Settings.has(key: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Settings.get(key: <code>String</code>, default: <code>Any</code>) \u00b6 returns <code>Any</code></p> <p>no docs found   </p> <p> Settings.set_string(key: <code>String</code>, value: <code>String</code>, length: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Settings.set_number(key: <code>String</code>, value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Settings.set_bool(key: <code>String</code>, value: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Settings.set_float2(key: <code>String</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Settings.set_float3(key: <code>String</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Settings.set_float4(key: <code>String</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Settings.set(key: <code>String</code>, value: <code>Any</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p>"},{"location":"api/v/next/settings/#settingstype","title":"SettingsType","text":"<p><code>import \"luxe: settings\" for SettingsType</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>boolean</li> <li>number</li> <li>string</li> <li>float2</li> <li>float3</li> <li>float4</li> <li>name(value: <code>Any</code>)</li> </ul> <p> SettingsType.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SettingsType.boolean \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SettingsType.number \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SettingsType.string \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SettingsType.float2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SettingsType.float3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SettingsType.float4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SettingsType.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/shape2D/","title":"shape2D","text":""},{"location":"api/v/next/shape2D/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/shape2D/#luxe-shape2d-module","title":"<code>luxe: shape2D</code> module","text":"<ul> <li>Ray2D </li> <li>Ray2DType </li> <li>Shape2D </li> <li>Shape2DType </li> </ul>"},{"location":"api/v/next/shape2D/#ray2d","title":"Ray2D","text":"<p><code>import \"luxe: shape2D\" for Ray2D</code></p> <p>no docs found</p> <ul> <li>create(start: <code>Any</code>, end: <code>Any</code>, type: <code>Any</code>)</li> <li>set(ray: <code>Any</code>, start: <code>Any</code>, end: <code>Any</code>, type: <code>Any</code>)</li> <li>set_start(ray: <code>Any</code>, start: <code>Any</code>)</li> <li>set_end(ray: <code>Any</code>, end: <code>Any</code>)</li> <li>set_type(ray: <code>Any</code>, type: <code>Any</code>)</li> <li>get_start(ray: <code>Any</code>)</li> <li>get_end(ray: <code>Any</code>)</li> <li>get_type(ray: <code>Any</code>)</li> </ul> <p> Ray2D.create(start: <code>Any</code>, end: <code>Any</code>, type: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Ray2D.set(ray: <code>Any</code>, start: <code>Any</code>, end: <code>Any</code>, type: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Ray2D.set_start(ray: <code>Any</code>, start: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Ray2D.set_end(ray: <code>Any</code>, end: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Ray2D.set_type(ray: <code>Any</code>, type: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Ray2D.get_start(ray: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Ray2D.get_end(ray: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Ray2D.get_type(ray: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/shape2D/#ray2dtype","title":"Ray2DType","text":"<p><code>import \"luxe: shape2D\" for Ray2DType</code></p> <p>no docs found</p> <ul> <li>finite</li> <li>infinite_end</li> <li>infinite</li> <li>from_string(value: <code>Any</code>)</li> <li>name(value: <code>Any</code>)</li> </ul> <p> Ray2DType.finite \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Ray2DType.infinite_end \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Ray2DType.infinite \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Ray2DType.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Ray2DType.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/shape2D/#shape2d","title":"Shape2D","text":"<p><code>import \"luxe: shape2D\" for Shape2D</code></p> <p>no docs found</p> <ul> <li>create_poly(pos: <code>Any</code>, angle: <code>Any</code>, scale: <code>Any</code>, verts: <code>Any</code>)</li> <li>create_ngon(pos: <code>Any</code>, angle: <code>Any</code>, scale: <code>Any</code>, sides: <code>Any</code>, radius: <code>Any</code>)</li> <li>create_rect(pos: <code>Any</code>, angle: <code>Any</code>, scale: <code>Any</code>, size: <code>Any</code>, centered: <code>Any</code>)</li> <li>create_circle(pos: <code>Any</code>, angle: <code>Any</code>, scale: <code>Any</code>, radius: <code>Any</code>)</li> <li>destroy(shape: <code>Any</code>)</li> <li>set_pos(shape: <code>Any</code>, pos: <code>Any</code>)</li> <li>set_rotation(shape: <code>Any</code>, angle: <code>Any</code>)</li> <li>set_scale(shape: <code>Any</code>, scale: <code>Any</code>)</li> <li>get_type(shape: <code>Any</code>)</li> <li>get_pos(shape: <code>Any</code>)</li> <li>get_bounds(shape: <code>Any</code>, into: <code>Any</code>)</li> <li>get_rotation(shape: <code>Any</code>)</li> <li>get_scale(shape: <code>Any</code>)</li> <li>get_verts(shape: <code>Any</code>)</li> <li>get_radius(shape: <code>Any</code>)</li> </ul> <p> Shape2D.create_poly(pos: <code>Any</code>, angle: <code>Any</code>, scale: <code>Any</code>, verts: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.create_ngon(pos: <code>Any</code>, angle: <code>Any</code>, scale: <code>Any</code>, sides: <code>Any</code>, radius: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.create_rect(pos: <code>Any</code>, angle: <code>Any</code>, scale: <code>Any</code>, size: <code>Any</code>, centered: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.create_circle(pos: <code>Any</code>, angle: <code>Any</code>, scale: <code>Any</code>, radius: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.destroy(shape: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.set_pos(shape: <code>Any</code>, pos: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.set_rotation(shape: <code>Any</code>, angle: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.set_scale(shape: <code>Any</code>, scale: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.get_type(shape: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.get_pos(shape: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.get_bounds(shape: <code>Any</code>, into: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.get_rotation(shape: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.get_scale(shape: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.get_verts(shape: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2D.get_radius(shape: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/shape2D/#shape2dtype","title":"Shape2DType","text":"<p><code>import \"luxe: shape2D\" for Shape2DType</code></p> <p>no docs found</p> <ul> <li>poly</li> <li>circle</li> <li>from_string(value: <code>Any</code>)</li> <li>name(value: <code>Any</code>)</li> </ul> <p> Shape2DType.poly \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2DType.circle \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2DType.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2DType.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/string/","title":"String","text":""},{"location":"api/v/next/string/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/string/#luxe-string-module","title":"<code>luxe: string</code> module","text":"<ul> <li>Loc </li> <li>Str </li> </ul>"},{"location":"api/v/next/string/#loc","title":"Loc","text":"<p><code>import \"luxe: string\" for Loc</code></p> <p>Interface for the localisation system.</p> <p>Each translation always exists in a space and in a language. Spaces are contexts, so you might want different spaces for dialogue/menus/icons. Or you can leave everything in the default \"game\" translation space.</p> <p>Unless specified otherwise, the system will fetch the string from the currently active language if possible, if its not available there it will fall back to the set primary language. If the key isn't registered for that either, \"MISSING.STRING\" will be returned.</p> <p>By default there is no active active language set and the primary language is \"en\".</p> <pre><code>    //by default language is not set and primary language is `en` with no registered strings\n    Log.print(Strings.get(Loc.get_language())) //null\n    Log.print(Strings.get(Loc.get_primary())) //en\n    Loc.set_language(\"en\")\n    Log.print(Loc.get(\"start_game\")) //MISSING.STRING\n\n    //as soon as we add a line, we can query it\n    Loc.add(\"en\", Loc.default_space, \"start_game\", \"Start Game!\")\n    Log.print(Loc.get(\"start_game\")) //Start Game!\n\n    //if we query a word in a language where that translation doesnt exist yet (like toki pona here), it falls back to the primary language\n    Log.print(Loc.get(\"tp\", Loc.default_space, \"start_game\")) //Start Game!\n\n    //but as soon as it is registered, the translation in the respective language is returned\n    Loc.add(\"tp\", Loc.default_space, \"start_game\", \"o open e musi!\")\n    Log.print(Loc.get(\"tp\", Loc.default_space, \"start_game\")) //o open e musi!\n        \n    //same when we set the current language and use the shorthand get\n    Loc.set_language(\"tp\")\n    Log.print(Loc.get(\"start_game\")) //o open e musi!\n</code></pre> <ul> <li>default_space</li> <li>missing_string</li> <li>set_primary(language: <code>String</code>)</li> <li>get_primary()</li> <li>set_language(language: <code>String</code>)</li> <li>get_language()</li> <li>add_language(language: <code>String</code>, plural_form: <code>String</code>)</li> <li>add(language: <code>String</code>, space: <code>String</code>, key: <code>String</code>, string: <code>String</code>)</li> <li>add_plural(language: <code>String</code>, space: <code>String</code>, key: <code>String</code>, strings: <code>List</code>)</li> <li>get(language: <code>String</code>, space: <code>String</code>, key: <code>String</code>)</li> <li>has(language: <code>String</code>, space: <code>String</code>, key: <code>String</code>)</li> <li>get_plural(language: <code>String</code>, space: <code>String</code>, key: <code>String</code>, count: <code>Num</code>)</li> <li>get(space: <code>String</code>, key: <code>String</code>)</li> <li>get(key: <code>String</code>)</li> <li>has(key: <code>String</code>)</li> <li>load_primary(asset_id: <code>String</code>)</li> <li>load_language(asset_id: <code>String</code>)</li> <li>load_language(asset_id: <code>String</code>, primary: <code>Bool</code>)</li> </ul> <p> Loc.default_space \u00b6 returns <code>unknown</code></p> <p>The default space for localisations, \\\"game\\\".   </p> <p> Loc.missing_string \u00b6 returns <code>unknown</code></p> <p>The missing string fallback for the engine, typically \\\"MISSING.STRING\\\".   </p> <p> Loc.set_primary(language: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Set the primary language that is used as fallback if a key can't be found in another language.   </p> <p> Loc.get_primary() \u00b6 returns <code>unknown</code></p> <p>Get the primary language.   </p> <p> Loc.set_language(language: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Set the current language that strings are gotten for unless specified otherwise.   </p> <p> Loc.get_language() \u00b6 returns <code>unknown</code></p> <p>Get the current language.   </p> <p> Loc.add_language(language: <code>String</code>, plural_form: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Add a language with the given <code>id</code> and <code>plural_form</code> expression string (just the expression part, not the whole header).   </p> <p> Loc.add(language: <code>String</code>, space: <code>String</code>, key: <code>String</code>, string: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Add a string to the localisation system.   </p> <p> Loc.add_plural(language: <code>String</code>, space: <code>String</code>, key: <code>String</code>, strings: <code>List</code>) \u00b6 returns <code>None</code></p> <p>Add a plural string to the localisation system.   </p> <p> Loc.get(language: <code>String</code>, space: <code>String</code>, key: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Get the string for a key (or fallback in primary language) from the localisation system for a specific language/space.   </p> <p> Loc.has(language: <code>String</code>, space: <code>String</code>, key: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Check if the string for a key exists in the localisation system for a specific language/space.   </p> <p> Loc.get_plural(language: <code>String</code>, space: <code>String</code>, key: <code>String</code>, count: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Get the string for a key from the localisation system for a specific language/space, with the plural count.   </p> <p> Loc.get(space: <code>String</code>, key: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Get the string for a key (or fallback in primary language) from the localisation system in the current language and in a specific space.   </p> <p> Loc.get(key: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Get the string for a key (or fallback in primary language) from the localisation system in the current language and in the default space.   </p> <p> Loc.has(key: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Check if the string for a key exists in the localisation system for the current language and default space   </p> <p> Loc.load_primary(asset_id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Loc.load_language(asset_id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Loc.load_language(asset_id: <code>String</code>, primary: <code>Bool</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p>"},{"location":"api/v/next/string/#str","title":"Str","text":"<p><code>import \"luxe: string\" for Str</code></p> <p>Utility class for String functions.</p> <ul> <li>split_lines(string: <code>String</code>)</li> <li>split(string: <code>String</code>, delim: <code>String</code>)</li> <li>indent_strip(string: <code>String</code>)</li> <li>indent(string: <code>String</code>)</li> <li>trim(string: <code>String</code>)</li> <li>compare(a: <code>String</code>, b: <code>String</code>)</li> <li>replace(string: <code>String</code>, sub: <code>String</code>, repl: <code>String</code>)</li> <li>is_alphanumeric(str: <code>String</code>)</li> <li>is_numeric(str: <code>String</code>)</li> <li>increment_end(string: <code>String</code>)</li> <li>vec(value: <code>Vec</code>)</li> <li>vec(value: <code>Vec</code>, precision: <code>Num</code>)</li> <li>vec(value: <code>Vec</code>, precision: <code>Num</code>, sep: <code>String</code>)</li> <li>fixed(number: <code>Num</code>, precision: <code>Num</code>)</li> <li>fixed(number: <code>Num</code>)</li> <li>fixed(number: <code>Num</code>, precision: <code>Num</code>, padded: <code>Bool</code>)</li> <li>hex(number: <code>Num</code>)</li> <li>binary(number: <code>Num</code>)</li> <li>binary(number: <code>Num</code>, bit_width: <code>Num</code>)</li> <li>path_is_absolute(path: <code>String</code>)</li> <li>path_directory(path: <code>String</code>)</li> <li>path_filename(path: <code>String</code>)</li> <li>path_extension(path: <code>String</code>)</li> <li>path_extensionless(path: <code>String</code>)</li> <li>bytes_formatted(byte_count: <code>Num</code>)</li> <li>bytes_formatted(byte_count: <code>Num</code>, precision: <code>Num</code>)</li> <li>upper(string: <code>String</code>)</li> <li>lower(string: <code>String</code>)</li> <li>wrap(string: <code>String</code>, column: <code>Num</code>)</li> <li>path(path: <code>String</code>)</li> <li>strip_markup(string: <code>String</code>)</li> <li>path_normalize(string: <code>String</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>, arg9: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>, arg9: <code>Any</code>, arg10: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>, arg9: <code>Any</code>, arg10: <code>Any</code>, arg11: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>, arg9: <code>Any</code>, arg10: <code>Any</code>, arg11: <code>Any</code>, arg12: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>, arg9: <code>Any</code>, arg10: <code>Any</code>, arg11: <code>Any</code>, arg12: <code>Any</code>, arg13: <code>Any</code>)</li> <li>format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>, arg9: <code>Any</code>, arg10: <code>Any</code>, arg11: <code>Any</code>, arg12: <code>Any</code>, arg13: <code>Any</code>, arg14: <code>Any</code>)</li> <li>format_list(string: <code>String</code>, args: <code>List</code>)</li> <li>valid(string: <code>String</code>)</li> <li>template(string: <code>String</code>, key_value_context: <code>Map</code>)</li> </ul> <p> Str.split_lines(string: <code>String</code>) \u00b6 returns <code>List</code></p> <p>Split a string into its lines. Returns <code>[\"\"]</code> for empty strings.</p> <pre><code>    var multiline_string = \\\"\\\"\\\"\n    leaf\n    tree\n    fruit\n    mushroom\n    \\\"\\\"\\\"\n\n    var split_string = Str.split_lines(multiline_string)\n    Log.print(split_string) //[leaf, tree, fruit, mushroom]\n</code></pre> <p> Str.split(string: <code>String</code>, delim: <code>String</code>) \u00b6 returns <code>List</code></p> <p>Deprecated use <code>string.split(delim)</code> Split a string at every occurance of an delimiter.</p> <pre><code>    var input = \"Owl eats Squirrel eats Nuts\"\n    var split_string = Str.split(input, \" eats \")\n    Log.print(split_string) //[Owl, Squirrel, Nuts]\n</code></pre> <p> Str.indent_strip(string: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Removes indentation from the first line of a string, and the same amount from subsequent lines if any.  Lines with shorter indentation than the first line are skipped.</p> <pre><code>    var input = \\\"\\\"\\\"\n        Sparrow\n        Pidgeon\n            Crow\n    \\\"\\\"\\\"\n    var unindented = Str.indent_strip(input)\n    Log.print(unindented) //Sparrow\\nPidgeon\\n    Crow\n</code></pre> <p> Str.indent(string: <code>String</code>) \u00b6 returns <code>Num</code></p> <p>returns how much indentation characters (whitespace or tabs) a string has.</p> <pre><code>    var line = \"\\t  text\"\n    var indent = Str.indent(line)\n    Log.print(indent) //3\n</code></pre> <p> Str.trim(string: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Trims whitespace characters (\" \", \"\\n\", \"\\t\") from front and end of an string. Calls wren core <code>String.trim</code> internally.</p> <pre><code>    var input = \"  \\n\\t   Pallas's cat   \\n\\t  \"\n    var trimmed = Str.trim(input)\n    Log.print(trimmed) //Pallas's cat\n</code></pre> <p> Str.compare(a: <code>String</code>, b: <code>String</code>) \u00b6 returns <code>Num</code></p> <p>Comparison function for strings. Order is based on the unicode number of the first non-equal codepoint or length. Returns <code>1</code> when <code>a &gt; b</code> Returns <code>-1</code> when <code>a &lt; b</code> returns <code>0</code> when theyre equal</p> <pre><code>    Log.print(Str.compare(\"a\", \"b\")) // -1\n    Log.print(Str.compare(\"a\", \"Z\")) // 1\n    Log.print(Str.compare(\"abc\", \"abc\")) // 0\n    Log.print(Str.compare(\"abc\", \"abcd\")) // -1\n    Log.print(Str.compare(\"\u00f6\", \"\u00e4\")) // 1\n</code></pre> <p> Str.replace(string: <code>String</code>, sub: <code>String</code>, repl: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Replace all occurances of one substring with another. Call wren core <code>String.replace</code> internally.</p> <pre><code>    var input = \"Hello World\"\n    var replaced = Str.replace(input, \"o\", \"\u00f8\")\n    Log.print(replaced) //Hell\u00f8 W\u00f8rld\n</code></pre> <p> Str.is_alphanumeric(str: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether all characters in a string are alphanumeric (uppercase or lowercase latin characters or arabic numerals)</p> <pre><code>    Log.print(Str.is_alphanumeric(\"Leaf\")) //true\n    Log.print(Str.is_alphanumeric(\"4Leaf\")) //true\n    Log.print(Str.is_alphanumeric(\"4-leaf\")) //false\n    Log.print(Str.is_alphanumeric(\"W\u00f8rld\")) //false\n</code></pre> <p> Str.is_numeric(str: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether all characters in a string are numeric (arabic numerals)</p> <pre><code>    Log.print(Str.is_alphanumeric(\"Leaf\")) //false\n    Log.print(Str.is_alphanumeric(\"4\")) //true\n    Log.print(Str.is_alphanumeric(\"4-leaf\")) //false\n    Log.print(Str.is_alphanumeric(\"3\u00be\")) //false\n</code></pre> <p> Str.increment_end(string: <code>String</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.vec(value: <code>Vec</code>) \u00b6 returns <code>String</code></p> <p>Get the string representation of a vector. (uses 6 digits after decimal point and spaces between numbers)   </p> <p> Str.vec(value: <code>Vec</code>, precision: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Get the string representation of a vector with the specified digits after the decimal point. (puts spaces between numbers)   </p> <p> Str.vec(value: <code>Vec</code>, precision: <code>Num</code>, sep: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Get the string representation of a vector. You can specify both the precision (digits after decimal point) and the seperator of how the vector is rendered.</p> <pre><code>    var vector = [1, 2, 3.14159265359]\n    Log.print(Str.print(vector)) //1 2 3.141593\n    Log.print(Str.print(vector, 2)) //1 2 3.14\n    Log.print(Str.print(vector, 1, \", \")) //1, 2, 3.1\n</code></pre> <p> Str.fixed(number: <code>Num</code>, precision: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Get the string representation of a number with a specified amount of digits after the decimal point.   </p> <p> Str.fixed(number: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Get the string representation of a number with 6 digits after the decimal points.   </p> <p> Str.fixed(number: <code>Num</code>, precision: <code>Num</code>, padded: <code>Bool</code>) \u00b6 returns <code>String</code></p> <p>Get the string representation of a number with a specified amount of digits after the decimal point. If padded is true, this function adds zeroes until the requested amount of digits after the decimal point is reached.   </p> <p> Str.hex(number: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Get string representation of number in base-16/hexadecimal.   </p> <p> Str.binary(number: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Get string representation of number in base-2/binary.   </p> <p> Str.binary(number: <code>Num</code>, bit_width: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Get string representation of (positive integer) number in base-2/binary. <code>bit_width</code> declares to how many digits the number should be expanded (adds zeroes to left of it).   </p> <p> Str.path_is_absolute(path: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether a path is absolute (instead of relative).   </p> <p> Str.path_directory(path: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Get the directory path of a path pointing to a file.   </p> <p> Str.path_filename(path: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Get the filename (including extension) of a path pointing to a file.   </p> <p> Str.path_extension(path: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Get the extension of a path pointing to a file.   </p> <p> Str.path_extensionless(path: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Get the filename (excluding extension) of a path pointing to a file.   </p> <p> Str.bytes_formatted(byte_count: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Get a byte size as bytes/KB/MB/GB/TB (whichever is the biggest unit that is at least 1) with 3 digits after the decimal place.   </p> <p> Str.bytes_formatted(byte_count: <code>Num</code>, precision: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Get a byte size as bytes/KB/MB/GB/TB (whichever is the biggest unit that is at least 1) with <code>precision</code> digits after the decimal place.   </p> <p> Str.upper(string: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Converts a string to all uppercase.   </p> <p> Str.lower(string: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Converts a string to all lowercase.   </p> <p> Str.wrap(string: <code>String</code>, column: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Wraps text on spaces to keep line length within column width. Does not break words that are longer than column width.   </p> <p> Str.path(path: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Normalize a path.   </p> <p> Str.strip_markup(string: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Strips the luxe markup formatting from the given string, returning the raw value   </p> <p> Str.path_normalize(string: <code>String</code>) \u00b6 returns <code>String</code></p> <p>Normalizes the path also resolving ../ and ./ and so on   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>, arg9: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>, arg9: <code>Any</code>, arg10: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>, arg9: <code>Any</code>, arg10: <code>Any</code>, arg11: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>, arg9: <code>Any</code>, arg10: <code>Any</code>, arg11: <code>Any</code>, arg12: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>, arg9: <code>Any</code>, arg10: <code>Any</code>, arg11: <code>Any</code>, arg12: <code>Any</code>, arg13: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format(string: <code>String</code>, arg0: <code>Any</code>, arg1: <code>Any</code>, arg2: <code>Any</code>, arg3: <code>Any</code>, arg4: <code>Any</code>, arg5: <code>Any</code>, arg6: <code>Any</code>, arg7: <code>Any</code>, arg8: <code>Any</code>, arg9: <code>Any</code>, arg10: <code>Any</code>, arg11: <code>Any</code>, arg12: <code>Any</code>, arg13: <code>Any</code>, arg14: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Str.format_list(string: <code>String</code>, args: <code>List</code>) \u00b6 returns <code>String</code></p> <p>Format the string, replacing placeholder with other text. Placeholders are in the format <code>{x}</code>, where <code>x</code> is an index into the arguments list of <code>format_list</code>, or a numbered argument in the <code>format</code> function. Placeholders can appear multiple times and do not need to appear in order.</p> <pre><code>    Log.print(Str.format(\"{0} {1} {2}\", \"Crown\", \"Trunk\", \"Roots\")) //Crown Trunk Roots\n    Log.print(Str.format(\"{2} {1} {0}\", \"Crown\", \"Trunk\", \"Roots\")) //Roots Trunk Crown\n    Log.print(Str.format(\"{0} {0} {1}\", \"Duck\", \"Goose\")) //Duck Duck Goose\n</code></pre> <p> Str.valid(string: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Check if string is null or empty   </p> <p> Str.template(string: <code>String</code>, key_value_context: <code>Map</code>) \u00b6 returns <code>unknown</code></p> <p>A simple templating helper. Replace parts of the text with data from a given context map, by simple (non nested) string keys. For example, given the string <code>\"hello &lt;[user.name]&gt;\"</code> we can do <code>Str.template(string, {\"user.name\": name})</code>. The keys are delimited with <code>&lt;[</code> and ended with <code>]&gt;</code> in the string. Any not matched, won't be replaced. If you have a wren map with nested values, <code>LX.flatten()</code> can convert to simple key values for you. Values in the map are converted with <code>toString</code> if not a string.</p> <pre><code>  Log.print(Str.template(\"hello &lt;[user.name]&gt;\", {\"user.name\" : \"luxe\"})) //hello luxe\n</code></pre>"},{"location":"api/v/next/terminal/","title":"Terminal","text":""},{"location":"api/v/next/terminal/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/terminal/#luxe-terminal-module","title":"<code>luxe: terminal</code> module","text":"<ul> <li>Terminal </li> </ul>"},{"location":"api/v/next/terminal/#terminal","title":"Terminal","text":"<p><code>import \"luxe: terminal\" for Terminal</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>red</li> <li>cyan</li> <li>reset</li> <li>pink</li> <li>purple</li> <li>lime</li> <li>dim</li> <li>green</li> </ul> <p> Terminal.new() \u00b6 returns <code>Terminal</code></p> <p>no docs found   </p> <p> Terminal.red \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Terminal.cyan \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Terminal.reset \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Terminal.pink \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Terminal.purple \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Terminal.lime \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Terminal.dim \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Terminal.green \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/test/","title":"Test","text":""},{"location":"api/v/next/test/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/test/#luxe-test-module","title":"<code>luxe: test</code> module","text":"<ul> <li>BaseMatchers </li> <li>ConsoleReporter </li> <li>Expectation </li> <li>FiberMatchers </li> <li>Matchers </li> <li>NumMatchers </li> <li>RangeMatchers </li> <li>Reporter </li> <li>Runnable </li> <li>Skippable </li> <li>Stub </li> <li>StubMatchers </li> <li>Suite </li> </ul>"},{"location":"api/v/next/test/#basematchers","title":"BaseMatchers","text":"<p><code>import \"luxe: test\" for BaseMatchers</code></p> <p>no docs found</p> <ul> <li>new(value: <code>Any</code>)</li> <li>value</li> <li>not</li> <li>toBe(klass: <code>Any</code>)</li> <li>toBeFalse</li> <li>toBeTrue</li> <li>toBeNull</li> <li>toEqual(other: <code>Any</code>)</li> <li>toEqualDeeply(other: <code>Any</code>)</li> </ul> <p> BaseMatchers.new(value: <code>Any</code>) \u00b6 returns <code>BaseMatchers</code></p> <p>no docs found   </p> <p> BaseMatchers.value \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BaseMatchers.not \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BaseMatchers.toBe(klass: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BaseMatchers.toBeFalse \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BaseMatchers.toBeTrue \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BaseMatchers.toBeNull \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BaseMatchers.toEqual(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BaseMatchers.toEqualDeeply(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/test/#consolereporter","title":"ConsoleReporter","text":"<p><code>import \"luxe: test\" for ConsoleReporter</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>print_colors=(v : Any)</li> <li>epilogue()</li> <li>runnableSkipped(skippable: <code>Any</code>)</li> <li>suiteStart(title: <code>Any</code>)</li> <li>suiteEnd(title: <code>Any</code>)</li> <li>testStart(runnable: <code>Any</code>)</li> <li>testEnd(runnable: <code>Any</code>)</li> <li>testPassed(runnable: <code>Any</code>)</li> <li>testFailed(runnable: <code>Any</code>)</li> <li>testError(runnable: <code>Any</code>)</li> </ul> <p> ConsoleReporter.new() \u00b6 returns <code>ConsoleReporter</code></p> <p>no docs found   </p> <p> ConsoleReporter.print_colors=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ConsoleReporter.epilogue() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ConsoleReporter.runnableSkipped(skippable: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ConsoleReporter.suiteStart(title: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ConsoleReporter.suiteEnd(title: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ConsoleReporter.testStart(runnable: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ConsoleReporter.testEnd(runnable: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ConsoleReporter.testPassed(runnable: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ConsoleReporter.testFailed(runnable: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ConsoleReporter.testError(runnable: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/test/#expectation","title":"Expectation","text":"<p><code>import \"luxe: test\" for Expectation</code></p> <p>no docs found</p> <ul> <li>new(passed: <code>Any</code>, message: <code>Any</code>)</li> <li>passed</li> <li>message</li> </ul> <p> Expectation.new(passed: <code>Any</code>, message: <code>Any</code>) \u00b6 returns <code>Expectation</code></p> <p>no docs found   </p> <p> Expectation.passed \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Expectation.message \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/test/#fibermatchers","title":"FiberMatchers","text":"<p><code>import \"luxe: test\" for FiberMatchers</code></p> <p>no docs found</p> <ul> <li>new(value: <code>Any</code>)</li> <li>toBeARuntimeError</li> <li>toBeARuntimeError(errorMessage: <code>Any</code>)</li> <li>toBeDone</li> </ul> <p> FiberMatchers.new(value: <code>Any</code>) \u00b6 returns <code>FiberMatchers</code></p> <p>no docs found   </p> <p> FiberMatchers.toBeARuntimeError \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> FiberMatchers.toBeARuntimeError(errorMessage: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> FiberMatchers.toBeDone \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/test/#matchers","title":"Matchers","text":"<p><code>import \"luxe: test\" for Matchers</code></p> <p>no docs found</p> <ul> <li>new(value: <code>Any</code>)</li> </ul> <p> Matchers.new(value: <code>Any</code>) \u00b6 returns <code>Matchers</code></p> <p>no docs found   </p>"},{"location":"api/v/next/test/#nummatchers","title":"NumMatchers","text":"<p><code>import \"luxe: test\" for NumMatchers</code></p> <p>no docs found</p> <ul> <li>new(value: <code>Any</code>)</li> <li>toBeGreaterThan(other: <code>Any</code>)</li> <li>toBeLessThan(other: <code>Any</code>)</li> <li>toBeBetween(min: <code>Any</code>, max: <code>Any</code>)</li> </ul> <p> NumMatchers.new(value: <code>Any</code>) \u00b6 returns <code>NumMatchers</code></p> <p>no docs found   </p> <p> NumMatchers.toBeGreaterThan(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NumMatchers.toBeLessThan(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> NumMatchers.toBeBetween(min: <code>Any</code>, max: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/test/#rangematchers","title":"RangeMatchers","text":"<p><code>import \"luxe: test\" for RangeMatchers</code></p> <p>no docs found</p> <ul> <li>new(value: <code>Any</code>)</li> <li>toContain(other: <code>Any</code>)</li> <li>toBeContainedBy(other: <code>Any</code>)</li> </ul> <p> RangeMatchers.new(value: <code>Any</code>) \u00b6 returns <code>RangeMatchers</code></p> <p>no docs found   </p> <p> RangeMatchers.toContain(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> RangeMatchers.toBeContainedBy(other: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/test/#reporter","title":"Reporter","text":"<p><code>import \"luxe: test\" for Reporter</code></p> <p>no docs found</p> <ul> <li>epilogue()</li> <li>runnableSkipped(skippable: <code>Any</code>)</li> <li>suiteStart(title: <code>Any</code>)</li> <li>suiteEnd(title: <code>Any</code>)</li> <li>testStart(runnable: <code>Any</code>)</li> <li>testPassed(runnable: <code>Any</code>)</li> <li>testFailed(runnable: <code>Any</code>)</li> <li>testError(runnable: <code>Any</code>)</li> <li>testEnd(runnable: <code>Any</code>)</li> </ul> <p> Reporter.epilogue() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Reporter.runnableSkipped(skippable: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Reporter.suiteStart(title: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Reporter.suiteEnd(title: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Reporter.testStart(runnable: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Reporter.testPassed(runnable: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Reporter.testFailed(runnable: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Reporter.testError(runnable: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Reporter.testEnd(runnable: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/test/#runnable","title":"Runnable","text":"<p><code>import \"luxe: test\" for Runnable</code></p> <p>no docs found</p> <ul> <li>new(title: <code>Any</code>, beforeEaches: <code>Any</code>, afterEaches: <code>Any</code>, fn: <code>Any</code>)</li> <li>duration</li> <li>error</li> <li>expectations</li> <li>hasRun</li> <li>run()</li> <li>title</li> </ul> <p> Runnable.new(title: <code>Any</code>, beforeEaches: <code>Any</code>, afterEaches: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>Runnable</code></p> <p>no docs found   </p> <p> Runnable.duration \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Runnable.error \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Runnable.expectations \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Runnable.hasRun \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Runnable.run() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Runnable.title \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/test/#skippable","title":"Skippable","text":"<p><code>import \"luxe: test\" for Skippable</code></p> <p>no docs found</p> <ul> <li>new(title: <code>Any</code>)</li> <li>run</li> <li>title</li> </ul> <p> Skippable.new(title: <code>Any</code>) \u00b6 returns <code>Skippable</code></p> <p>no docs found   </p> <p> Skippable.run \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Skippable.title \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/test/#stub","title":"Stub","text":"<p><code>import \"luxe: test\" for Stub</code></p> <p>no docs found</p> <ul> <li>new(name: <code>Any</code>)</li> <li>new(name: <code>Any</code>, fakeFn: <code>Any</code>)</li> <li>andCallFake(name: <code>Any</code>, fakeFn: <code>Any</code>)</li> <li>andReturnValue(name: <code>Any</code>, returnValue: <code>Any</code>)</li> <li>called</li> <li>calls</li> <li>firstCall</li> <li>mostRecentCall</li> <li>name</li> <li>reset</li> <li>call</li> <li>call()</li> <li>call(a: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>, k: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>, k: <code>Any</code>, l: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>, k: <code>Any</code>, l: <code>Any</code>, m: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>, k: <code>Any</code>, l: <code>Any</code>, m: <code>Any</code>, n: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>, k: <code>Any</code>, l: <code>Any</code>, m: <code>Any</code>, n: <code>Any</code>, o: <code>Any</code>)</li> <li>call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>, k: <code>Any</code>, l: <code>Any</code>, m: <code>Any</code>, n: <code>Any</code>, o: <code>Any</code>, p: <code>Any</code>)</li> </ul> <p> Stub.new(name: <code>Any</code>) \u00b6 returns <code>Stub</code></p> <p>no docs found   </p> <p> Stub.new(name: <code>Any</code>, fakeFn: <code>Any</code>) \u00b6 returns <code>Stub</code></p> <p>no docs found   </p> <p> Stub.andCallFake(name: <code>Any</code>, fakeFn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.andReturnValue(name: <code>Any</code>, returnValue: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.called \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.calls \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.firstCall \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.mostRecentCall \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.name \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.reset \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>, k: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>, k: <code>Any</code>, l: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>, k: <code>Any</code>, l: <code>Any</code>, m: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>, k: <code>Any</code>, l: <code>Any</code>, m: <code>Any</code>, n: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>, k: <code>Any</code>, l: <code>Any</code>, m: <code>Any</code>, n: <code>Any</code>, o: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Stub.call(a: <code>Any</code>, b: <code>Any</code>, c: <code>Any</code>, d: <code>Any</code>, e: <code>Any</code>, f: <code>Any</code>, g: <code>Any</code>, h: <code>Any</code>, i: <code>Any</code>, j: <code>Any</code>, k: <code>Any</code>, l: <code>Any</code>, m: <code>Any</code>, n: <code>Any</code>, o: <code>Any</code>, p: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/test/#stubmatchers","title":"StubMatchers","text":"<p><code>import \"luxe: test\" for StubMatchers</code></p> <p>no docs found</p> <ul> <li>new(value: <code>Any</code>)</li> <li>toHaveBeenCalled</li> <li>toHaveBeenCalled(times: <code>Any</code>)</li> <li>toHaveBeenCalledWith(args: <code>Any</code>)</li> </ul> <p> StubMatchers.new(value: <code>Any</code>) \u00b6 returns <code>StubMatchers</code></p> <p>no docs found   </p> <p> StubMatchers.toHaveBeenCalled \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> StubMatchers.toHaveBeenCalled(times: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> StubMatchers.toHaveBeenCalledWith(args: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/test/#suite","title":"Suite","text":"<p><code>import \"luxe: test\" for Suite</code></p> <p>no docs found</p> <ul> <li>new(name: <code>Any</code>, block: <code>Any</code>)</li> <li>new(name: <code>Any</code>, beforeEaches: <code>Any</code>, afterEaches: <code>Any</code>, block: <code>Any</code>)</li> <li>afterEach</li> <li>afterEach(block: <code>Any</code>)</li> <li>beforeEach</li> <li>beforeEach(block: <code>Any</code>)</li> <li>run(reporter: <code>Any</code>)</li> <li>should(name: <code>Any</code>)</li> <li>should(name: <code>Any</code>, block: <code>Any</code>)</li> <li>skip(block: <code>Any</code>)</li> <li>suite(name: <code>Any</code>)</li> <li>suite(name: <code>Any</code>, block: <code>Any</code>)</li> <li>title</li> </ul> <p> Suite.new(name: <code>Any</code>, block: <code>Any</code>) \u00b6 returns <code>Suite</code></p> <p>no docs found   </p> <p> Suite.new(name: <code>Any</code>, beforeEaches: <code>Any</code>, afterEaches: <code>Any</code>, block: <code>Any</code>) \u00b6 returns <code>Suite</code></p> <p>no docs found   </p> <p> Suite.afterEach \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Suite.afterEach(block: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Suite.beforeEach \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Suite.beforeEach(block: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Suite.run(reporter: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Suite.should(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Suite.should(name: <code>Any</code>, block: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Suite.skip(block: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Suite.suite(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Suite.suite(name: <code>Any</code>, block: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Suite.title \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/toggle/","title":"Toggle","text":""},{"location":"api/v/next/toggle/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/toggle/#luxe-toggle-module","title":"<code>luxe: toggle</code> module","text":"<ul> <li>Toggle </li> </ul>"},{"location":"api/v/next/toggle/#toggle","title":"Toggle","text":"<p><code>import \"luxe: toggle\" for Toggle</code></p> <p>no docs found</p> <ul> <li>create()</li> <li>valid(toggle: <code>Toggle</code>)</li> <li>destroy(toggle: <code>Toggle</code>)</li> <li>set(toggle: <code>Toggle</code>, handle: <code>Num</code>, state: <code>Bool</code>)</li> <li>get(toggle: <code>Toggle</code>, handle: <code>Num</code>)</li> <li>get(toggle: <code>Toggle</code>)</li> <li>filter(toggle: <code>Toggle</code>, handles: <code>List</code>)</li> <li>link(toggle: <code>Toggle</code>, from_handle: <code>Num</code>, to_handle: <code>Num</code>)</li> </ul> <p> Toggle.create() \u00b6 returns <code>Toggle</code></p> <p>no docs found   </p> <p> Toggle.valid(toggle: <code>Toggle</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Toggle.destroy(toggle: <code>Toggle</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Toggle.set(toggle: <code>Toggle</code>, handle: <code>Num</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Toggle.get(toggle: <code>Toggle</code>, handle: <code>Num</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Toggle.get(toggle: <code>Toggle</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Toggle.filter(toggle: <code>Toggle</code>, handles: <code>List</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Toggle.link(toggle: <code>Toggle</code>, from_handle: <code>Num</code>, to_handle: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p>"},{"location":"api/v/next/topograph/","title":"Topograph","text":""},{"location":"api/v/next/topograph/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/topograph/#luxe-topograph-module","title":"<code>luxe: topograph</code> module","text":"<ul> <li>TopoGraph </li> </ul>"},{"location":"api/v/next/topograph/#topograph","title":"TopoGraph","text":"<p><code>import \"luxe: topograph\" for TopoGraph</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>add_vertex(vertex: <code>Any</code>)</li> <li>add_edge(v1: <code>Any</code>, v2: <code>Any</code>)</li> <li>sorted()</li> </ul> <p> TopoGraph.new() \u00b6 returns <code>TopoGraph</code></p> <p>no docs found   </p> <p> TopoGraph.add_vertex(vertex: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TopoGraph.add_edge(v1: <code>Any</code>, v2: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TopoGraph.sorted() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/triangulate/","title":"Triangulate","text":""},{"location":"api/v/next/triangulate/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/triangulate/#luxe-triangulate-module","title":"<code>luxe: triangulate</code> module","text":"<ul> <li>Triangulate </li> </ul>"},{"location":"api/v/next/triangulate/#triangulate","title":"Triangulate","text":"<p><code>import \"luxe: triangulate\" for Triangulate</code></p> <p>no docs found</p> <ul> <li>get_svg(file_contents: <code>String</code>, units: <code>String</code>, dpi: <code>Num</code>, tolerance: <code>Num</code>)</li> <li>svg_to_image(file_contents: <code>String</code>, units: <code>String</code>, dpi: <code>Num</code>, width: <code>Num</code>, height: <code>Num</code>)</li> <li>svg_to_geometry(file_contents: <code>String</code>, units: <code>String</code>, dpi: <code>Num</code>, resolution: <code>Num</code>, limit: <code>Num</code>, basis: <code>String</code>)</li> <li>svg_to_geometry(file_contents: <code>String</code>, units: <code>String</code>, dpi: <code>Num</code>, resolution: <code>Num</code>, limit: <code>Num</code>)</li> <li>points(points: <code>List</code>)</li> <li>polys(points: <code>List</code>, edges: <code>List</code>)</li> </ul> <p> Triangulate.get_svg(file_contents: <code>String</code>, units: <code>String</code>, dpi: <code>Num</code>, tolerance: <code>Num</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Triangulate.svg_to_image(file_contents: <code>String</code>, units: <code>String</code>, dpi: <code>Num</code>, width: <code>Num</code>, height: <code>Num</code>) \u00b6 returns <code>Image</code></p> <p>no docs found   </p> <p> Triangulate.svg_to_geometry(file_contents: <code>String</code>, units: <code>String</code>, dpi: <code>Num</code>, resolution: <code>Num</code>, limit: <code>Num</code>, basis: <code>String</code>) \u00b6 returns <code>Geometry</code></p> <p>no docs found   </p> <p> Triangulate.svg_to_geometry(file_contents: <code>String</code>, units: <code>String</code>, dpi: <code>Num</code>, resolution: <code>Num</code>, limit: <code>Num</code>) \u00b6 returns <code>Geometry</code></p> <p>no docs found   </p> <p> Triangulate.points(points: <code>List</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> Triangulate.polys(points: <code>List</code>, edges: <code>List</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/","title":"Ui","text":""},{"location":"api/v/next/ui/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/ui/#luxe-ui-module","title":"<code>luxe: ui</code> module","text":""},{"location":"api/v/next/version/","title":"Version","text":""},{"location":"api/v/next/version/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/version/#luxe-version-module","title":"<code>luxe: version</code> module","text":""},{"location":"api/v/next/world/","title":"World","text":""},{"location":"api/v/next/world/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/world/#luxe-world-module","title":"<code>luxe: world</code> module","text":"<ul> <li>Body2D </li> <li>Body3D </li> <li>BodyEvent </li> <li>BodyType </li> <li>Clock </li> <li>Entity </li> <li>EntityContextType </li> <li>EntityEventType </li> <li>MeshColliderType </li> <li>ModifierEventType </li> <li>ModifierSystem </li> <li>Modifiers </li> <li>Overlap </li> <li>Physics2D </li> <li>Physics3D </li> <li>Prototype </li> <li>Scene </li> <li>UI </li> <li>UIBehave </li> <li>UIClear </li> <li>UIContain </li> <li>UIDebugMode </li> <li>UIDrop </li> <li>UIEvent </li> <li>UIImageFit </li> <li>UIImageFlags </li> <li>UILayoutMode </li> <li>UIRenderMode </li> <li>WorldEventType </li> <li>WorldRenderDesc </li> </ul>"},{"location":"api/v/next/world/#body2d","title":"Body2D","text":"<p><code>import \"luxe: world\" for Body2D</code></p> <p>no docs found</p> <ul> <li>create(entity: <code>Any</code>)</li> <li>has(entity: <code>Any</code>)</li> <li>create_collider_box(entity: <code>Any</code>, center: <code>Any</code>, size: <code>Any</code>, angle: <code>Any</code>)</li> <li>create_collider_circle(entity: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>)</li> <li>get_center(entity: <code>Any</code>)</li> <li>get_mass(entity: <code>Any</code>)</li> <li>get_inertia(entity: <code>Any</code>)</li> <li>set_type(entity: <code>Any</code>, type: <code>Any</code>)</li> <li>get_type(entity: <code>Any</code>)</li> <li>set_sleeping_allowed(entity: <code>Any</code>, allowed: <code>Any</code>)</li> <li>get_sleeping_allowed(entity: <code>Any</code>)</li> <li>set_sleeping(entity: <code>Any</code>, sleep_state: <code>Any</code>)</li> <li>get_sleeping(entity: <code>Any</code>)</li> <li>set_active(entity: <code>Any</code>, active_state: <code>Any</code>)</li> <li>get_active(entity: <code>Any</code>)</li> <li>set_velocity_linear(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>)</li> <li>get_velocity_linear(entity: <code>Any</code>)</li> <li>set_velocity_angular(entity: <code>Any</code>, angle: <code>Any</code>)</li> <li>get_velocity_angular(entity: <code>Any</code>)</li> <li>set_damping_linear(entity: <code>Any</code>, linear_damping: <code>Any</code>)</li> <li>get_damping_linear(entity: <code>Any</code>)</li> <li>set_damping_angular(entity: <code>Any</code>, angular_damping: <code>Any</code>)</li> <li>get_damping_angular(entity: <code>Any</code>)</li> <li>apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, force_awake: <code>Any</code>)</li> <li>apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>)</li> <li>apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, force_awake: <code>Any</code>)</li> <li>apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>)</li> <li>apply_torque(entity: <code>Any</code>, torque: <code>Any</code>, force_awake: <code>Any</code>)</li> <li>apply_torque(entity: <code>Any</code>, torque: <code>Any</code>)</li> <li>apply_impulse_linear(entity: <code>Any</code>, impulse_x: <code>Any</code>, impulse_y: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, force_awake: <code>Any</code>)</li> <li>apply_impulse_linear(entity: <code>Any</code>, impulse_x: <code>Any</code>, impulse_y: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>)</li> <li>apply_impulse_angular(entity: <code>Any</code>, impulse: <code>Any</code>, force_awake: <code>Any</code>)</li> <li>apply_impulse_angular(entity: <code>Any</code>, impulse: <code>Any</code>)</li> </ul> <p> Body2D.create(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.has(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.create_collider_box(entity: <code>Any</code>, center: <code>Any</code>, size: <code>Any</code>, angle: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.create_collider_circle(entity: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.get_center(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.get_mass(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.get_inertia(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.set_type(entity: <code>Any</code>, type: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.get_type(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.set_sleeping_allowed(entity: <code>Any</code>, allowed: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.get_sleeping_allowed(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.set_sleeping(entity: <code>Any</code>, sleep_state: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.get_sleeping(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.set_active(entity: <code>Any</code>, active_state: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.get_active(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.set_velocity_linear(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.get_velocity_linear(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.set_velocity_angular(entity: <code>Any</code>, angle: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.get_velocity_angular(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.set_damping_linear(entity: <code>Any</code>, linear_damping: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.get_damping_linear(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.set_damping_angular(entity: <code>Any</code>, angular_damping: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.get_damping_angular(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, force_awake: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, force_awake: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.apply_torque(entity: <code>Any</code>, torque: <code>Any</code>, force_awake: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.apply_torque(entity: <code>Any</code>, torque: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.apply_impulse_linear(entity: <code>Any</code>, impulse_x: <code>Any</code>, impulse_y: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, force_awake: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.apply_impulse_linear(entity: <code>Any</code>, impulse_x: <code>Any</code>, impulse_y: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.apply_impulse_angular(entity: <code>Any</code>, impulse: <code>Any</code>, force_awake: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body2D.apply_impulse_angular(entity: <code>Any</code>, impulse: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/world/#body3d","title":"Body3D","text":"<p><code>import \"luxe: world\" for Body3D</code></p> <p>no docs found</p> <ul> <li>create(entity: <code>Any</code>)</li> <li>destroy(entity: <code>Any</code>)</li> <li>has(entity: <code>Any</code>)</li> <li>create_heightfield(entity: <code>Any</code>, image: <code>Any</code>)</li> <li>create_collider_box(entity: <code>Any</code>, center: <code>Any</code>, size: <code>Any</code>, euler: <code>Any</code>, physics_asset: <code>Any</code>)</li> <li>create_collider_box(entity: <code>Any</code>, center: <code>Any</code>, size: <code>Any</code>, euler: <code>Any</code>)</li> <li>create_collider_sphere(entity: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>, physics_asset: <code>Any</code>)</li> <li>create_collider_sphere(entity: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>)</li> <li>create_collider_cylinder(entity: <code>Any</code>, center: <code>Any</code>, size: <code>Any</code>, physics_asset: <code>Any</code>)</li> <li>create_collider_cylinder(entity: <code>Any</code>, center: <code>Any</code>, size: <code>Any</code>)</li> <li>create_collider_capsule(entity: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>, height: <code>Any</code>, physics_asset: <code>Any</code>)</li> <li>create_collider_capsule(entity: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>, height: <code>Any</code>)</li> <li>create_collider_mesh(entity: <code>Any</code>, center: <code>Any</code>, euler: <code>Any</code>, collider_type: <code>MeshColliderType</code>, mesh_asset: <code>Any</code>, mesh_level: <code>Any</code>, physics_asset: <code>Any</code>)</li> <li>create_collider_mesh(entity: <code>Any</code>, center: <code>Any</code>, euler: <code>Any</code>, collider_type: <code>MeshColliderType</code>, mesh_asset: <code>Any</code>, mesh_level: <code>Any</code>)</li> <li>get_aabb(entity: <code>Any</code>)</li> <li>get_center(entity: <code>Any</code>)</li> <li>get_mass(entity: <code>Any</code>)</li> <li>get_inertia(entity: <code>Any</code>)</li> <li>set_physics_asset(entity: <code>Any</code>, physics_asset: <code>Any</code>)</li> <li>on(entity: <code>Any</code>, type: <code>BodyEvent</code>, fn: <code>Any</code>)</li> <li>off(entity: <code>Any</code>, handle: <code>Any</code>)</li> <li>set_channel(entity: <code>Any</code>, channel: <code>Any</code>)</li> <li>set_type(entity: <code>Any</code>, type: <code>Any</code>)</li> <li>get_type(entity: <code>Any</code>)</li> <li>set_sleeping_allowed(entity: <code>Any</code>, allowed: <code>Any</code>)</li> <li>get_sleeping_allowed(entity: <code>Any</code>)</li> <li>set_sleeping(entity: <code>Any</code>, sleep_state: <code>Any</code>)</li> <li>get_sleeping(entity: <code>Any</code>)</li> <li>set_active(entity: <code>Any</code>, active_state: <code>Any</code>)</li> <li>get_active(entity: <code>Any</code>)</li> <li>set_rotation_allowed(entity: <code>Any</code>, axis: <code>Any</code>)</li> <li>get_rotation_allowed(entity: <code>Any</code>)</li> <li>set_velocity_linear(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>)</li> <li>get_velocity_linear(entity: <code>Any</code>)</li> <li>set_velocity_angular(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>)</li> <li>get_velocity_angular(entity: <code>Any</code>)</li> <li>set_damping_linear(entity: <code>Any</code>, linear_damping: <code>Any</code>)</li> <li>get_damping_linear(entity: <code>Any</code>)</li> <li>set_damping_angular(entity: <code>Any</code>, angular_damping: <code>Any</code>)</li> <li>get_damping_angular(entity: <code>Any</code>)</li> <li>apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, force_z: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, force_awake: <code>Any</code>)</li> <li>apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, force_z: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>)</li> <li>apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, force_z: <code>Any</code>, force_awake: <code>Any</code>)</li> <li>apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, force_z: <code>Any</code>)</li> <li>apply_torque(entity: <code>Any</code>, torque_x: <code>Any</code>, torque_y: <code>Any</code>, torque_z: <code>Any</code>, force_awake: <code>Any</code>)</li> <li>apply_torque(entity: <code>Any</code>, torque_x: <code>Any</code>, torque_y: <code>Any</code>, torque_z: <code>Any</code>)</li> <li>apply_impulse_linear(entity: <code>Any</code>, impulse_x: <code>Any</code>, impulse_y: <code>Any</code>, impulse_z: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, force_awake: <code>Any</code>)</li> <li>apply_impulse_linear(entity: <code>Any</code>, impulse_x: <code>Any</code>, impulse_y: <code>Any</code>, impulse_z: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>)</li> <li>apply_impulse_angular(entity: <code>Any</code>, impulse_x: <code>Any</code>, impulse_y: <code>Any</code>, impulse_z: <code>Any</code>, force_awake: <code>Any</code>)</li> <li>apply_impulse_angular(entity: <code>Any</code>, impulse_x: <code>Any</code>, impulse_y: <code>Any</code>, impulse_z: <code>Any</code>)</li> </ul> <p> Body3D.create(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.destroy(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.has(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.create_heightfield(entity: <code>Any</code>, image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.create_collider_box(entity: <code>Any</code>, center: <code>Any</code>, size: <code>Any</code>, euler: <code>Any</code>, physics_asset: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.create_collider_box(entity: <code>Any</code>, center: <code>Any</code>, size: <code>Any</code>, euler: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.create_collider_sphere(entity: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>, physics_asset: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.create_collider_sphere(entity: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.create_collider_cylinder(entity: <code>Any</code>, center: <code>Any</code>, size: <code>Any</code>, physics_asset: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.create_collider_cylinder(entity: <code>Any</code>, center: <code>Any</code>, size: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.create_collider_capsule(entity: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>, height: <code>Any</code>, physics_asset: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.create_collider_capsule(entity: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>, height: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.create_collider_mesh(entity: <code>Any</code>, center: <code>Any</code>, euler: <code>Any</code>, collider_type: <code>MeshColliderType</code>, mesh_asset: <code>Any</code>, mesh_level: <code>Any</code>, physics_asset: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.create_collider_mesh(entity: <code>Any</code>, center: <code>Any</code>, euler: <code>Any</code>, collider_type: <code>MeshColliderType</code>, mesh_asset: <code>Any</code>, mesh_level: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_aabb(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_center(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_mass(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_inertia(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.set_physics_asset(entity: <code>Any</code>, physics_asset: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.on(entity: <code>Any</code>, type: <code>BodyEvent</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.off(entity: <code>Any</code>, handle: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.set_channel(entity: <code>Any</code>, channel: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.set_type(entity: <code>Any</code>, type: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_type(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.set_sleeping_allowed(entity: <code>Any</code>, allowed: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_sleeping_allowed(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.set_sleeping(entity: <code>Any</code>, sleep_state: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_sleeping(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.set_active(entity: <code>Any</code>, active_state: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_active(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.set_rotation_allowed(entity: <code>Any</code>, axis: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_rotation_allowed(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.set_velocity_linear(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_velocity_linear(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.set_velocity_angular(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_velocity_angular(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.set_damping_linear(entity: <code>Any</code>, linear_damping: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_damping_linear(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.set_damping_angular(entity: <code>Any</code>, angular_damping: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.get_damping_angular(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, force_z: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, force_awake: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, force_z: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, force_z: <code>Any</code>, force_awake: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.apply_force(entity: <code>Any</code>, force_x: <code>Any</code>, force_y: <code>Any</code>, force_z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.apply_torque(entity: <code>Any</code>, torque_x: <code>Any</code>, torque_y: <code>Any</code>, torque_z: <code>Any</code>, force_awake: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.apply_torque(entity: <code>Any</code>, torque_x: <code>Any</code>, torque_y: <code>Any</code>, torque_z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.apply_impulse_linear(entity: <code>Any</code>, impulse_x: <code>Any</code>, impulse_y: <code>Any</code>, impulse_z: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, force_awake: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.apply_impulse_linear(entity: <code>Any</code>, impulse_x: <code>Any</code>, impulse_y: <code>Any</code>, impulse_z: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.apply_impulse_angular(entity: <code>Any</code>, impulse_x: <code>Any</code>, impulse_y: <code>Any</code>, impulse_z: <code>Any</code>, force_awake: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Body3D.apply_impulse_angular(entity: <code>Any</code>, impulse_x: <code>Any</code>, impulse_y: <code>Any</code>, impulse_z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/world/#bodyevent","title":"BodyEvent","text":"<p><code>import \"luxe: world\" for BodyEvent</code></p> <p>no docs found</p> <ul> <li>invalid</li> <li>overlap</li> <li>collide</li> <li>name(value: <code>Any</code>)</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> BodyEvent.invalid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BodyEvent.overlap \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BodyEvent.collide \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BodyEvent.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BodyEvent.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/world/#bodytype","title":"BodyType","text":"<p><code>import \"luxe: world\" for BodyType</code></p> <p>no docs found</p> <ul> <li>static_body</li> <li>dynamic_body</li> <li>kinematic_body</li> <li>name(value: <code>Any</code>)</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> BodyType.static_body \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BodyType.dynamic_body \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BodyType.kinematic_body \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BodyType.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BodyType.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/world/#clock","title":"Clock","text":"<p><code>import \"luxe: world\" for Clock</code></p> <p>no docs found</p> <ul> <li>create(world: <code>Any</code>, rate: <code>Any</code>, paused: <code>Any</code>)</li> <li>create(world: <code>Any</code>, rate: <code>Any</code>)</li> <li>time(world: <code>Any</code>, clock: <code>Any</code>)</li> </ul> <p> Clock.create(world: <code>Any</code>, rate: <code>Any</code>, paused: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Clock.create(world: <code>Any</code>, rate: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Clock.time(world: <code>Any</code>, clock: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/world/#entity","title":"Entity","text":"<p><code>import \"luxe: world\" for Entity</code></p> <p>Anything that exists in a world is a <code>entity</code>. The entity itself is just a handle (represented by a number) with which modifiers and a name can be associated. Entities are very lightweight, so creating and destroying many of them usually isnt a concern.</p> <p>An entity in itself does not have a transform (you can attach the <code>transform</code> modifier to it to gain that) or any kind of hierarchy (different implicit hierarchies can result from modifiers). Entities can be created manually in code, or loaded as Scenes or Prototypes.</p> <ul> <li>none</li> <li>create(world: <code>World</code>)</li> <li>create(world: <code>World</code>, name: <code>String</code>)</li> <li>valid(entity: <code>Entity</code>)</li> <li>valid_handle(entity: <code>Entity</code>)</li> <li>get_world(entity: <code>Entity</code>)</li> <li>get(uuid: <code>String</code>)</li> <li>get_addressed_in(context_root: <code>Entity</code>, address: <code>List</code>)</li> <li>get_addressed(relative_to: <code>Entity</code>, address: <code>List</code>)</li> <li>resolve(relative_to: <code>Entity</code>, address: <code>List</code>)</li> <li>get_addressed_context(relative_to: <code>Entity</code>, address: <code>List</code>)</li> <li>get_named(world: <code>World</code>, name: <code>String</code>)</li> <li>get_named_all(world: <code>World</code>, name: <code>String</code>)</li> <li>get_named_in(context: <code>Entity</code>, name: <code>String</code>)</li> <li>get_named_all_in(context: <code>Entity</code>, name: <code>String</code>)</li> <li>get_name(entity: <code>Entity</code>)</li> <li>name(entity: <code>Entity</code>)</li> <li>get_folder(entity: <code>Entity</code>)</li> <li>set_folder(entity: <code>Entity</code>, folder: <code>String</code>)</li> <li>get_asset_id(entity: <code>Entity</code>)</li> <li>set_asset_id(entity: <code>Entity</code>, asset_id: <code>String</code>)</li> <li>get_context_asset_id(entity: <code>Entity</code>)</li> <li>set_context_asset_id(entity: <code>Entity</code>, asset_id: <code>String</code>)</li> <li>get_context_type(entity: <code>Entity</code>)</li> <li>get_context_instance_uuid(entity: <code>Entity</code>)</li> <li>get_context(entity: <code>Entity</code>)</li> <li>get_context_origin(entity: <code>Entity</code>)</li> <li>get_context_address(entity: <code>Entity</code>, context: <code>Entity</code>)</li> <li>list_context_all(context: <code>Entity</code>)</li> <li>list_context_direct(context: <code>Entity</code>)</li> <li>get_context_id(context: <code>Entity</code>)</li> <li>get_origin_address(entity: <code>Entity</code>)</li> <li>get_address(entity: <code>Entity</code>)</li> <li>get_context_is_direct(context: <code>Entity</code>, entity: <code>Entity</code>)</li> <li>init_into_context(entity: <code>Entity</code>, context: <code>Entity</code>)</li> <li>init_into_context(entity: <code>Entity</code>, context: <code>Entity</code>, address_uuid: <code>UUID</code>)</li> <li>note_add(entity: <code>Entity</code>, note: <code>String</code>)</li> <li>note_remove(entity: <code>Entity</code>, note: <code>String</code>)</li> <li>note_has(entity: <code>Entity</code>, note: <code>String</code>)</li> <li>notes(entity: <code>Entity</code>)</li> <li>set_name(entity: <code>Entity</code>, name: <code>String</code>)</li> <li>get_uuid(entity: <code>Entity</code>)</li> <li>set_uuid(entity: <code>Entity</code>, uuid_string: <code>String</code>)</li> <li>destroy(entity: <code>Entity</code>)</li> <li>duplicate(entity: <code>Entity</code>)</li> <li>duplicate(entity: <code>Entity</code>, world: <code>World</code>)</li> </ul> <p> Entity.none \u00b6 returns <code>Entity</code></p> <p>An entity representing no value. Note, not for comparisons! Use Entity.valid(entity) for that   </p> <p> Entity.create(world: <code>World</code>) \u00b6 returns <code>Entity</code></p> <p>Creates a new <code>entity</code> in the given <code>world</code>.</p> <pre><code>var player = Entity.create(app.world)\n</code></pre> <p> Entity.create(world: <code>World</code>, name: <code>String</code>) \u00b6 returns <code>Entity</code></p> <p>Creates a new <code>entity</code> in the given <code>world</code> with the specified <code>String</code> name.</p> <pre><code>var player = Entity.create(app.world, \"player\")\n</code></pre> <p> Entity.valid(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>Checks if the given variable references a valid <code>entity</code>.</p> <pre><code>var player = Entity.get_named(app.world, \"player\")\nif (Entity.valid(player)) {\n  Log.print(\"Got the player entity!\")\n}\n</code></pre> <p> Entity.valid_handle(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>Checks if the given variable references a valid <code>entity</code> handle. Note that when an entity is destroyed, it marks the entity as invalid  for Entity.valid(), but the destroy happens at the end of the frame. This means during that frame the entity can still be \"live\", but not valid.</p> <p>This is mostly useful in the detach handlers, where Entity.valid would return false.   </p> <p> Entity.get_world(entity: <code>Entity</code>) \u00b6 returns <code>World</code></p> <p>Get the <code>world</code> a given <code>entity</code> belongs to</p> <pre><code>var world = Entity.get_world(entity)\n</code></pre> <p> Entity.get(uuid: <code>String</code>) \u00b6 returns <code>Entity</code></p> <p>Get the entity with a given UUID. Since an entity can have  a name that is shared by several entities in the same world,  the unique ID of an entity is used to locate exactly one entity. Generally, no two entities will have the same UUID.</p> <pre><code>var entity = Entity.get(\"5b01869b-fd59-4f2c-892f-4c0b726c79a2\")\n\nif (Entity.valid(entity)) {\n  Log.print(\"found entity\")\n}\n</code></pre> <p> Entity.get_addressed_in(context_root: <code>Entity</code>, address: <code>List</code>) \u00b6 returns <code>Entity</code></p> <p>Find an entity by <code>address</code> in the given context (only).  The address is a list of uuids, and the context is a scene root entity,  or prototype root entity.   </p> <p> Entity.get_addressed(relative_to: <code>Entity</code>, address: <code>List</code>) \u00b6 returns <code>Entity</code></p> <p>Find an entity by <code>address</code> relative to the given entity, and will search upward through all contexts in the tree to try and find the addressed entity. The address is a list of uuids.   </p> <p> Entity.resolve(relative_to: <code>Entity</code>, address: <code>List</code>) \u00b6 returns <code>Entity</code></p> <p>Find an entity by <code>address</code> relative to the given entity, and will search upward through all contexts in the tree to try and find the addressed entity. The address is a list of uuids called a <code>Link</code> typically. Alias for <code>Entity.get_addressed</code>.   </p> <p> Entity.get_addressed_context(relative_to: <code>Entity</code>, address: <code>List</code>) \u00b6 returns <code>Entity</code></p> <p>Find an entity by <code>address</code> relative to the given entity, and will search upward through all contexts in the tree to try and find the addressed entity - but this function will return the context it was found in (e.g the context the address is for). The address is a list of uuids.   </p> <p> Entity.get_named(world: <code>World</code>, name: <code>String</code>) \u00b6 returns <code>Entity</code></p> <p>Get the first <code>entity</code> from the given <code>world</code> with the name <code>name</code>. Which entity is returned is unspecified if there are multiple with the same name. If you need to test further use <code>Entity.get_named_all</code>. Returns null if no entity is found by that name.</p> <pre><code>var player = Entity.get_named(app.world, \"player\")\n</code></pre> <p> Entity.get_named_all(world: <code>World</code>, name: <code>String</code>) \u00b6 returns <code>List</code></p> <p>Get a list of all <code>entities</code> from the given <code>world</code> with the name <code>name</code>. Returns a list of entities with an unspecified order. Returns an empty list if no entities are found.</p> <pre><code>var list = Entity.get_named_all(app.world, \"fern\")\nLog.print(\"There are %(list.count) ferns in this forest!\")\n</code></pre> <p> Entity.get_named_in(context: <code>Entity</code>, name: <code>String</code>) \u00b6 returns <code>Entity</code></p> <p>Get the first <code>entity</code> from the given <code>context</code> with the name <code>name</code>. The context is a scene root or a prototype root entity. Which entity is returned is unspecified if there are multiple with the same name. If you need to test further use <code>Entity.get_named_all</code>. Returns null if no entity is found by that name.</p> <pre><code>var prototype = Prototype.create(world, Asset.prototype(\"proto/example\"))\nvar item = Entity.get_named_in(prototype, \"item\")\n</code></pre> <p> Entity.get_named_all_in(context: <code>Entity</code>, name: <code>String</code>) \u00b6 returns <code>List</code></p> <p>Get a list of all <code>entities</code> from the given <code>context</code> with the name <code>name</code>. The context is a scene root or a prototype root entity. Returns a list of entities with an unspecified order. Returns an empty list if no entities are found.</p> <pre><code>  var scene = Scene.load(world, Asset.scene(\"scene/example\")) {\n  var list = Entity.get_named_all_in(scene, \"fern\")\n  Log.print(\"There are %(list.count) ferns in this forest!\")\n}\n</code></pre> <p> Entity.get_name(entity: <code>Entity</code>) \u00b6 returns <code>StringID</code></p> <p>Get the name of a given <code>entity</code> as a hashed string ID. Use <code>import \"luxe: assets\" for Strings</code> with <code>Strings.get(name)</code> to convert to a string. :note: this ID nuance is wip.</p> <pre><code>Entity.set_name(player, \"player\")\nvar name_id = Entity.get_name(player)\nvar name = Strings.get(name_id)\nLog.print(\"Entity name is `%(name)`!\")\n// prints \"Entity name is `player`\"\n</code></pre> <p> Entity.name(entity: <code>Entity</code>) \u00b6 returns <code>String</code></p> <p>Get the name of a given <code>entity</code> as a string. Supports invalid entities (returns <code>&lt;invalid&gt;</code>).</p> <pre><code>Entity.set_name(player, \"player\")\nvar name = Entity.name(player)\nLog.print(\"Entity name is `%(name)`!\")\n// prints \"Entity name is `player`\"\n</code></pre> <p> Entity.get_folder(entity: <code>Entity</code>) \u00b6 returns <code>String</code></p> <p>get the folder of this entity (used for nested display in a world outliner)   </p> <p> Entity.set_folder(entity: <code>Entity</code>, folder: <code>String</code>) \u00b6 returns <code>None</code></p> <p>set the folder of this entity (used for nested display in a world outliner)   </p> <p> Entity.get_asset_id(entity: <code>Entity</code>) \u00b6 returns <code>String</code></p> <p>get the asset ID of this entity (if it has one)   </p> <p> Entity.set_asset_id(entity: <code>Entity</code>, asset_id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>set the asset ID of this entity (used for e.g editor)   </p> <p> Entity.get_context_asset_id(entity: <code>Entity</code>) \u00b6 returns <code>String</code></p> <p>get the context asset ID of this entity (if it has one)   </p> <p> Entity.set_context_asset_id(entity: <code>Entity</code>, asset_id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>set the context asset ID of this entity (used for e.g editor)   </p> <p> Entity.get_context_type(entity: <code>Entity</code>) \u00b6 returns <code>EntityContextType</code></p> <p>get the context type for an entity   </p> <p> Entity.get_context_instance_uuid(entity: <code>Entity</code>) \u00b6 returns <code>String</code></p> <p>get the context uuid for a given entity. Entity should be EntityContextType <code>scene</code> or <code>prototype</code> or null is returned   </p> <p> Entity.get_context(entity: <code>Entity</code>) \u00b6 returns <code>Entity</code></p> <p>get the context this entity belongs to if any   </p> <p> Entity.get_context_origin(entity: <code>Entity</code>) \u00b6 returns <code>Entity</code></p> <p>get the context that this entity originated from. For example if a scene was loaded and inside it there was a prototype and so on, the scene is the origin.   </p> <p> Entity.get_context_address(entity: <code>Entity</code>, context: <code>Entity</code>) \u00b6 returns <code>List</code></p> <p>get the address of the entity within a given context.   </p> <p> Entity.list_context_all(context: <code>Entity</code>) \u00b6 returns <code>Set</code></p> <p>Get all the entities this context created as a Set of entities.   </p> <p> Entity.list_context_direct(context: <code>Entity</code>) \u00b6 returns <code>Set</code></p> <p>Get all the entities this context created directly (rather than indirectly) as a Set of entities.   </p> <p> Entity.get_context_id(context: <code>Entity</code>) \u00b6 returns <code>String</code></p> <p>get the id of the given context.   </p> <p> Entity.get_origin_address(entity: <code>Entity</code>) \u00b6 returns <code>List</code></p> <p>get the address of the entity within it's origin context.   </p> <p> Entity.get_address(entity: <code>Entity</code>) \u00b6 returns <code>List</code></p> <p>get the address of the entity within it's origin context.   </p> <p> Entity.get_context_is_direct(context: <code>Entity</code>, entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>returns true if the given entity is a direct entity in the context. This includes prototype roots spawned into the context (use context type to filter them out).   </p> <p> Entity.init_into_context(entity: <code>Entity</code>, context: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>Initialize an entity into an existing context (typically editor related)   </p> <p> Entity.init_into_context(entity: <code>Entity</code>, context: <code>Entity</code>, address_uuid: <code>UUID</code>) \u00b6 returns <code>unknown</code></p> <p>Initialize an entity into an existing context with an address uuid (typically editor related)   </p> <p> Entity.note_add(entity: <code>Entity</code>, note: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>add a note to this entity (like a lower level tag)   </p> <p> Entity.note_remove(entity: <code>Entity</code>, note: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>remove a note to this entity   </p> <p> Entity.note_has(entity: <code>Entity</code>, note: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>returns true if this note exists, false otherwise   </p> <p> Entity.notes(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>get all the notes on the given entity   </p> <p> Entity.set_name(entity: <code>Entity</code>, name: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Set the name of a given <code>entity</code>.</p> <pre><code>Entity.set_name(player, \"player\")\n</code></pre> <p> Entity.get_uuid(entity: <code>Entity</code>) \u00b6 returns <code>String</code></p> <p>Get the unique ID as a string UUID for a given <code>entity</code>.   </p> <p> Entity.set_uuid(entity: <code>Entity</code>, uuid_string: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Set the unique ID of a given <code>entity</code>. Typically used in special cases, not commonly used on the high level.   </p> <p> Entity.destroy(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>Destroy the given <code>entity</code>, removing it from the world it's in.</p> <p>At the moment destroy is immediate (potentially changing soon), so sometimes you might want <code>Frame.end { Entity.destroy(entity) }</code>  to push the destroy to the end of the frame, so it doesn't happen while iterating a list or when things are still processing it.   </p> <p> Entity.duplicate(entity: <code>Entity</code>) \u00b6 returns <code>Entity</code></p> <p>Duplicate the given <code>entity</code>.  Returns a new entity with the same notes, folder, name and modifiers.   </p> <p> Entity.duplicate(entity: <code>Entity</code>, world: <code>World</code>) \u00b6 returns <code>Entity</code></p> <p>Duplicate the given <code>entity</code> into another world. Returns a new entity with the same notes, folder, name and modifiers. Will not duplicate in same context as origin entity if the new world is different.   </p>"},{"location":"api/v/next/world/#entitycontexttype","title":"EntityContextType","text":"<p><code>import \"luxe: world\" for EntityContextType</code></p> <p>no docs found</p> <ul> <li>none</li> <li>scene</li> <li>prototype</li> <li>name(value: <code>EntityContextType</code>)</li> </ul> <p> EntityContextType.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> EntityContextType.scene \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> EntityContextType.prototype \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> EntityContextType.name(value: <code>EntityContextType</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p>"},{"location":"api/v/next/world/#entityeventtype","title":"EntityEventType","text":"<p><code>import \"luxe: world\" for EntityEventType</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>create</li> <li>destroy</li> <li>load</li> <li>unload</li> <li>modifier</li> <li>name(value: <code>EntityEventType</code>)</li> </ul> <p> EntityEventType.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> EntityEventType.create \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> EntityEventType.destroy \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> EntityEventType.load \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> EntityEventType.unload \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> EntityEventType.modifier \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> EntityEventType.name(value: <code>EntityEventType</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p>"},{"location":"api/v/next/world/#meshcollidertype","title":"MeshColliderType","text":"<p><code>import \"luxe: world\" for MeshColliderType</code></p> <p>no docs found</p> <ul> <li>static_only</li> <li>dynamic_convex</li> <li>dynamic_concave</li> <li>name(value: <code>Any</code>)</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> MeshColliderType.static_only \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MeshColliderType.dynamic_convex \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MeshColliderType.dynamic_concave \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MeshColliderType.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MeshColliderType.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/world/#modifiereventtype","title":"ModifierEventType","text":"<p><code>import \"luxe: world\" for ModifierEventType</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>attach</li> <li>detach</li> <li>change</li> <li>name(value: <code>ModifierEventType</code>)</li> </ul> <p> ModifierEventType.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierEventType.attach \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierEventType.detach \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierEventType.change \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierEventType.name(value: <code>ModifierEventType</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p>"},{"location":"api/v/next/world/#modifiersystem","title":"ModifierSystem","text":"<p><code>import \"luxe: world\" for ModifierSystem</code></p> <p>no docs found</p> <ul> <li>priority</li> <li>persist</li> <li>count</li> <li>field</li> <li>items</li> <li>world</li> <li>each(fn: <code>Any</code>)</li> <li>each(unique: <code>Any</code>, fn: <code>Any</code>)</li> <li>find_entity(relative_entity: <code>Any</code>, uuid: <code>Any</code>)</li> <li>create(entity: <code>Any</code>)</li> <li>destroy(entity: <code>Any</code>)</li> <li>get(entity: <code>Any</code>)</li> <li>get(entity: <code>Any</code>, inst: <code>Any</code>)</li> <li>get_slot_at(index: <code>Any</code>)</li> <li>get_slot(entity: <code>Any</code>)</li> <li>get_entity(slot: <code>Any</code>)</li> <li>get_id(slot: <code>Any</code>)</li> <li>get_id_hash(slot: <code>Any</code>)</li> <li>set_entity(slot: <code>Any</code>, entity: <code>Any</code>)</li> <li>editor(editor: <code>Any</code>)</li> <li>init(world: <code>Any</code>)</li> <li>tick(delta: <code>Any</code>)</li> <li>destroy()</li> <li>detached()</li> <li>attached()</li> <li>disable(entity: <code>Any</code>, instance: <code>Any</code>)</li> <li>attach(entity: <code>Any</code>, instance: <code>Any</code>)</li> <li>detach(entity: <code>Any</code>, instance: <code>Any</code>)</li> <li>data</li> <li>id</li> <li>id=(v : Any)</li> <li>on_init(world: <code>Any</code>, data: <code>Any</code>)</li> <li>on_attached()</li> <li>on_detached()</li> <li>on_disabled(entities: <code>Any</code>, state: <code>Any</code>)</li> <li>on_destroying(entities: <code>Any</code>)</li> <li>on_destroyed(entities: <code>Any</code>)</li> <li>on_destroy()</li> <li>on_attach_block(block: <code>Any</code>, block_start: <code>Any</code>, block_end: <code>Any</code>, into: <code>Any</code>)</li> </ul> <p> ModifierSystem.priority \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.persist \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.count \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.field \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.items \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.world \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.each(fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.each(unique: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.find_entity(relative_entity: <code>Any</code>, uuid: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.create(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.destroy(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.get(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.get(entity: <code>Any</code>, inst: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.get_slot_at(index: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.get_slot(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.get_entity(slot: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.get_id(slot: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.get_id_hash(slot: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.set_entity(slot: <code>Any</code>, entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.editor(editor: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.init(world: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.tick(delta: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.destroy() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.detached() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.attached() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.disable(entity: <code>Any</code>, instance: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.attach(entity: <code>Any</code>, instance: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.detach(entity: <code>Any</code>, instance: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.data \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.id=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.on_init(world: <code>Any</code>, data: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.on_attached() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.on_detached() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.on_disabled(entities: <code>Any</code>, state: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.on_destroying(entities: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.on_destroyed(entities: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.on_destroy() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierSystem.on_attach_block(block: <code>Any</code>, block_start: <code>Any</code>, block_end: <code>Any</code>, into: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/world/#modifiers","title":"Modifiers","text":"<p><code>import \"luxe: world\" for Modifiers</code></p> <p>no docs found</p> <ul> <li>get_or_create_block(world: <code>Any</code>, module: <code>Any</code>, block_id: <code>Any</code>)</li> <li>attach_uuid(module: <code>Any</code>, entity: <code>Any</code>, uuid: <code>Any</code>)</li> <li>detach_uuid(module: <code>Any</code>, entity: <code>Any</code>, uuid: <code>Any</code>)</li> <li>has(module: <code>Any</code>, entity: <code>Any</code>)</li> <li>set_uuid(module: <code>Any</code>, entity: <code>Any</code>, uuid: <code>Any</code>)</li> <li>get_uuid(module: <code>Any</code>, entity: <code>Any</code>)</li> <li>get_attached(entity: <code>Any</code>)</li> <li>get_attached_types(entity: <code>Any</code>)</li> <li>get_entities(module: <code>Any</code>)</li> <li>get_instances(module: <code>Any</code>)</li> <li>get_module(uuid: <code>Any</code>)</li> <li>get_entity(uuid: <code>Any</code>)</li> <li>has_system_in_world(module: <code>Any</code>, world: <code>Any</code>)</li> <li>get_system_in_world(module: <code>Any</code>, world: <code>Any</code>)</li> <li>get(module: <code>Any</code>, entity: <code>Any</code>)</li> <li>get_system(module: <code>Any</code>, entity: <code>Any</code>)</li> <li>create(module: <code>Any</code>, entity: <code>Any</code>)</li> <li>destroy(module: <code>Any</code>, entity: <code>Any</code>)</li> <li>init(world: <code>Any</code>, modifier: <code>Any</code>, block: <code>Any</code>)</li> <li>get_asset_compiler(type: <code>Any</code>)</li> <li>get_compiler_for_input(modifier_id: <code>Any</code>)</li> <li>get_data_block_type(modifier_id: <code>Any</code>)</li> <li>get_input_block_type(modifier_id: <code>Any</code>)</li> </ul> <p> Modifiers.get_or_create_block(world: <code>Any</code>, module: <code>Any</code>, block_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.attach_uuid(module: <code>Any</code>, entity: <code>Any</code>, uuid: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.detach_uuid(module: <code>Any</code>, entity: <code>Any</code>, uuid: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.has(module: <code>Any</code>, entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.set_uuid(module: <code>Any</code>, entity: <code>Any</code>, uuid: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_uuid(module: <code>Any</code>, entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_attached(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_attached_types(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_entities(module: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_instances(module: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_module(uuid: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_entity(uuid: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.has_system_in_world(module: <code>Any</code>, world: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_system_in_world(module: <code>Any</code>, world: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get(module: <code>Any</code>, entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_system(module: <code>Any</code>, entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.create(module: <code>Any</code>, entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.destroy(module: <code>Any</code>, entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.init(world: <code>Any</code>, modifier: <code>Any</code>, block: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_asset_compiler(type: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_compiler_for_input(modifier_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_data_block_type(modifier_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifiers.get_input_block_type(modifier_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/world/#overlap","title":"Overlap","text":"<p><code>import \"luxe: world\" for Overlap</code></p> <p>no docs found</p> <ul> <li>none</li> <li>begin</li> <li>end</li> <li>active</li> <li>name(value: <code>Any</code>)</li> <li>from_string(value: <code>Any</code>)</li> </ul> <p> Overlap.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Overlap.begin \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Overlap.end \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Overlap.active \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Overlap.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Overlap.from_string(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/world/#physics2d","title":"Physics2D","text":"<p><code>import \"luxe: world\" for Physics2D</code></p> <p>no docs found</p> <ul> <li>set_gravity(world: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>)</li> </ul> <p> Physics2D.set_gravity(world: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/world/#physics3d","title":"Physics3D","text":"<p><code>import \"luxe: world\" for Physics3D</code></p> <p>no docs found</p> <ul> <li>set_debug_draw(world: <code>Any</code>, state: <code>Any</code>)</li> <li>set_gravity(world: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>)</li> <li>cast_ray(world: <code>Any</code>, from: <code>Any</code>, to: <code>Any</code>)</li> <li>cast_shape(entity: <code>Any</code>, from: <code>Any</code>, to: <code>Any</code>, scale: <code>Any</code>)</li> <li>cast_shape(entity: <code>Any</code>, from: <code>Any</code>, to: <code>Any</code>)</li> <li>query_sphere(world: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>)</li> <li>query_box(world: <code>Any</code>, center: <code>Any</code>, size: <code>Any</code>)</li> </ul> <p> Physics3D.set_debug_draw(world: <code>Any</code>, state: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Physics3D.set_gravity(world: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Physics3D.cast_ray(world: <code>Any</code>, from: <code>Any</code>, to: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Physics3D.cast_shape(entity: <code>Any</code>, from: <code>Any</code>, to: <code>Any</code>, scale: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Physics3D.cast_shape(entity: <code>Any</code>, from: <code>Any</code>, to: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Physics3D.query_sphere(world: <code>Any</code>, center: <code>Any</code>, radius: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Physics3D.query_box(world: <code>Any</code>, center: <code>Any</code>, size: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/world/#prototype","title":"Prototype","text":"<p><code>import \"luxe: world\" for Prototype</code></p> <p>Prototypes are collections of entities that are stored together and can be instanced together. Protoype instances can be nested in other prototypes as well as in scenes. If entities in a prototype have a transform modifier without a transform parent, the prototype root will automatically be set as their parent.</p> <p>Once a prototype is instanced in a world, all its entities behave just like other entities in the world and get assigned unique entity UUIDs. Relative prototype UUIDs, or named entities within a prototype can be accessed via the root entity of the prototype instance.</p> <ul> <li>destroy(entity: <code>Entity</code>)</li> <li>has(entity: <code>Entity</code>)</li> <li>get_type(entity: <code>Entity</code>)</li> <li>get_root(entity: <code>Entity</code>)</li> <li>get_tree(entity: <code>Entity</code>)</li> <li>has_tree(entity: <code>Entity</code>)</li> <li>get_ref(entity: <code>Entity</code>, uuid: <code>String</code>)</li> <li>get_ref_of(entity: <code>Entity</code>, target_entity: <code>Entity</code>)</li> <li>get_named(entity: <code>Entity</code>, name: <code>String</code>)</li> <li>get_named_all(entity: <code>Entity</code>, name: <code>String</code>)</li> <li>entity_list(entity: <code>Entity</code>)</li> <li>refs_list(entity: <code>Entity</code>)</li> <li>create(world: <code>World</code>, prototype_id: <code>String</code>, instance_id: <code>String</code>)</li> <li>create(world: <code>World</code>, prototype_id: <code>String</code>, instance_id: <code>String</code>, position: <code>Vec</code>)</li> <li>create(world: <code>World</code>, prototype_id: <code>String</code>, instance_id: <code>String</code>, position: <code>Vec</code>, rotation: <code>Vec</code>)</li> <li>create(world: <code>World</code>, prototype_id: <code>String</code>, instance_id: <code>String</code>, position: <code>Vec</code>, rotation: <code>Vec</code>, scale: <code>Vec</code>)</li> </ul> <p> Prototype.destroy(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Destroys the prototype instance. (called on the root entity and will also destroy member entities that were instanced with it)   </p> <p> Prototype.has(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether a entity has a prototype modifier (is a prototype instance root).   </p> <p> Prototype.get_type(entity: <code>Entity</code>) \u00b6 returns <code>ID</code></p> <p>Get the prototype id the prototype instance was spawned from.   </p> <p> Prototype.get_root(entity: <code>Entity</code>) \u00b6 returns <code>Entity</code></p> <p>Get the \\\"innermost\\\" prototype root if entity is part of a prototype instance. Returns the entity itself if it is a prototype root. Returns null if entity is not part of a prototype instance.   </p> <p> Prototype.get_tree(entity: <code>Entity</code>) \u00b6 returns <code>List</code></p> <p>Get the list of prototype instances this entity is a part of. (List will have 1 elements for unnested prototypes and goes from innermost to outermost instance root for nested prototypes.). Null if entity is not part of prototype instance.   </p> <p> Prototype.has_tree(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether the entity is part of a prototype instance.   </p> <p> Prototype.get_ref(entity: <code>Entity</code>, uuid: <code>String</code>) \u00b6 returns <code>Entity</code></p> <p>Get an entity by its reference (prototype-relative UUID) from its prototype root. (the same prototype asset may be instanced multiple times, so it may be important to find a specific prototype root and ask it for its version of the entity)   </p> <p> Prototype.get_ref_of(entity: <code>Entity</code>, target_entity: <code>Entity</code>) \u00b6 returns <code>String</code></p> <p>Get the reference (prototype-relative UUID) of an entity within a prototype instance. One Entity can be part of multiple nested prototypes and have different references in each context.   </p> <p> Prototype.get_named(entity: <code>Entity</code>, name: <code>String</code>) \u00b6 returns <code>Entity</code></p> <p>Get first entity in a prototype instance with a specific name.   </p> <p> Prototype.get_named_all(entity: <code>Entity</code>, name: <code>String</code>) \u00b6 returns <code>Entity</code></p> <p>Get all entities in a prototype instance with a specific name.   </p> <p> Prototype.entity_list(entity: <code>Entity</code>) \u00b6 returns <code>List</code></p> <p>Get a list of all entities that are part of a prototype instance.   </p> <p> Prototype.refs_list(entity: <code>Entity</code>) \u00b6 returns <code>List</code></p> <p>Get a list of all references (prototype-relative UUIDs) to entities within one prototype instance.   </p> <p> Prototype.create(world: <code>World</code>, prototype_id: <code>String</code>, instance_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Prototype.create(world: <code>World</code>, prototype_id: <code>String</code>, instance_id: <code>String</code>, position: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Prototype.create(world: <code>World</code>, prototype_id: <code>String</code>, instance_id: <code>String</code>, position: <code>Vec</code>, rotation: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Prototype.create(world: <code>World</code>, prototype_id: <code>String</code>, instance_id: <code>String</code>, position: <code>Vec</code>, rotation: <code>Vec</code>, scale: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>Instantiate a new prototype into a world with a new name(instance id), position, rotation and scale. You may pass <code>null</code> into position rotation and scale (or call one of the functions that omit those arguments), to give them default values (0,0,0 for position/rotation, 1,1,1 for scale). This function returns the root entity of the newly created prototype instance.   </p>"},{"location":"api/v/next/world/#scene","title":"Scene","text":"<p><code>import \"luxe: world\" for Scene</code></p> <p>Scenes are collections of entities that are stored together and can be instanced together. If entities in a scene have a transform modifier without a transform parent, the scene root will automatically be set as their parent.</p> <p>Once a scene is instanced in a world, all its entities behave just like other entities in the world and get assigned unique entity UUIDs. Relative scene UUIDs, or named entities within a scene can be accessed via the root entity of the scene instance.</p> <p>Scenes are mostly referred to by their scene ID. By default for new scenes, this is their asset id, but it can be changed to allow loading multiple scenes from the same asset and have them exist in the same world.</p> <ul> <li>create(world: <code>World</code>, id: <code>String</code>)</li> <li>destroy(world: <code>World</code>, id: <code>String</code>)</li> <li>get_list(world: <code>World</code>)</li> <li>exists(world: <code>World</code>, id: <code>String</code>)</li> <li>entity_list(world: <code>World</code>, id: <code>String</code>)</li> <li>entity_forget(world: <code>World</code>, id: <code>String</code>, entity: <code>Entity</code>)</li> <li>set_id(world: <code>World</code>, id: <code>String</code>, new_id: <code>String</code>)</li> </ul> <p> Scene.create(world: <code>World</code>, id: <code>String</code>) \u00b6 returns <code>Entity</code></p> <p>Create a new scene into a world. Does not load a scene asset with the given id. This function returns the root entity of the newly created scene.   </p> <p> Scene.destroy(world: <code>World</code>, id: <code>String</code>) \u00b6 returns <code>Entity</code></p> <p>Destroy a scene by its id.</p> <pre><code>  Scene.create(app.world, \"scenes/main\")\n  Scene.destroy(app.world, \"scenes/main\")\n</code></pre> <p> Scene.get_list(world: <code>World</code>) \u00b6 returns <code>List</code></p> <p>Get a list of scenes in a world. The list contains the IDs of the scenes (as string IDs).   </p> <p> Scene.exists(world: <code>World</code>, id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Check if a scene is currently instanced in a world.   </p> <p> Scene.entity_list(world: <code>World</code>, id: <code>String</code>) \u00b6 returns <code>List</code></p> <p>Get all entities that are part of an instanced scene.   </p> <p> Scene.entity_forget(world: <code>World</code>, id: <code>String</code>, entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Stop associating an entity with a loaded scene.   </p> <p> Scene.set_id(world: <code>World</code>, id: <code>String</code>, new_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Change the ID of a scene instance. </p> <p>By default this ID is the asset id, but with this function it can be changed and the original scene loaded again without causting conflicts.   </p>"},{"location":"api/v/next/world/#ui","title":"UI","text":"<p><code>import \"luxe: world\" for UI</code></p> <p>A <code>UI</code> modifier holds controls which define a 2d user interface with images, buttons, sliders, etc...</p> <pre><code>  //create ui modifier in ui world\n  var ui = Entity.create(app.ui)\n  UI.create(ui, 0, 0, world.width, world.height, 0, app.ui_camera)\n\n  //add controls\n  var control = Control.create(ui)\n  //more control stuff\n\n  //then rebuild the UI\n  UI.commit(ui)\n</code></pre> <ul> <li>create(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, z: <code>Num</code>, camera: <code>Entity</code>)</li> <li>destroy(entity: <code>Entity</code>)</li> <li>has(entity: <code>Entity</code>)</li> <li>commit(entity: <code>Entity</code>)</li> <li>commit_now(entity: <code>Entity</code>)</li> <li>event_cancel(entity: <code>Entity</code>, event_id: <code>ID</code>)</li> <li>event_cancelled(entity: <code>Entity</code>, event_id: <code>ID</code>)</li> <li>set_camera(entity: <code>Entity</code>, camera: <code>Entity</code>)</li> <li>set_render_mode(entity: <code>Entity</code>, mode: <code>UIRenderMode</code>)</li> <li>set_material_basis(entity: <code>Entity</code>, solid: <code>String</code>, text: <code>String</code>)</li> <li>set_bounds(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, z: <code>Num</code>)</li> <li>get_pos(entity: <code>Entity</code>)</li> <li>get_opacity(entity: <code>Entity</code>)</li> <li>set_opacity(entity: <code>Entity</code>, opacity: <code>Num</code>)</li> <li>get_size(entity: <code>Entity</code>)</li> <li>get_debug_control(entity: <code>Entity</code>)</li> <li>get_debug_draw_depth(entity: <code>Entity</code>)</li> <li>get_input_node(entity: <code>Entity</code>)</li> <li>set_input_node(entity: <code>Entity</code>, input_node_id: <code>String</code>)</li> <li>set_layout_mode(entity: <code>Entity</code>, mode: <code>UILayoutMode</code>)</li> <li>set_debug_mode(entity: <code>Entity</code>, mode: <code>UIDebugMode</code>)</li> <li>any_marked()</li> <li>any_focused()</li> <li>get_focused(entity: <code>Entity</code>)</li> <li>get_captured(entity: <code>Entity</code>)</li> <li>get_marked(entity: <code>Entity</code>)</li> <li>get_control_count(entity: <code>Entity</code>)</li> <li>get_control(entity: <code>Entity</code>, index: <code>Num</code>)</li> <li>focus_invalidate(entity: <code>Entity</code>)</li> <li>focus(control: <code>Control</code>)</li> <li>unfocus(control: <code>Control</code>)</li> <li>mark(control: <code>Control</code>)</li> <li>unmark(control: <code>Control</code>)</li> <li>capture(control: <code>Control</code>)</li> <li>uncapture(control: <code>Control</code>)</li> <li>bring_to_front(control: <code>Control</code>)</li> <li>control_at_point(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>mouse_to_canvas(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>dump(ui: <code>Entity</code>)</li> <li>spawn(asset_id: <code>String</code>, parent: <code>Control</code>, instance_id: <code>String</code>)</li> <li>make(ui: <code>Entity</code>, asset: <code>String</code>, instance_id: <code>String</code>)</li> <li>draw_depth_of(control: <code>Control</code>, index: <code>Num</code>)</li> <li>draw_text(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, string: <code>String</code>, size: <code>Num</code>, font: <code>String</code>, color: <code>Color</code>, align: <code>TextAlign</code>, align_vertical: <code>TextAlign</code>)</li> <li>draw_text(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, string: <code>String</code>, size: <code>Num</code>, font: <code>String</code>, color: <code>Color</code>, align: <code>TextAlign</code>, align_vertical: <code>TextAlign</code>)</li> <li>draw_image(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, angle: <code>Num</code>, color: <code>Color</code>, uv: <code>Vec</code>, image: <code>Image</code>, flags: <code>UIImageFlags</code>)</li> <li>draw_image(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, angle: <code>Num</code>, color: <code>Color</code>, uv: <code>Vec</code>, image: <code>Image</code>)</li> <li>draw_quad(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, angle: <code>Num</code>, color: <code>Color</code>)</li> <li>draw_circle(control: <code>Control</code>, ox: <code>Num</code>, oy: <code>Num</code>, oz: <code>Num</code>, rx: <code>Num</code>, ry: <code>Num</code>, start_angle: <code>Num</code>, end_angle: <code>Num</code>, smoothness: <code>Num</code>, color: <code>Color</code>)</li> <li>draw_line(control: <code>Control</code>, x1: <code>Num</code>, y1: <code>Num</code>, x2: <code>Num</code>, y2: <code>Num</code>, z: <code>Num</code>, style: <code>PathStyle</code>)</li> <li>draw_rect(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, angle: <code>Num</code>, style: <code>PathStyle</code>)</li> <li>draw_rect_detailed(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, angle: <code>Num</code>, radius: <code>Num</code>, smoothness: <code>Num</code>, style: <code>PathStyle</code>)</li> <li>draw_quad_detailed(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, angle: <code>Num</code>, radius: <code>Num</code>, smoothness: <code>Num</code>, color: <code>Color</code>)</li> <li>draw_ring(control: <code>Control</code>, ox: <code>Num</code>, oy: <code>Num</code>, oz: <code>Num</code>, rx: <code>Num</code>, ry: <code>Num</code>, start_angle: <code>Num</code>, end_angle: <code>Num</code>, smoothness: <code>Num</code>, style: <code>PathStyle</code>)</li> <li>draw_path(control: <code>Control</code>, points: <code>List</code>, style: <code>PathStyle</code>, closed: <code>Bool</code>)</li> <li>events_emit(control: <code>Control</code>, type: <code>UIEvent</code>)</li> <li>events_emit(control: <code>Control</code>, type: <code>UIEvent</code>, data: <code>Any</code>)</li> <li>events_emit(control: <code>Control</code>, type: <code>UIEvent</code>, data: <code>Any</code>, data_before: <code>Any</code>)</li> </ul> <p> UI.create(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, z: <code>Num</code>, camera: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Create a UI modifier on an Entity. The <code>x</code> <code>y</code> <code>z</code> arguments are the position relative to the world origin, or relative to the <code>Transform</code> on the same entity if one exists. <code>w</code> and <code>h</code> are the width and the height of the canvas, this is both used for the mask texture (and in <code>UIRenderMode.image</code> the ui rendertarget) as well as the (unscaled) size of the UI in worldspace. <code>camera</code> describes a camera that is used to resolve input, most of the time this is the camera rendering the world the UI is in, but it doesnt have to be.   </p> <p> UI.destroy(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Remove a <code>UI</code> modifier from an entity. This also destroys all controls on that <code>UI</code>.   </p> <p> UI.has(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether an Entity has an <code>UI</code> modifier attached.   </p> <p> UI.commit(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Request all changes to the UI are committed before rendering happens   </p> <p> UI.commit_now(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Commit all changes to the UI immediately   </p> <p> UI.event_cancel(entity: <code>Entity</code>, event_id: <code>ID</code>) \u00b6 returns <code>None</code></p> <p>Cancel an event.   </p> <p> UI.event_cancelled(entity: <code>Entity</code>, event_id: <code>ID</code>) \u00b6 returns <code>Bool</code></p> <p>Check whether an event was cancelled before.   </p> <p> UI.set_camera(entity: <code>Entity</code>, camera: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Set the camera used for input calculations. Most of the time this is the camera rendering the world the UI is in, but it doesnt have to be.   </p> <p> UI.set_render_mode(entity: <code>Entity</code>, mode: <code>UIRenderMode</code>) \u00b6 returns <code>None</code></p> <p>Set the render mode of the UI canvas.</p> <p><code>UIRenderMode.world</code> renders the controls directly into the world, while <code>UIRenderMode.image</code> first renders them to an intermediate texture and then renders that.</p> <p><code>UIRenderMode.image</code> is the default as it can avoid artifacts and works in more circumstances, though <code>UIRenderMode.world</code> can lead to more sharp results and slightly better performance.   </p> <p> UI.set_material_basis(entity: <code>Entity</code>, solid: <code>String</code>, text: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Set the material basis the controls (excluding <code>UIImage</code>) is drawn with. By default \"luxe: material_basis/ui_solid\" is the basis for solid controls and \"luxe: material_basis/ui_font\" the basis for text.   </p> <p> UI.set_bounds(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set size and position of an <code>UI</code> modifier. The <code>x</code> <code>y</code> <code>z</code> arguments are the position relative to the world origin, or relative to the <code>Transform</code> on the same entity if one exists. <code>w</code> and <code>h</code> are the width and the height of the canvas, this is both used for the mask texture (and in <code>UIRenderMode.image</code> the ui rendertarget) as well as the (unscaled) size of the UI in worldspace.   </p> <p> UI.get_pos(entity: <code>Entity</code>) \u00b6 returns <code>Vec</code></p> <p>Get position of an <code>UI</code> modifier.   </p> <p> UI.get_opacity(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>Get overall UI opacity   </p> <p> UI.set_opacity(entity: <code>Entity</code>, opacity: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>Set overall UI opacity   </p> <p> UI.get_size(entity: <code>Entity</code>) \u00b6 returns <code>Vec</code></p> <p>Get size of an <code>UI</code> modifier.   </p> <p> UI.get_debug_control(entity: <code>Entity</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p> <p> UI.get_debug_draw_depth(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> UI.get_input_node(entity: <code>Entity</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> UI.set_input_node(entity: <code>Entity</code>, input_node_id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.set_layout_mode(entity: <code>Entity</code>, mode: <code>UILayoutMode</code>) \u00b6 returns <code>None</code></p> <p>Set the layout mode of the UI.</p> <p>By default this is <code>UILayoutMode.none</code>, which will do no extra layouting and ignore <code>Control</code> margin, behave and contain.</p> <p><code>UILayoutMode.flex</code> is the default layout implementation which will follow the <code>Control</code> margin, behave and contain settings.</p> <pre><code>  UI.set_layout_mode(ui, UILayoutMode.flex)\n\n  var root = Control.create(ui)\n    Control.set_size(root, 300, 0)\n    Control.set_behave(root, UIBehave.left | UIBehave.top)\n    Control.set_margin(root, 100, 100, 0, 0)\n    Control.set_contain(root, UIContain.column | UIContain.start | UIContain.vfit)\n\n  var text_input = UIText.create(ui)\n    Control.set_behave(text_input, UIBehave.left | UIBehave.top | UIBehave.hfill)\n  Control.child_add(root, text_input)\n\n  var image = UIImage.create(ui)\n    UIImage.set_image(image, Assets.image(\"luxe: image/logo.sprite\"))\n    Control.set_size(image, 300, 300)\n    Control.set_behave(image, UIBehave.left | UIBehave.top | UIBehave.hfill)\n  Control.child_add(root, image)\n</code></pre> <p> UI.set_debug_mode(entity: <code>Entity</code>, mode: <code>UIDebugMode</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.any_marked() \u00b6 returns <code>Bool</code></p> <p>Returns true if any UI has a marked control (any control with input under the mouse)   </p> <p> UI.any_focused() \u00b6 returns <code>Bool</code></p> <p>Returns true if any UI has a focused control   </p> <p> UI.get_focused(entity: <code>Entity</code>) \u00b6 returns <code>Control</code></p> <p>Get currently focussed control. A control being focused means its been clicked on or otherwise focused and will recieve context inputs like keyboard presses on a text input field.   </p> <p> UI.get_captured(entity: <code>Entity</code>) \u00b6 returns <code>Control</code></p> <p>Get captured control, <code>null</code> if none is captured. A control being captured means all inputs will only be sent to this control until it is uncaptured again.   </p> <p> UI.get_marked(entity: <code>Entity</code>) \u00b6 returns <code>Control</code></p> <p>Get marked control, <code>null</code> if none is marked. A control being marked means it is hovered over and can be focused.   </p> <p> UI.get_control_count(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>Get amount of controls in a <code>UI</code>.   </p> <p> UI.get_control(entity: <code>Entity</code>, index: <code>Num</code>) \u00b6 returns <code>Control</code></p> <p>Get a control in a <code>UI</code> by its index. Useful for iterating over all controls.   </p> <p> UI.focus_invalidate(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Unfocus whatever is focussed in a specific <code>UI</code>.   </p> <p> UI.focus(control: <code>Control</code>) \u00b6 returns <code>None</code></p> <p>Focus a control. Will unfocus any previously focused controls on the <code>UI</code>. A control being focused means its been clicked on or otherwise focused and will recieve context inputs like keyboard presses on a text input field.   </p> <p> UI.unfocus(control: <code>Control</code>) \u00b6 returns <code>None</code></p> <p>Unfocus a specific control. If the control is not the focused control in the UI, this does nothing.   </p> <p> UI.mark(control: <code>Control</code>) \u00b6 returns <code>None</code></p> <p>Mark a control. Will unfocus any previously marked controls on the <code>UI</code>. A control being marked means it is hovered over and can be focused.   </p> <p> UI.unmark(control: <code>Control</code>) \u00b6 returns <code>None</code></p> <p>Unmark a specific control. If the control is not the marked control in the UI, this does nothing.   </p> <p> UI.capture(control: <code>Control</code>) \u00b6 returns <code>None</code></p> <p>Capture a control. Until uncaptured all inputs will only go to this control.   </p> <p> UI.uncapture(control: <code>Control</code>) \u00b6 returns <code>None</code></p> <p>Uncapture a control and have inputs be distributed regularly.   </p> <p> UI.bring_to_front(control: <code>Control</code>) \u00b6 returns <code>None</code></p> <p>Bring the control to the front in its current context (globally in the <code>UI</code> or within its parent if its a child)   </p> <p> UI.control_at_point(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>Control</code></p> <p>Get the highest control at a position.   </p> <p> UI.mouse_to_canvas(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>Float2</code></p> <p>Translate from mouse position on screen to canvas coordinates. Uses the set canvas camera.   </p> <p> UI.dump(ui: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Write a bunch of information about the <code>UI</code> and its controls into the console.   </p> <p> UI.spawn(asset_id: <code>String</code>, parent: <code>Control</code>, instance_id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Spawn controls from a ui asset. Puts newly spawned controls into a parent control.   </p> <p> UI.make(ui: <code>Entity</code>, asset: <code>String</code>, instance_id: <code>String</code>) \u00b6 returns <code>Control</code></p> <p>Spawn controls from a ui asset. Creates new root for newly spawned controls and returns that root control.   </p> <p> UI.draw_depth_of(control: <code>Control</code>, index: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.draw_text(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, string: <code>String</code>, size: <code>Num</code>, font: <code>String</code>, color: <code>Color</code>, align: <code>TextAlign</code>, align_vertical: <code>TextAlign</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.draw_text(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, string: <code>String</code>, size: <code>Num</code>, font: <code>String</code>, color: <code>Color</code>, align: <code>TextAlign</code>, align_vertical: <code>TextAlign</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.draw_image(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, angle: <code>Num</code>, color: <code>Color</code>, uv: <code>Vec</code>, image: <code>Image</code>, flags: <code>UIImageFlags</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.draw_image(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, angle: <code>Num</code>, color: <code>Color</code>, uv: <code>Vec</code>, image: <code>Image</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.draw_quad(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, angle: <code>Num</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.draw_circle(control: <code>Control</code>, ox: <code>Num</code>, oy: <code>Num</code>, oz: <code>Num</code>, rx: <code>Num</code>, ry: <code>Num</code>, start_angle: <code>Num</code>, end_angle: <code>Num</code>, smoothness: <code>Num</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.draw_line(control: <code>Control</code>, x1: <code>Num</code>, y1: <code>Num</code>, x2: <code>Num</code>, y2: <code>Num</code>, z: <code>Num</code>, style: <code>PathStyle</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.draw_rect(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, angle: <code>Num</code>, style: <code>PathStyle</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.draw_rect_detailed(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, angle: <code>Num</code>, radius: <code>Num</code>, smoothness: <code>Num</code>, style: <code>PathStyle</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.draw_quad_detailed(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>, angle: <code>Num</code>, radius: <code>Num</code>, smoothness: <code>Num</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.draw_ring(control: <code>Control</code>, ox: <code>Num</code>, oy: <code>Num</code>, oz: <code>Num</code>, rx: <code>Num</code>, ry: <code>Num</code>, start_angle: <code>Num</code>, end_angle: <code>Num</code>, smoothness: <code>Num</code>, style: <code>PathStyle</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.draw_path(control: <code>Control</code>, points: <code>List</code>, style: <code>PathStyle</code>, closed: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.events_emit(control: <code>Control</code>, type: <code>UIEvent</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.events_emit(control: <code>Control</code>, type: <code>UIEvent</code>, data: <code>Any</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UI.events_emit(control: <code>Control</code>, type: <code>UIEvent</code>, data: <code>Any</code>, data_before: <code>Any</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p>"},{"location":"api/v/next/world/#uibehave","title":"UIBehave","text":"<p><code>import \"luxe: world\" for UIBehave</code></p> <p>no docs found</p> <ul> <li>left</li> <li>top</li> <li>right</li> <li>bottom</li> <li>hfill</li> <li>vfill</li> <li>hcenter</li> <li>vcenter</li> <li>center</li> <li>fill</li> <li>break_line</li> </ul> <p> UIBehave.left \u00b6 returns <code>unknown</code></p> <p>Item anchors to the item to its left or left side of parent   </p> <p> UIBehave.top \u00b6 returns <code>unknown</code></p> <p>Item anchors to the item above it or top side of parent   </p> <p> UIBehave.right \u00b6 returns <code>unknown</code></p> <p>Item anchors to the item to its right or right side of parent   </p> <p> UIBehave.bottom \u00b6 returns <code>unknown</code></p> <p>Item anchors to the item below it or bottom side of parent   </p> <p> UIBehave.hfill \u00b6 returns <code>unknown</code></p> <p>Item anchors to both left and right item or parent borders   </p> <p> UIBehave.vfill \u00b6 returns <code>unknown</code></p> <p>Item anchors to both top and bottom item or parent borders   </p> <p> UIBehave.hcenter \u00b6 returns <code>unknown</code></p> <p>Center item horizontally, with left margin as offset   </p> <p> UIBehave.vcenter \u00b6 returns <code>unknown</code></p> <p>Center item vertically, with top margin as offset   </p> <p> UIBehave.center \u00b6 returns <code>unknown</code></p> <p>Center item in both directions, with left/top margin as offset   </p> <p> UIBehave.fill \u00b6 returns <code>unknown</code></p> <p>Anchor item to all four directions   </p> <p> UIBehave.break_line \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/world/#uiclear","title":"UIClear","text":"<p><code>import \"luxe: world\" for UIClear</code></p> <p>no docs found</p> <ul> <li>destroy</li> <li>remove</li> <li>set_invisible</li> <li>remove_set_invisible</li> </ul> <p> UIClear.destroy \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIClear.remove \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIClear.set_invisible \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIClear.remove_set_invisible \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/world/#uicontain","title":"UIContain","text":"<p><code>import \"luxe: world\" for UIContain</code></p> <p>no docs found</p> <ul> <li>row</li> <li>column</li> <li>layout</li> <li>flex</li> <li>nowrap</li> <li>wrap</li> <li>start</li> <li>middle</li> <li>end</li> <li>justify</li> <li>vfit</li> <li>hfit</li> </ul> <p> UIContain.row \u00b6 returns <code>unknown</code></p> <p>Items go from left to right   </p> <p> UIContain.column \u00b6 returns <code>unknown</code></p> <p>Items go from top to bottom   </p> <p> UIContain.layout \u00b6 returns <code>unknown</code></p> <p>Use Free Layout model   </p> <p> UIContain.flex \u00b6 returns <code>unknown</code></p> <p>Use Flex Layout model   </p> <p> UIContain.nowrap \u00b6 returns <code>unknown</code></p> <p>Stays on a single line   </p> <p> UIContain.wrap \u00b6 returns <code>unknown</code></p> <p>Wraps to multiple lines, wrapping left to right   </p> <p> UIContain.start \u00b6 returns <code>unknown</code></p> <p>Items begin at start of row/column   </p> <p> UIContain.middle \u00b6 returns <code>unknown</code></p> <p>Items begin at middle of row/column   </p> <p> UIContain.end \u00b6 returns <code>unknown</code></p> <p>Items begin at end of row/column   </p> <p> UIContain.justify \u00b6 returns <code>unknown</code></p> <p>Insert spacing between items to stretch elements across whole row/column   </p> <p> UIContain.vfit \u00b6 returns <code>unknown</code></p> <p>Items stretch height to fill vertical space   </p> <p> UIContain.hfit \u00b6 returns <code>unknown</code></p> <p>Items stretch width to fill horizontal space   </p>"},{"location":"api/v/next/world/#uidebugmode","title":"UIDebugMode","text":"<p><code>import \"luxe: world\" for UIDebugMode</code></p> <p>no docs found</p> <ul> <li>none</li> <li>basic</li> </ul> <p> UIDebugMode.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIDebugMode.basic \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/world/#uidrop","title":"UIDrop","text":"<p><code>import \"luxe: world\" for UIDrop</code></p> <p>no docs found</p> <ul> <li>start</li> <li>end</li> <li>move</li> <li>drop</li> </ul> <p> UIDrop.start \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIDrop.end \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIDrop.move \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIDrop.drop \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/world/#uievent","title":"UIEvent","text":"<p><code>import \"luxe: world\" for UIEvent</code></p> <p>The built in UI events that all controls can potentially use.</p> <ul> <li>name(value: <code>Any</code>)</li> <li>unknown</li> <li>enter</li> <li>exit</li> <li>press</li> <li>release</li> <li>scroll</li> <li>move</li> <li>key</li> <li>text</li> <li>focus</li> <li>unfocus</li> <li>capture</li> <li>uncapture</li> <li>commit</li> <li>destroy</li> <li>language</li> <li>change</li> <li>bounds</li> <li>drag</li> </ul> <p> UIEvent.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Converts a UIEvent value to a readable name.</p> <pre><code>Log.print(UIEvent.name(UIEvent.move)) //prints \"move\"\n</code></pre> <p> UIEvent.unknown \u00b6 returns <code>unknown</code></p> <p>An event of unknown type, invalid. This is the default value.   </p> <p> UIEvent.enter \u00b6 returns <code>unknown</code></p> <p>An input cursor has entered this control. (e.g on mouse enter). Sends no additional data in the event.</p> <pre><code>if(event.type == UIEvent.enter) {\n  Log.print(\"entered control!\")\n}\n</code></pre> <p> UIEvent.exit \u00b6 returns <code>unknown</code></p> <p>An input cursor has left this control. (e.g on mouse exit) Sends no additional data in the event.</p> <pre><code>if(event.type == UIEvent.exit) {\n  Log.print(\"exited control!\")\n}\n</code></pre> <p> UIEvent.press \u00b6 returns <code>unknown</code></p> <p>An input press event (e.g mouse button was pressed down). a.k.a \"down\" Sends <code>event.x</code>, <code>event.y</code> and <code>event.button</code>.</p> <pre><code>if(event.type == UIEvent.press) {\n  var button = MouseButton.name(event.button)\n  Log.print(\"pressed down on control at `%(event.x)`,`%(event.y)`\")\n  Log.print(\"  button was `%(button)`\")\n}\n</code></pre> <p> UIEvent.release \u00b6 returns <code>unknown</code></p> <p>An input release event (e.g mouse button was released). a.k.a \"up\" Sends <code>event.x</code>, <code>event.y</code> and <code>event.button</code>.</p> <pre><code>if(event.type == UIEvent.press) {\n  var button = MouseButton.name(event.button)\n  Log.print(\"released input on control at `%(event.x)`,`%(event.y)`\")\n  Log.print(\"  button was `%(button)`\")\n}\n</code></pre> <p> UIEvent.scroll \u00b6 returns <code>unknown</code></p> <p>A scroll event (e.g mouse wheel). Sends <code>event.x</code>, <code>event.y</code> where <code>x</code> is the horizontal scroll amount,  and <code>y</code> is the vertical scroll amount.</p> <pre><code>if(event.type == UIEvent.scroll) {\n  Log.print(\"scroll amount `%(event.x)`,`%(event.y)`\")\n}\n</code></pre> <p> UIEvent.move \u00b6 returns <code>unknown</code></p> <p>An input move event (e.g mouse movement). Sends <code>event.x</code>, <code>event.y</code> as the position of the input.</p> <pre><code>if(event.type == UIEvent.press) {\n  Log.print(\"move on control at `%(event.x)`,`%(event.y)`\")\n}\n</code></pre> <p> UIEvent.key \u00b6 returns <code>unknown</code></p> <p>A key input event. Sends a few useful values:</p> <ul> <li><code>event.key</code> - a Key value</li> <li><code>event.scan</code> - a Scan value</li> <li><code>event.mod</code> - a ModState value</li> <li><code>event.down</code> - a <code>Bool</code> value, whether the key is down or not</li> <li><code>event.repeat</code> - a <code>Bool</code> value, whether the event is from a key repeat</li> </ul> <pre><code>if(event.type == UIEvent.key) {\n  var down = event.down ? \"pressed\" : \"released\"\n  Log.print(\"key %(down), key was `%(Key.name(event.key))`\")\n  Log.print(\"  scan `%(Scan.name(event.scan))`, repeat? %(event.repeat)\")\n  if(event.mod.lshift || event.mod.rshift) {\n    Log.print(\"shift was also held down!\")\n  }\n}\n</code></pre> <p> UIEvent.text \u00b6 returns <code>unknown</code></p> <p>A control has sent a text event, which originates from typing.</p> <p>These events allow handling complex input that comes from the OS level IME input dialogs. On the simplest level, displaying <code>event.text</code> is enough to get started. </p> <p>Sends the following:</p> <ul> <li><code>event.text</code> - the latest text displayed</li> <li><code>event.text_start</code> - the start of the modified text</li> <li><code>event.text_length</code> - the length of the modified text</li> <li><code>event.text_type</code> - a TextEvent type (<code>edit</code> or <code>input</code>)</li> </ul> <p>The easiest way to understand might be to see. This video shows this at work.</p> <p>As a user is typing, there may be candidates avaiable to select from,  when this is true, these are sent as <code>TextInput.edit</code> events, with a start and end. When a candidate is selected (or no choices), a <code>TextEvent.input</code> is sent with the <code>text</code>.   </p> <p> UIEvent.focus \u00b6 returns <code>unknown</code></p> <p>A control has gained focus. Sends no additional data in the event.</p> <pre><code>if(event.type == UIEvent.focus) {\n  Log.print(\"gained focus!\")\n}\n</code></pre> <p> UIEvent.unfocus \u00b6 returns <code>unknown</code></p> <p>A control has lost focus. Sends no additional data in the event.</p> <pre><code>if(event.type == UIEvent.unfocus) {\n  Log.print(\"lost focus!\")\n}\n</code></pre> <p> UIEvent.capture \u00b6 returns <code>unknown</code></p> <p>A control has been captured.</p> <pre><code>if(event.type == UIEvent.capture) {\n  Log.print(\"gained input capture!\")\n}\n</code></pre> <p> UIEvent.uncapture \u00b6 returns <code>unknown</code></p> <p>A control has lost capture status.</p> <pre><code>if(event.type == UIEvent.uncapture) {\n  Log.print(\"lost input capture!\")\n}\n</code></pre> <p> UIEvent.commit \u00b6 returns <code>unknown</code></p> <p>When a control has changeable state (like an editable text control), it will send a <code>commit</code> event when the contents are being applied/committed. For example, if you are typing text and hit enter, or unfocus the control.</p> <pre><code>if(event.type == UIEvent.uncapture) {\n  Log.print(\"lost input capture!\")\n}\n</code></pre> <p> UIEvent.destroy \u00b6 returns <code>unknown</code></p> <p>When a control is destroyed you'll get notified here. Keep in mind that it's destroyed.</p> <pre><code>if(event.type == UIEvent.destroy) {\n  Log.print(\"destroyed!\")\n}\n</code></pre> <p> UIEvent.language \u00b6 returns <code>unknown</code></p> <p>When the UI lanuage changes, your control will receive this event.</p> <pre><code>if(event.type == UIEvent.language) {\n  Log.print(\"language changed.. I should update my size..\")\n}\n</code></pre> <p> UIEvent.change \u00b6 returns <code>unknown</code></p> <p>Change events are context specific, but notify you of a change in state. For example, UIWindow sends a change event with UIWindowChange to notify when a window was closed, collapsed or uncollapsed. A UIText sends a change event when the text has been changed, via typing or otherwise.</p> <p>In each case, <code>event.change</code> contains the relevant data.</p> <pre><code>//UIText example\nif(event.type == UIEvent.change) {\n  Log.print(\"text changed `%(event.change)`!\")\n}\n</code></pre> <p> UIEvent.bounds \u00b6 returns <code>unknown</code></p> <p>A control has changed bounds (note: this may not be working as intended right now). Sends <code>event.dx</code>, <code>event.dy</code> and <code>event.dw</code>, <code>event.dh</code> where <code>d</code> means <code>delta</code>. i.e the change in bounds as a difference between now and before.</p> <pre><code>if(event.type == UIEvent.bounds) {\n  if(event.dx != 0) Log.print(\"moved on x by %(event.dx) amount!\")\n  if(event.dy != 0) Log.print(\"moved on y by %(event.dy) amount!\")\n  if(event.dw != 0) Log.print(\"width changed by %(event.dw) amount!\")\n  if(event.dh != 0) Log.print(\"height changed by %(event.dh) amount!\")\n}\n</code></pre> <p> UIEvent.drag \u00b6 returns <code>unknown</code></p> <p>When a control is dragged or dropped on the UI canvas. The data field contains the kind of event, e.g UIDrag.start or UIDrag.end. The x/y is the start, and end_x/end_y is the end (for a start they're the same)</p> <pre><code>if(event.type == UIEvent.drag) {\n  Log.print(\"control drag changed.. %(event.data)\")\n}\n</code></pre>"},{"location":"api/v/next/world/#uiimagefit","title":"UIImageFit","text":"<p><code>import \"luxe: world\" for UIImageFit</code></p> <p>no docs found</p> <ul> <li>fill</li> <li>contain</li> <li>cover</li> <li>keep_width</li> <li>keep_height</li> </ul> <p> UIImageFit.fill \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIImageFit.contain \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIImageFit.cover \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIImageFit.keep_width \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIImageFit.keep_height \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/world/#uiimageflags","title":"UIImageFlags","text":"<p><code>import \"luxe: world\" for UIImageFlags</code></p> <p>no docs found</p> <ul> <li>none</li> <li>pixelated</li> <li>use_mips</li> </ul> <p> UIImageFlags.none \u00b6 returns <code>unknown</code></p> <p>uses linear interpolation samplers, interpolating smoothly between pixels.   </p> <p> UIImageFlags.pixelated \u00b6 returns <code>unknown</code></p> <p>uses nearest neighbor samplers, leading to an interpolated look.   </p> <p> UIImageFlags.use_mips \u00b6 returns <code>unknown</code></p> <p>uses trilinear interpolation samplers, interpolating smoothly between pixels and mip levels.   </p>"},{"location":"api/v/next/world/#uilayoutmode","title":"UILayoutMode","text":"<p><code>import \"luxe: world\" for UILayoutMode</code></p> <p>no docs found</p> <ul> <li>none</li> <li>flex</li> </ul> <p> UILayoutMode.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILayoutMode.flex \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/world/#uirendermode","title":"UIRenderMode","text":"<p><code>import \"luxe: world\" for UIRenderMode</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>image</li> <li>world</li> </ul> <p> UIRenderMode.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIRenderMode.image \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIRenderMode.world \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/world/#worldeventtype","title":"WorldEventType","text":"<p><code>import \"luxe: world\" for WorldEventType</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>create</li> <li>destroy</li> <li>tick</li> <li>modifier_tick</li> <li>name(value: <code>WorldEventType</code>)</li> </ul> <p> WorldEventType.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WorldEventType.create \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WorldEventType.destroy \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WorldEventType.tick \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WorldEventType.modifier_tick \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WorldEventType.name(value: <code>WorldEventType</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p>"},{"location":"api/v/next/world/#worldrenderdesc","title":"WorldRenderDesc","text":"<p><code>import \"luxe: world\" for WorldRenderDesc</code></p> <p>no docs found</p> <ul> <li>camera</li> <li>camera=(v : Any)</li> <li>camera(v: <code>Any</code>)</li> <li>cull_camera</li> <li>cull_camera=(v : Any)</li> <li>cull_camera(v: <code>Any</code>)</li> <li>new()</li> </ul> <p> WorldRenderDesc.camera \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WorldRenderDesc.camera=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WorldRenderDesc.camera(v: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WorldRenderDesc.cull_camera \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WorldRenderDesc.cull_camera=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WorldRenderDesc.cull_camera(v: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WorldRenderDesc.new() \u00b6 returns <code>WorldRenderDesc</code></p> <p>no docs found   </p>"},{"location":"api/v/next/asset/type/","title":"Type","text":""},{"location":"api/v/next/asset/type/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/asset/type/#luxe-assettype-module","title":"<code>luxe: asset/type</code> module","text":"<ul> <li>AssetArtifact </li> <li>AssetContext </li> <li>AssetID </li> <li>AssetType </li> <li>AssetTypeID </li> </ul>"},{"location":"api/v/next/asset/type/#assetartifact","title":"AssetArtifact","text":"<p><code>import \"luxe: asset/type\" for AssetArtifact</code></p> <p>no docs found</p> <ul> <li>id</li> <li>type</li> <li>path</li> <li>new(type: <code>String</code>, id: <code>String</code>, path: <code>String</code>)</li> </ul> <p> AssetArtifact.id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetArtifact.type \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetArtifact.path \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetArtifact.new(type: <code>String</code>, id: <code>String</code>, path: <code>String</code>) \u00b6 returns <code>AssetArtifact</code></p> <p>no docs found   </p>"},{"location":"api/v/next/asset/type/#assetcontext","title":"AssetContext","text":"<p><code>import \"luxe: asset/type\" for AssetContext</code></p> <p>no docs found</p> <ul> <li>id</li> <li>db</li> <li>artifacts</li> <li>ast_for_asset</li> <li>errors</li> <li>error(info: <code>String</code>)</li> <li>artifacts_for(type_id: <code>String</code>)</li> <li>ast_for(asset: <code>AssetID</code>)</li> <li>emit_block_def_for(asset: <code>AssetID</code>, block_tag: <code>String</code>, from: <code>String</code>)</li> <li>tagged(tag: <code>String</code>)</li> <li>tag(tag: <code>String</code>, value: <code>Any</code>)</li> <li>TYPE</li> <li>DEV</li> <li>RELEASE</li> <li>new(id: <code>String</code>, db: <code>Any</code>, artifact_root: <code>String</code>)</li> <li>set_modified(type: <code>String</code>, modified: <code>List</code>)</li> <li>get_modified(type: <code>String</code>)</li> <li>get_modified()</li> <li>skip(id: <code>String</code>)</li> <li>skipped(id: <code>String</code>)</li> <li>emit_path(id: <code>String</code>)</li> <li>emit_path(id: <code>String</code>, extra: <code>String</code>)</li> <li>emit(type_id: <code>String</code>, artifact_id: <code>String</code>, artifact_path: <code>String</code>)</li> </ul> <p> AssetContext.id \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetContext.db \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetContext.artifacts \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> AssetContext.ast_for_asset \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> AssetContext.errors \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> AssetContext.error(info: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetContext.artifacts_for(type_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetContext.ast_for(asset: <code>AssetID</code>) \u00b6 returns <code>Result</code></p> <p>no docs found   </p> <p> AssetContext.emit_block_def_for(asset: <code>AssetID</code>, block_tag: <code>String</code>, from: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetContext.tagged(tag: <code>String</code>) \u00b6 returns <code>Any</code></p> <p>no docs found   </p> <p> AssetContext.tag(tag: <code>String</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetContext.TYPE \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetContext.DEV \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetContext.RELEASE \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetContext.new(id: <code>String</code>, db: <code>Any</code>, artifact_root: <code>String</code>) \u00b6 returns <code>AssetContext</code></p> <p>no docs found   </p> <p> AssetContext.set_modified(type: <code>String</code>, modified: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetContext.get_modified(type: <code>String</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> AssetContext.get_modified() \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> AssetContext.skip(id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetContext.skipped(id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetContext.emit_path(id: <code>String</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetContext.emit_path(id: <code>String</code>, extra: <code>String</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetContext.emit(type_id: <code>String</code>, artifact_id: <code>String</code>, artifact_path: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/asset/type/#assetid","title":"AssetID","text":"<p><code>import \"luxe: asset/type\" for AssetID</code></p> <p>no docs found</p> <ul> <li>type_id</li> <li>id</li> <li>asset</li> <li>path</li> <li>ext</li> <li>subtype</li> <li>prefix</li> <li>root</li> <li>meta_uuid</li> <li>new(type_id: <code>String</code>, map: <code>Map</code>)</li> <li>from_id(type_id: <code>String</code>, asset_id: <code>String</code>)</li> <li>refresh()</li> </ul> <p> AssetID.type_id \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetID.id \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetID.asset \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetID.path \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetID.ext \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetID.subtype \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetID.prefix \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetID.root \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetID.meta_uuid \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetID.new(type_id: <code>String</code>, map: <code>Map</code>) \u00b6 returns <code>AssetID</code></p> <p>no docs found   </p> <p> AssetID.from_id(type_id: <code>String</code>, asset_id: <code>String</code>) \u00b6 returns <code>AssetID</code></p> <p>no docs found   </p> <p> AssetID.refresh() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/asset/type/#assettype","title":"AssetType","text":"<p><code>import \"luxe: asset/type\" for AssetType</code></p> <p>no docs found</p> <ul> <li>type_id</li> <li>version_id</li> <li>ext</li> <li>subtype</li> <li>ctx</li> <li>is_loader</li> <li>is_data</li> <li>is_handle</li> <li>version</li> <li>load_before</li> <li>load_after</li> <li>before</li> <li>after</li> <li>pre_early</li> <li>pre_late</li> <li>new(type_id: <code>String</code>, ctx: <code>AssetContext</code>)</li> <li>remap(asset: <code>AssetID</code>, new_id: <code>String</code>)</li> <li>get_remap(map: <code>Map</code>)</li> <li>modify_affected(asset: <code>AssetID</code>)</li> <li>modify(asset: <code>AssetID</code>)</li> <li>unmodify(asset: <code>AssetID</code>)</li> <li>emit_path(asset: <code>AssetID</code>)</li> <li>skip(asset: <code>AssetID</code>)</li> <li>get_data(id: <code>String</code>)</li> <li>set_handle(id: <code>String</code>, handle: <code>Num</code>)</li> <li>pre(assets: <code>List</code>)</li> <li>process(assets: <code>List</code>, each: <code>Fn</code>)</li> <li>loader(assets: <code>List</code>, artifacts: <code>List</code>)</li> </ul> <p> AssetType.type_id \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetType.version_id \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetType.ext \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetType.subtype \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetType.ctx \u00b6 returns <code>AssetContext</code></p> <p>no docs found   </p> <p> AssetType.is_loader \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> AssetType.is_data \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> AssetType.is_handle \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> AssetType.version \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> AssetType.load_before \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> AssetType.load_after \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> AssetType.before \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> AssetType.after \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> AssetType.pre_early \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> AssetType.pre_late \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> AssetType.new(type_id: <code>String</code>, ctx: <code>AssetContext</code>) \u00b6 returns <code>AssetType</code></p> <p>no docs found   </p> <p> AssetType.remap(asset: <code>AssetID</code>, new_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetType.get_remap(map: <code>Map</code>) \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> AssetType.modify_affected(asset: <code>AssetID</code>) \u00b6 returns <code>unknown</code></p> <p>modify all assets that refer to this one   </p> <p> AssetType.modify(asset: <code>AssetID</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetType.unmodify(asset: <code>AssetID</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetType.emit_path(asset: <code>AssetID</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetType.skip(asset: <code>AssetID</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetType.get_data(id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetType.set_handle(id: <code>String</code>, handle: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetType.pre(assets: <code>List</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> AssetType.process(assets: <code>List</code>, each: <code>Fn</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> AssetType.loader(assets: <code>List</code>, artifacts: <code>List</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p>"},{"location":"api/v/next/asset/type/#assettypeid","title":"AssetTypeID","text":"<p><code>import \"luxe: asset/type\" for AssetTypeID</code></p> <p>no docs found</p> <ul> <li>block</li> <li>block=(v : Any)</li> <li>block_class</li> <li>block_class=(v : Any)</li> <li>loader</li> <li>loader=(v : Any)</li> <li>handler</li> <li>handler=(v : Any)</li> <li>new(map: <code>Map</code>)</li> </ul> <p> AssetTypeID.block \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetTypeID.block=(v : Any) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetTypeID.block_class \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetTypeID.block_class=(v : Any) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> AssetTypeID.loader \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetTypeID.loader=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AssetTypeID.handler \u00b6 returns <code>AssetType</code></p> <p>no docs found   </p> <p> AssetTypeID.handler=(v : Any) \u00b6 returns <code>AssetType</code></p> <p>no docs found   </p> <p> AssetTypeID.new(map: <code>Map</code>) \u00b6 returns <code>AssetTypeID</code></p> <p>no docs found   </p>"},{"location":"api/v/next/debug/alloc.block/","title":"Alloc.block","text":""},{"location":"api/v/next/debug/alloc.block/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/debug/alloc.block/#luxe-debugallocblock-module","title":"<code>luxe: debug/alloc.block</code> module","text":"<ul> <li>AllocMeta </li> </ul>"},{"location":"api/v/next/debug/alloc.block/#allocmeta","title":"AllocMeta","text":"<p><code>import \"luxe: debug/alloc.block\" for AllocMeta</code></p> <p>no docs found</p> <ul> <li><code>var kind : String = \"script\"</code></li> <li><code>var context : String = \"&lt;unknown.wren&gt;\"</code></li> <li><code>var note : String = \"\"</code></li> <li><code>var amount : Num = 0</code></li> </ul>"},{"location":"api/v/next/pose/blend.pose_node/","title":"Blend.pose node","text":""},{"location":"api/v/next/pose/blend.pose_node/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/pose/blend.pose_node/#luxe-poseblendpose_node-module","title":"<code>luxe: pose/blend.pose_node</code> module","text":"<ul> <li>BlendLayer </li> <li>BlendNode </li> </ul>"},{"location":"api/v/next/pose/blend.pose_node/#blendlayer","title":"BlendLayer","text":"<p><code>import \"luxe: pose/blend.pose_node\" for BlendLayer</code></p> <p>no docs found</p> <ul> <li><code>var pose : Num = 0</code></li> <li><code>var weight : Num = 0</code></li> </ul>"},{"location":"api/v/next/pose/blend.pose_node/#blendnode","title":"BlendNode","text":"<p><code>import \"luxe: pose/blend.pose_node\" for BlendNode</code></p> <p>no docs found</p> <ul> <li><code>var layers : List = []</code></li> <li><code>var threshold : Num = 0.01</code></li> <li><code>var ratio_1D : Num = -1</code></li> <li>id</li> </ul> <p> BlendNode.id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/pose/ccdik.pose_node/","title":"Ccdik.pose node","text":""},{"location":"api/v/next/pose/ccdik.pose_node/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/pose/ccdik.pose_node/#luxe-poseccdikpose_node-module","title":"<code>luxe: pose/ccdik.pose_node</code> module","text":"<ul> <li>CCDIKNode </li> </ul>"},{"location":"api/v/next/pose/ccdik.pose_node/#ccdiknode","title":"CCDIKNode","text":"<p><code>import \"luxe: pose/ccdik.pose_node\" for CCDIKNode</code></p> <p>no docs found</p> <ul> <li><code>var input_pose : Num = 0</code></li> <li><code>var target : Float3 = [0, 0, 1]</code></li> <li><code>var start_bone : String = null</code></li> <li><code>var end_bone : String = null</code></li> <li><code>var max_iterations : Num = 10</code></li> <li><code>var min_iterations : Num = 1</code></li> <li><code>var threshold : Num = 0.01</code></li> <li><code>var annealing_exponent : Num = 0</code></li> <li><code>var weight : Num = 1</code></li> <li>id</li> </ul> <p> CCDIKNode.id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/pose/clip.pose_node/","title":"Clip.pose node","text":""},{"location":"api/v/next/pose/clip.pose_node/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/pose/clip.pose_node/#luxe-poseclippose_node-module","title":"<code>luxe: pose/clip.pose_node</code> module","text":"<ul> <li>ClipNode </li> </ul>"},{"location":"api/v/next/pose/clip.pose_node/#clipnode","title":"ClipNode","text":"<p><code>import \"luxe: pose/clip.pose_node\" for ClipNode</code></p> <p>no docs found</p> <ul> <li><code>var clip : Num = 0</code></li> <li><code>var offset : Num = 0</code></li> <li><code>var rate : Num = 1</code></li> <li><code>var time : Num = 0</code></li> <li>id</li> </ul> <p> ClipNode.id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/pose/look_at_ik.pose_node/","title":"Look at ik.pose node","text":""},{"location":"api/v/next/pose/look_at_ik.pose_node/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/pose/look_at_ik.pose_node/#luxe-poselook_at_ikpose_node-module","title":"<code>luxe: pose/look_at_ik.pose_node</code> module","text":"<ul> <li>LookAtIKNode </li> </ul>"},{"location":"api/v/next/pose/look_at_ik.pose_node/#lookatiknode","title":"LookAtIKNode","text":"<p><code>import \"luxe: pose/look_at_ik.pose_node\" for LookAtIKNode</code></p> <p>no docs found</p> <ul> <li><code>var input_pose : Num = 0</code></li> <li><code>var bone : String = null</code></li> <li><code>var target : Float3 = [0, 0, 2]</code></li> <li><code>var offset : Float3 = [0, 0, 0]</code></li> <li><code>var forward : Float3 = [0, 0, 1]</code></li> <li><code>var up : Float3 = [0, 1, 0]</code></li> <li><code>var weight : Num = 1</code></li> <li><code>var twist_angle : Num = 0</code></li> <li><code>var pole_vector : Float3 = [0, 0, 1]</code></li> <li>id</li> </ul> <p> LookAtIKNode.id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/pose/two_bone_ik.pose_node/","title":"Two bone ik.pose node","text":""},{"location":"api/v/next/pose/two_bone_ik.pose_node/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/pose/two_bone_ik.pose_node/#luxe-posetwo_bone_ikpose_node-module","title":"<code>luxe: pose/two_bone_ik.pose_node</code> module","text":"<ul> <li>TwoBoneIKNode </li> </ul>"},{"location":"api/v/next/pose/two_bone_ik.pose_node/#twoboneiknode","title":"TwoBoneIKNode","text":"<p><code>import \"luxe: pose/two_bone_ik.pose_node\" for TwoBoneIKNode</code></p> <p>no docs found</p> <ul> <li><code>var input_pose : Num = 0</code></li> <li><code>var target : Float3 = [0, 0, 1]</code></li> <li><code>var start_bone : String = null</code></li> <li><code>var middle_bone : String = null</code></li> <li><code>var end_bone : String = null</code></li> <li><code>var soften : Num = 0.97</code></li> <li><code>var weight : Num = 1</code></li> <li><code>var twist_angle : Num = 0</code></li> <li><code>var mid_axis : Float3 = [0, 0, 1]</code></li> <li><code>var pole_vector : Float3 = [0, 0, 1]</code></li> <li>id</li> </ul> <p> TwoBoneIKNode.id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/render/font/","title":"Font","text":""},{"location":"api/v/next/render/font/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/render/font/#luxe-renderfont-module","title":"<code>luxe: render/font</code> module","text":"<ul> <li>Font </li> </ul>"},{"location":"api/v/next/render/font/#font","title":"Font","text":"<p><code>import \"luxe: render/font\" for Font</code></p> <p>no docs found</p> <ul> <li>get_page_image(font: <code>Font</code>, index: <code>Num</code>)</li> </ul> <p> Font.get_page_image(font: <code>Font</code>, index: <code>Num</code>) \u00b6 returns <code>Image</code></p> <p>no docs found   </p>"},{"location":"api/v/next/string/po/","title":"Po","text":""},{"location":"api/v/next/string/po/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/string/po/#luxe-stringpo-module","title":"<code>luxe: string/po</code> module","text":"<ul> <li>PO </li> <li>POData </li> <li>POElement </li> <li>POHeader </li> <li>POString </li> </ul>"},{"location":"api/v/next/string/po/#po","title":"PO","text":"<p><code>import \"luxe: string/po\" for PO</code></p> <p>no docs found</p> <ul> <li>parse_header(lines: <code>List</code>)</li> <li>parse_elements(lines: <code>List</code>)</li> <li>parse(asset_id: <code>String</code>, bytes: <code>String</code>)</li> </ul> <p> PO.parse_header(lines: <code>List</code>) \u00b6 returns <code>Result</code></p> <p>no docs found   </p> <p> PO.parse_elements(lines: <code>List</code>) \u00b6 returns <code>List</code></p> <p>converts the lines into chunks separated by lines   </p> <p> PO.parse(asset_id: <code>String</code>, bytes: <code>String</code>) \u00b6 returns <code>Result</code></p> <p>no docs found   </p>"},{"location":"api/v/next/string/po/#podata","title":"POData","text":"<p><code>import \"luxe: string/po\" for POData</code></p> <p>no docs found</p> <ul> <li>language</li> <li>headers</li> <li>elements</li> <li>new(asset_id: <code>String</code>, language: <code>String</code>, headers: <code>Map</code>)</li> <li>to_string()</li> </ul> <p> POData.language \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> POData.headers \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> POData.elements \u00b6 returns <code>Map</code></p> <p>no docs found   </p> <p> POData.new(asset_id: <code>String</code>, language: <code>String</code>, headers: <code>Map</code>) \u00b6 returns <code>POData</code></p> <p>no docs found   </p> <p> POData.to_string() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/string/po/#poelement","title":"POElement","text":"<p><code>import \"luxe: string/po\" for POElement</code></p> <p>An element inside the PO file</p> <ul> <li>id</li> <li>key</li> <li>file_index</li> <li>plural_id</li> <li>comments</li> <li>is_plural</li> <li>strings</li> <li>new(file_index: <code>Num</code>, key: <code>String</code>, plural_id: <code>String</code>, id: <code>String</code>, strings: <code>List</code>, comments: <code>List</code>)</li> <li>update_id(id: <code>String</code>)</li> <li>update_comments(comments: <code>List</code>)</li> </ul> <p> POElement.id \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> POElement.key \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> POElement.file_index \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> POElement.plural_id \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> POElement.comments \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> POElement.is_plural \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> POElement.strings \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> POElement.new(file_index: <code>Num</code>, key: <code>String</code>, plural_id: <code>String</code>, id: <code>String</code>, strings: <code>List</code>, comments: <code>List</code>) \u00b6 returns <code>POElement</code></p> <p>no docs found   </p> <p> POElement.update_id(id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> POElement.update_comments(comments: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/string/po/#poheader","title":"POHeader","text":"<p><code>import \"luxe: string/po\" for POHeader</code></p> <p>a single header line</p> <ul> <li>key</li> <li>value</li> <li>file_index</li> <li>new(file_index: <code>Num</code>, key: <code>String</code>, value: <code>String</code>)</li> <li>update_value(value: <code>String</code>)</li> </ul> <p> POHeader.key \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> POHeader.value \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> POHeader.file_index \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> POHeader.new(file_index: <code>Num</code>, key: <code>String</code>, value: <code>String</code>) \u00b6 returns <code>POHeader</code></p> <p>no docs found   </p> <p> POHeader.update_value(value: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/string/po/#postring","title":"POString","text":"<p><code>import \"luxe: string/po\" for POString</code></p> <p>a single msgstr, with an optional [index]</p> <ul> <li>value</li> <li>index</li> <li>new(value: <code>String</code>, index: <code>Num</code>)</li> </ul> <p> POString.value \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> POString.index \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> POString.new(value: <code>String</code>, index: <code>Num</code>) \u00b6 returns <code>POString</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/anim.modifier/","title":"Anim.modifier","text":""},{"location":"api/v/next/system/anim.modifier/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/system/anim.modifier/#luxe-systemanimmodifier-module","title":"<code>luxe: system/anim.modifier</code> module","text":"<ul> <li>Anim </li> <li>AnimEvent </li> <li>AnimInterpolation </li> <li>AnimInterval </li> <li>AnimState </li> <li>Data </li> <li>System </li> </ul>"},{"location":"api/v/next/system/anim.modifier/#anim","title":"Anim","text":"<p><code>import \"luxe: system/anim.modifier\" for Anim</code></p> <p><code>Anim</code> is an animation player attached to an entity.</p> <p>It plays animations from animation assets or ones created from code.  Animations can target the entity <code>Anim</code> is attached to,  but can target any entity.  For example, a level cutscene could be played back from one entity,  but it drives several other entities. From assets like scenes and prototypes,  <code>Anim</code> provides an autoplay list, for playing when loaded. </p> <p>You can play multiple animations at the same time,  for example, the player might have a walk animation playing  and you play a glowing animation on top. </p> <p><code>Anim</code> supports curve, linear and discrete driven animations  and is expanded on by World Systems that provide animation tracks.</p> <ul> <li>create(entity: <code>Entity</code>)</li> <li>destroy(entity: <code>Entity</code>)</li> <li>has(entity: <code>Entity</code>)</li> <li>valid(entity: <code>Entity</code>, anim: <code>Anim</code>)</li> <li>get_source_id(entity: <code>Entity</code>, anim: <code>Anim</code>)</li> <li>get_state(entity: <code>Entity</code>, anim: <code>Anim</code>)</li> <li>get_active_anims(entity: <code>Entity</code>)</li> <li>play(entity: <code>Entity</code>, anim_lx: <code>ID</code>, time_offset: <code>Num</code>)</li> <li>blend(entity: <code>Entity</code>, anim_lx: <code>ID</code>, blend_time: <code>Num</code>, time_offset: <code>Num</code>)</li> <li>play(entity: <code>Entity</code>, anim_lx: <code>ID</code>)</li> <li>blend(entity: <code>Entity</code>, anim_lx: <code>ID</code>, blend_time: <code>Num</code>)</li> <li>play_only(entity: <code>Entity</code>, anim_lx: <code>ID</code>, time_offset: <code>Num</code>)</li> <li>play_only(entity: <code>Entity</code>, anim_lx: <code>ID</code>)</li> <li>stop(entity: <code>Entity</code>, anim: <code>Anim</code>, reset: <code>Bool</code>)</li> <li>stop(entity: <code>Entity</code>, anim: <code>Anim</code>)</li> <li>stop_all(entity: <code>Entity</code>, reset: <code>Bool</code>)</li> <li>stop_all(entity: <code>Entity</code>)</li> <li>create_track(entity: <code>Entity</code>, anim: <code>Anim</code>, track_id: <code>Any</code>, track_type: <code>Any</code>)</li> <li>has_track(entity: <code>Entity</code>, anim: <code>Anim</code>, track_id: <code>Any</code>)</li> <li>track_set_range(entity: <code>Entity</code>, anim: <code>Anim</code>, track_id: <code>Any</code>, min: <code>Any</code>, max: <code>Any</code>)</li> <li>track_get_range(entity: <code>Entity</code>, anim: <code>Anim</code>, track_id: <code>Any</code>)</li> <li>track_set(entity: <code>Entity</code>, anim: <code>Anim</code>, track_id: <code>Any</code>, property: <code>Any</code>, value: <code>Any</code>)</li> <li>track_set_channel(entity: <code>Entity</code>, anim: <code>Anim</code>, track_id: <code>Any</code>, channel_id: <code>Any</code>, channel_idx: <code>Any</code>, interp: <code>Any</code>, keys: <code>Any</code>)</li> <li>set_play_count(entity: <code>Entity</code>, anim: <code>Anim</code>, play_count: <code>Num</code>)</li> <li>set_rate(entity: <code>Entity</code>, anim: <code>Anim</code>, rate: <code>Num</code>)</li> <li>set_start(entity: <code>Entity</code>, anim: <code>Anim</code>, start: <code>Num</code>)</li> <li>set_end(entity: <code>Entity</code>, anim: <code>Anim</code>, end: <code>Num</code>)</li> <li>set_interval_time(entity: <code>Entity</code>, anim: <code>Anim</code>, time: <code>Num</code>)</li> <li>get_play_count(entity: <code>Entity</code>, anim: <code>Anim</code>)</li> <li>get_rate(entity: <code>Entity</code>, anim: <code>Anim</code>)</li> <li>get_duration(entity: <code>Entity</code>, anim: <code>Anim</code>)</li> <li>get_start(entity: <code>Entity</code>, anim: <code>Anim</code>)</li> <li>get_end(entity: <code>Entity</code>, anim: <code>Anim</code>)</li> <li>get_interval_time(entity: <code>Entity</code>, anim: <code>Anim</code>)</li> <li>on_event(entity: <code>Entity</code>, anim: <code>Anim</code>, fn: <code>Fn</code>)</li> </ul> <p> Anim.create(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>Attach an <code>Anim</code> modifier to <code>entity</code>.</p> <pre><code>var entity = Entity.create(world)\nAnim.create(entity)\n</code></pre> <p> Anim.destroy(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Detach and destroy the <code>Anim</code> attached to <code>entity</code>.</p> <pre><code>Anim.destroy(entity)\n</code></pre> <p> Anim.has(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>Returns whether <code>entity</code> has an <code>Anim</code> modifier attached. </p> <pre><code>if(Anim.has(entity)) {\n  Log.print(\"found anim\")\n}\n</code></pre> <p> Anim.valid(entity: <code>Entity</code>, anim: <code>Anim</code>) \u00b6 returns <code>Bool</code></p> <p>Returns whether the <code>Anim</code> instance is valid for the <code>Anim</code> attached to <code>entity</code>. </p> <pre><code>var anim = Anim.play(entity, \"player/idle\")\nif(!Anim.valid(entity, anim)) {\n  Log.print(\"oh no!\")\n}\n</code></pre> <p> Anim.get_source_id(entity: <code>Entity</code>, anim: <code>Anim</code>) \u00b6 returns <code>ID</code></p> <p>Returns the <code>ID</code> of the animation asset that the <code>Anim</code> instance was played from,  if known, by asking the <code>Anim</code> attached to <code>entity</code>. Returns <code>null</code> if not. </p> <pre><code>var anim = Anim.play(entity, \"player/idle\")\nvar source_id = Anim.get_source_id(entity, anim)\nLog.print(Strings.get(source_id)) //expect: \"player/idle\"\n</code></pre> <p> Anim.get_state(entity: <code>Entity</code>, anim: <code>Anim</code>) \u00b6 returns <code>AnimState</code></p> <p>Return the animation state of the <code>Anim</code> instance, by asking the <code>Anim</code> attached to <code>entity</code>. </p> <pre><code>var anim = Anim.play(entity, \"player/idle\")\nvar state = Anim.get_state(entity, anim)\nif(state == AnimState.playing) {\n  Anim.stop(entity, anim)\n}\n</code></pre> <p> Anim.get_active_anims(entity: <code>Entity</code>) \u00b6 returns <code>List</code></p> <p>Returns a list of <code>Anim</code> instances that are active on the <code>Anim</code> attached to <code>entity</code>. </p> <pre><code>var active = Anim.get_active_anims(entity)\nfor(anim in active) {\n  var state = Anim.get_state(entity, anim)\n  Log.print(AnimState.name(state));\n}\n</code></pre> <p> Anim.play(entity: <code>Entity</code>, anim_lx: <code>ID</code>, time_offset: <code>Num</code>) \u00b6 returns <code>Anim</code></p> <p>Play the animation asset <code>anim_lx</code> on the Anim attached to <code>entity</code>.  The <code>time_offset</code> is a time in seconds to begin playback from.  For example, you might pause an animation and hold onto the animation time when it was paused.  Then when resuming, you can play from the new time. Returns the newly started <code>Anim</code> instance.</p> <pre><code>var anim = Anim.play(entity, \"player/idle\", 0.5)\n</code></pre> <p> Anim.blend(entity: <code>Entity</code>, anim_lx: <code>ID</code>, blend_time: <code>Num</code>, time_offset: <code>Num</code>) \u00b6 returns <code>Anim</code></p> <p>Play the animation asset <code>anim_lx</code> on the <code>Anim</code> attached to <code>entity</code> with a blend fade time.  The <code>time_offset</code> is a time in seconds to begin playback from.  The <code>blend_time</code> is handled by some tracks, not all. Returns the newly started <code>Anim</code> instance.</p> <pre><code>//fade in the animation over 0.6 seconds\nvar anim = Anim.blend(entity, \"player/idle\", 0.6)\n</code></pre> <p> Anim.play(entity: <code>Entity</code>, anim_lx: <code>ID</code>) \u00b6 returns <code>Anim</code></p> <p>Play the animation asset <code>anim_lx</code> on the <code>Anim</code> attached to <code>entity</code>.  Plays from the beginning. Returns the newly started <code>Anim</code> instance.</p> <pre><code>var anim = Anim.play(entity, \"player/idle\")\n</code></pre> <p> Anim.blend(entity: <code>Entity</code>, anim_lx: <code>ID</code>, blend_time: <code>Num</code>) \u00b6 returns <code>Anim</code></p> <p>Play the animation asset <code>anim_lx</code> on the <code>Anim</code> attached to <code>entity</code> with a blend fade time.  Plays from the beginning. Blend time is handled by some tracks, not all. Returns the newly started <code>Anim</code> instance.</p> <pre><code>//fade in the animation over 0.6 seconds\nvar anim = Anim.blend(entity, \"player/idle\", 0.6)\n</code></pre> <p> Anim.play_only(entity: <code>Entity</code>, anim_lx: <code>ID</code>, time_offset: <code>Num</code>) \u00b6 returns <code>Anim</code></p> <p>Play the animation asset <code>anim_lx</code> on the <code>Anim</code> attached to <code>entity</code>, stopping all other active anims,  and only playing this one. The <code>time_offset</code> is a time in seconds to begin playback from.  Returns the newly started <code>Anim</code> instance.</p> <pre><code>var anim = Anim.play_only(entity, \"player/idle\", 0.5)\n</code></pre> <p> Anim.play_only(entity: <code>Entity</code>, anim_lx: <code>ID</code>) \u00b6 returns <code>Anim</code></p> <p>Play the animation asset <code>anim_lx</code> on the <code>Anim</code> attached to <code>entity</code>, stopping all other active anims,  and only playing this one. Returns the newly started <code>Anim</code> instance.</p> <pre><code>var anim = Anim.play_only(entity, \"player/idle\")\n</code></pre> <p> Anim.stop(entity: <code>Entity</code>, anim: <code>Anim</code>, reset: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Stop the <code>Anim</code> instance if playing on the <code>Anim</code> attached to <code>entity</code>.</p> <p>If <code>reset</code> is <code>true</code>, the state of anything that was being animated by this <code>Anim</code> instance,  will be reset to what it was before it was played. For example, if your animation is changing the transform position,  it will revert back to the position at the time the animation was played. </p> <pre><code>var anim = Anim.play(entity, \"player/idle\")\nAnim.stop(entity, anim, true)\n</code></pre> <p> Anim.stop(entity: <code>Entity</code>, anim: <code>Anim</code>) \u00b6 returns <code>None</code></p> <p>Stop the <code>Anim</code> instance if playing on the <code>Anim</code> attached to <code>entity</code>.  State is not reset (see <code>Anim.stop(entity, anim, reset)</code>). </p> <pre><code>var anim = Anim.play(entity, \"player/idle\")\nAnim.stop(entity, anim)\n</code></pre> <p> Anim.stop_all(entity: <code>Entity</code>, reset: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Stop all active <code>Anim</code> instances playing on the <code>Anim</code> attached to <code>entity</code>.  If <code>reset</code> is <code>true</code>, state will be reset to the state before the animation started (see <code>Anim.stop(entity, anim, reset)</code>). </p> <pre><code>var anim = Anim.play(entity, \"player/idle\")\nAnim.stop_all(entity, true)\n</code></pre> <p> Anim.stop_all(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Stop all active <code>Anim</code> instances playing on the <code>Anim</code> attached to <code>entity</code>.  State is not reset (see <code>Anim.stop(entity, anim, reset)</code>). </p> <pre><code>var anim = Anim.play(entity, \"player/idle\")\nAnim.stop_all(entity)\n</code></pre> <p> Anim.create_track(entity: <code>Entity</code>, anim: <code>Anim</code>, track_id: <code>Any</code>, track_type: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Anim.has_track(entity: <code>Entity</code>, anim: <code>Anim</code>, track_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Anim.track_set_range(entity: <code>Entity</code>, anim: <code>Anim</code>, track_id: <code>Any</code>, min: <code>Any</code>, max: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Anim.track_get_range(entity: <code>Entity</code>, anim: <code>Anim</code>, track_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Anim.track_set(entity: <code>Entity</code>, anim: <code>Anim</code>, track_id: <code>Any</code>, property: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Anim.track_set_channel(entity: <code>Entity</code>, anim: <code>Anim</code>, track_id: <code>Any</code>, channel_id: <code>Any</code>, channel_idx: <code>Any</code>, interp: <code>Any</code>, keys: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Anim.set_play_count(entity: <code>Entity</code>, anim: <code>Anim</code>, play_count: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the amount of times to play the <code>Anim</code> instance on the <code>Anim</code> attached to <code>entity</code>.  The <code>play_count</code> value can be <code>0</code>, which will loop forever.</p> <pre><code>//play 3 times and then end\nvar anim = Anim.play(entity, \"player/idle\")\nAnim.set_play_count(entity, anim, 3)\n</code></pre> <p> Anim.set_rate(entity: <code>Entity</code>, anim: <code>Anim</code>, rate: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the playback rate of the <code>Anim</code> instance on the <code>Anim</code> attached to <code>entity</code>.  The rate of <code>1</code> is the default speed. <code>0.5</code> is half speed, and <code>2</code> is twice as fast. </p> <pre><code>var anim = Anim.play(entity, \"player/idle\")\nAnim.set_rate(entity, anim, 0.5)\n</code></pre> <p> Anim.set_start(entity: <code>Entity</code>, anim: <code>Anim</code>, start: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the start marker of the <code>Anim</code> instance on the <code>Anim</code> attached to <code>entity</code>. note This API is WIP. </p> <pre><code>Anim.set_start(entity, anim, 0)\n</code></pre> <p> Anim.set_end(entity: <code>Entity</code>, anim: <code>Anim</code>, end: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the end marker of the <code>Anim</code> instance on the <code>Anim</code> attached to <code>entity</code>. note This API is WIP. </p> <pre><code>Anim.set_end(entity, anim, 1)\n</code></pre> <p> Anim.set_interval_time(entity: <code>Entity</code>, anim: <code>Anim</code>, time: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the current playback time of the <code>Anim</code> instance on the <code>Anim</code> attached to <code>entity</code>. note This API is WIP. </p> <pre><code>Anim.set_interval_time(entity, anim, 0.5)\n</code></pre> <p> Anim.get_play_count(entity: <code>Entity</code>, anim: <code>Anim</code>) \u00b6 returns <code>Num</code></p> <p>Return the play count of the <code>Anim</code> instance on the <code>Anim</code> attached to <code>entity</code>. </p> <pre><code>var play_count = Anim.get_play_count(entity, anim)\n</code></pre> <p> Anim.get_rate(entity: <code>Entity</code>, anim: <code>Anim</code>) \u00b6 returns <code>Num</code></p> <p>Return the rate of playback of the <code>Anim</code> instance on the <code>Anim</code> attached to <code>entity</code>. </p> <pre><code>var play_count = Anim.get_play_count(entity, anim)\n</code></pre> <p> Anim.get_duration(entity: <code>Entity</code>, anim: <code>Anim</code>) \u00b6 returns <code>Num</code></p> <p>Return the duration of the <code>Anim</code> instance on the <code>Anim</code> attached to <code>entity</code>. </p> <pre><code>var play_count = Anim.get_play_count(entity, anim)\n</code></pre> <p> Anim.get_start(entity: <code>Entity</code>, anim: <code>Anim</code>) \u00b6 returns <code>Num</code></p> <p>Return the start marker of the <code>Anim</code> instance on the <code>Anim</code> attached to <code>entity</code>. </p> <pre><code>var play_count = Anim.get_play_count(entity, anim)\n</code></pre> <p> Anim.get_end(entity: <code>Entity</code>, anim: <code>Anim</code>) \u00b6 returns <code>Num</code></p> <p>Return the end marker of the <code>Anim</code> instance on the <code>Anim</code> attached to <code>entity</code>. </p> <pre><code>var play_count = Anim.get_play_count(entity, anim)\n</code></pre> <p> Anim.get_interval_time(entity: <code>Entity</code>, anim: <code>Anim</code>) \u00b6 returns <code>Num</code></p> <p>Return the current playback time of the <code>Anim</code> instance on the <code>Anim</code> attached to entity. note This API is WIP. </p> <pre><code>var play_count = Anim.get_play_count(entity, anim)\n</code></pre> <p> Anim.on_event(entity: <code>Entity</code>, anim: <code>Anim</code>, fn: <code>Fn</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/anim.modifier/#animevent","title":"AnimEvent","text":"<p><code>import \"luxe: system/anim.modifier\" for AnimEvent</code></p> <p>no docs found</p> <ul> <li>start</li> <li>tick</li> <li>complete</li> </ul> <p> AnimEvent.start \u00b6 returns <code>unknown</code></p> <p>An event fired when an animation started playing.   </p> <p> AnimEvent.tick \u00b6 returns <code>unknown</code></p> <p>An event fired when an animation is updated, but only if the track is set to emit the event.   </p> <p> AnimEvent.complete \u00b6 returns <code>unknown</code></p> <p>An event fired when an animation is stopped or done playing.   </p>"},{"location":"api/v/next/system/anim.modifier/#animinterpolation","title":"AnimInterpolation","text":"<p><code>import \"luxe: system/anim.modifier\" for AnimInterpolation</code></p> <p>An enum for types of interpolation in animation tracks.</p> <ul> <li>unknown</li> <li>curve</li> <li>linear</li> <li>discrete</li> <li>name(value: <code>AnimInterpolation</code>)</li> <li>from_string(value: <code>String</code>)</li> </ul> <p> AnimInterpolation.unknown \u00b6 returns <code>unknown</code></p> <p>An invalid or unknown value.</p> <pre><code>if(value == AnimInterpolation.unknown) {\n  Log.print(\"unknown interpolation type!\")\n}\n</code></pre> <p> AnimInterpolation.curve \u00b6 returns <code>unknown</code></p> <p>The animation values between keys will be interpolated  according to the curve defined by the keys themselves. </p> <pre><code>if(value == AnimInterpolation.curve) {\n  Log.print(\"curve\")\n}\n</code></pre> <p> AnimInterpolation.linear \u00b6 returns <code>unknown</code></p> <p>The animation values between keys will be interpolated linearly.  For example if your keys were <code>{ time=0 value=0 }</code> and <code>{ time=1 value=4 }</code>,  at the time of <code>0.5</code> the value would be <code>2</code>, half of the next key. </p> <pre><code>if(value == AnimInterpolation.linear) {\n  Log.print(\"linear\")\n}\n</code></pre> <p> AnimInterpolation.discrete \u00b6 returns <code>unknown</code></p> <p>The animation values between keys would not be interpolated,  they would jump from one value to the next.  For example if your keys were <code>{ time=0 value=0 }</code> and <code>{ time=1 value=3 }</code>,  with discrete the value at time <code>0.5</code> is still <code>0</code>  (instead of <code>1.5</code> with linear).  It will only change to <code>3</code> when the next key is reached. </p> <pre><code>if(value == AnimInterpolation.discrete) {\n  Log.print(\"discrete\")\n}\n</code></pre> <p> AnimInterpolation.name(value: <code>AnimInterpolation</code>) \u00b6 returns <code>String</code></p> <p>Convert an <code>AnimInterpolation</code> value to a string. </p> <pre><code>var type = AnimInterpolation.linear\nvar name = AnimInterpolation.name(type)\nLog.print(\"type is %(name)\") //expect: \"linear\"\n</code></pre> <p> AnimInterpolation.from_string(value: <code>String</code>) \u00b6 returns <code>AnimInterpolation</code></p> <p>Get the <code>AnimInterpolation</code> value to a name.</p> <pre><code>var type = AnimInterpolation.from_string(\"discrete\")\nLog.print(\"discrete is value %(type)\") //expect: \"3\", the internal value\n</code></pre>"},{"location":"api/v/next/system/anim.modifier/#animinterval","title":"AnimInterval","text":"<p><code>import \"luxe: system/anim.modifier\" for AnimInterval</code></p> <p>no docs found</p> <ul> <li>create(world: <code>Any</code>, duration: <code>Any</code>, rate: <code>Any</code>)</li> <li>create(world: <code>Any</code>, duration: <code>Any</code>)</li> <li>time(world: <code>Any</code>, anim: <code>Any</code>)</li> <li>set_time(world: <code>Any</code>, anim: <code>Any</code>, time: <code>Any</code>)</li> <li>set_now(world: <code>Any</code>, anim: <code>Any</code>, offset: <code>Any</code>)</li> <li>set_now(world: <code>Any</code>, anim: <code>Any</code>)</li> <li>set_play_count(world: <code>Any</code>, anim: <code>Any</code>, count: <code>Any</code>)</li> <li>set_clock(world: <code>Any</code>, anim: <code>Any</code>, clock: <code>Any</code>)</li> <li>set_rate(world: <code>Any</code>, anim: <code>Any</code>, rate: <code>Any</code>)</li> <li>set_duration(world: <code>Any</code>, anim: <code>Any</code>, duration: <code>Any</code>)</li> <li>set_start(world: <code>Any</code>, anim: <code>Any</code>, start: <code>Any</code>)</li> <li>set_end(world: <code>Any</code>, anim: <code>Any</code>, end: <code>Any</code>)</li> <li>get_now(world: <code>Any</code>, anim: <code>Any</code>)</li> <li>get_play_count(world: <code>Any</code>, anim: <code>Any</code>)</li> <li>get_clock(world: <code>Any</code>, anim: <code>Any</code>)</li> <li>get_rate(world: <code>Any</code>, anim: <code>Any</code>)</li> <li>get_duration(world: <code>Any</code>, anim: <code>Any</code>)</li> <li>get_start(world: <code>Any</code>, anim: <code>Any</code>)</li> <li>get_end(world: <code>Any</code>, anim: <code>Any</code>)</li> </ul> <p> AnimInterval.create(world: <code>Any</code>, duration: <code>Any</code>, rate: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.create(world: <code>Any</code>, duration: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.time(world: <code>Any</code>, anim: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.set_time(world: <code>Any</code>, anim: <code>Any</code>, time: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.set_now(world: <code>Any</code>, anim: <code>Any</code>, offset: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.set_now(world: <code>Any</code>, anim: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.set_play_count(world: <code>Any</code>, anim: <code>Any</code>, count: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.set_clock(world: <code>Any</code>, anim: <code>Any</code>, clock: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.set_rate(world: <code>Any</code>, anim: <code>Any</code>, rate: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.set_duration(world: <code>Any</code>, anim: <code>Any</code>, duration: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.set_start(world: <code>Any</code>, anim: <code>Any</code>, start: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.set_end(world: <code>Any</code>, anim: <code>Any</code>, end: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.get_now(world: <code>Any</code>, anim: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.get_play_count(world: <code>Any</code>, anim: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.get_clock(world: <code>Any</code>, anim: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.get_rate(world: <code>Any</code>, anim: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.get_duration(world: <code>Any</code>, anim: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.get_start(world: <code>Any</code>, anim: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> AnimInterval.get_end(world: <code>Any</code>, anim: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/anim.modifier/#animstate","title":"AnimState","text":"<p><code>import \"luxe: system/anim.modifier\" for AnimState</code></p> <p>An enum for the state of an <code>Anim</code> instance.</p> <ul> <li>inactive</li> <li>playing</li> <li>ending</li> <li>complete</li> <li>name(value: <code>Num</code>)</li> <li>from_string(value: <code>String</code>)</li> </ul> <p> AnimState.inactive \u00b6 returns <code>Num</code></p> <p>The animation is inactive. :todo: This may be obsolete.</p> <pre><code>var state = Anim.get_state(entity, anim)\nif(state == AnimState.inactive) {\n  Log.print(\"anim is inactive\")\n}\n</code></pre> <p> AnimState.playing \u00b6 returns <code>Num</code></p> <p>The animation is active and is playing.</p> <pre><code>var state = Anim.get_state(entity, anim)\nif(state == AnimState.playing) {\n  Log.print(\"anim is playing\")\n}\n</code></pre> <p> AnimState.ending \u00b6 returns <code>Num</code></p> <p>The animation is ending, and will be marked complete next update.</p> <pre><code>var state = Anim.get_state(entity, anim)\nif(state == AnimState.ending) {\n  Log.print(\"anim is ending\")\n}\n</code></pre> <p> AnimState.complete \u00b6 returns <code>Num</code></p> <p>The animation has ended and is complete.</p> <pre><code>var state = Anim.get_state(entity, anim)\nif(state == AnimState.complete) {\n  Log.print(\"anim is complete\")\n}\n</code></pre> <p> AnimState.name(value: <code>Num</code>) \u00b6 returns <code>String</code></p> <p>Convert an <code>AnimState</code> value to a string.</p> <pre><code>var type = AnimState.ending\nvar name = AnimState.name(type)\nLog.print(\"type is %(name)\") //expect: \"ending\"\n</code></pre> <p> AnimState.from_string(value: <code>String</code>) \u00b6 returns <code>Num</code></p> <p>Convert a string to an enum value.</p> <pre><code>var state = AnimState.from_string(\"ending\")\nvar same = state == AnimState.ending //true\n</code></pre>"},{"location":"api/v/next/system/anim.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/anim.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var play : List = []</code></li> </ul>"},{"location":"api/v/next/system/anim.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/anim.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/camera.modifier/","title":"Camera.modifier","text":""},{"location":"api/v/next/system/camera.modifier/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/system/camera.modifier/#luxe-systemcameramodifier-module","title":"<code>luxe: system/camera.modifier</code> module","text":"<ul> <li>Camera </li> <li>CameraProjection </li> <li>CameraViewType </li> <li>Data </li> <li>PerEntityInfo </li> <li>System </li> </ul>"},{"location":"api/v/next/system/camera.modifier/#camera","title":"Camera","text":"<p><code>import \"luxe: system/camera.modifier\" for Camera</code></p> <p>no docs found</p> <ul> <li>create(entity: <code>Any</code>)</li> <li>destroy(entity: <code>Any</code>)</li> <li>has(entity: <code>Any</code>)</li> <li>get_default(world: <code>Any</code>)</li> <li>set_default(world: <code>Any</code>, camera: <code>Any</code>)</li> <li>set_fov_vertical(entity: <code>Any</code>, fov_vertical: <code>Any</code>)</li> <li>get_fov_vertical(entity: <code>Any</code>)</li> <li>get_projection(entity: <code>Any</code>)</li> <li>set_zoom2D(entity: <code>Entity</code>, zoom: <code>Num</code>)</li> <li>get_zoom2D(entity: <code>Any</code>)</li> <li>get_near(entity: <code>Any</code>)</li> <li>get_far(entity: <code>Any</code>)</li> <li>get_aspect(entity: <code>Any</code>)</li> <li>get_frustum(entity: <code>Any</code>)</li> <li>perspective(entity: <code>Any</code>, fov_vertical: <code>Any</code>, aspect: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>)</li> <li>ortho(entity: <code>Any</code>, left: <code>Any</code>, top: <code>Any</code>, right: <code>Any</code>, bottom: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>)</li> <li>look_at(entity: <code>Any</code>, from: <code>Any</code>, to: <code>Any</code>, up: <code>Any</code>)</li> <li>set2D(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, width: <code>Any</code>, height: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>)</li> <li>set3D(entity: <code>Any</code>, fov_vertical: <code>Any</code>, aspect: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>)</li> <li>screen_point_to_world(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>)</li> <li>world_point_to_screen(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>, pos_z: <code>Any</code>)</li> <li>world_point_to_view(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>, pos_z: <code>Any</code>, into: <code>Any</code>)</li> <li>world_point_to_view(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>, pos_z: <code>Any</code>)</li> <li>view_point_to_world(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>, pos_z: <code>Any</code>)</li> <li>world_point_to_clip(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>, pos_z: <code>Any</code>)</li> <li>clip_point_to_world(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>, pos_z: <code>Any</code>)</li> <li>get_view_matrix(entity: <code>Any</code>, into_matrix: <code>Any</code>)</li> <li>get_projection_matrix(entity: <code>Any</code>, into_matrix: <code>Any</code>)</li> <li>get_view_projection_matrix(entity: <code>Any</code>, into_matrix: <code>Any</code>)</li> <li>set_view_matrix(entity: <code>Any</code>, matrix: <code>Any</code>)</li> <li>set_projection_matrix(entity: <code>Any</code>, matrix: <code>Any</code>)</li> <li>cull(camera: <code>Any</code>, render_set: <code>Any</code>)</li> <li>froxelize(camera: <code>Any</code>, slices: <code>Any</code>, entity_info_list: <code>Any</code>, cluster_image: <code>Any</code>, items_image: <code>Any</code>)</li> <li>cut(camera: <code>Entity</code>, to_camera: <code>Entity</code>)</li> <li>blend(camera: <code>Entity</code>, from_camera: <code>Entity</code>, to_camera: <code>Entity</code>, t: <code>Num</code>)</li> <li>blend(camera: <code>Entity</code>, to_camera: <code>Entity</code>, t: <code>Num</code>)</li> </ul> <p> Camera.create(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.destroy(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.has(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.get_default(world: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.set_default(world: <code>Any</code>, camera: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.set_fov_vertical(entity: <code>Any</code>, fov_vertical: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.get_fov_vertical(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.get_projection(entity: <code>Any</code>) \u00b6 returns <code>CameraProjection</code></p> <p>no docs found   </p> <p> Camera.set_zoom2D(entity: <code>Entity</code>, zoom: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Camera.get_zoom2D(entity: <code>Any</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Camera.get_near(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.get_far(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.get_aspect(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.get_frustum(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.perspective(entity: <code>Any</code>, fov_vertical: <code>Any</code>, aspect: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.ortho(entity: <code>Any</code>, left: <code>Any</code>, top: <code>Any</code>, right: <code>Any</code>, bottom: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.look_at(entity: <code>Any</code>, from: <code>Any</code>, to: <code>Any</code>, up: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.set2D(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, width: <code>Any</code>, height: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.set3D(entity: <code>Any</code>, fov_vertical: <code>Any</code>, aspect: <code>Any</code>, near: <code>Any</code>, far: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.screen_point_to_world(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.world_point_to_screen(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>, pos_z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.world_point_to_view(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>, pos_z: <code>Any</code>, into: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.world_point_to_view(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>, pos_z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.view_point_to_world(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>, pos_z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.world_point_to_clip(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>, pos_z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.clip_point_to_world(entity: <code>Any</code>, pos_x: <code>Any</code>, pos_y: <code>Any</code>, pos_z: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.get_view_matrix(entity: <code>Any</code>, into_matrix: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.get_projection_matrix(entity: <code>Any</code>, into_matrix: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.get_view_projection_matrix(entity: <code>Any</code>, into_matrix: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.set_view_matrix(entity: <code>Any</code>, matrix: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.set_projection_matrix(entity: <code>Any</code>, matrix: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.cull(camera: <code>Any</code>, render_set: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.froxelize(camera: <code>Any</code>, slices: <code>Any</code>, entity_info_list: <code>Any</code>, cluster_image: <code>Any</code>, items_image: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.cut(camera: <code>Entity</code>, to_camera: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.blend(camera: <code>Entity</code>, from_camera: <code>Entity</code>, to_camera: <code>Entity</code>, t: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Camera.blend(camera: <code>Entity</code>, to_camera: <code>Entity</code>, t: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/camera.modifier/#cameraprojection","title":"CameraProjection","text":"<p><code>import \"luxe: system/camera.modifier\" for CameraProjection</code></p> <p>no docs found</p> <ul> <li>ortho</li> <li>perspective</li> <li>custom</li> </ul> <p> CameraProjection.ortho \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CameraProjection.perspective \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CameraProjection.custom \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/camera.modifier/#cameraviewtype","title":"CameraViewType","text":"<p><code>import \"luxe: system/camera.modifier\" for CameraViewType</code></p> <p>no docs found</p> <ul> <li>view_2D</li> <li>view_3D</li> <li>custom</li> </ul> <p> CameraViewType.view_2D \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CameraViewType.view_3D \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CameraViewType.custom \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/camera.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/camera.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var align_to_view : Num = 0</code></li> <li><code>var kind : CameraViewType = CameraViewType.view_2D</code></li> <li><code>var offset : Float2 = [0, 0]</code></li> <li><code>var size : Float2 = [0, 0]</code></li> <li><code>var near_2d : Num = -2000</code></li> <li><code>var far_2d : Num = 2000</code></li> <li><code>var zoom : Num = 1</code></li> <li><code>var fov_vertical : Num = 60</code></li> <li><code>var aspect : Num = 0</code></li> <li><code>var near_3d : Num = 0.1</code></li> <li><code>var far_3d : Num = 100</code></li> <li><code>var default : Bool = false</code></li> <li><code>var debug_draw : Bool = false</code></li> <li><code>var debug_color : Color = [0.965, 0, 0.486, 1]</code></li> <li><code>var debug_thickness : Num = 1</code></li> </ul>"},{"location":"api/v/next/system/camera.modifier/#perentityinfo","title":"PerEntityInfo","text":"<p><code>import \"luxe: system/camera.modifier\" for PerEntityInfo</code></p> <p>no docs found</p> <ul> <li><code>var entity : Num = 0</code></li> <li><code>var window : Any = null</code></li> <li><code>var preview : Any = null</code></li> <li><code>var world_edit : Any = null</code></li> <li>new(in_entity: <code>Any</code>)</li> <li>destroy()</li> <li>show(state: <code>Bool</code>)</li> <li>update()</li> </ul> <p> PerEntityInfo.new(in_entity: <code>Any</code>) \u00b6 returns <code>PerEntityInfo</code></p> <p>no docs found   </p> <p> PerEntityInfo.destroy() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PerEntityInfo.show(state: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> PerEntityInfo.update() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/camera.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/camera.modifier\" for System</code></p> <p>no docs found</p> <ul> <li><code>var draw : Draw = null</code></li> <li><code>var style : null = PathStyle.new</code></li> <li><code>var window : Any = null</code></li> <li><code>var preview : Any = null</code></li> <li><code>var world_edit : Any = null</code></li> <li><code>var current_selection : PerEntityInfo = null</code></li> <li>new(world: <code>World</code>)</li> <li>editor_init(world: <code>World</code>)</li> <li>init(world: <code>World</code>)</li> <li>editor_attach(entity: <code>Entity</code>, data: <code>Data</code>)</li> <li>editor_detach(entity: <code>Entity</code>, data: <code>Data</code>)</li> <li>tick(delta: <code>Num</code>)</li> <li>editor_change(entity: <code>Entity</code>, change: <code>ModifierChange</code>)</li> <li>editor_tick(delta: <code>Num</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p> <p> System.editor_init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.editor_attach(entity: <code>Entity</code>, data: <code>Data</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.editor_detach(entity: <code>Entity</code>, data: <code>Data</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.tick(delta: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.editor_change(entity: <code>Entity</code>, change: <code>ModifierChange</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.editor_tick(delta: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/mesh.modifier/","title":"Mesh.modifier","text":""},{"location":"api/v/next/system/mesh.modifier/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/system/mesh.modifier/#luxe-systemmeshmodifier-module","title":"<code>luxe: system/mesh.modifier</code> module","text":"<ul> <li>Data </li> <li>InstancedMode </li> <li>Mesh </li> <li>System </li> </ul>"},{"location":"api/v/next/system/mesh.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/mesh.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var mesh : Asset = null</code></li> <li><code>var material : Asset = null</code></li> <li><code>var instanced : InstancedMode = InstancedMode.none</code></li> <li><code>var own_materials : Bool = false</code></li> </ul>"},{"location":"api/v/next/system/mesh.modifier/#instancedmode","title":"InstancedMode","text":"<p><code>import \"luxe: system/mesh.modifier\" for InstancedMode</code></p> <p>no docs found</p> <ul> <li>none</li> <li>group_auto</li> <li>group_custom</li> </ul> <p> InstancedMode.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InstancedMode.group_auto \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InstancedMode.group_custom \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/mesh.modifier/#mesh","title":"Mesh","text":"<p><code>import \"luxe: system/mesh.modifier\" for Mesh</code></p> <p>no docs found</p> <ul> <li>create(entity: <code>Entity</code>)</li> <li>create(entity: <code>Entity</code>, material: <code>Material</code>, mesh_lx: <code>String</code>)</li> <li>destroy(entity: <code>Entity</code>)</li> <li>set_instanced_auto_units(world: <code>World</code>, grid_units_cell_size: <code>Num</code>)</li> <li>get_instanced_auto_units(world: <code>World</code>)</li> <li>has(entity: <code>Entity</code>)</li> <li>clear(entity: <code>Entity</code>)</li> <li>level_get_element_count(entity: <code>Entity</code>, level: <code>Num</code>)</li> <li>level_get_count(entity: <code>Entity</code>)</li> <li>level_set_active(entity: <code>Entity</code>, level: <code>Num</code>, disable_current: <code>Bool</code>)</li> <li>level_get_active(entity: <code>Entity</code>)</li> <li>level_set_enabled(entity: <code>Entity</code>, level: <code>Num</code>, state: <code>Bool</code>)</li> <li>level_get_enabled(entity: <code>Entity</code>, level: <code>Num</code>)</li> <li>set_asset(entity: <code>Entity</code>, asset_id: <code>String</code>)</li> <li>set_instanced_group(entity: <code>Entity</code>, group_id: <code>String</code>)</li> <li>get_instanced_group(entity: <code>Entity</code>)</li> <li>set_instanced(entity: <code>Entity</code>, state: <code>Bool</code>)</li> <li>get_instanced(entity: <code>Entity</code>)</li> <li>get_source_id(entity: <code>Entity</code>)</li> <li>get_default_material(entity: <code>Entity</code>)</li> <li>set_default_material(entity: <code>Entity</code>, material: <code>Material</code>)</li> <li>get_geometry(entity: <code>Entity</code>, level: <code>Num</code>, element: <code>Num</code>)</li> <li>get_geometry(entity: <code>Entity</code>)</li> <li>obb_intersect_ray(entity: <code>Entity</code>, ray_x: <code>Num</code>, ray_y: <code>Num</code>, ray_z: <code>Num</code>, ray_dir_x: <code>Num</code>, ray_dir_y: <code>Num</code>, ray_dir_z: <code>Num</code>)</li> </ul> <p> Mesh.create(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Mesh.create(entity: <code>Entity</code>, material: <code>Material</code>, mesh_lx: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Mesh.destroy(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Mesh.set_instanced_auto_units(world: <code>World</code>, grid_units_cell_size: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Mesh.get_instanced_auto_units(world: <code>World</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Mesh.has(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Mesh.clear(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.level_get_element_count(entity: <code>Entity</code>, level: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.level_get_count(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.level_set_active(entity: <code>Entity</code>, level: <code>Num</code>, disable_current: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.level_get_active(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.level_set_enabled(entity: <code>Entity</code>, level: <code>Num</code>, state: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.level_get_enabled(entity: <code>Entity</code>, level: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.set_asset(entity: <code>Entity</code>, asset_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.set_instanced_group(entity: <code>Entity</code>, group_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.get_instanced_group(entity: <code>Entity</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> Mesh.set_instanced(entity: <code>Entity</code>, state: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.get_instanced(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Mesh.get_source_id(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.get_default_material(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.set_default_material(entity: <code>Entity</code>, material: <code>Material</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.get_geometry(entity: <code>Entity</code>, level: <code>Num</code>, element: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.get_geometry(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Mesh.obb_intersect_ray(entity: <code>Entity</code>, ray_x: <code>Num</code>, ray_y: <code>Num</code>, ray_z: <code>Num</code>, ray_dir_x: <code>Num</code>, ray_dir_y: <code>Num</code>, ray_dir_z: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/mesh.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/mesh.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/nav.modifier/","title":"Nav.modifier","text":""},{"location":"api/v/next/system/nav.modifier/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/system/nav.modifier/#luxe-systemnavmodifier-module","title":"<code>luxe: system/nav.modifier</code> module","text":"<ul> <li>Data </li> <li>Nav </li> <li>Partition </li> <li>System </li> </ul>"},{"location":"api/v/next/system/nav.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/nav.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var rebuild : Num = 1</code></li> <li><code>var mesh : Asset = null</code></li> <li><code>var tile_size : Num = 32</code></li> <li><code>var cell_size : Num = 0.3</code></li> <li><code>var cell_height : Num = 0.2</code></li> <li><code>var height : Num = 2</code></li> <li><code>var radius : Num = 0.6</code></li> <li><code>var max_climb : Num = 0.9</code></li> <li><code>var max_slope : Num = 45</code></li> <li><code>var min_region_size : Num = 8</code></li> <li><code>var merged_region_size : Num = 20</code></li> <li><code>var max_edge_length : Num = 12</code></li> <li><code>var max_edge_error : Num = 1.3</code></li> <li><code>var verts_per_poly : Num = 6</code></li> <li><code>var detail_sample_distance : Num = 6</code></li> <li><code>var detail_sample_max_error : Num = 1</code></li> <li><code>var partition : Partition = Partition.watershed</code></li> <li><code>var no_low_hanging : Bool = true</code></li> <li><code>var no_ledge_spans : Bool = true</code></li> <li><code>var no_walkable_low_spans : Bool = true</code></li> <li><code>var debug_draw : Bool = false</code></li> <li><code>var keep_debug_data : Bool = false</code></li> </ul>"},{"location":"api/v/next/system/nav.modifier/#nav","title":"Nav","text":"<p><code>import \"luxe: system/nav.modifier\" for Nav</code></p> <p>no docs found</p> <ul> <li>raycast(entity: <code>Entity</code>, start: <code>Float3</code>, end: <code>Float3</code>, extents: <code>Float3</code>)</li> <li>nearest_point(entity: <code>Entity</code>, start: <code>Float3</code>, extents: <code>Float3</code>)</li> <li>get_path(entity: <code>Entity</code>, start: <code>Float3</code>, end: <code>Float3</code>, extents: <code>Float3</code>)</li> </ul> <p> Nav.raycast(entity: <code>Entity</code>, start: <code>Float3</code>, end: <code>Float3</code>, extents: <code>Float3</code>) \u00b6 returns <code>Float3</code></p> <p>no docs found   </p> <p> Nav.nearest_point(entity: <code>Entity</code>, start: <code>Float3</code>, extents: <code>Float3</code>) \u00b6 returns <code>Float3</code></p> <p>no docs found   </p> <p> Nav.get_path(entity: <code>Entity</code>, start: <code>Float3</code>, end: <code>Float3</code>, extents: <code>Float3</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/nav.modifier/#partition","title":"Partition","text":"<p><code>import \"luxe: system/nav.modifier\" for Partition</code></p> <p>no docs found</p> <ul> <li>watershed</li> <li>monotone</li> <li>layers</li> </ul> <p> Partition.watershed \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Partition.monotone \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Partition.layers \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/nav.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/nav.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/skeleton.modifier/","title":"Skeleton.modifier","text":""},{"location":"api/v/next/system/skeleton.modifier/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/system/skeleton.modifier/#luxe-systemskeletonmodifier-module","title":"<code>luxe: system/skeleton.modifier</code> module","text":"<ul> <li>Data </li> <li>Skeleton </li> <li>System </li> </ul>"},{"location":"api/v/next/system/skeleton.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/skeleton.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var skeleton : Asset = null</code></li> <li><code>var draw_skeleton : Bool = false</code></li> </ul>"},{"location":"api/v/next/system/skeleton.modifier/#skeleton","title":"Skeleton","text":"<p><code>import \"luxe: system/skeleton.modifier\" for Skeleton</code></p> <p>no docs found</p> <ul> <li>has(entity: <code>Entity</code>)</li> <li>set_pose(entity: <code>Entity</code>, pose: <code>Pose</code>)</li> <li>get_pose(entity: <code>Entity</code>)</li> <li>get_skeleton(entity: <code>Entity</code>)</li> </ul> <p> Skeleton.has(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Skeleton.set_pose(entity: <code>Entity</code>, pose: <code>Pose</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Skeleton.get_pose(entity: <code>Entity</code>) \u00b6 returns <code>Pose</code></p> <p>no docs found   </p> <p> Skeleton.get_skeleton(entity: <code>Entity</code>) \u00b6 returns <code>Skeleton</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/skeleton.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/skeleton.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/skin.modifier/","title":"Skin.modifier","text":""},{"location":"api/v/next/system/skin.modifier/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/system/skin.modifier/#luxe-systemskinmodifier-module","title":"<code>luxe: system/skin.modifier</code> module","text":"<ul> <li>Data </li> <li>Skin </li> <li>System </li> </ul>"},{"location":"api/v/next/system/skin.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/skin.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var mesh_entity : Link = null</code></li> <li><code>var skeleton_entity : Link = null</code></li> </ul>"},{"location":"api/v/next/system/skin.modifier/#skin","title":"Skin","text":"<p><code>import \"luxe: system/skin.modifier\" for Skin</code></p> <p>no docs found</p>"},{"location":"api/v/next/system/skin.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/skin.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/sound.modifier/","title":"Sound.modifier","text":""},{"location":"api/v/next/system/sound.modifier/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/system/sound.modifier/#luxe-systemsoundmodifier-module","title":"<code>luxe: system/sound.modifier</code> module","text":"<ul> <li>Data </li> <li>Sound </li> <li>SoundAttenuation </li> <li>System </li> </ul>"},{"location":"api/v/next/system/sound.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/sound.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var source : Asset = null</code></li> <li><code>var bus : Asset = null</code></li> <li><code>var volume : Num = -1</code></li> <li><code>var pan : Num = 0</code></li> <li><code>var pitch : Num = 1</code></li> <li><code>var looping : Bool = false</code></li> <li><code>var world_space : Bool = false</code></li> <li><code>var debug_draw : Bool = true</code></li> <li><code>var attenuation : SoundAttenuation = SoundAttenuation.none</code></li> <li><code>var range : Float2 = [1, 10]</code></li> <li><code>var rolloff : Num = 1</code></li> <li><code>var simulate_doppler : Bool = false</code></li> <li><code>var doppler_factor : Num = 1</code></li> </ul>"},{"location":"api/v/next/system/sound.modifier/#sound","title":"Sound","text":"<p><code>import \"luxe: system/sound.modifier\" for Sound</code></p> <p>no docs found</p>"},{"location":"api/v/next/system/sound.modifier/#soundattenuation","title":"SoundAttenuation","text":"<p><code>import \"luxe: system/sound.modifier\" for SoundAttenuation</code></p> <p>no docs found</p> <ul> <li>none</li> <li>inverse_distance</li> <li>linear_distance</li> <li>exponential_distance</li> </ul> <p> SoundAttenuation.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SoundAttenuation.inverse_distance \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SoundAttenuation.linear_distance \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SoundAttenuation.exponential_distance \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/sound.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/sound.modifier\" for System</code></p> <p>no docs found</p> <ul> <li><code>var draw : Draw = null</code></li> <li><code>var style : null = PathStyle.new</code></li> <li><code>var last_pos : Map = {}</code></li> <li>new(world: <code>World</code>)</li> <li>init(world: <code>World</code>)</li> <li>editor_init(world: <code>World</code>)</li> <li>attach(entity: <code>Entity</code>, data: <code>Data</code>)</li> <li>detach(entity: <code>Entity</code>, data: <code>Data</code>)</li> <li>get_attenuation(attn: <code>SoundAttenuation</code>)</li> <li>tick(delta: <code>Num</code>)</li> <li>draw(entity: <code>Entity</code>, data: <code>Data</code>)</li> <li>editor_change(entity: <code>Entity</code>, change: <code>ModifierChange</code>)</li> <li>editor_tick(delta: <code>Num</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p> <p> System.init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.editor_init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.attach(entity: <code>Entity</code>, data: <code>Data</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.detach(entity: <code>Entity</code>, data: <code>Data</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.get_attenuation(attn: <code>SoundAttenuation</code>) \u00b6 returns <code>AudioAttenuation</code></p> <p>no docs found   </p> <p> System.tick(delta: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.draw(entity: <code>Entity</code>, data: <code>Data</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.editor_change(entity: <code>Entity</code>, change: <code>ModifierChange</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.editor_tick(delta: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/sprite.modifier/","title":"Sprite.modifier","text":""},{"location":"api/v/next/system/sprite.modifier/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/system/sprite.modifier/#luxe-systemspritemodifier-module","title":"<code>luxe: system/sprite.modifier</code> module","text":"<ul> <li>Advanced </li> <li>Data </li> <li>Dissolve </li> <li>HSV </li> <li>Outline </li> <li>Shadow </li> <li>Shine </li> <li>Sprite </li> <li>SpriteBillboard </li> <li>System </li> </ul>"},{"location":"api/v/next/system/sprite.modifier/#advanced","title":"Advanced","text":"<p><code>import \"luxe: system/sprite.modifier\" for Advanced</code></p> <p>no docs found</p> <ul> <li><code>var auto_size : Bool = true</code></li> <li><code>var material_input : String = \"sprite.image\"</code></li> <li><code>var HSV : HSV = Object</code></li> <li><code>var outline : Outline = Object</code></li> <li><code>var shadow : Shadow = Object</code></li> <li><code>var dissolve : Dissolve = Object</code></li> <li><code>var shine : Shine = Object</code></li> </ul>"},{"location":"api/v/next/system/sprite.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/sprite.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var image : Asset = \"luxe: image/logo\"</code></li> <li><code>var size : Float2 = [64, 64]</code></li> <li><code>var origin : Float2 = [0.5, 0.5]</code></li> <li><code>var skew : Float2 = [0, 0]</code></li> <li><code>var color : Color = [1, 1, 1, 1]</code></li> <li><code>var uv : Float4 = [0, 0, 1, 1]</code></li> <li><code>var flip_x : Bool = false</code></li> <li><code>var flip_y : Bool = false</code></li> <li><code>var pixelated : Bool = false</code></li> <li><code>var billboard : SpriteBillboard = SpriteBillboard.none</code></li> <li><code>var billboard_lock : Float3 = [0, 0, 0]</code></li> <li><code>var atlas : Asset = null</code></li> <li><code>var atlas_image_id : String = null</code></li> <li><code>var material : Asset = null</code></li> <li><code>var advanced : Advanced = Object</code></li> </ul>"},{"location":"api/v/next/system/sprite.modifier/#dissolve","title":"Dissolve","text":"<p><code>import \"luxe: system/sprite.modifier\" for Dissolve</code></p> <p>no docs found</p> <ul> <li><code>var enabled : Bool = false</code></li> <li><code>var image : Asset = null</code></li> <li><code>var uv : Float4 = [0, 0, 1, 1]</code></li> <li><code>var value : Num = 1</code></li> </ul>"},{"location":"api/v/next/system/sprite.modifier/#hsv","title":"HSV","text":"<p><code>import \"luxe: system/sprite.modifier\" for HSV</code></p> <p>no docs found</p> <ul> <li><code>var enabled : Bool = false</code></li> <li><code>var hue_change : Num = 0</code></li> <li><code>var saturation : Num = 1</code></li> <li><code>var value : Num = 1</code></li> </ul>"},{"location":"api/v/next/system/sprite.modifier/#outline","title":"Outline","text":"<p><code>import \"luxe: system/sprite.modifier\" for Outline</code></p> <p>no docs found</p> <ul> <li><code>var enabled : Bool = false</code></li> <li><code>var color : Color = [1, 1, 1, 1]</code></li> <li><code>var thickness : Num = 0</code></li> </ul>"},{"location":"api/v/next/system/sprite.modifier/#shadow","title":"Shadow","text":"<p><code>import \"luxe: system/sprite.modifier\" for Shadow</code></p> <p>no docs found</p> <ul> <li><code>var enabled : Bool = false</code></li> <li><code>var offset : Float2 = [0, 0]</code></li> <li><code>var color : Color = [0, 0, 0, 1]</code></li> <li><code>var softness : Num = 0</code></li> </ul>"},{"location":"api/v/next/system/sprite.modifier/#shine","title":"Shine","text":"<p><code>import \"luxe: system/sprite.modifier\" for Shine</code></p> <p>no docs found</p> <ul> <li><code>var enabled : Bool = false</code></li> <li><code>var color : Color = [1, 0.92, 0.16, 1]</code></li> <li><code>var direction : Float2 = [0, 0]</code></li> <li><code>var width : Num = 0</code></li> <li><code>var speed : Num = 0</code></li> <li><code>var spacing : Num = 0</code></li> </ul>"},{"location":"api/v/next/system/sprite.modifier/#sprite","title":"Sprite","text":"<p><code>import \"luxe: system/sprite.modifier\" for Sprite</code></p> <p>A sprite is an image attached to an entity.  The <code>Sprite</code> modifier provides flipping, sizing, sub images and more. To attach a sprite to an entity, call <code>Sprite.create</code>:</p> <pre><code>var entity = Entity.create(world)\nvar material = Assets.material(\"luxe: material/logo\")\nSprite.create(entity, material, 128, 128)\n</code></pre> <ul> <li>create(entity: <code>Entity</code>, image: <code>Image</code>, width: <code>Num</code>, height: <code>Num</code>)</li> <li>create(entity: <code>Entity</code>, image: <code>Image</code>)</li> <li>create(entity: <code>Entity</code>)</li> <li>create_with(entity: <code>Entity</code>, material: <code>Material</code>, width: <code>Num</code>, height: <code>Num</code>)</li> <li>create_with(entity: <code>Entity</code>, material: <code>Material</code>)</li> <li>create(entity: <code>Entity</code>, atlas: <code>Atlas</code>, atlas_image: <code>String</code>)</li> <li>destroy(entity: <code>Entity</code>)</li> <li>has(entity: <code>Entity</code>)</li> <li>contains(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>set_material(entity: <code>Entity</code>, material: <code>Material</code>)</li> <li>get_material(entity: <code>Entity</code>)</li> <li>set_image(entity: <code>Entity</code>, image: <code>Image</code>)</li> <li>get_image(entity: <code>Entity</code>)</li> <li>set_origin(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>get_origin(entity: <code>Entity</code>)</li> <li>set_flip_h(entity: <code>Entity</code>, flipped: <code>Bool</code>)</li> <li>get_flip_h(entity: <code>Entity</code>)</li> <li>set_flip_v(entity: <code>Entity</code>, flipped: <code>Bool</code>)</li> <li>get_flip_v(entity: <code>Entity</code>)</li> <li>set_billboard(entity: <code>Entity</code>, kind: <code>SpriteBillboard</code>, lock: <code>Float3</code>)</li> <li>get_billboard(entity: <code>Entity</code>)</li> <li>set_size(entity: <code>Entity</code>, width: <code>Num</code>, height: <code>Num</code>)</li> <li>set_width(entity: <code>Entity</code>, width: <code>Num</code>)</li> <li>get_width(entity: <code>Entity</code>)</li> <li>set_height(entity: <code>Entity</code>, height: <code>Num</code>)</li> <li>get_height(entity: <code>Entity</code>)</li> <li>set_alpha(entity: <code>Entity</code>, alpha: <code>Num</code>)</li> <li>get_alpha(entity: <code>Entity</code>)</li> <li>set_color(entity: <code>Entity</code>, color: <code>Color</code>)</li> <li>set_color(entity: <code>Entity</code>, r: <code>Num</code>, g: <code>Num</code>, b: <code>Num</code>, a: <code>Num</code>)</li> <li>get_color(entity: <code>Entity</code>)</li> <li>set_uv(entity: <code>Entity</code>, x0: <code>Num</code>, y0: <code>Num</code>, x1: <code>Num</code>, y1: <code>Num</code>)</li> <li>get_uv(entity: <code>Entity</code>)</li> <li>set_skew(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>get_skew(entity: <code>Entity</code>)</li> <li>get_geometry(entity: <code>Entity</code>)</li> <li>set_geometry(entity: <code>Entity</code>, geo: <code>Geometry</code>)</li> <li>get_auto_size(entity: <code>Entity</code>)</li> <li>set_auto_size(entity: <code>Entity</code>, value: <code>Bool</code>)</li> <li>get_material_input(entity: <code>Entity</code>)</li> <li>set_material_input(entity: <code>Entity</code>, value: <code>Bool</code>)</li> <li>get_hsv_adjust(entity: <code>Entity</code>)</li> <li>set_hsv_adjust(entity: <code>Entity</code>, enabled: <code>Bool</code>, hue_change: <code>Num</code>, saturation: <code>Num</code>, value: <code>Num</code>)</li> <li>set_effect_HSV_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>)</li> <li>get_effect_HSV_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>)</li> <li>set_effect_HSV_hue_change(entity: <code>Entity</code>, hue_change: <code>Num</code>)</li> <li>get_effect_HSV_hue_change(entity: <code>Entity</code>, hue_change: <code>Num</code>)</li> <li>set_effect_HSV_saturation(entity: <code>Entity</code>, saturation: <code>Num</code>)</li> <li>get_effect_HSV_saturation(entity: <code>Entity</code>, saturation: <code>Num</code>)</li> <li>set_effect_HSV_value(entity: <code>Entity</code>, value: <code>Num</code>)</li> <li>get_effect_HSV_value(entity: <code>Entity</code>, value: <code>Num</code>)</li> <li>get_outline(entity: <code>Entity</code>)</li> <li>set_outline(entity: <code>Entity</code>, enabled: <code>Bool</code>, color: <code>Color</code>, thickness: <code>Num</code>)</li> <li>set_effect_outline_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>)</li> <li>get_effect_outline_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>)</li> <li>set_effect_outline_color(entity: <code>Entity</code>, color: <code>Color</code>)</li> <li>get_effect_outline_color(entity: <code>Entity</code>, color: <code>Color</code>)</li> <li>set_effect_outline_thickness(entity: <code>Entity</code>, thickness: <code>Num</code>)</li> <li>get_effect_outline_thickness(entity: <code>Entity</code>, thickness: <code>Num</code>)</li> <li>get_shadow(entity: <code>Entity</code>)</li> <li>set_shadow(entity: <code>Entity</code>, enabled: <code>Bool</code>, offset: <code>Num</code>, color: <code>Color</code>, softness: <code>Num</code>)</li> <li>set_effect_shadow_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>)</li> <li>get_effect_shadow_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>)</li> <li>set_effect_shadow_offset(entity: <code>Entity</code>, offset: <code>Vector2</code>)</li> <li>get_effect_shadow_offset(entity: <code>Entity</code>, offset: <code>Vector2</code>)</li> <li>set_effect_shadow_color(entity: <code>Entity</code>, color: <code>Color</code>)</li> <li>get_effect_shadow_color(entity: <code>Entity</code>, color: <code>Color</code>)</li> <li>get_dissolve(entity: <code>Entity</code>)</li> <li>set_dissolve(entity: <code>Entity</code>, enabled: <code>Bool</code>, image: <code>Image</code>, uv: <code>List</code>, value: <code>Num</code>)</li> <li>set_effect_dissolve_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>)</li> <li>get_effect_dissolve_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>)</li> <li>set_effect_dissolve_image(entity: <code>Entity</code>, image: <code>Image</code>)</li> <li>get_effect_dissolve_image(entity: <code>Entity</code>, image: <code>Image</code>)</li> <li>set_effect_dissolve_uv(entity: <code>Entity</code>, uv: <code>Vector4</code>)</li> <li>get_effect_dissolve_uv(entity: <code>Entity</code>, uv: <code>Vector4</code>)</li> <li>set_effect_dissolve_value(entity: <code>Entity</code>, value: <code>Num</code>)</li> <li>get_effect_dissolve_value(entity: <code>Entity</code>, value: <code>Num</code>)</li> <li>get_shine(entity: <code>Entity</code>)</li> <li>set_shine(entity: <code>Entity</code>, enabled: <code>Bool</code>, color: <code>Num</code>, direction: <code>Vector2</code>, width: <code>Num</code>, speed: <code>Num</code>, spacing: <code>Num</code>)</li> <li>set_effect_shine_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>)</li> <li>get_effect_shine_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>)</li> <li>set_effect_shine_color(entity: <code>Entity</code>, color: <code>Color</code>)</li> <li>get_effect_shine_color(entity: <code>Entity</code>, color: <code>Color</code>)</li> <li>set_effect_shine_direction(entity: <code>Entity</code>, direction: <code>Vector2</code>)</li> <li>get_effect_shine_direction(entity: <code>Entity</code>, direction: <code>Vector2</code>)</li> <li>set_effect_shine_width(entity: <code>Entity</code>, width: <code>Num</code>)</li> <li>get_effect_shine_width(entity: <code>Entity</code>, width: <code>Num</code>)</li> <li>set_effect_shine_speed(entity: <code>Entity</code>, speed: <code>Num</code>)</li> <li>get_effect_shine_speed(entity: <code>Entity</code>, speed: <code>Num</code>)</li> <li>set_effect_shine_spacing(entity: <code>Entity</code>, spacing: <code>Num</code>)</li> <li>get_effect_shine_spacing(entity: <code>Entity</code>, spacing: <code>Num</code>)</li> </ul> <p> Sprite.create(entity: <code>Entity</code>, image: <code>Image</code>, width: <code>Num</code>, height: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Attach a <code>Sprite</code> modifier to <code>entity</code>, drawn using <code>image</code>, with a given size of <code>width</code>x<code>height</code>.</p> <pre><code>var entity = Entity.create(world)\nvar image = Assets.image(\"luxe: image/logo\")\nSprite.create(entity, material, 128, 128)\n</code></pre> <p> Sprite.create(entity: <code>Entity</code>, image: <code>Image</code>) \u00b6 returns <code>None</code></p> <p>Attach a <code>Sprite</code> modifier to <code>entity</code>, drawn using <code>image</code>. The size of the sprite will be determined by the size of the image.</p> <pre><code>var entity = Entity.create(world)\nvar image = Assets.image(\"luxe: image/logo\")\nSprite.create(entity, image)\n</code></pre> <p> Sprite.create(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Attach a <code>Sprite</code> modifier to <code>entity</code>, drawn using a default <code>image</code>. Use <code>Sprite.set_image</code> or <code>Sprite.set_material</code> to change it later.</p> <pre><code>var entity = Entity.create(world)\nSprite.create(entity)\n</code></pre> <p> Sprite.create_with(entity: <code>Entity</code>, material: <code>Material</code>, width: <code>Num</code>, height: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Attach a <code>Sprite</code> modifier to <code>entity</code>, drawn using <code>material</code>, with a size of <code>width</code>x<code>height</code>.</p> <pre><code>var entity = Entity.create(world)\nvar material = Assets.material(\"luxe: material/logo\")\nSprite.create_with(entity, material, 128, 128)\n</code></pre> <p> Sprite.create_with(entity: <code>Entity</code>, material: <code>Material</code>) \u00b6 returns <code>None</code></p> <p>Attach a <code>Sprite</code> modifier to <code>entity</code>, drawn using <code>material</code>. The size of the sprite will be determined by the <code>sprite.image</code> slot in the material.</p> <pre><code>var entity = Entity.create(world)\nvar material = Assets.material(\"luxe: material/logo\")\nSprite.create(entity, material)\n</code></pre> <p> Sprite.create(entity: <code>Entity</code>, atlas: <code>Atlas</code>, atlas_image: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Attach a <code>Sprite</code> modifier to <code>entity</code>, drawn using the <code>atlas</code>,  using the image name in the atlas as <code>atlas_image</code>, with a size defined by the image in the atlas.</p> <pre><code>var entity = Entity.create(world)\nvar atlas = Assets.atlas(\"atlas/example\")\nvar image_name = \"images/atlas/example/tree\"\nSprite.create(entity, atlas, image_name)\n</code></pre> <p> Sprite.destroy(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Detach and destroy the <code>Sprite</code> attached to <code>entity</code></p> <pre><code>Sprite.destroy(entity)\n</code></pre> <p> Sprite.has(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if <code>entity</code> has a <code>Sprite</code> modifier attached.</p> <pre><code>if(Sprite.has(entity)) {\n  Log.print(\"found sprite\")\n}\n</code></pre> <p> Sprite.contains(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if the <code>Sprite</code> attached to <code>entity</code> contains the point at <code>x</code>,<code>y</code> (in world units). Note that the function is based on the sprite <code>width</code> and <code>height</code>, it is not pixel perfect.</p> <pre><code>//Convert mouse coords to world units\nvar pos = Camera.screen_point_to_world(\n    app.camera,\n    Input.mouse_x(),\n    Input.mouse_y())\n//Check if point is inside the sprite\nif(Sprite.contains(entity, pos.x, pos.y)) {\n  Log.print(\"mouse inside sprite!\")\n}\n</code></pre> <p> Sprite.set_material(entity: <code>Entity</code>, material: <code>Material</code>) \u00b6 returns <code>None</code></p> <p>Change the material that the <code>Sprite</code> attached to <code>entity</code> is drawn with, so it will draw with <code>material</code> instead.</p> <pre><code>var material = Assets.material(\"luxe: material/logo.sprite\")\nSprite.set_material(entity, material)\n</code></pre> <p> Sprite.get_material(entity: <code>Entity</code>) \u00b6 returns <code>Material</code></p> <p>Returns the current material that the <code>Sprite</code> attached to <code>entity</code> is drawn with.</p> <pre><code>var material = Sprite.get_material(entity)\n</code></pre> <p> Sprite.set_image(entity: <code>Entity</code>, image: <code>Image</code>) \u00b6 returns <code>None</code></p> <p>Change the image that the <code>Sprite</code> attached to <code>entity</code> is drawn with.</p> <pre><code>var image = Assets.image(\"luxe: image/logo.sprite\")\nSprite.set_image(entity, image)\n</code></pre> <p> Sprite.get_image(entity: <code>Entity</code>) \u00b6 returns <code>Image</code></p> <p>Returns the current image that the <code>Sprite</code> attached to <code>entity</code> is drawn with.</p> <pre><code>var image = Sprite.get_image(entity)\n</code></pre> <p> Sprite.set_origin(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Sets the origin of the sprite in relation to the <code>Transform</code> on <code>entity</code>. The <code>x</code> and <code>y</code> values are <code>0...1</code> range, where <code>0, 0</code> is bottom left, and <code>1, 1</code> is top right. A centered sprite is <code>0.5, 0.5</code>. To set the origin to the center, bottom you'd use <code>0.5, 0</code>.</p> <pre><code>//centered\nSprite.set_origin(entity, 0.5, 0.5)\n//bottom left\nSprite.set_origin(entity, 0, 0)\n//bottom center\nSprite.set_origin(entity, 0.5, 0)\n</code></pre> <p> Sprite.get_origin(entity: <code>Entity</code>) \u00b6 returns <code>Float2</code></p> <p>Returns the current origin for the Sprite attached to <code>entity</code>.</p> <pre><code>var origin = Sprite.get_origin(entity)\nLog.print(origin) //[0.5, 0.5]\n</code></pre> <p> Sprite.set_flip_h(entity: <code>Entity</code>, flipped: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set whether the <code>Sprite</code> attached to <code>entity</code> is <code>flipped</code> horizontally.</p> <pre><code>Sprite.set_flip_h(entity, true)\n</code></pre> <p> Sprite.get_flip_h(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if the <code>Sprite</code> attached to <code>entity</code> is flipped horizontally.</p> <pre><code>var flipped = Sprite.get_flip_h(entity)\n</code></pre> <p> Sprite.set_flip_v(entity: <code>Entity</code>, flipped: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set whether the <code>Sprite</code> attached to <code>entity</code> is <code>flipped</code> vertically.</p> <pre><code>Sprite.set_flip_v(entity, true)\n</code></pre> <p> Sprite.get_flip_v(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if the <code>Sprite</code> attached to <code>entity</code> is flipped vertically.</p> <pre><code>var flipped = Sprite.get_flip_v(entity)\n</code></pre> <p> Sprite.set_billboard(entity: <code>Entity</code>, kind: <code>SpriteBillboard</code>, lock: <code>Float3</code>) \u00b6 returns <code>None</code></p> <p>Set how the <code>Sprite</code> attached to <code>entity</code> behaves as a <code>billboard</code> sprite. The lock field is 0 for unlocked rotation, 1 for locked rotation on that axis.</p> <pre><code>Sprite.set_billboard(entity, SpriteBillboard.fixed_scale, [0,1,0])\n</code></pre> <p> Sprite.get_billboard(entity: <code>Entity</code>) \u00b6 returns <code>SpriteBillboard</code></p> <p>Get how the <code>Sprite</code> attached to <code>entity</code> behaves as a <code>billboard</code> sprite.</p> <pre><code>var kind = Sprite.get_billboard(entity)\nif(kind == SpriteBillboard.fixed_scale) { ... }\n</code></pre> <p> Sprite.set_size(entity: <code>Entity</code>, width: <code>Num</code>, height: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Resize the <code>Sprite</code> attached to <code>entity</code> to be <code>width</code>x<code>height</code>.</p> <pre><code>Sprite.set_size(entity, 256, 256)\n</code></pre> <p> Sprite.set_width(entity: <code>Entity</code>, width: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Resize the <code>Sprite</code> attached to <code>entity</code> to have a new <code>width</code>.</p> <pre><code>Sprite.set_width(entity, 64)\n</code></pre> <p> Sprite.get_width(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>Returns the width of the <code>Sprite</code> attached to <code>entity</code>.</p> <pre><code>var width = Sprite.get_width(entity)\n</code></pre> <p> Sprite.set_height(entity: <code>Entity</code>, height: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Resize the <code>Sprite</code> attached to <code>entity</code> to have a new <code>height</code>.</p> <pre><code>Sprite.set_height(entity, 64)\n</code></pre> <p> Sprite.get_height(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>Returns the height of the <code>Sprite</code> attached to <code>entity</code>.</p> <pre><code>var height = Sprite.get_height(entity)\n</code></pre> <p> Sprite.set_alpha(entity: <code>Entity</code>, alpha: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Change the alpha (transparency) of the <code>Sprite</code> attached to <code>entity</code> to be <code>alpha</code>. Modifies the color.</p> <pre><code>Sprite.set_alpha(entity, 0.5)\n</code></pre> <p> Sprite.get_alpha(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>Returns the current alpha of the <code>Sprite</code> attached to <code>entity</code>.</p> <pre><code>var a = Sprite.get_alpha(entity)\n</code></pre> <p> Sprite.set_color(entity: <code>Entity</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>Set the color of the <code>Sprite</code> attached to <code>entity</code> to be a color.  The default color is white, <code>[1, 1, 1, 1]</code>, so to undo a color change, set it to that.</p> <pre><code>var color = Color.hex(0xf6007c)\nSprite.set_color(entity, color)\n</code></pre> <p> Sprite.set_color(entity: <code>Entity</code>, r: <code>Num</code>, g: <code>Num</code>, b: <code>Num</code>, a: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the color of the <code>Sprite</code> attached to <code>entity</code> to be a color of <code>r</code>,<code>g</code>,<code>b</code>,<code>a</code>.  The default color is white, <code>[1, 1, 1, 1]</code>, so to undo a color change, set it to that.</p> <pre><code>Sprite.set_color(entity, r, g, b, a)\n</code></pre> <p> Sprite.get_color(entity: <code>Entity</code>) \u00b6 returns <code>Color</code></p> <p>Returns the current color of the <code>Sprite</code> attached to <code>entity</code>.</p> <pre><code>var color = Sprite.get_color(entity)\n</code></pre> <p> Sprite.set_uv(entity: <code>Entity</code>, x0: <code>Num</code>, y0: <code>Num</code>, x1: <code>Num</code>, y1: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the UV coordinates for the <code>Sprite</code> attached to <code>entity</code> with top left at <code>x0</code>,<code>y0</code> and bottom right <code>x1</code>,<code>y1</code>. The default is <code>0, 0, 1, 1</code>, a full rectangle in UV coordinate space. If you want to tile the image on a sprite, set it to values &gt; 1.</p> <pre><code>//tile 4 times on both x and y\nSprite.set_uv(entity, 0, 0, 4, 4)\n</code></pre> <p> Sprite.get_uv(entity: <code>Entity</code>) \u00b6 returns <code>Float4</code></p> <p>Returns the current uv of the <code>Sprite</code> attached to <code>entity</code>.</p> <pre><code>var uv = Sprite.get_uv(entity)\n</code></pre> <p> Sprite.set_skew(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the skew amounts for the <code>Sprite</code> attached to <code>entity</code>. The values of <code>x</code> and <code>y</code> are between <code>0 ... 1</code>, where 1 is the most skew and 0 is none.</p> <pre><code>Sprite.set_skew(entity, 0, 0.25)\n</code></pre> <p> Sprite.get_skew(entity: <code>Entity</code>) \u00b6 returns <code>Float2</code></p> <p>Return the skew for the <code>Sprite</code> attached to <code>entity</code>.</p> <pre><code>var skew = Sprite.get_skew(entity)\n</code></pre> <p> Sprite.get_geometry(entity: <code>Entity</code>) \u00b6 returns <code>Geometry</code></p> <p>Returns the render Geometry for the <code>Sprite</code> attached to <code>entity</code>. The geometry is owned by the sprite, so be aware when modifying it.</p> <pre><code>var geometry = Sprite.get_geometry(entity)\n</code></pre> <p> Sprite.set_geometry(entity: <code>Entity</code>, geo: <code>Geometry</code>) \u00b6 returns <code>unknown</code></p> <p>Sets the render Geometry for the <code>Sprite</code> attached to <code>entity</code>.</p> <pre><code>Sprite.set_geometry(entity, geo)\n</code></pre> <p> Sprite.get_auto_size(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Sprite.set_auto_size(entity: <code>Entity</code>, value: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>When setting an image or material, resize the sprite to the image size   </p> <p> Sprite.get_material_input(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Sprite.set_material_input(entity: <code>Entity</code>, value: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>For custom materials, the material input ID for the image.   </p> <p> Sprite.get_hsv_adjust(entity: <code>Entity</code>) \u00b6 returns <code>HSV</code></p> <p>no docs found   </p> <p> Sprite.set_hsv_adjust(entity: <code>Entity</code>, enabled: <code>Bool</code>, hue_change: <code>Num</code>, saturation: <code>Num</code>, value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the values for the hsv adjustment effect. The effect applies several operations on the colors of the sprite in sRGB HSV space. Saturation and Value changes are applied with exponents as <code>value ^ adjustment</code>.   </p> <p> Sprite.set_effect_HSV_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_HSV_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_HSV_hue_change(entity: <code>Entity</code>, hue_change: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_HSV_hue_change(entity: <code>Entity</code>, hue_change: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_HSV_saturation(entity: <code>Entity</code>, saturation: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_HSV_saturation(entity: <code>Entity</code>, saturation: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_HSV_value(entity: <code>Entity</code>, value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_HSV_value(entity: <code>Entity</code>, value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_outline(entity: <code>Entity</code>) \u00b6 returns <code>Outline</code></p> <p>no docs found   </p> <p> Sprite.set_outline(entity: <code>Entity</code>, enabled: <code>Bool</code>, color: <code>Color</code>, thickness: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the values of the outline effect.   </p> <p> Sprite.set_effect_outline_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_outline_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_outline_color(entity: <code>Entity</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_outline_color(entity: <code>Entity</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_outline_thickness(entity: <code>Entity</code>, thickness: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_outline_thickness(entity: <code>Entity</code>, thickness: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_shadow(entity: <code>Entity</code>) \u00b6 returns <code>Shadow</code></p> <p>no docs found   </p> <p> Sprite.set_shadow(entity: <code>Entity</code>, enabled: <code>Bool</code>, offset: <code>Num</code>, color: <code>Color</code>, softness: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the values for the shadow effect. Shadows are the same color as the base sprite image, but only have a single color.   </p> <p> Sprite.set_effect_shadow_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_shadow_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_shadow_offset(entity: <code>Entity</code>, offset: <code>Vector2</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_shadow_offset(entity: <code>Entity</code>, offset: <code>Vector2</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_shadow_color(entity: <code>Entity</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_shadow_color(entity: <code>Entity</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_dissolve(entity: <code>Entity</code>) \u00b6 returns <code>Dissolve</code></p> <p>no docs found   </p> <p> Sprite.set_dissolve(entity: <code>Entity</code>, enabled: <code>Bool</code>, image: <code>Image</code>, uv: <code>List</code>, value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the values for the hsv adjustment effect. The effect applies several operations on the colors of the sprite in sRGB HSV space. Saturation and Value changes are applied with exponents as <code>value ^ adjustment</code>.   </p> <p> Sprite.set_effect_dissolve_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_dissolve_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_dissolve_image(entity: <code>Entity</code>, image: <code>Image</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_dissolve_image(entity: <code>Entity</code>, image: <code>Image</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_dissolve_uv(entity: <code>Entity</code>, uv: <code>Vector4</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_dissolve_uv(entity: <code>Entity</code>, uv: <code>Vector4</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_dissolve_value(entity: <code>Entity</code>, value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_dissolve_value(entity: <code>Entity</code>, value: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_shine(entity: <code>Entity</code>) \u00b6 returns <code>Shine</code></p> <p>no docs found   </p> <p> Sprite.set_shine(entity: <code>Entity</code>, enabled: <code>Bool</code>, color: <code>Num</code>, direction: <code>Vector2</code>, width: <code>Num</code>, speed: <code>Num</code>, spacing: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the values for the hsv adjustment effect. The effect applies several operations on the colors of the sprite in sRGB HSV space. Saturation and Value changes are applied with exponents as <code>value ^ adjustment</code>.   </p> <p> Sprite.set_effect_shine_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_shine_enabled(entity: <code>Entity</code>, enabled: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_shine_color(entity: <code>Entity</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_shine_color(entity: <code>Entity</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_shine_direction(entity: <code>Entity</code>, direction: <code>Vector2</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_shine_direction(entity: <code>Entity</code>, direction: <code>Vector2</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_shine_width(entity: <code>Entity</code>, width: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_shine_width(entity: <code>Entity</code>, width: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_shine_speed(entity: <code>Entity</code>, speed: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_shine_speed(entity: <code>Entity</code>, speed: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.set_effect_shine_spacing(entity: <code>Entity</code>, spacing: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Sprite.get_effect_shine_spacing(entity: <code>Entity</code>, spacing: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/sprite.modifier/#spritebillboard","title":"SpriteBillboard","text":"<p><code>import \"luxe: system/sprite.modifier\" for SpriteBillboard</code></p> <p>no docs found</p> <ul> <li>none</li> <li>billboard</li> <li>fixed_scale</li> <li>fixed_screen_scale</li> </ul> <p> SpriteBillboard.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SpriteBillboard.billboard \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SpriteBillboard.fixed_scale \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SpriteBillboard.fixed_screen_scale \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/sprite.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/sprite.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/tags.modifier/","title":"Tags.modifier","text":""},{"location":"api/v/next/system/tags.modifier/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/system/tags.modifier/#luxe-systemtagsmodifier-module","title":"<code>luxe: system/tags.modifier</code> module","text":"<ul> <li>Data </li> <li>System </li> <li>Tags </li> </ul>"},{"location":"api/v/next/system/tags.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/tags.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var tags : List = []</code></li> </ul>"},{"location":"api/v/next/system/tags.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/tags.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/tags.modifier/#tags","title":"Tags","text":"<p><code>import \"luxe: system/tags.modifier\" for Tags</code></p> <p>no docs found</p> <ul> <li>create(entity: <code>Any</code>)</li> <li>destroy(entity: <code>Any</code>)</li> <li>has(entity: <code>Any</code>)</li> <li>add(entity: <code>Any</code>, tag: <code>Any</code>)</li> <li>remove(entity: <code>Any</code>, tag: <code>Any</code>)</li> <li>list(world: <code>Any</code>, tag: <code>Any</code>)</li> <li>list(entity: <code>Any</code>)</li> <li>has_tag(entity: <code>Any</code>, tag: <code>Any</code>)</li> </ul> <p> Tags.create(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tags.destroy(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tags.has(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tags.add(entity: <code>Any</code>, tag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tags.remove(entity: <code>Any</code>, tag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tags.list(world: <code>Any</code>, tag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tags.list(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tags.has_tag(entity: <code>Any</code>, tag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/text.modifier/","title":"Text.modifier","text":""},{"location":"api/v/next/system/text.modifier/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/system/text.modifier/#luxe-systemtextmodifier-module","title":"<code>luxe: system/text.modifier</code> module","text":"<ul> <li>Data </li> <li>System </li> <li>Text </li> <li>TextAlignH </li> <li>TextAlignV </li> </ul>"},{"location":"api/v/next/system/text.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/text.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var text : String = \"hello\"</code></li> <li><code>var size : Num = 16</code></li> <li><code>var align : TextAlignH = TextAlignH.center</code></li> <li><code>var vertical : TextAlignV = TextAlignV.center</code></li> <li><code>var color : Color = [1, 1, 1, 1]</code></li> <li><code>var bounds : Float4 = [0, 0, 0, 0]</code></li> <li><code>var font : Asset = \"luxe: font/lato\"</code></li> <li><code>var material : Asset = \"luxe: material/font\"</code></li> </ul>"},{"location":"api/v/next/system/text.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/text.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/text.modifier/#text","title":"Text","text":"<p><code>import \"luxe: system/text.modifier\" for Text</code></p> <p>no docs found</p> <ul> <li>create(entity: <code>Any</code>, material: <code>Any</code>, default_size: <code>Any</code>, default_font: <code>Any</code>, default_color: <code>Any</code>)</li> <li>destroy(entity: <code>Any</code>)</li> <li>set_size(entity: <code>Any</code>, default_size: <code>Any</code>)</li> <li>get_size(entity: <code>Any</code>)</li> <li>set_font(entity: <code>Any</code>, default_font: <code>Any</code>)</li> <li>get_font(entity: <code>Any</code>)</li> <li>set_style(entity: <code>Entity</code>, style: <code>TextStyle</code>)</li> <li>get_style(entity: <code>Entity</code>)</li> <li>set_outline(entity: <code>Entity</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>)</li> <li>set_shadow(entity: <code>Entity</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>)</li> <li>set_max_visible(entity: <code>Entity</code>, max_visible: <code>Num</code>)</li> <li>get_max_visible(entity: <code>Entity</code>)</li> <li>set_color(entity: <code>Any</code>, default_color: <code>Any</code>)</li> <li>get_color(entity: <code>Any</code>)</li> <li>set_align(entity: <code>Any</code>, align: <code>Any</code>, align_vertical: <code>Any</code>)</li> <li>set_align(entity: <code>Any</code>, align: <code>Any</code>)</li> <li>get_align(entity: <code>Any</code>)</li> <li>set_align_vertical(entity: <code>Any</code>, align_vertical: <code>Any</code>)</li> <li>get_align_vertical(entity: <code>Any</code>)</li> <li>set_bounds(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>)</li> <li>get_bounds(entity: <code>Any</code>)</li> <li>set_attr(entity: <code>Entity</code>, start: <code>Num</code>, length: <code>Num</code>, type: <code>TextAttrType</code>, key: <code>String</code>, value: <code>Any</code>)</li> <li>attr_clear(entity: <code>Any</code>)</li> <li>commit(entity: <code>Any</code>)</li> <li>get_render_text(entity: <code>Any</code>)</li> <li>get_geometry(entity: <code>Any</code>)</li> <li>get_extents(entity: <code>Any</code>, offset: <code>Any</code>, count: <code>Any</code>)</li> <li>get_extents(entity: <code>Any</code>)</li> <li>contains(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>)</li> <li>has(entity: <code>Any</code>)</li> <li>set_loc(entity: <code>Entity</code>, space: <code>String</code>, key: <code>String</code>)</li> <li>set_loc(entity: <code>Entity</code>, key: <code>String</code>)</li> <li>set_loc_with_args(entity: <code>Entity</code>, space: <code>String</code>, key: <code>String</code>, args: <code>List</code>)</li> <li>set_loc_with_args(entity: <code>Entity</code>, key: <code>String</code>, args: <code>List</code>)</li> <li>get_text(entity: <code>Any</code>)</li> <li>set_text_buffer(entity: <code>Any</code>, string: <code>Any</code>)</li> <li>set_text(entity: <code>Any</code>, string: <code>Any</code>)</li> </ul> <p> Text.create(entity: <code>Any</code>, material: <code>Any</code>, default_size: <code>Any</code>, default_font: <code>Any</code>, default_color: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.destroy(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_size(entity: <code>Any</code>, default_size: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.get_size(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_font(entity: <code>Any</code>, default_font: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.get_font(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_style(entity: <code>Entity</code>, style: <code>TextStyle</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Text.get_style(entity: <code>Entity</code>) \u00b6 returns <code>TextStyle</code></p> <p>no docs found   </p> <p> Text.set_outline(entity: <code>Entity</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_shadow(entity: <code>Entity</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_max_visible(entity: <code>Entity</code>, max_visible: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Text.get_max_visible(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Text.set_color(entity: <code>Any</code>, default_color: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.get_color(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_align(entity: <code>Any</code>, align: <code>Any</code>, align_vertical: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_align(entity: <code>Any</code>, align: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.get_align(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_align_vertical(entity: <code>Any</code>, align_vertical: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.get_align_vertical(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_bounds(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.get_bounds(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_attr(entity: <code>Entity</code>, start: <code>Num</code>, length: <code>Num</code>, type: <code>TextAttrType</code>, key: <code>String</code>, value: <code>Any</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Text.attr_clear(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.commit(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.get_render_text(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.get_geometry(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.get_extents(entity: <code>Any</code>, offset: <code>Any</code>, count: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.get_extents(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.contains(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.has(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_loc(entity: <code>Entity</code>, space: <code>String</code>, key: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_loc(entity: <code>Entity</code>, key: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_loc_with_args(entity: <code>Entity</code>, space: <code>String</code>, key: <code>String</code>, args: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_loc_with_args(entity: <code>Entity</code>, key: <code>String</code>, args: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.get_text(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_text_buffer(entity: <code>Any</code>, string: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Text.set_text(entity: <code>Any</code>, string: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/text.modifier/#textalignh","title":"TextAlignH","text":"<p><code>import \"luxe: system/text.modifier\" for TextAlignH</code></p> <p>no docs found</p> <ul> <li>left</li> <li>center</li> <li>right</li> </ul> <p> TextAlignH.left \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAlignH.center \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAlignH.right \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/text.modifier/#textalignv","title":"TextAlignV","text":"<p><code>import \"luxe: system/text.modifier\" for TextAlignV</code></p> <p>no docs found</p> <ul> <li>top</li> <li>center</li> <li>bottom</li> </ul> <p> TextAlignV.top \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAlignV.center \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TextAlignV.bottom \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/tiles.modifier/","title":"Tiles.modifier","text":""},{"location":"api/v/next/system/tiles.modifier/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/system/tiles.modifier/#luxe-systemtilesmodifier-module","title":"<code>luxe: system/tiles.modifier</code> module","text":"<ul> <li>Data </li> <li>System </li> <li>Tile </li> <li>Tiles </li> </ul>"},{"location":"api/v/next/system/tiles.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/tiles.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var tiles : Asset = null</code></li> </ul>"},{"location":"api/v/next/system/tiles.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/tiles.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/tiles.modifier/#tile","title":"Tile","text":"<p><code>import \"luxe: system/tiles.modifier\" for Tile</code></p> <p>no docs found</p> <ul> <li>create(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, depth: <code>Any</code>, visual_id: <code>Any</code>)</li> <li>destroy(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>destroy_at(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, depth: <code>Any</code>)</li> <li>exists_at(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, depth: <code>Any</code>)</li> <li>get_at(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, depth: <code>Any</code>)</li> <li>get_all(entity: <code>Any</code>, into: <code>Any</code>)</li> <li>get_all_at(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, into: <code>Any</code>)</li> <li>get_all_at_depth(entity: <code>Any</code>, depth: <code>Any</code>, into: <code>Any</code>)</li> <li>get_all_with_tag(entity: <code>Any</code>, tag: <code>Any</code>, into: <code>Any</code>)</li> <li>get_all_with_visual(entity: <code>Any</code>, visual: <code>Any</code>, into: <code>Any</code>)</li> <li>add_tag(entity: <code>Any</code>, tile: <code>Any</code>, tag: <code>Any</code>)</li> <li>remove_tag(entity: <code>Any</code>, tile: <code>Any</code>, tag: <code>Any</code>)</li> <li>has_tag(entity: <code>Any</code>, tile: <code>Any</code>, tag: <code>Any</code>)</li> <li>get_tags(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>clear_tags(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>set(entity: <code>Any</code>, tile: <code>Any</code>, key: <code>Any</code>, value: <code>Any</code>)</li> <li>get(entity: <code>Any</code>, tile: <code>Any</code>, key: <code>Any</code>, default: <code>Any</code>)</li> <li>set_coord(entity: <code>Any</code>, tile: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>)</li> <li>get_coord_x(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>get_coord_y(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>set_depth(entity: <code>Any</code>, tile: <code>Any</code>, depth: <code>Any</code>)</li> <li>get_depth(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>set_offset(entity: <code>Any</code>, tile: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>)</li> <li>set_offset_x(entity: <code>Any</code>, tile: <code>Any</code>, x: <code>Any</code>)</li> <li>set_offset_y(entity: <code>Any</code>, tile: <code>Any</code>, y: <code>Any</code>)</li> <li>get_offset_x(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>get_offset_y(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>reset_size(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>set_size(entity: <code>Any</code>, tile: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>)</li> <li>set_size_x(entity: <code>Any</code>, tile: <code>Any</code>, x: <code>Any</code>)</li> <li>set_size_y(entity: <code>Any</code>, tile: <code>Any</code>, y: <code>Any</code>)</li> <li>get_size_x(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>get_size_y(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>set_flip(entity: <code>Any</code>, tile: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>)</li> <li>set_flip_x(entity: <code>Any</code>, tile: <code>Any</code>, flip: <code>Any</code>)</li> <li>set_flip_y(entity: <code>Any</code>, tile: <code>Any</code>, flip: <code>Any</code>)</li> <li>get_flip_x(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>get_flip_y(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>set_visual(entity: <code>Any</code>, tile: <code>Any</code>, visual: <code>Any</code>)</li> <li>get_visual(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>set_angle(entity: <code>Any</code>, tile: <code>Any</code>, angle: <code>Any</code>)</li> <li>get_angle(entity: <code>Any</code>, tile: <code>Any</code>)</li> <li>set_color(entity: <code>Any</code>, tile: <code>Any</code>, color: <code>Any</code>)</li> <li>get_color(entity: <code>Any</code>, tile: <code>Any</code>)</li> </ul> <p> Tile.create(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, depth: <code>Any</code>, visual_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.destroy(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.destroy_at(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, depth: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.exists_at(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, depth: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_at(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, depth: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_all(entity: <code>Any</code>, into: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_all_at(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, into: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_all_at_depth(entity: <code>Any</code>, depth: <code>Any</code>, into: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_all_with_tag(entity: <code>Any</code>, tag: <code>Any</code>, into: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_all_with_visual(entity: <code>Any</code>, visual: <code>Any</code>, into: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.add_tag(entity: <code>Any</code>, tile: <code>Any</code>, tag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.remove_tag(entity: <code>Any</code>, tile: <code>Any</code>, tag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.has_tag(entity: <code>Any</code>, tile: <code>Any</code>, tag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_tags(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.clear_tags(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set(entity: <code>Any</code>, tile: <code>Any</code>, key: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get(entity: <code>Any</code>, tile: <code>Any</code>, key: <code>Any</code>, default: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_coord(entity: <code>Any</code>, tile: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_coord_x(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_coord_y(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_depth(entity: <code>Any</code>, tile: <code>Any</code>, depth: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_depth(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_offset(entity: <code>Any</code>, tile: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_offset_x(entity: <code>Any</code>, tile: <code>Any</code>, x: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_offset_y(entity: <code>Any</code>, tile: <code>Any</code>, y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_offset_x(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_offset_y(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.reset_size(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_size(entity: <code>Any</code>, tile: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_size_x(entity: <code>Any</code>, tile: <code>Any</code>, x: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_size_y(entity: <code>Any</code>, tile: <code>Any</code>, y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_size_x(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_size_y(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_flip(entity: <code>Any</code>, tile: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_flip_x(entity: <code>Any</code>, tile: <code>Any</code>, flip: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_flip_y(entity: <code>Any</code>, tile: <code>Any</code>, flip: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_flip_x(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_flip_y(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_visual(entity: <code>Any</code>, tile: <code>Any</code>, visual: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_visual(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_angle(entity: <code>Any</code>, tile: <code>Any</code>, angle: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_angle(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.set_color(entity: <code>Any</code>, tile: <code>Any</code>, color: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tile.get_color(entity: <code>Any</code>, tile: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/tiles.modifier/#tiles","title":"Tiles","text":"<p><code>import \"luxe: system/tiles.modifier\" for Tiles</code></p> <p>no docs found</p> <ul> <li>create(entity: <code>Any</code>, grid_size_x: <code>Any</code>, grid_size_y: <code>Any</code>)</li> <li>create(entity: <code>Any</code>, asset: <code>Any</code>)</li> <li>destroy(entity: <code>Any</code>)</li> <li>clear(entity: <code>Any</code>)</li> <li>has(entity: <code>Any</code>)</li> <li>commit(entity: <code>Any</code>)</li> <li>set_grid_size(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>)</li> <li>get_grid_size(entity: <code>Any</code>)</li> <li>set_asset(entity: <code>Any</code>, asset_id: <code>Any</code>)</li> <li>get_asset_id(entity: <code>Any</code>)</li> <li>set_asset_id(entity: <code>Any</code>, asset_id: <code>Any</code>)</li> <li>define_source(entity: <code>Any</code>, source_id: <code>Any</code>, material: <code>Any</code>)</li> <li>undefine_source(entity: <code>Any</code>, source_id: <code>Any</code>)</li> <li>has_source(entity: <code>Any</code>, source_id: <code>Any</code>)</li> <li>define_visual(entity: <code>Any</code>, source_id: <code>Any</code>, visual_id: <code>Any</code>, options: <code>Any</code>)</li> <li>undefine_visual(entity: <code>Any</code>, source_id: <code>Any</code>, visual_id: <code>Any</code>)</li> <li>has_visual(entity: <code>Any</code>, visual_id: <code>Any</code>)</li> <li>get_bounds_rects(entity: <code>Any</code>, tiles: <code>Any</code>, into: <code>Any</code>)</li> </ul> <p> Tiles.create(entity: <code>Any</code>, grid_size_x: <code>Any</code>, grid_size_y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.create(entity: <code>Any</code>, asset: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.destroy(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.clear(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.has(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.commit(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.set_grid_size(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.get_grid_size(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.set_asset(entity: <code>Any</code>, asset_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.get_asset_id(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.set_asset_id(entity: <code>Any</code>, asset_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.define_source(entity: <code>Any</code>, source_id: <code>Any</code>, material: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.undefine_source(entity: <code>Any</code>, source_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.has_source(entity: <code>Any</code>, source_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.define_visual(entity: <code>Any</code>, source_id: <code>Any</code>, visual_id: <code>Any</code>, options: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.undefine_visual(entity: <code>Any</code>, source_id: <code>Any</code>, visual_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.has_visual(entity: <code>Any</code>, visual_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Tiles.get_bounds_rects(entity: <code>Any</code>, tiles: <code>Any</code>, into: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/transform.change.block/","title":"Transform.change.block","text":""},{"location":"api/v/next/system/transform.change.block/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/system/transform.change.block/#luxe-systemtransformchangeblock-module","title":"<code>luxe: system/transform.change.block</code> module","text":"<ul> <li>TransformChange </li> </ul>"},{"location":"api/v/next/system/transform.change.block/#transformchange","title":"TransformChange","text":"<p><code>import \"luxe: system/transform.change.block\" for TransformChange</code></p> <p>no docs found</p> <ul> <li><code>var entity : Num = 0</code></li> <li><code>var pos : Float3 = [0, 0, 0]</code></li> <li><code>var rotation : Float4 = [0, 0, 0, 1]</code></li> <li><code>var scale : Float3 = [1, 1, 1]</code></li> <li><code>var tag : String = \"unknown\"</code></li> </ul>"},{"location":"api/v/next/system/transform.modifier/","title":"Transform.modifier","text":""},{"location":"api/v/next/system/transform.modifier/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/system/transform.modifier/#luxe-systemtransformmodifier-module","title":"<code>luxe: system/transform.modifier</code> module","text":"<ul> <li>Data </li> <li>System </li> <li>Transform </li> <li>TransformApplyMask </li> </ul>"},{"location":"api/v/next/system/transform.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/transform.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var pos : Double3 = [0, 0, 0]</code></li> <li><code>var rotation : Float3 = [0, 0, 0]</code></li> <li><code>var scale : Float3 = [1, 1, 1]</code></li> <li><code>var link : Link = null</code></li> </ul>"},{"location":"api/v/next/system/transform.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/transform.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/transform.modifier/#transform","title":"Transform","text":"<p><code>import \"luxe: system/transform.modifier\" for Transform</code></p> <p>A transform modifier defines where a entity is. That includes position, rotation and scale. A <code>Transform</code> can also be linked to another <code>Transform</code>, in which case its values are relative to their link target.</p> <p>While not all entities need to be \"somewhere\" locally, a lot of them do, which is when this modifier is used. Other modifiers on the same entity aren't required to read and react to the <code>Transform</code>, but most do, allowing you to use this to move things (like Sprites, Meshes, Physics shapes, etc...).</p> <ul> <li>id</li> <li>create(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>create(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>create(entity: <code>Entity</code>)</li> <li>destroy(entity: <code>Entity</code>)</li> <li>has(entity: <code>Entity</code>)</li> <li>get_link(entity: <code>Entity</code>)</li> <li>get_linked(entity: <code>Entity</code>)</li> <li>link(entity: <code>Entity</code>, target_entity: <code>Entity</code>, reset_local: <code>Bool</code>)</li> <li>link(entity: <code>Entity</code>, target_entity: <code>Entity</code>)</li> <li>unlink(entity: <code>Entity</code>, reset_local: <code>Bool</code>)</li> <li>unlink(entity: <code>Entity</code>)</li> <li>look_at_and_move(entity: <code>Entity</code>, pos: <code>Vec</code>, target: <code>Vec</code>, up: <code>Vec</code>, invert: <code>Bool</code>)</li> <li>look_at_and_move(entity: <code>Entity</code>, pos: <code>Vec</code>, target: <code>Vec</code>, up: <code>Vec</code>)</li> <li>look_at_and_move(entity: <code>Entity</code>, pos: <code>Vec</code>, target: <code>Vec</code>)</li> <li>look_at(entity: <code>Entity</code>, target: <code>Vec</code>, up: <code>Vec</code>, invert: <code>Bool</code>)</li> <li>look_at(entity: <code>Entity</code>, target: <code>Vec</code>, up: <code>Vec</code>)</li> <li>look_at(entity: <code>Entity</code>, target: <code>Vec</code>)</li> <li>set_snap(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>set_snap(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>set_pos(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>set_pos(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>set_pos_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>set_pos_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>set_pos_x(entity: <code>Entity</code>, x: <code>Num</code>)</li> <li>set_pos_y(entity: <code>Entity</code>, y: <code>Num</code>)</li> <li>set_pos_z(entity: <code>Entity</code>, z: <code>Num</code>)</li> <li>set_pos_x_world(entity: <code>Entity</code>, x: <code>Num</code>)</li> <li>set_pos_y_world(entity: <code>Entity</code>, y: <code>Num</code>)</li> <li>set_pos_z_world(entity: <code>Entity</code>, z: <code>Num</code>)</li> <li>set_scale(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>set_scale(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>set_rotation_slerp_angle_axis(entity: <code>Entity</code>, axis: <code>Vec</code>, from: <code>Num</code>, to: <code>Num</code>, t: <code>Num</code>)</li> <li>set_rotation_slerp_angle_axis_world(entity: <code>Entity</code>, axis: <code>Vec</code>, from: <code>Num</code>, to: <code>Num</code>, t: <code>Num</code>)</li> <li>set_rotation_slerp(entity: <code>Entity</code>, from: <code>Vec</code>, to: <code>Vec</code>, t: <code>Num</code>)</li> <li>set_rotation_slerp_world(entity: <code>Entity</code>, from: <code>Vec</code>, to: <code>Vec</code>, t: <code>Num</code>)</li> <li>set_rotation(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>)</li> <li>set_rotation_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>)</li> <li>set_angle_axis(entity: <code>Entity</code>, degrees: <code>Any</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>set_angle_axis_world(entity: <code>Entity</code>, degrees: <code>Any</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>set_euler(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>set_euler_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>set_euler_x(entity: <code>Entity</code>, x: <code>Num</code>)</li> <li>set_euler_y(entity: <code>Entity</code>, y: <code>Num</code>)</li> <li>set_euler_z(entity: <code>Entity</code>, z: <code>Num</code>)</li> <li>set_euler_x_world(entity: <code>Entity</code>, x: <code>Num</code>)</li> <li>set_euler_y_world(entity: <code>Entity</code>, y: <code>Num</code>)</li> <li>set_euler_z_world(entity: <code>Entity</code>, z: <code>Num</code>)</li> <li>rotate_angle_axis_slerp(entity: <code>Entity</code>, axis: <code>Vec</code>, angle_amount: <code>Num</code>)</li> <li>rotate_angle_axis_slerp_world(entity: <code>Entity</code>, axis: <code>Vec</code>, angle_amount: <code>Num</code>)</li> <li>rotate_around_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, axis_x: <code>Num</code>, axis_y: <code>Num</code>, axis_z: <code>Num</code>, degrees: <code>Num</code>)</li> <li>rotate_around(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, axis_x: <code>Num</code>, axis_y: <code>Num</code>, axis_z: <code>Num</code>, degrees: <code>Num</code>)</li> <li>rotate_angle_axis(entity: <code>Entity</code>, degrees: <code>Any</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>rotate_angle_axis_world(entity: <code>Entity</code>, degrees: <code>Any</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>rotate_euler(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>rotate_euler_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>translate(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>translate(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>get_pos(entity: <code>Entity</code>)</li> <li>get_pos_x(entity: <code>Entity</code>)</li> <li>get_pos_y(entity: <code>Entity</code>)</li> <li>get_pos_z(entity: <code>Entity</code>)</li> <li>get_pos_world(entity: <code>Entity</code>)</li> <li>get_pos_world_unsnapped(entity: <code>Entity</code>)</li> <li>get_pos_x_world(entity: <code>Entity</code>)</li> <li>get_pos_y_world(entity: <code>Entity</code>)</li> <li>get_pos_z_world(entity: <code>Entity</code>)</li> <li>rotate2D(entity: <code>Entity</code>, degrees: <code>Num</code>)</li> <li>set_angle2D(entity: <code>Entity</code>, degrees: <code>Num</code>)</li> <li>set_angle2D_world(entity: <code>Entity</code>, degrees: <code>Num</code>)</li> <li>get_angle2D(entity: <code>Entity</code>)</li> <li>get_angle2D_world(entity: <code>Entity</code>)</li> <li>set_depth2D(entity: <code>Entity</code>, depth: <code>Num</code>)</li> <li>get_depth2D(entity: <code>Entity</code>)</li> <li>set_depth2D_world(entity: <code>Entity</code>, depth: <code>Num</code>)</li> <li>get_depth2D_world(entity: <code>Entity</code>)</li> <li>get_world_matrix(entity: <code>Entity</code>, into_matrix: <code>Floats</code>)</li> <li>get_rotation(entity: <code>Entity</code>)</li> <li>get_rotation_world(entity: <code>Entity</code>)</li> <li>get_rotation_matrix(entity: <code>Entity</code>, into_matrix: <code>Floats</code>)</li> <li>get_euler(entity: <code>Entity</code>)</li> <li>get_euler_x(entity: <code>Entity</code>)</li> <li>get_euler_y(entity: <code>Entity</code>)</li> <li>get_euler_z(entity: <code>Entity</code>)</li> <li>get_euler_world(entity: <code>Entity</code>)</li> <li>get_euler_x_world(entity: <code>Entity</code>)</li> <li>get_euler_y_world(entity: <code>Entity</code>)</li> <li>get_euler_z_world(entity: <code>Entity</code>)</li> <li>get_scale(entity: <code>Entity</code>)</li> <li>get_scale_x(entity: <code>Entity</code>)</li> <li>get_scale_y(entity: <code>Entity</code>)</li> <li>get_scale_z(entity: <code>Entity</code>)</li> <li>get_scale_world(entity: <code>Entity</code>)</li> <li>get_scale_x_world(entity: <code>Entity</code>)</li> <li>get_scale_y_world(entity: <code>Entity</code>)</li> <li>get_scale_z_world(entity: <code>Entity</code>)</li> <li>get_right(entity: <code>Entity</code>)</li> <li>get_forward(entity: <code>Entity</code>)</li> <li>get_up(entity: <code>Entity</code>)</li> <li>sync(entity: <code>Entity</code>)</li> <li>sync_block(entity: <code>Entity</code>, mask: <code>TransformApplyMask</code>)</li> <li>sync_world(world: <code>World</code>)</li> <li>transform_by(entity: <code>Entity</code>, other: <code>Entity</code>)</li> <li>scale_by(entity: <code>Entity</code>, scale: <code>Float3</code>, origin: <code>Float3</code>)</li> <li>rotate_euler_by(entity: <code>Entity</code>, euler: <code>Float3</code>, origin: <code>Float3</code>)</li> <li>local_vector_to_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>world_vector_to_local(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>local_dir_to_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>world_dir_to_local(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>local_point_to_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>local_point_to_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, scaled: <code>Bool</code>)</li> <li>world_point_to_local(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>)</li> <li>world_point_to_local(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, scaled: <code>Bool</code>)</li> <li>listen_all(world: <code>World</code>, fn: <code>Fn</code>)</li> <li>unlisten_all(world: <code>World</code>, handle: <code>Handle</code>)</li> <li>listen(entity: <code>Entity</code>, fn: <code>Fn</code>)</li> <li>unlisten(entity: <code>Entity</code>, handle: <code>Handle</code>)</li> </ul> <p> Transform.id \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Transform.create(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Attach a <code>Transform</code> modifier to an entity with the given <code>x</code> and <code>y</code> position (with a z of 0)   </p> <p> Transform.create(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Attach a <code>Transform</code> modifier to an entity with the given <code>x</code>, <code>y</code> and <code>z</code> position   </p> <p> Transform.create(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Attach a <code>Transform</code> modifier to an entity.   </p> <p> Transform.destroy(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Detatch a <code>Transform</code> modifier from an entity.   </p> <p> Transform.has(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>get whether an entity has an attached <code>Transform</code>.   </p> <p> Transform.get_link(entity: <code>Entity</code>) \u00b6 returns <code>Entity</code></p> <p>Get what entity this entity is linked to. So what entity the position/rotation/scale of this transform are relative to. Linked to entity always has a <code>Transform</code> of its own. In case <code>Transform</code> isn't linked to anything, returns <code>null</code> and transformations are global.   </p> <p> Transform.get_linked(entity: <code>Entity</code>) \u00b6 returns <code>List</code></p> <p>Get what entities are linked to this entity (opposite relationship as <code>get_link</code>). Transformation values of linked entities are relative to this entity.   </p> <p> Transform.link(entity: <code>Entity</code>, target_entity: <code>Entity</code>, reset_local: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Link one <code>Transform</code> to another. The <code>Transform</code> values will now be be relative to the link target, meaning the link target <code>Transform</code> position, rotation and scale all apply to the local position, rotation, scale of this <code>Transform</code>. When using non-uniform scales somewhere in your transform link hierarchy you can get transform deformations that would not be possible with just a single transform.</p> <p>In other environments, this transform link is often part of the object hierarchy, but here it's specific to transforms and other hierarchies aren't bound to follow the same links.   </p> <p> Transform.link(entity: <code>Entity</code>, target_entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Link one <code>Transform</code> to another. The <code>Transform</code> values will now be be relative to the link target, meaning the link target <code>Transform</code> position, rotation and scale all apply to the local position, rotation, scale of this <code>Transform</code>. When using non-uniform scales somewhere in your transform link hierarchy you can get transform deformations that would not be possible with just a single transform.</p> <p>In other environments, this transform link is often part of the object hierarchy, but here it's specific to transforms and other hierarchies aren't bound to follow the same links.   </p> <p> Transform.unlink(entity: <code>Entity</code>, reset_local: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Unlink a <code>Transform</code>. Local position will be kept (unless reset), so if your parent isnt at the origin, expect the transform to move, or save and reapply the world position.   </p> <p> Transform.unlink(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Unlink a <code>Transform</code>. Local position will be kept, so if your parent isnt at the origin, expect the transform to move, or save and reapply the world position.</p> <pre><code>  //get the current jar position\n  var pos = Transform.get_pos_world(_jar)\n  //unlink the jar from the player first\n  Transform.unlink(_jar)\n  //set the position for the jar, which now refers \n  //to world space since the jar has no parent\n  //this makes the jar stay in the same place\n  Transform.set_pos(_jar, pos.x, pos.y, pos.z)\n</code></pre> <p> Transform.look_at_and_move(entity: <code>Entity</code>, pos: <code>Vec</code>, target: <code>Vec</code>, up: <code>Vec</code>, invert: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Move <code>Transform</code> somewhere else, then look towards target position.   </p> <p> Transform.look_at_and_move(entity: <code>Entity</code>, pos: <code>Vec</code>, target: <code>Vec</code>, up: <code>Vec</code>) \u00b6 returns <code>None</code></p> <p>Move <code>Transform</code> somewhere else, then look towards target position.   </p> <p> Transform.look_at_and_move(entity: <code>Entity</code>, pos: <code>Vec</code>, target: <code>Vec</code>) \u00b6 returns <code>None</code></p> <p>Move <code>Transform</code> somewhere else, then look towards target position.   </p> <p> Transform.look_at(entity: <code>Entity</code>, target: <code>Vec</code>, up: <code>Vec</code>, invert: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Rotate <code>Transform</code> to look at a position in worldspace,        rotated around that new view axis so the <code>Transform</code> 'up' aligns with the <code>up</code> input as closely as possible.   </p> <p> Transform.look_at(entity: <code>Entity</code>, target: <code>Vec</code>, up: <code>Vec</code>) \u00b6 returns <code>None</code></p> <p>Rotate <code>Transform</code> to look at a position in worldspace,        rotated around that new view axis so the <code>Transform</code> 'up' aligns with the <code>up</code> input as closely as possible.   </p> <p> Transform.look_at(entity: <code>Entity</code>, target: <code>Vec</code>) \u00b6 returns <code>None</code></p> <p>Rotate <code>Transform</code> to look at a position in worldspace.   </p> <p> Transform.set_snap(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set <code>Transform</code> position to snap at specific intervals. (midpoints round away from 0)</p> <pre><code>  var entity = Entity.create(world)\n  Transform.create(entity)\n  Transform.set_snap(entity, 2, 2, 2)\n  Transform.set_pos(entity, 0.5, 1.5, -3)\n  Log.print(Transform.get_pos(entity)) //[0, 2, -4]\n</code></pre> <p> Transform.set_snap(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set <code>Transform</code> position to snap at specific intervals.   </p> <p> Transform.set_pos(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set local position of a <code>Transform</code>.   </p> <p> Transform.set_pos(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set local position of a <code>Transform</code>.   </p> <p> Transform.set_pos_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set global position of a <code>Transform</code>.   </p> <p> Transform.set_pos_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set global position of a <code>Transform</code>.   </p> <p> Transform.set_pos_x(entity: <code>Entity</code>, x: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set <code>x</code> component of local <code>Transform</code> pos.   </p> <p> Transform.set_pos_y(entity: <code>Entity</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set <code>y</code> component of local <code>Transform</code> pos.   </p> <p> Transform.set_pos_z(entity: <code>Entity</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set <code>z</code> component of local <code>Transform</code> pos.   </p> <p> Transform.set_pos_x_world(entity: <code>Entity</code>, x: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set <code>x</code> component of global <code>Transform</code> pos.   </p> <p> Transform.set_pos_y_world(entity: <code>Entity</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set <code>y</code> component of global <code>Transform</code> pos.   </p> <p> Transform.set_pos_z_world(entity: <code>Entity</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set <code>z</code> component of global <code>Transform</code> pos.   </p> <p> Transform.set_scale(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set x and y scale of a <code>Transform</code>, keeping z scale unchanged.   </p> <p> Transform.set_scale(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set local scale of a <code>Transform</code>. Setting the scale in a global context isnt available, as link hierarchies with rotations and nonuniform scalings can lead to weird and hard to predict states for that.   </p> <p> Transform.set_rotation_slerp_angle_axis(entity: <code>Entity</code>, axis: <code>Vec</code>, from: <code>Num</code>, to: <code>Num</code>, t: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.set_rotation_slerp_angle_axis_world(entity: <code>Entity</code>, axis: <code>Vec</code>, from: <code>Num</code>, to: <code>Num</code>, t: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.set_rotation_slerp(entity: <code>Entity</code>, from: <code>Vec</code>, to: <code>Vec</code>, t: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.set_rotation_slerp_world(entity: <code>Entity</code>, from: <code>Vec</code>, to: <code>Vec</code>, t: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.set_rotation(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set local rotation in quaternions.</p> <p>(Quaternions are how rotations are handled by the engine internally, though it can be hard to understand how to manipulate them, so feel free to stick to euler angles using <code>set_euler(entity, x, y, z)</code>.)   </p> <p> Transform.set_rotation_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, w: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set global rotation in quaternions.</p> <p>(Quaternions are how rotations are handled by the engine internally, though it can be hard to understand how to manipulate them, so feel free to stick to euler angles using <code>set_euler_world(entity, x, y, z)</code>.)   </p> <p> Transform.set_angle_axis(entity: <code>Entity</code>, degrees: <code>Any</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set local rotation as a rotation around an axis.</p> <p>Rotation direction is left-handed (counter-clockwise when looking in the direction of the axis.)   </p> <p> Transform.set_angle_axis_world(entity: <code>Entity</code>, degrees: <code>Any</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set global rotation as a rotation around an axis.</p> <p>Rotation direction is left-handed (counter-clockwise when looking in the direction of the axis.)   </p> <p> Transform.set_euler(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set local rotation as xyz euler angles.   </p> <p> Transform.set_euler_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set global rotation as xyz euler angles.   </p> <p> Transform.set_euler_x(entity: <code>Entity</code>, x: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.set_euler_y(entity: <code>Entity</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.set_euler_z(entity: <code>Entity</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.set_euler_x_world(entity: <code>Entity</code>, x: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.set_euler_y_world(entity: <code>Entity</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.set_euler_z_world(entity: <code>Entity</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.rotate_angle_axis_slerp(entity: <code>Entity</code>, axis: <code>Vec</code>, angle_amount: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.rotate_angle_axis_slerp_world(entity: <code>Entity</code>, axis: <code>Vec</code>, angle_amount: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.rotate_around_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, axis_x: <code>Num</code>, axis_y: <code>Num</code>, axis_z: <code>Num</code>, degrees: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Rotate around an axis in world space.   </p> <p> Transform.rotate_around(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, axis_x: <code>Num</code>, axis_y: <code>Num</code>, axis_z: <code>Num</code>, degrees: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Rotate around an axis in local space.   </p> <p> Transform.rotate_angle_axis(entity: <code>Entity</code>, degrees: <code>Any</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Rotate on the spot around an axis in local coordinates.   </p> <p> Transform.rotate_angle_axis_world(entity: <code>Entity</code>, degrees: <code>Any</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Rotate on the spot around an axis in global coordinates.   </p> <p> Transform.rotate_euler(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Rotate by euler angles in local space.   </p> <p> Transform.rotate_euler_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Rotate by euler angles in global space.   </p> <p> Transform.translate(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Move <code>Transform</code> in local space.   </p> <p> Transform.translate(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Move <code>Transform</code> in local space.   </p> <p> Transform.get_pos(entity: <code>Entity</code>) \u00b6 returns <code>Vec</code></p> <p>Get position local space (relative to link <code>Transform</code>).   </p> <p> Transform.get_pos_x(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_pos_y(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_pos_z(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_pos_world(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>Get position global space.   </p> <p> Transform.get_pos_world_unsnapped(entity: <code>Entity</code>) \u00b6 returns <code>Vec</code></p> <p>Get position global space independently of <code>set_snap</code> settings.   </p> <p> Transform.get_pos_x_world(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_pos_y_world(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_pos_z_world(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.rotate2D(entity: <code>Entity</code>, degrees: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Rotate the <code>Transform</code> in local space.</p> <p>This technically rotates around the z axis, since thats the only axis we care about in 2d contexts.   </p> <p> Transform.set_angle2D(entity: <code>Entity</code>, degrees: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the 2d angle in local space.</p> <p>This is technically the same as <code>set_euler_z</code>(doesnt touch x or y), since thats the only axis we care about in 2d contexts.   </p> <p> Transform.set_angle2D_world(entity: <code>Entity</code>, degrees: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the 2d angle in global space.</p> <p>This is technically the same as <code>set_euler_z</code>(doesnt touch x or y), since thats the only axis we care about in 2d contexts.   </p> <p> Transform.get_angle2D(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>Get the 2d angle in local space.</p> <p>This is technically the same as <code>get_euler_z</code>, since thats the only axis we care about in 2d contexts.   </p> <p> Transform.get_angle2D_world(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>Get the 2d angle in global space.</p> <p>This is technically the same as <code>get_euler_z_world</code>, since thats the only axis we care about in 2d contexts.   </p> <p> Transform.set_depth2D(entity: <code>Entity</code>, depth: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the local depth (relative to link <code>Transform</code>).</p> <p>This is technically the same as <code>set_pos_z</code>.   </p> <p> Transform.get_depth2D(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>Get the local depth (relative to link <code>Transform</code>).</p> <p>This is technically the same as <code>get_pos_z</code>.   </p> <p> Transform.set_depth2D_world(entity: <code>Entity</code>, depth: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the global depth.</p> <p>This is technically the same as <code>set_pos_z_world</code>.   </p> <p> Transform.get_depth2D_world(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>Get the global depth.</p> <p>This is technically the same as <code>get_pos_z_world</code>.   </p> <p> Transform.get_world_matrix(entity: <code>Entity</code>, into_matrix: <code>Floats</code>) \u00b6 returns <code>None</code></p> <p>Get 4x4 world transform matrix (column major array).</p> <pre><code>  var ent = Entity.create(app.world)\n  Transform.create(ent)\n  Transform.set_pos(ent, 2, 3, 4)\n  var matrix = Floats.new(16)\n  Transform.get_world_matrix(ent, matrix)\n  //matrix is now [1,0,0,0, 0,1,0,0, 0,0,1,0, 2,3,4,1]\n</code></pre> <p> Transform.get_rotation(entity: <code>Entity</code>) \u00b6 returns <code>Quat</code></p> <p>Get local quaternion rotation.</p> <p>(Note that quaternions can be unfamiliar and hard to manipulate, so if you're not familiar with them you might want to use <code>get_euler</code> instead)   </p> <p> Transform.get_rotation_world(entity: <code>Entity</code>) \u00b6 returns <code>Quat</code></p> <p>Get global quaternion rotation.</p> <p>(Note that quaternions can be unfamiliar and hard to manipulate, so if you're not familiar with them you might want to use <code>get_euler_world</code> instead)   </p> <p> Transform.get_rotation_matrix(entity: <code>Entity</code>, into_matrix: <code>Floats</code>) \u00b6 returns <code>None</code></p> <p>Get 4x4 world rotation matrix (column major array).   </p> <p> Transform.get_euler(entity: <code>Entity</code>) \u00b6 returns <code>Vec</code></p> <p>Get local euler angles.   </p> <p> Transform.get_euler_x(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_euler_y(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_euler_z(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_euler_world(entity: <code>Entity</code>) \u00b6 returns <code>Vec</code></p> <p>Get global euler angles.   </p> <p> Transform.get_euler_x_world(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_euler_y_world(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_euler_z_world(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_scale(entity: <code>Entity</code>) \u00b6 returns <code>Vec</code></p> <p>Get local scale.   </p> <p> Transform.get_scale_x(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_scale_y(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_scale_z(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_scale_world(entity: <code>Entity</code>) \u00b6 returns <code>Vec</code></p> <p>Get global scale. Note that through rotations and non-uniform scale in the transform link hierarchy, getting an accurate world scale might be impossible, making this lossy.   </p> <p> Transform.get_scale_x_world(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_scale_y_world(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_scale_z_world(entity: <code>Entity</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> Transform.get_right(entity: <code>Entity</code>) \u00b6 returns <code>Vec</code></p> <p>Get the \"right\" direction of the <code>Transform</code>. Same direction as the red arrow in the translation gizmo in the editor.   </p> <p> Transform.get_forward(entity: <code>Entity</code>) \u00b6 returns <code>Vec</code></p> <p>Get the \"forward\" direction of the <code>Transform</code>. Same direction as the green arrow in the translation gizmo in the editor.   </p> <p> Transform.get_up(entity: <code>Entity</code>) \u00b6 returns <code>Vec</code></p> <p>Get the \"up\" direction of the <code>Transform</code>. Same direction as the blue arrow in the translation gizmo in the editor.   </p> <p> Transform.sync(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Forces a sync of the <code>Transform</code>. Will trigger listen functions. This usually shouldn't be needed as <code>Transform</code> sync automatically when updated.   </p> <p> Transform.sync_block(entity: <code>Entity</code>, mask: <code>TransformApplyMask</code>) \u00b6 returns <code>None</code></p> <p>Forces a sync of the <code>Transform</code> block data. Will trigger block listener functions. This usually shouldn't be needed as <code>Transform</code> sync automatically when updated.   </p> <p> Transform.sync_world(world: <code>World</code>) \u00b6 returns <code>None</code></p> <p>Forces a sync of all <code>Transform</code> in a world. Will trigger listen functions. This usually shouldn't be needed as <code>Transform</code> sync automatically when updated.   </p> <p> Transform.transform_by(entity: <code>Entity</code>, other: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Transform the given entity by another entities transform. e.g set world using the other as a parent   </p> <p> Transform.scale_by(entity: <code>Entity</code>, scale: <code>Float3</code>, origin: <code>Float3</code>) \u00b6 returns <code>None</code></p> <p>Transform the given entity scale by the value around the given origin   </p> <p> Transform.rotate_euler_by(entity: <code>Entity</code>, euler: <code>Float3</code>, origin: <code>Float3</code>) \u00b6 returns <code>None</code></p> <p>Transform the given entity rotation around the origin, by euler amount (radians)   </p> <p> Transform.local_vector_to_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>Vec</code></p> <p>Convert a vector from local space to world space. (applies scale and rotation, but not translation)   </p> <p> Transform.world_vector_to_local(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>Vec</code></p> <p>Convert a vector from world space to local space. (applies scale and rotation, but not translation)   </p> <p> Transform.local_dir_to_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>Vec</code></p> <p>Convert a direction from local space to world space. (applies only rotation, not rotation or translation)   </p> <p> Transform.world_dir_to_local(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>Vec</code></p> <p>Convert a direction from world space to local space. (applies only rotation, not rotation or translation)   </p> <p> Transform.local_point_to_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>Vec</code></p> <p>Convert a point from local space to world space. (applies translation, rotation and scale)   </p> <p> Transform.local_point_to_world(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, scaled: <code>Bool</code>) \u00b6 returns <code>Vec</code></p> <p>Convert a point from local space to world space. (applies translation, rotation and optionally, scale)   </p> <p> Transform.world_point_to_local(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>) \u00b6 returns <code>Vec</code></p> <p>Convert a point from world space to local space. (applies translation, rotation and scale)   </p> <p> Transform.world_point_to_local(entity: <code>Entity</code>, x: <code>Num</code>, y: <code>Num</code>, z: <code>Num</code>, scaled: <code>Bool</code>) \u00b6 returns <code>Vec</code></p> <p>Convert a point from world space to local space. (applies translation, rotation and optionally, scale)   </p> <p> Transform.listen_all(world: <code>World</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>no docs found   </p> <p> Transform.unlisten_all(world: <code>World</code>, handle: <code>Handle</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Transform.listen(entity: <code>Entity</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>no docs found   </p> <p> Transform.unlisten(entity: <code>Entity</code>, handle: <code>Handle</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/transform.modifier/#transformapplymask","title":"TransformApplyMask","text":"<p><code>import \"luxe: system/transform.modifier\" for TransformApplyMask</code></p> <p>no docs found</p> <ul> <li>pos</li> <li>scale</li> <li>rotation</li> <li>modified</li> <li>all_modified</li> </ul> <p> TransformApplyMask.pos \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TransformApplyMask.scale \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TransformApplyMask.rotation \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TransformApplyMask.modified \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TransformApplyMask.all_modified \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/values.modifier/","title":"Values.modifier","text":""},{"location":"api/v/next/system/values.modifier/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/system/values.modifier/#luxe-systemvaluesmodifier-module","title":"<code>luxe: system/values.modifier</code> module","text":"<ul> <li>Data </li> <li>Value </li> <li>Values </li> <li>ValuesKind </li> <li>ValuesType </li> </ul>"},{"location":"api/v/next/system/values.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/values.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var values : List = []</code></li> </ul>"},{"location":"api/v/next/system/values.modifier/#value","title":"Value","text":"<p><code>import \"luxe: system/values.modifier\" for Value</code></p> <p>no docs found</p> <ul> <li><code>var kind : ValuesKind = ValuesKind.number</code></li> <li><code>var name : String = \"value\"</code></li> <li><code>var number : Num = 0</code></li> <li><code>var string : String = \"\"</code></li> <li><code>var boolean : Bool = false</code></li> <li><code>var float2 : Float2 = [0, 0]</code></li> <li><code>var float3 : Float3 = [0, 0, 0]</code></li> <li><code>var float4 : Float4 = [0, 0, 0, 0]</code></li> <li><code>var color : Color = [1, 1, 1, 1]</code></li> </ul>"},{"location":"api/v/next/system/values.modifier/#values","title":"Values","text":"<p><code>import \"luxe: system/values.modifier\" for Values</code></p> <p>Values is a modifier that lets you store Key -&gt; Value pairs. Store values like numbers,  strings, and colors on an entity, which can then be accessed by name (a Key).</p> <pre><code>//we can use an enum for keys\nclass Keys {\n  static watered { \"watered\" }\n  static apples { \"apples\" }\n}\nvar tree = Entity.create(world)\nValues.create(tree)\nValues.set(tree, Keys.watered, true)\nValues.set(tree, Keys.apples, 10)\nValues.set(tree, \"keys are strings\", true)\n\nvar watered = Values.get(tree, Keys.watered, false)\nvar apples = Values.get(tree, Keys.apples, -1)\nLog.print(\"The tree is %(watered ? \"watered\" : \"thirsty\") and has %(apples) apples!\")\n</code></pre> <ul> <li>create(entity: <code>Entity</code>)</li> <li>destroy(entity: <code>Entity</code>)</li> <li>has(entity: <code>Entity</code>)</li> <li>has_key(entity: <code>Entity</code>, key: <code>String</code>)</li> <li>remove_key(entity: <code>Entity</code>, key: <code>String</code>)</li> <li>get_keys(entity: <code>Entity</code>)</li> <li>get(entity: <code>Entity</code>, key: <code>String</code>, default: <code>Any</code>)</li> <li>set(entity: <code>Entity</code>, key: <code>String</code>, value: <code>Any</code>)</li> </ul> <p> Values.create(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Attach a <code>Values</code> modifier to <code>entity</code>.</p> <pre><code>var entity = Entity.create(world)\nValues.create(entity)\n</code></pre> <p> Values.destroy(entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>Detach and destroy the <code>Values</code> attached to <code>entity</code></p> <pre><code>Values.destroy(entity)\n</code></pre> <p> Values.has(entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if <code>entity</code> has a <code>Values</code> modifier attached.</p> <pre><code>if(Values.has(entity)) {\n  Log.print(\"Has a Values modifier!\")\n}\n</code></pre> <p> Values.has_key(entity: <code>Entity</code>, key: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true the entity's Values modifier has a value with the given 'key'</p> <pre><code>if(Values.has_key(entity, \"apples\")) {\n  Log.print(\"The tree has some apples!\")\n}\n</code></pre> <p> Values.remove_key(entity: <code>Entity</code>, key: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Removes a value by key from 'entity's Values modifier, if it exists</p> <pre><code>Values.remove_key(tree, \"apples\")\n</code></pre> <p> Values.get_keys(entity: <code>Entity</code>) \u00b6 returns <code>List</code></p> <p>Get a List of all the String keys for values on 'entity's Values modifier</p> <pre><code>var keys = Values.get_keys(grass)\nfor (key in keys) {\n  Log.print(\"Has Value Key: %(key)\")\n}\n</code></pre> <p> Values.get(entity: <code>Entity</code>, key: <code>String</code>, default: <code>Any</code>) \u00b6 returns <code>Any</code></p> <p>Get the current value stored with <code>key</code> on the Values modifier on <code>entity</code>, with a default value which is returned if the key isn't found.</p> <pre><code>var seeds = Values.get(watermelon, \"seeds\", 0)\nLog.print(\"The watermelon has %(seeds) seeds!\")\n</code></pre> <p> Values.set(entity: <code>Entity</code>, key: <code>String</code>, value: <code>Any</code>) \u00b6 returns <code>None</code></p> <p>Set the value stored at the 'key' on the Values modifier on 'entity'.</p> <pre><code>if(Values.has(seed)) {\n  Values.set(seed, \"planted\", true)\n}\n</code></pre>"},{"location":"api/v/next/system/values.modifier/#valueskind","title":"ValuesKind","text":"<p><code>import \"luxe: system/values.modifier\" for ValuesKind</code></p> <p>no docs found</p> <ul> <li>number</li> <li>string</li> <li>boolean</li> <li>float2</li> <li>float3</li> <li>float4</li> <li>color</li> </ul> <p> ValuesKind.number \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesKind.string \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesKind.boolean \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesKind.float2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesKind.float3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesKind.float4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesKind.color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/values.modifier/#valuestype","title":"ValuesType","text":"<p><code>import \"luxe: system/values.modifier\" for ValuesType</code></p> <p>no docs found</p> <ul> <li>unknown</li> <li>bool</li> <li>number</li> <li>string</li> <li>float2</li> <li>float3</li> <li>float4</li> <li>name(value: <code>Any</code>)</li> </ul> <p> ValuesType.unknown \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesType.bool \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesType.number \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesType.string \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesType.float2 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesType.float3 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesType.float4 \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ValuesType.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/vfx.modifier/","title":"Vfx.modifier","text":""},{"location":"api/v/next/system/vfx.modifier/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/system/vfx.modifier/#luxe-systemvfxmodifier-module","title":"<code>luxe: system/vfx.modifier</code> module","text":"<ul> <li>Data </li> <li>System </li> <li>Vfx </li> </ul>"},{"location":"api/v/next/system/vfx.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/vfx.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var asset : Asset = null</code></li> </ul>"},{"location":"api/v/next/system/vfx.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/vfx.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/vfx.modifier/#vfx","title":"Vfx","text":"<p><code>import \"luxe: system/vfx.modifier\" for Vfx</code></p> <p>no docs found</p>"},{"location":"api/v/next/system/wires.modifier/","title":"Wires.modifier","text":""},{"location":"api/v/next/system/wires.modifier/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/system/wires.modifier/#luxe-systemwiresmodifier-module","title":"<code>luxe: system/wires.modifier</code> module","text":"<ul> <li>Connection </li> <li>Data </li> <li>System </li> <li>WireNode </li> <li>WireTarget </li> <li>Wires </li> </ul>"},{"location":"api/v/next/system/wires.modifier/#connection","title":"Connection","text":"<p><code>import \"luxe: system/wires.modifier\" for Connection</code></p> <p>no docs found</p> <ul> <li><code>var from : WireTarget = Object</code></li> <li><code>var to : WireTarget = Object</code></li> </ul>"},{"location":"api/v/next/system/wires.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/wires.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var connections : List = []</code></li> </ul>"},{"location":"api/v/next/system/wires.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/wires.modifier\" for System</code></p> <p>no docs found</p> <ul> <li><code>var nodes : Map = {}</code></li> <li><code>var nodes_from_panel : Map = {}</code></li> <li><code>var right_panel : Control = 0</code></li> <li><code>var left_panel : Control = 0</code></li> <li><code>var world_editor : Any = null</code></li> <li>new(world: <code>World</code>)</li> <li>init(world: <code>World</code>)</li> <li>copy_target(src: <code>WireTarget</code>, to: <code>WireTarget</code>)</li> <li>refresh_entity(node: <code>WireNode</code>)</li> <li>get_drop_node(x: <code>Num</code>, y: <code>Num</code>)</li> <li>remove_block_connection(entity: <code>Entity</code>, target: <code>WireTarget</code>)</li> <li>find_connection_index(entity: <code>Entity</code>, target: <code>WireTarget</code>)</li> <li>find_wire_in_list(wires: <code>List</code>, wire_id: <code>Num</code>)</li> <li>find_wire(target: <code>WireTarget</code>)</li> <li>make_placeholder_wire(entity: <code>Entity</code>, do_doc: <code>Bool</code>)</li> <li>make_node(out: <code>Bool</code>, entity: <code>Entity</code>, from: <code>WireTarget</code>, to: <code>WireTarget</code>)</li> <li>refresh_wires(window: <code>UIPanel</code>, window_w: <code>Num</code>, but: <code>UIButton</code>)</li> <li>editor_init(world: <code>World</code>)</li> <li>editor_attach(entity: <code>Entity</code>, wires: <code>Data</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p> <p> System.init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.copy_target(src: <code>WireTarget</code>, to: <code>WireTarget</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.refresh_entity(node: <code>WireNode</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.get_drop_node(x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>WireNode</code></p> <p>no docs found   </p> <p> System.remove_block_connection(entity: <code>Entity</code>, target: <code>WireTarget</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.find_connection_index(entity: <code>Entity</code>, target: <code>WireTarget</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.find_wire_in_list(wires: <code>List</code>, wire_id: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.find_wire(target: <code>WireTarget</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.make_placeholder_wire(entity: <code>Entity</code>, do_doc: <code>Bool</code>) \u00b6 returns <code>Connection</code></p> <p>no docs found   </p> <p> System.make_node(out: <code>Bool</code>, entity: <code>Entity</code>, from: <code>WireTarget</code>, to: <code>WireTarget</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.refresh_wires(window: <code>UIPanel</code>, window_w: <code>Num</code>, but: <code>UIButton</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.editor_init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> System.editor_attach(entity: <code>Entity</code>, wires: <code>Data</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/wires.modifier/#wirenode","title":"WireNode","text":"<p><code>import \"luxe: system/wires.modifier\" for WireNode</code></p> <p>no docs found</p> <ul> <li><code>var uuid : String = ID.uuid</code></li> <li><code>var panel : UIPanel = null</code></li> <li><code>var entity : Entity = Entity.none</code></li> <li><code>var out : Bool = true</code></li> <li><code>var from : WireTarget = null</code></li> <li><code>var to : WireTarget = null</code></li> <li><code>var other_uuid : String = null</code></li> <li><code>var label : UILabel = null</code></li> <li><code>var change : UILabel = null</code></li> <li><code>var icon : UIImage = null</code></li> <li><code>var endpoint : Control = null</code></li> <li><code>var cable_control : Control = null</code></li> <li><code>var draw_control : Control = null</code></li> <li><code>var resolve_node : Fn = null</code></li> <li><code>var resolve_wire : Fn = null</code></li> <li><code>var cable : Cable = Cable.new</code></li> <li><code>var style : PathStyle = PathStyle.new</code></li> <li><code>var cable_phase : Num = 0</code></li> <li><code>var cable_drag : Bool = false</code></li> <li>valid_wire</li> <li>wire</li> <li>draw_depth</li> <li>order</li> <li>disconnect()</li> <li>new()</li> <li>destroy()</li> <li>highlight(state: <code>Bool</code>)</li> <li>from_entity</li> <li>to_entity</li> <li>from_node</li> <li>to_node</li> <li>make_cable()</li> </ul> <p> WireNode.valid_wire \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> WireNode.wire \u00b6 returns <code>WireData</code></p> <p>no docs found   </p> <p> WireNode.draw_depth \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> WireNode.order \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> WireNode.disconnect() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WireNode.new() \u00b6 returns <code>WireNode</code></p> <p>no docs found   </p> <p> WireNode.destroy() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WireNode.highlight(state: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> WireNode.from_entity \u00b6 returns <code>Entity</code></p> <p>no docs found   </p> <p> WireNode.to_entity \u00b6 returns <code>Entity</code></p> <p>no docs found   </p> <p> WireNode.from_node \u00b6 returns <code>WireNode</code></p> <p>no docs found   </p> <p> WireNode.to_node \u00b6 returns <code>WireNode</code></p> <p>no docs found   </p> <p> WireNode.make_cable() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/wires.modifier/#wiretarget","title":"WireTarget","text":"<p><code>import \"luxe: system/wires.modifier\" for WireTarget</code></p> <p>no docs found</p> <ul> <li><code>var wire : Num = 0</code></li> <li><code>var link : Link = null</code></li> <li><code>var context : Asset = null</code></li> <li><code>var order : Num = 0</code></li> <li><code>var split : Bool = false</code></li> </ul>"},{"location":"api/v/next/system/wires.modifier/#wires","title":"Wires","text":"<p><code>import \"luxe: system/wires.modifier\" for Wires</code></p> <p>no docs found</p>"},{"location":"api/v/next/system/physics/body3D.modifier/","title":"body3D.modifier","text":""},{"location":"api/v/next/system/physics/body3D.modifier/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/system/physics/body3D.modifier/#luxe-systemphysicsbody3dmodifier-module","title":"<code>luxe: system/physics/body3D.modifier</code> module","text":"<ul> <li>Body3D </li> <li>Data </li> <li>MotionQuality </li> <li>MotionType </li> <li>System </li> </ul>"},{"location":"api/v/next/system/physics/body3D.modifier/#body3d","title":"Body3D","text":"<p><code>import \"luxe: system/physics/body3D.modifier\" for Body3D</code></p> <p>no docs found</p> <ul> <li>unlisten(entity: <code>Entity</code>, handle: <code>Handle</code>)</li> <li>listen(entity: <code>Entity</code>, fn: <code>Fn</code>)</li> </ul> <p> Body3D.unlisten(entity: <code>Entity</code>, handle: <code>Handle</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Body3D.listen(entity: <code>Entity</code>, fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/physics/body3D.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/physics/body3D.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var motion_type : MotionType = MotionType.is_static</code></li> <li><code>var motion_quality : MotionQuality = MotionQuality.discrete</code></li> <li><code>var is_sensor : Bool = false</code></li> <li><code>var allow_sleeping : Bool = true</code></li> <li><code>var friction : Num = 0.2</code></li> <li><code>var restitution : Num = 0.0</code></li> <li><code>var linear_damping : Num = 0.05</code></li> <li><code>var angular_damping : Num = 0.05</code></li> <li><code>var max_linear_velocity : Num = 500.0</code></li> <li><code>var max_angular_velocity : Num = 2700</code></li> <li><code>var gravity_factor : Num = 1</code></li> <li><code>var mass : Num = 1</code></li> <li><code>var lock_movement : Float3 = [0, 0, 0]</code></li> <li><code>var lock_rotation : Float3 = [0, 0, 0]</code></li> <li><code>var use_manifold_reduction : Bool = true</code></li> <li><code>var allow_dynamic_or_kinematic : Bool = false</code></li> <li><code>var collide_kinematic_vs_non_dynamic : Bool = false</code></li> <li><code>var apply_gyroscopic_force : Bool = false</code></li> <li><code>var enhanced_internal_edge_removal : Bool = false</code></li> <li><code>var velocity_steps_override : Num = 0</code></li> <li><code>var position_steps_override : Num = 0</code></li> </ul>"},{"location":"api/v/next/system/physics/body3D.modifier/#motionquality","title":"MotionQuality","text":"<p><code>import \"luxe: system/physics/body3D.modifier\" for MotionQuality</code></p> <p>no docs found</p> <ul> <li>discrete</li> <li>linear_cast</li> </ul> <p> MotionQuality.discrete \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MotionQuality.linear_cast \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/physics/body3D.modifier/#motiontype","title":"MotionType","text":"<p><code>import \"luxe: system/physics/body3D.modifier\" for MotionType</code></p> <p>no docs found</p> <ul> <li>is_static</li> <li>is_dynamic</li> <li>is_kinematic</li> </ul> <p> MotionType.is_static \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MotionType.is_dynamic \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> MotionType.is_kinematic \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/physics/body3D.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/physics/body3D.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> <li>init(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p> <p> System.init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/physics/box_collider3D.modifier/","title":"box collider3D.modifier","text":""},{"location":"api/v/next/system/physics/box_collider3D.modifier/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/system/physics/box_collider3D.modifier/#luxe-systemphysicsbox_collider3dmodifier-module","title":"<code>luxe: system/physics/box_collider3D.modifier</code> module","text":"<ul> <li>BoxCollider3D </li> <li>Data </li> <li>System </li> </ul>"},{"location":"api/v/next/system/physics/box_collider3D.modifier/#boxcollider3d","title":"BoxCollider3D","text":"<p><code>import \"luxe: system/physics/box_collider3D.modifier\" for BoxCollider3D</code></p> <p>no docs found</p>"},{"location":"api/v/next/system/physics/box_collider3D.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/physics/box_collider3D.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var body : Link = null</code></li> <li><code>var density : Num = 1000</code></li> <li><code>var size : Float3 = [1, 1, 1]</code></li> </ul>"},{"location":"api/v/next/system/physics/box_collider3D.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/physics/box_collider3D.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> <li>init(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p> <p> System.init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/physics/capsule_collider3D.modifier/","title":"capsule collider3D.modifier","text":""},{"location":"api/v/next/system/physics/capsule_collider3D.modifier/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/system/physics/capsule_collider3D.modifier/#luxe-systemphysicscapsule_collider3dmodifier-module","title":"<code>luxe: system/physics/capsule_collider3D.modifier</code> module","text":"<ul> <li>CapsuleCollider3D </li> <li>Data </li> <li>System </li> </ul>"},{"location":"api/v/next/system/physics/capsule_collider3D.modifier/#capsulecollider3d","title":"CapsuleCollider3D","text":"<p><code>import \"luxe: system/physics/capsule_collider3D.modifier\" for CapsuleCollider3D</code></p> <p>no docs found</p>"},{"location":"api/v/next/system/physics/capsule_collider3D.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/physics/capsule_collider3D.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var body : Link = null</code></li> <li><code>var density : Num = 1000</code></li> <li><code>var height : Num = 2</code></li> <li><code>var width : Num = 1</code></li> </ul>"},{"location":"api/v/next/system/physics/capsule_collider3D.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/physics/capsule_collider3D.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> <li>init(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p> <p> System.init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/physics/cast_ray.block/","title":"Cast ray.block","text":""},{"location":"api/v/next/system/physics/cast_ray.block/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/system/physics/cast_ray.block/#luxe-systemphysicscast_rayblock-module","title":"<code>luxe: system/physics/cast_ray.block</code> module","text":"<ul> <li>CastRayResult </li> </ul>"},{"location":"api/v/next/system/physics/cast_ray.block/#castrayresult","title":"CastRayResult","text":"<p><code>import \"luxe: system/physics/cast_ray.block\" for CastRayResult</code></p> <p>no docs found</p> <ul> <li><code>var body_entity : Num = 0</code></li> <li><code>var collider_entity : Num = 0</code></li> <li><code>var pos : Double3 = [0, 0, 0]</code></li> <li><code>var normal : Float3 = [0, 1, 0]</code></li> <li><code>var distance : Num = 0</code></li> </ul>"},{"location":"api/v/next/system/physics/character3D.modifier/","title":"character3D.modifier","text":""},{"location":"api/v/next/system/physics/character3D.modifier/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/system/physics/character3D.modifier/#luxe-systemphysicscharacter3dmodifier-module","title":"<code>luxe: system/physics/character3D.modifier</code> module","text":"<ul> <li>BackFaceMode </li> <li>Character3D </li> <li>Data </li> <li>System </li> </ul>"},{"location":"api/v/next/system/physics/character3D.modifier/#backfacemode","title":"BackFaceMode","text":"<p><code>import \"luxe: system/physics/character3D.modifier\" for BackFaceMode</code></p> <p>no docs found</p> <ul> <li>ignore</li> <li>collide</li> </ul> <p> BackFaceMode.ignore \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BackFaceMode.collide \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/physics/character3D.modifier/#character3d","title":"Character3D","text":"<p><code>import \"luxe: system/physics/character3D.modifier\" for Character3D</code></p> <p>no docs found</p>"},{"location":"api/v/next/system/physics/character3D.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/physics/character3D.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var target : Link = null</code></li> <li><code>var height : Num = 2</code></li> <li><code>var width : Num = 1</code></li> <li><code>var input : Float3 = [0, 0, 0]</code></li> <li><code>var speed : Num = 1</code></li> <li><code>var velocity : Float3 = [0, 0, 0]</code></li> <li><code>var mass : Num = 70</code></li> <li><code>var max_strength : Num = 100</code></li> <li><code>var shape_offset : Float3 = [0, 0, 0]</code></li> <li><code>var backface_mode : BackFaceMode = BackFaceMode.collide</code></li> <li><code>var predictive_contact_distance : Num = 0.1</code></li> <li><code>var max_collision_iterations : Num = 5</code></li> <li><code>var max_constraint_iterations : Num = 5</code></li> <li><code>var min_time_remaining : Num = 0.0001</code></li> <li><code>var collision_tolerance : Num = 0.001</code></li> <li><code>var character_padding : Num = 0.02</code></li> <li><code>var max_hits : Num = 256</code></li> <li><code>var hit_reduction_cos_max_angle : Num = 0.999</code></li> <li><code>var penetration_recovery_speed : Num = 1</code></li> </ul>"},{"location":"api/v/next/system/physics/character3D.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/physics/character3D.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> <li>init(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p> <p> System.init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/physics/contact.block/","title":"Contact.block","text":""},{"location":"api/v/next/system/physics/contact.block/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/system/physics/contact.block/#luxe-systemphysicscontactblock-module","title":"<code>luxe: system/physics/contact.block</code> module","text":"<ul> <li>Contact </li> <li>ContactHelper </li> <li>ContactKind </li> </ul>"},{"location":"api/v/next/system/physics/contact.block/#contact","title":"Contact","text":"<p><code>import \"luxe: system/physics/contact.block\" for Contact</code></p> <p>no docs found</p> <ul> <li><code>var kind : ContactKind = ContactKind.none</code></li> <li><code>var body : Num = 0</code></li> <li><code>var collider : Num = 0</code></li> <li><code>var contacts : List = []</code></li> <li><code>var other_body : Num = 0</code></li> <li><code>var other_collider : Num = 0</code></li> <li><code>var other_contacts : List = []</code></li> <li><code>var normal : Float3 = [0, 0, 0]</code></li> <li><code>var overlap : Num = 0</code></li> </ul>"},{"location":"api/v/next/system/physics/contact.block/#contacthelper","title":"ContactHelper","text":"<p><code>import \"luxe: system/physics/contact.block\" for ContactHelper</code></p> <p>no docs found</p> <ul> <li>get_other(body: <code>Entity</code>, contact: <code>Contact</code>)</li> <li>get_other_collider(collider: <code>Entity</code>, contact: <code>Contact</code>)</li> </ul> <p> ContactHelper.get_other(body: <code>Entity</code>, contact: <code>Contact</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ContactHelper.get_other_collider(collider: <code>Entity</code>, contact: <code>Contact</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/physics/contact.block/#contactkind","title":"ContactKind","text":"<p><code>import \"luxe: system/physics/contact.block\" for ContactKind</code></p> <p>no docs found</p> <ul> <li>none</li> <li>begin</li> <li>end</li> <li>active</li> </ul> <p> ContactKind.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ContactKind.begin \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ContactKind.end \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ContactKind.active \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/physics/mesh_collider3D.modifier/","title":"mesh collider3D.modifier","text":""},{"location":"api/v/next/system/physics/mesh_collider3D.modifier/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/system/physics/mesh_collider3D.modifier/#luxe-systemphysicsmesh_collider3dmodifier-module","title":"<code>luxe: system/physics/mesh_collider3D.modifier</code> module","text":"<ul> <li>Data </li> <li>MeshCollider3D </li> <li>System </li> </ul>"},{"location":"api/v/next/system/physics/mesh_collider3D.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/physics/mesh_collider3D.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var body : Link = null</code></li> <li><code>var mesh : Asset = null</code></li> <li><code>var level : Num = 0</code></li> </ul>"},{"location":"api/v/next/system/physics/mesh_collider3D.modifier/#meshcollider3d","title":"MeshCollider3D","text":"<p><code>import \"luxe: system/physics/mesh_collider3D.modifier\" for MeshCollider3D</code></p> <p>no docs found</p>"},{"location":"api/v/next/system/physics/mesh_collider3D.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/physics/mesh_collider3D.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> <li>init(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p> <p> System.init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/physics/physics3D.modifier/","title":"physics3D.modifier","text":""},{"location":"api/v/next/system/physics/physics3D.modifier/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/system/physics/physics3D.modifier/#luxe-systemphysicsphysics3dmodifier-module","title":"<code>luxe: system/physics/physics3D.modifier</code> module","text":"<ul> <li>Data </li> <li>Physics3D </li> <li>System </li> </ul>"},{"location":"api/v/next/system/physics/physics3D.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/physics/physics3D.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var gravity : Float3 = [0, -9.8, 0]</code></li> </ul>"},{"location":"api/v/next/system/physics/physics3D.modifier/#physics3d","title":"Physics3D","text":"<p><code>import \"luxe: system/physics/physics3D.modifier\" for Physics3D</code></p> <p>no docs found</p> <ul> <li>create_in(world: <code>World</code>)</li> <li>cast_ray_closest(world: <code>World</code>, origin: <code>Float3</code>, dir: <code>Float3</code>, distance: <code>Num</code>)</li> <li>cast_ray(world: <code>World</code>, origin: <code>Float3</code>, dir: <code>Float3</code>, distance: <code>Num</code>)</li> <li>set_debug_draw(world: <code>World</code>, state: <code>Bool</code>)</li> <li>unlisten(world: <code>World</code>, handle: <code>Handle</code>)</li> <li>listen(world: <code>World</code>, fn: <code>Fn</code>)</li> </ul> <p> Physics3D.create_in(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Physics3D.cast_ray_closest(world: <code>World</code>, origin: <code>Float3</code>, dir: <code>Float3</code>, distance: <code>Num</code>) \u00b6 returns <code>CastRayResult</code></p> <p>no docs found   </p> <p> Physics3D.cast_ray(world: <code>World</code>, origin: <code>Float3</code>, dir: <code>Float3</code>, distance: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>Cast a ray into the world and return all hits, sorted by closest first   </p> <p> Physics3D.set_debug_draw(world: <code>World</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Physics3D.unlisten(world: <code>World</code>, handle: <code>Handle</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Physics3D.listen(world: <code>World</code>, fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/physics/physics3D.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/physics/physics3D.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> <li>init(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p> <p> System.init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/system/physics/sphere_collider3D.modifier/","title":"sphere collider3D.modifier","text":""},{"location":"api/v/next/system/physics/sphere_collider3D.modifier/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/system/physics/sphere_collider3D.modifier/#luxe-systemphysicssphere_collider3dmodifier-module","title":"<code>luxe: system/physics/sphere_collider3D.modifier</code> module","text":"<ul> <li>Data </li> <li>SphereCollider3D </li> <li>System </li> </ul>"},{"location":"api/v/next/system/physics/sphere_collider3D.modifier/#data","title":"Data","text":"<p><code>import \"luxe: system/physics/sphere_collider3D.modifier\" for Data</code></p> <p>no docs found</p> <ul> <li><code>var body : Link = null</code></li> <li><code>var density : Num = 1000</code></li> <li><code>var radius : Num = 1</code></li> </ul>"},{"location":"api/v/next/system/physics/sphere_collider3D.modifier/#spherecollider3d","title":"SphereCollider3D","text":"<p><code>import \"luxe: system/physics/sphere_collider3D.modifier\" for SphereCollider3D</code></p> <p>no docs found</p>"},{"location":"api/v/next/system/physics/sphere_collider3D.modifier/#system","title":"System","text":"<p><code>import \"luxe: system/physics/sphere_collider3D.modifier\" for System</code></p> <p>no docs found</p> <ul> <li>new(world: <code>World</code>)</li> <li>init(world: <code>World</code>)</li> </ul> <p> System.new(world: <code>World</code>) \u00b6 returns <code>System</code></p> <p>no docs found   </p> <p> System.init(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/block/","title":"Block","text":""},{"location":"api/v/next/ui/block/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/ui/block/#luxe-uiblock-module","title":"<code>luxe: ui/block</code> module","text":"<ul> <li>BlockListener </li> <li>ModifiedPip </li> <li>UIBlock </li> <li>UIBlockAssetEvent </li> <li>UIBlockChange </li> <li>UIBlockChangeType </li> <li>UIBlockEventType </li> <li>UIBlockLinkEvent </li> <li>UIBlockState </li> </ul>"},{"location":"api/v/next/ui/block/#blocklistener","title":"BlockListener","text":"<p><code>import \"luxe: ui/block\" for BlockListener</code></p> <p>no docs found</p> <ul> <li>block</li> <li>handle</li> <li>new(block: <code>Block</code>, handle: <code>Handle</code>)</li> </ul> <p> BlockListener.block \u00b6 returns <code>Block</code></p> <p>no docs found   </p> <p> BlockListener.handle \u00b6 returns <code>Handle</code></p> <p>no docs found   </p> <p> BlockListener.new(block: <code>Block</code>, handle: <code>Handle</code>) \u00b6 returns <code>BlockListener</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/block/#modifiedpip","title":"ModifiedPip","text":"<p><code>import \"luxe: ui/block\" for ModifiedPip</code></p> <p>no docs found</p> <ul> <li>control</li> <li>kind</li> <li>kind=(value : BlockFieldModified)</li> <li>color</li> <li>new(ui: <code>UI</code>, kind: <code>BlockFieldModified</code>)</li> </ul> <p> ModifiedPip.control \u00b6 returns <code>Control</code></p> <p>no docs found   </p> <p> ModifiedPip.kind \u00b6 returns <code>BlockFieldModified</code></p> <p>no docs found   </p> <p> ModifiedPip.kind=(value : BlockFieldModified) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifiedPip.color \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifiedPip.new(ui: <code>UI</code>, kind: <code>BlockFieldModified</code>) \u00b6 returns <code>ModifiedPip</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/block/#uiblock","title":"UIBlock","text":"<p><code>import \"luxe: ui/block\" for UIBlock</code></p> <p>no docs found</p> <ul> <li>create(ui: <code>Entity</code>)</li> <li>set_block_instance(control: <code>Control</code>, block: <code>Block</code>, instance: <code>BlockInstance</code>)</li> <li>set_block_instances(control: <code>Control</code>, block: <code>Block</code>, instances: <code>List</code>)</li> <li>set_blocks_instances(control: <code>Control</code>, blocks: <code>List</code>, instances: <code>List</code>)</li> <li>set_sizes(control: <code>Control</code>, label_width: <code>Num</code>, label_size: <code>Num</code>, field_height: <code>Num</code>)</li> <li>refresh(control: <code>Control</code>)</li> <li>get_handle_assets(control: <code>Control</code>)</li> <li>set_handle_assets(control: <code>Control</code>, yes: <code>Bool</code>)</li> <li>set_show_defaults(control: <code>Control</code>, yes: <code>Bool</code>)</li> <li>get_block_fields(control: <code>Any</code>)</li> </ul> <p> UIBlock.create(ui: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlock.set_block_instance(control: <code>Control</code>, block: <code>Block</code>, instance: <code>BlockInstance</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlock.set_block_instances(control: <code>Control</code>, block: <code>Block</code>, instances: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlock.set_blocks_instances(control: <code>Control</code>, blocks: <code>List</code>, instances: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlock.set_sizes(control: <code>Control</code>, label_width: <code>Num</code>, label_size: <code>Num</code>, field_height: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlock.refresh(control: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlock.get_handle_assets(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> UIBlock.set_handle_assets(control: <code>Control</code>, yes: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UIBlock.set_show_defaults(control: <code>Control</code>, yes: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlock.get_block_fields(control: <code>Any</code>) \u00b6 returns <code>Map</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/block/#uiblockassetevent","title":"UIBlockAssetEvent","text":"<p><code>import \"luxe: ui/block\" for UIBlockAssetEvent</code></p> <p>no docs found</p> <ul> <li>tags</li> <li>original</li> <li>new(tags_in: <code>List</code>, original_in: <code>String</code>, fn: <code>Fn</code>)</li> <li>done(value: <code>String</code>)</li> </ul> <p> UIBlockAssetEvent.tags \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> UIBlockAssetEvent.original \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> UIBlockAssetEvent.new(tags_in: <code>List</code>, original_in: <code>String</code>, fn: <code>Fn</code>) \u00b6 returns <code>UIBlockAssetEvent</code></p> <p>no docs found   </p> <p> UIBlockAssetEvent.done(value: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/block/#uiblockchange","title":"UIBlockChange","text":"<p><code>import \"luxe: ui/block\" for UIBlockChange</code></p> <p>A change in the block ui can inside a nested block, each with it's own individual instance, list of nested fields, and list of  nested array index values each step down. This tracks that for changes.</p> <ul> <li><code>var change_id : Any = null</code></li> <li>new(kind: <code>UIBlockChangeType</code>, root: <code>Block</code>, root_instance: <code>BlockInstance</code>, blocks: <code>List</code>, instances: <code>List</code>, fields: <code>List</code>, indices: <code>List</code>, edit_value: <code>Any</code>)</li> <li>refresh()</li> <li>handle()</li> <li>set_refresh(fn: <code>Fn</code>)</li> <li>set_handler(fn: <code>Fn</code>)</li> <li>kind</li> <li>block</li> <li>instance</li> <li>blocks</li> <li>instances</li> <li>field</li> <li>array_indices</li> <li>field_index(idx: <code>Num</code>)</li> <li>default</li> <li>get_field_value()</li> <li>get_leaf_value()</li> <li>leaf_block</li> <li>leaf_instance</li> <li>leaf_field_index</li> <li>leaf_array_index</li> <li>get_change_value()</li> <li>field_is_array()</li> <li>field_is_object()</li> <li>value</li> <li>edit_value</li> </ul> <p> UIBlockChange.new(kind: <code>UIBlockChangeType</code>, root: <code>Block</code>, root_instance: <code>BlockInstance</code>, blocks: <code>List</code>, instances: <code>List</code>, fields: <code>List</code>, indices: <code>List</code>, edit_value: <code>Any</code>) \u00b6 returns <code>UIBlockChange</code></p> <p>no docs found   </p> <p> UIBlockChange.refresh() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockChange.handle() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockChange.set_refresh(fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockChange.set_handler(fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockChange.kind \u00b6 returns <code>UIBlockChangeType</code></p> <p>The type of change event   </p> <p> UIBlockChange.block \u00b6 returns <code>Block</code></p> <p>The root block in which the change occurred   </p> <p> UIBlockChange.instance \u00b6 returns <code>Num</code></p> <p>The instance of the root block   </p> <p> UIBlockChange.blocks \u00b6 returns <code>List</code></p> <p>The list of blocks down the chain e.g some.nested.field   </p> <p> UIBlockChange.instances \u00b6 returns <code>List</code></p> <p>The list of instances for each block down the chain e.g some.nested.field   </p> <p> UIBlockChange.field \u00b6 returns <code>List</code></p> <p>The list of nested fields for each block, e.g some.nested.field -&gt; [\"some\", \"nested\", \"field\"]   </p> <p> UIBlockChange.array_indices \u00b6 returns <code>Num</code></p> <p>The array index for each nested block. e.g some.nested[2].block[3] is [0, 2, 3]   </p> <p> UIBlockChange.field_index(idx: <code>Num</code>) \u00b6 returns <code>Num</code></p> <p>The field index for the field in the fields list.    e.g [\"some\", \"nested\", \"field\"] -&gt; field_index[1] returns the field index of nested in the second block down   </p> <p> UIBlockChange.default \u00b6 returns <code>Any</code></p> <p>The default value in the leaf block for this field   </p> <p> UIBlockChange.get_field_value() \u00b6 returns <code>Any</code></p> <p>The current value in the leaf block for this field (e.g for an array, returns the contents of the array)   </p> <p> UIBlockChange.get_leaf_value() \u00b6 returns <code>Any</code></p> <p>The current value in the leaf for this block/field/array?   </p> <p> UIBlockChange.leaf_block \u00b6 returns <code>Block</code></p> <p>no docs found   </p> <p> UIBlockChange.leaf_instance \u00b6 returns <code>BlockInstance</code></p> <p>no docs found   </p> <p> UIBlockChange.leaf_field_index \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> UIBlockChange.leaf_array_index \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> UIBlockChange.get_change_value() \u00b6 returns <code>Any</code></p> <p>no docs found   </p> <p> UIBlockChange.field_is_array() \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> UIBlockChange.field_is_object() \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> UIBlockChange.value \u00b6 returns <code>Any</code></p> <p>The intended change value based on type   </p> <p> UIBlockChange.edit_value \u00b6 returns <code>Any</code></p> <p>The value from the ui at the time of the change   </p>"},{"location":"api/v/next/ui/block/#uiblockchangetype","title":"UIBlockChangeType","text":"<p><code>import \"luxe: ui/block\" for UIBlockChangeType</code></p> <p>no docs found</p> <ul> <li>NORMAL</li> <li>RESET</li> <li>ARRAY_ADD</li> <li>ARRAY_REMOVE</li> <li>ARRAY_CLEAR</li> <li>ARRAY_RESET</li> <li>ARRAY_ELEMENT_RESET</li> <li>ARRAY_REORDER</li> <li>BLOCK</li> </ul> <p> UIBlockChangeType.NORMAL \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockChangeType.RESET \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockChangeType.ARRAY_ADD \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockChangeType.ARRAY_REMOVE \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockChangeType.ARRAY_CLEAR \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockChangeType.ARRAY_RESET \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockChangeType.ARRAY_ELEMENT_RESET \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockChangeType.ARRAY_REORDER \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockChangeType.BLOCK \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/block/#uiblockeventtype","title":"UIBlockEventType","text":"<p><code>import \"luxe: ui/block\" for UIBlockEventType</code></p> <p>no docs found</p> <ul> <li>asset</li> <li>link</li> </ul> <p> UIBlockEventType.asset \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockEventType.link \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/block/#uiblocklinkevent","title":"UIBlockLinkEvent","text":"<p><code>import \"luxe: ui/block\" for UIBlockLinkEvent</code></p> <p>no docs found</p> <ul> <li>original</li> <li>tag</li> <li>from_drop</li> <li>drop_payload</li> <li>new(original_in: <code>List</code>, tag: <code>ID32</code>, fn: <code>Fn</code>)</li> <li>new(original_in: <code>List</code>, tag: <code>ID32</code>, drop_payload: <code>Handle</code>, fn: <code>Fn</code>)</li> <li>done(value: <code>List</code>)</li> </ul> <p> UIBlockLinkEvent.original \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> UIBlockLinkEvent.tag \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> UIBlockLinkEvent.from_drop \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> UIBlockLinkEvent.drop_payload \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> UIBlockLinkEvent.new(original_in: <code>List</code>, tag: <code>ID32</code>, fn: <code>Fn</code>) \u00b6 returns <code>UIBlockLinkEvent</code></p> <p>no docs found   </p> <p> UIBlockLinkEvent.new(original_in: <code>List</code>, tag: <code>ID32</code>, drop_payload: <code>Handle</code>, fn: <code>Fn</code>) \u00b6 returns <code>UIBlockLinkEvent</code></p> <p>no docs found   </p> <p> UIBlockLinkEvent.done(value: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/block/#uiblockstate","title":"UIBlockState","text":"<p><code>import \"luxe: ui/block\" for UIBlockState</code></p> <p>no docs found</p> <ul> <li>new(ui: <code>Entity</code>, control: <code>Control</code>)</li> <li>get_block_fields()</li> <li>set_show_defaults(show_defaults: <code>Any</code>)</li> <li>clear_listeners()</li> <li>handle_assets</li> <li>handle_assets=(v : Bool)</li> <li>field_h</li> <li>label_w</li> <li>set_sizes(label_width: <code>Num</code>, label_size: <code>Num</code>, field_height: <code>Num</code>)</li> <li>set_instance(block: <code>Block</code>, instance: <code>BlockInstance</code>)</li> <li>set_instances(block: <code>Block</code>, instances: <code>List</code>)</li> <li>set_blocks_instances(blocks: <code>List</code>, instances: <code>List</code>)</li> <li>do_refresh()</li> <li>refresh()</li> <li>make_vec(view: <code>ValueView</code>)</li> <li>make_color(view: <code>ValueView</code>)</li> <li>make_num(view: <code>ValueView</code>)</li> <li>make_text(view: <code>ValueView</code>)</li> <li>get_asset_picks(types: <code>Any</code>)</li> <li>make_asset(view: <code>ValueView</code>)</li> <li>make_link(view: <code>ValueView</code>)</li> <li>make_path(view: <code>ValueView</code>, tag: <code>Num</code>)</li> <li>make_empty_object(name: <code>String</code>)</li> <li>make_empty_object(name: <code>String</code>, display: <code>String</code>)</li> <li>make_multiple_message()</li> <li>make_message(display: <code>String</code>)</li> <li>make_bool(default: <code>Bool</code>)</li> <li>make_options(options: <code>List</code>, default: <code>String</code>)</li> <li>make_object_field(name: <code>String</code>, view: <code>ValueView</code>)</li> <li>make_options_field(view: <code>ValueView</code>)</li> <li>make_field(name: <code>String</code>, type: <code>BlockFieldType</code>, view: <code>ValueView</code>)</li> <li>make_object(name: <code>String</code>)</li> <li>make_object(name: <code>String</code>, title_color: <code>Color</code>)</li> <li>make_object(name: <code>String</code>, details: <code>String</code>, title_color: <code>Color</code>)</li> <li>make_label(name: <code>String</code>, width: <code>Num</code>)</li> <li>p(depth: <code>Any</code>, value: <code>Any</code>)</li> <li>dump_info(control: <code>Control</code>, d: <code>Num</code>)</li> <li>make_mod_pip(kind: <code>BlockFieldModified</code>)</li> <li>get_changes(kind: <code>UIBlockChange</code>, value: <code>ValueView</code>, edit_value: <code>Any</code>)</li> <li>get_changes(kind: <code>UIBlockChange</code>, value: <code>ValueView</code>, edit_value: <code>Any</code>, edit_value_fn: <code>Fn</code>)</li> <li>get_changes(kind: <code>UIBlockChange</code>, value: <code>ValueView</code>, change_id: <code>String</code>, edit_value: <code>Any</code>, edit_value_fn: <code>Fn</code>)</li> <li>make_block(instance_view: <code>InstanceView</code>, into: <code>Control</code>)</li> <li>make_block(instance_view: <code>InstanceView</code>, into: <code>Control</code>, indent: <code>Num</code>)</li> <li>hide_tip(from: <code>Control</code>)</li> <li>show_tip(tooltip: <code>String</code>, control: <code>Control</code>)</li> <li>make_group(name: <code>Any</code>)</li> </ul> <p> UIBlockState.new(ui: <code>Entity</code>, control: <code>Control</code>) \u00b6 returns <code>UIBlockState</code></p> <p>no docs found   </p> <p> UIBlockState.get_block_fields() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.set_show_defaults(show_defaults: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.clear_listeners() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.handle_assets \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> UIBlockState.handle_assets=(v : Bool) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.field_h \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.label_w \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.set_sizes(label_width: <code>Num</code>, label_size: <code>Num</code>, field_height: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.set_instance(block: <code>Block</code>, instance: <code>BlockInstance</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.set_instances(block: <code>Block</code>, instances: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.set_blocks_instances(blocks: <code>List</code>, instances: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.do_refresh() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.refresh() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.make_vec(view: <code>ValueView</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.make_color(view: <code>ValueView</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.make_num(view: <code>ValueView</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.make_text(view: <code>ValueView</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.get_asset_picks(types: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.make_asset(view: <code>ValueView</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.make_link(view: <code>ValueView</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.make_path(view: <code>ValueView</code>, tag: <code>Num</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.make_empty_object(name: <code>String</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.make_empty_object(name: <code>String</code>, display: <code>String</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.make_multiple_message() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.make_message(display: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.make_bool(default: <code>Bool</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.make_options(options: <code>List</code>, default: <code>String</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.make_object_field(name: <code>String</code>, view: <code>ValueView</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.make_options_field(view: <code>ValueView</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.make_field(name: <code>String</code>, type: <code>BlockFieldType</code>, view: <code>ValueView</code>) \u00b6 returns <code>Field</code></p> <p>no docs found   </p> <p> UIBlockState.make_object(name: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.make_object(name: <code>String</code>, title_color: <code>Color</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.make_object(name: <code>String</code>, details: <code>String</code>, title_color: <code>Color</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.make_label(name: <code>String</code>, width: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.p(depth: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.dump_info(control: <code>Control</code>, d: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.make_mod_pip(kind: <code>BlockFieldModified</code>) \u00b6 returns <code>ModifiedPip</code></p> <p>no docs found   </p> <p> UIBlockState.get_changes(kind: <code>UIBlockChange</code>, value: <code>ValueView</code>, edit_value: <code>Any</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> UIBlockState.get_changes(kind: <code>UIBlockChange</code>, value: <code>ValueView</code>, edit_value: <code>Any</code>, edit_value_fn: <code>Fn</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> UIBlockState.get_changes(kind: <code>UIBlockChange</code>, value: <code>ValueView</code>, change_id: <code>String</code>, edit_value: <code>Any</code>, edit_value_fn: <code>Fn</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> UIBlockState.make_block(instance_view: <code>InstanceView</code>, into: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.make_block(instance_view: <code>InstanceView</code>, into: <code>Control</code>, indent: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.hide_tip(from: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.show_tip(tooltip: <code>String</code>, control: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIBlockState.make_group(name: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/button/","title":"Button","text":""},{"location":"api/v/next/ui/button/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/ui/button/#luxe-uibutton-module","title":"<code>luxe: ui/button</code> module","text":"<ul> <li>UIButton </li> </ul>"},{"location":"api/v/next/ui/button/#uibutton","title":"UIButton","text":"<p><code>import \"luxe: ui/button\" for UIButton</code></p> <p><code>UIButton</code> is a <code>Control</code> that represents a clickable button with optional text content.</p> <pre><code>var btn = UIButton.create(ui)\nUIButton.set_text(btn, \"click me!\")\nControl.set_events(btn) {|event|\n  if(event.type == UIEvent.release) {\n    Log.print(\"clicked button\")\n  }\n}\n</code></pre> <ul> <li>create(ui_entity: <code>Entity</code>)</li> <li>set_text(control: <code>UIButton</code>, text: <code>String</code>)</li> <li>set_outline(control: <code>UIButton</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>)</li> <li>set_shadow(control: <code>UIButton</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>)</li> <li>get_text(control: <code>UIButton</code>)</li> <li>set_font(control: <code>UIButton</code>, font: <code>String</code>)</li> <li>get_font(control: <code>UIButton</code>)</li> <li>set_color(control: <code>UIButton</code>, color: <code>Color</code>)</li> <li>get_color(control: <code>UIButton</code>)</li> <li>set_text_size(control: <code>UIButton</code>, size: <code>Num</code>)</li> <li>get_text_size(control: <code>UIButton</code>)</li> <li>set_align(control: <code>UIButton</code>, align: <code>TextAlign</code>)</li> <li>get_align(control: <code>UIButton</code>)</li> <li>set_align_vertical(control: <code>UIButton</code>, align: <code>TextAlign</code>)</li> <li>get_align_vertical(control: <code>UIButton</code>)</li> <li>get_render_text(control: <code>UIButton</code>)</li> <li>set_colors(control: <code>UIButton</code>, bg: <code>Color</code>, bg_hover: <code>Color</code>, border: <code>Color</code>, border_hover: <code>Color</code>)</li> </ul> <p> UIButton.create(ui_entity: <code>Entity</code>) \u00b6 returns <code>UIButton</code></p> <p>Create a new button control.   </p> <p> UIButton.set_text(control: <code>UIButton</code>, text: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Set the text displayed on a button.   </p> <p> UIButton.set_outline(control: <code>UIButton</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>) \u00b6 returns <code>None</code></p> <p>Set the text outline parameters.   </p> <p> UIButton.set_shadow(control: <code>UIButton</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>) \u00b6 returns <code>None</code></p> <p>Set the text shadow parameters.   </p> <p> UIButton.get_text(control: <code>UIButton</code>) \u00b6 returns <code>String</code></p> <p>Get the text displayed on a button.   </p> <p> UIButton.set_font(control: <code>UIButton</code>, font: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Set the font of the text on a button.   </p> <p> UIButton.get_font(control: <code>UIButton</code>) \u00b6 returns <code>Id32</code></p> <p>Get the font asset id of the text on the button. The asset id is returned as the string hash, to get the string use <code>Strings.get</code>.   </p> <p> UIButton.set_color(control: <code>UIButton</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>Set the color of a button.   </p> <p> UIButton.get_color(control: <code>UIButton</code>) \u00b6 returns <code>Color</code></p> <p>Get the color of a button.   </p> <p> UIButton.set_text_size(control: <code>UIButton</code>, size: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the size of the text on a button.   </p> <p> UIButton.get_text_size(control: <code>UIButton</code>) \u00b6 returns <code>Num</code></p> <p>Get the size of the text on a button.   </p> <p> UIButton.set_align(control: <code>UIButton</code>, align: <code>TextAlign</code>) \u00b6 returns <code>None</code></p> <p>Set the horizontal alignment of the text on a button.   </p> <p> UIButton.get_align(control: <code>UIButton</code>) \u00b6 returns <code>TextAlign</code></p> <p>Get the horizontal alignment of the text on a button.   </p> <p> UIButton.set_align_vertical(control: <code>UIButton</code>, align: <code>TextAlign</code>) \u00b6 returns <code>None</code></p> <p>Set the vertical alignment of the text on a button.   </p> <p> UIButton.get_align_vertical(control: <code>UIButton</code>) \u00b6 returns <code>TextAlign</code></p> <p>Get the vertical alignment of the text on a button.   </p> <p> UIButton.get_render_text(control: <code>UIButton</code>) \u00b6 returns <code>RenderText</code></p> <p>Get the underlying lowlevel text render object. Usable with the <code>Render.text_*</code> API.   </p> <p> UIButton.set_colors(control: <code>UIButton</code>, bg: <code>Color</code>, bg_hover: <code>Color</code>, border: <code>Color</code>, border_hover: <code>Color</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/check/","title":"Check","text":""},{"location":"api/v/next/ui/check/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/ui/check/#luxe-uicheck-module","title":"<code>luxe: ui/check</code> module","text":"<ul> <li>UICheck </li> </ul>"},{"location":"api/v/next/ui/check/#uicheck","title":"UICheck","text":"<p><code>import \"luxe: ui/check\" for UICheck</code></p> <p><code>UICheck</code> is a <code>Control</code> that represents a boolean toggle.</p> <pre><code>var check = UICheck.create(ui)\nUICheck.set_state(check, true)\nControl.set_events(check) {|event|\n  if(event.type == UIEvent.change) {\n    Log.print(\"Check is toggled %(event.change ? \"on\" : \"off\")\")\n  }\n}\n</code></pre> <ul> <li>create(ui_entity: <code>Entity</code>)</li> <li>set_state(control: <code>UICheck</code>, state: <code>Bool</code>)</li> <li>get_state(control: <code>UICheck</code>)</li> </ul> <p> UICheck.create(ui_entity: <code>Entity</code>) \u00b6 returns <code>UICheck</code></p> <p>Create a new check control.   </p> <p> UICheck.set_state(control: <code>UICheck</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set the current state of a check.   </p> <p> UICheck.get_state(control: <code>UICheck</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether a check is toggled on or off.   </p>"},{"location":"api/v/next/ui/color_picker/","title":"Color picker","text":""},{"location":"api/v/next/ui/color_picker/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/ui/color_picker/#luxe-uicolor_picker-module","title":"<code>luxe: ui/color_picker</code> module","text":"<ul> <li>ColorPicker </li> <li>ColorPickerData </li> </ul>"},{"location":"api/v/next/ui/color_picker/#colorpicker","title":"ColorPicker","text":"<p><code>import \"luxe: ui/color_picker\" for ColorPicker</code></p> <p>no docs found</p> <ul> <li>create(ui: <code>Entity</code>)</li> <li>set_color(control: <code>Control</code>, color: <code>Color</code>)</li> <li>get_color(control: <code>Control</code>)</li> <li>set_allow_hdr(control: <code>Control</code>, allow: <code>Bool</code>)</li> </ul> <p> ColorPicker.create(ui: <code>Entity</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p> <p> ColorPicker.set_color(control: <code>Control</code>, color: <code>Color</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPicker.get_color(control: <code>Control</code>) \u00b6 returns <code>Color</code></p> <p>no docs found   </p> <p> ColorPicker.set_allow_hdr(control: <code>Control</code>, allow: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/color_picker/#colorpickerdata","title":"ColorPickerData","text":"<p><code>import \"luxe: ui/color_picker\" for ColorPickerData</code></p> <p>no docs found</p> <ul> <li>triangle_size</li> <li>outer_ring_size</li> <li>inner_ring_size</li> <li>r</li> <li>g</li> <li>b</li> <li>h</li> <li>s</li> <li>v</li> <li>a</li> <li>color_ldr</li> <li>color_hdr</li> <li>srgb</li> <li>srgb=(value : Bool)</li> <li>hdr_multiplier</li> <li>hdr_multiplier=(value : Num)</li> <li>allow_hdr</li> <li>allow_hdr=(v : Bool)</li> <li>show_hdr</li> <li>show_hdr=(v : Bool)</li> <li>show_components</li> <li>show_components(v: <code>String</code>)</li> <li>debug=(v : Any)</li> <li>new(ui: <code>Control</code>, root: <code>Control</code>)</li> <li>set_allow_hdr(allow: <code>Bool</code>)</li> <li>set_color(color: <code>Color</code>)</li> <li>get_rgba()</li> <li>get_rgba(srgb: <code>Bool</code>, hdr: <code>Bool</code>)</li> <li>get_hsva_component()</li> <li>get_hsva(srgb: <code>Bool</code>)</li> <li>set_rgba(col: <code>Color</code>)</li> <li>set_rgba(col: <code>Color</code>, srgb: <code>Bool</code>)</li> <li>set_rgba(col: <code>Color</code>, srgb: <code>Bool</code>, update_spaces: <code>Bool</code>)</li> <li>set_hsva(col: <code>Any</code>)</li> <li>set_hsva(col: <code>Color</code>, srgb: <code>Bool</code>)</li> <li>set_hsva(col: <code>Color</code>, srgb: <code>Bool</code>, update_spaces: <code>Bool</code>)</li> <li>set_rgba_component(index: <code>Num</code>, value: <code>Num</code>)</li> <li>set_rgba_component(index: <code>Num</code>, value: <code>Num</code>, srgb: <code>Bool</code>)</li> <li>get_rgba_component(index: <code>Num</code>)</li> <li>get_rgba_component(index: <code>Num</code>, srgb: <code>Bool</code>)</li> <li>get_rgba_component(index: <code>Num</code>, srgb: <code>Bool</code>, hdr: <code>Bool</code>)</li> <li>set_hsva_component(index: <code>Num</code>, value: <code>Num</code>)</li> <li>set_hsva_component(index: <code>Num</code>, value: <code>Num</code>, srgb: <code>Bool</code>)</li> <li>get_hsva_component(index: <code>Num</code>)</li> <li>get_hsva_component(index: <code>Num</code>, srgb: <code>Bool</code>)</li> <li>create_colorpicker(ui: <code>Entity</code>, color_view: <code>Control</code>)</li> <li>hdr_settings(ui: <code>UI</code>, data_control: <code>Control</code>)</li> <li>color_display(ui: <code>UI</code>, data_control: <code>Control</code>)</li> <li>colorspace_choice(ui: <code>Any</code>, data_control: <code>Any</code>)</li> <li>hex_input(ui: <code>UI</code>, data_control: <code>Control</code>)</li> <li>rgba_values(ui: <code>UI</code>, color_view: <code>Control</code>)</li> <li>hsva_values(ui: <code>UI</code>, color_view: <code>Control</code>)</li> <li>color_component(ui: <code>Entity</code>, name: <code>String</code>, index: <code>Num</code>, color_view: <code>Control</code>, space: <code>String</code>)</li> <li>create_hsv_wheel(ui: <code>Entity</code>, data_root: <code>Control</code>)</li> </ul> <p> ColorPickerData.triangle_size \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ColorPickerData.outer_ring_size \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ColorPickerData.inner_ring_size \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ColorPickerData.r \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ColorPickerData.g \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ColorPickerData.b \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ColorPickerData.h \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ColorPickerData.s \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ColorPickerData.v \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ColorPickerData.a \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ColorPickerData.color_ldr \u00b6 returns <code>Color</code></p> <p>no docs found   </p> <p> ColorPickerData.color_hdr \u00b6 returns <code>Color</code></p> <p>no docs found   </p> <p> ColorPickerData.srgb \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> ColorPickerData.srgb=(value : Bool) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.hdr_multiplier \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> ColorPickerData.hdr_multiplier=(value : Num) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.allow_hdr \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> ColorPickerData.allow_hdr=(v : Bool) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.show_hdr \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> ColorPickerData.show_hdr=(v : Bool) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.show_components \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> ColorPickerData.show_components(v: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.debug=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.new(ui: <code>Control</code>, root: <code>Control</code>) \u00b6 returns <code>ColorPickerData</code></p> <p>no docs found   </p> <p> ColorPickerData.set_allow_hdr(allow: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.set_color(color: <code>Color</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.get_rgba() \u00b6 returns <code>Color</code></p> <p>no docs found   </p> <p> ColorPickerData.get_rgba(srgb: <code>Bool</code>, hdr: <code>Bool</code>) \u00b6 returns <code>Color</code></p> <p>no docs found   </p> <p> ColorPickerData.get_hsva_component() \u00b6 returns <code>Color</code></p> <p>no docs found   </p> <p> ColorPickerData.get_hsva(srgb: <code>Bool</code>) \u00b6 returns <code>Color</code></p> <p>no docs found   </p> <p> ColorPickerData.set_rgba(col: <code>Color</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.set_rgba(col: <code>Color</code>, srgb: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.set_rgba(col: <code>Color</code>, srgb: <code>Bool</code>, update_spaces: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.set_hsva(col: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.set_hsva(col: <code>Color</code>, srgb: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.set_hsva(col: <code>Color</code>, srgb: <code>Bool</code>, update_spaces: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.set_rgba_component(index: <code>Num</code>, value: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.set_rgba_component(index: <code>Num</code>, value: <code>Num</code>, srgb: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.get_rgba_component(index: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.get_rgba_component(index: <code>Num</code>, srgb: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.get_rgba_component(index: <code>Num</code>, srgb: <code>Bool</code>, hdr: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.set_hsva_component(index: <code>Num</code>, value: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.set_hsva_component(index: <code>Num</code>, value: <code>Num</code>, srgb: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.get_hsva_component(index: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.get_hsva_component(index: <code>Num</code>, srgb: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.create_colorpicker(ui: <code>Entity</code>, color_view: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.hdr_settings(ui: <code>UI</code>, data_control: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.color_display(ui: <code>UI</code>, data_control: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.colorspace_choice(ui: <code>Any</code>, data_control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.hex_input(ui: <code>UI</code>, data_control: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.rgba_values(ui: <code>UI</code>, color_view: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.hsva_values(ui: <code>UI</code>, color_view: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.color_component(ui: <code>Entity</code>, name: <code>String</code>, index: <code>Num</code>, color_view: <code>Control</code>, space: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ColorPickerData.create_hsv_wheel(ui: <code>Entity</code>, data_root: <code>Control</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/control/","title":"Control","text":""},{"location":"api/v/next/ui/control/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/ui/control/#luxe-uicontrol-module","title":"<code>luxe: ui/control</code> module","text":"<ul> <li>Control </li> </ul>"},{"location":"api/v/next/ui/control/#control","title":"Control","text":"<p><code>import \"luxe: ui/control\" for Control</code></p> <p>Class for managing controls on UI modifiers. Note that all UI elements are controls, including UIImage, UILabel, UIButton, etc...</p> <pre><code>  _ui = Entity.create(app.ui)\n  UI.create(_ui, 0, 0, app.width, app.height, 0, app.ui_camera)\n\n  var control = Control.create(_ui)\n</code></pre> <ul> <li>create(ui_entity: <code>Entity</code>)</li> <li>destroy(control: <code>Control</code>)</li> <li>destroy_children(control: <code>Control</code>)</li> <li>valid(control: <code>Control</code>)</li> <li>get_ui(control: <code>Control</code>)</li> <li>get(id: <code>String</code>)</li> <li>exists(id: <code>String</code>)</li> <li>clear(control: <code>Control</code>, uiclear_action: <code>UIClear</code>)</li> <li>press(control: <code>Control</code>, state: <code>Bool</code>)</li> <li>enter(control: <code>Control</code>, state: <code>Bool</code>)</li> <li>can_see(control: <code>Control</code>)</li> <li>can_see_area(control: <code>Control</code>, area: <code>Rect</code>)</li> <li>can_see_point(control: <code>Control</code>, point: <code>Vec</code>)</li> <li>set_type(control: <code>Control</code>, type: <code>String</code>)</li> <li>get_type(control: <code>Control</code>)</li> <li>set_id(control: <code>Control</code>, id: <code>String</code>)</li> <li>get_id(control: <code>Control</code>)</li> <li>get_bounds_abs(control: <code>Control</code>, into: <code>List</code>)</li> <li>get_bounds(control: <code>Control</code>, into: <code>List</code>)</li> <li>set_allow_bounds_event(control: <code>Control</code>, state: <code>Bool</code>)</li> <li>get_allow_bounds_event(control: <code>Control</code>)</li> <li>set_bounds_abs(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>)</li> <li>set_bounds(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>)</li> <li>set_pos_abs(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>set_pos(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>set_system_cursor(control: <code>Control</code>, cursor: <code>SystemCursor</code>)</li> <li>set_size(control: <code>Control</code>, w: <code>Num</code>, h: <code>Num</code>)</li> <li>get_pos_x(control: <code>Control</code>)</li> <li>get_pos_x_abs(control: <code>Control</code>)</li> <li>get_pos_y(control: <code>Control</code>)</li> <li>get_pos_y_abs(control: <code>Control</code>)</li> <li>get_width(control: <code>Control</code>)</li> <li>get_height(control: <code>Control</code>)</li> <li>contains(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>get_entity(control: <code>Control</code>)</li> <li>get_parent(control: <code>Control</code>)</li> <li>get_allow_input(control: <code>Control</code>)</li> <li>set_allow_input(control: <code>Control</code>, allow: <code>Bool</code>)</li> <li>set_allow_drag(control: <code>Control</code>, allow: <code>Bool</code>, tag: <code>String</code>)</li> <li>set_droppable_payload(control: <code>Control</code>, value: <code>Handle</code>)</li> <li>get_droppable_payload(control: <code>Control</code>)</li> <li>set_droppable_tags(control: <code>Control</code>, tags: <code>List</code>)</li> <li>get_droppable_tags(control: <code>Control</code>)</li> <li>get_allow_keys(control: <code>Control</code>)</li> <li>set_allow_keys(control: <code>Control</code>, allow: <code>Bool</code>)</li> <li>get_allow_tab(control: <code>Control</code>)</li> <li>set_allow_tab(control: <code>Control</code>, allow: <code>Bool</code>)</li> <li>get_visible(control: <code>Control</code>)</li> <li>set_visible(control: <code>Control</code>, visible: <code>Bool</code>)</li> <li>get_opacity(control: <code>Control</code>)</li> <li>set_opacity(control: <code>Control</code>, opacity: <code>Num</code>)</li> <li>get_disabled(control: <code>Control</code>)</li> <li>set_disabled(control: <code>Control</code>, disabled: <code>Bool</code>)</li> <li>get_enabled(control: <code>Control</code>)</li> <li>set_enabled(control: <code>Control</code>, enabled: <code>Bool</code>)</li> <li>get_clip(control: <code>Control</code>)</li> <li>set_clip(control: <code>Control</code>, clip: <code>Bool</code>)</li> <li>get_nodes(control: <code>Control</code>)</li> <li>get_depth(control: <code>Control</code>)</li> <li>get_depth_offset(control: <code>Control</code>)</li> <li>set_depth_offset(control: <code>Control</code>, depth_offset: <code>Num</code>)</li> <li>get_input_inside(control: <code>Control</code>)</li> <li>get_input_pressed(control: <code>Control</code>)</li> <li>child_at_point(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>)</li> <li>child_count(control: <code>Control</code>)</li> <li>child_index(control: <code>Control</code>, child: <code>Control</code>)</li> <li>child_get(control: <code>Control</code>, index: <code>Num</code>)</li> <li>child_add(control: <code>Control</code>, child: <code>Control</code>, internal: <code>Bool</code>)</li> <li>child_add(control: <code>Control</code>, child: <code>Control</code>)</li> <li>child_remove(control: <code>Control</code>, child: <code>Control</code>)</li> <li>children_bounds(control: <code>Control</code>, into: <code>List</code>)</li> <li>set_behave(control: <code>Control</code>, behave: <code>UIBehave</code>)</li> <li>get_behave(control: <code>Control</code>)</li> <li>set_contain(control: <code>Control</code>, contain: <code>UIContain</code>)</li> <li>get_contain(control: <code>Control</code>)</li> <li>set_margin(control: <code>Control</code>, left: <code>Num</code>, top: <code>Num</code>, right: <code>Num</code>, bottom: <code>Num</code>)</li> <li>set_limits(control: <code>Control</code>, min_x: <code>Num</code>, min_y: <code>Num</code>, max_x: <code>Num</code>, max_y: <code>Num</code>)</li> <li>get_margin(control: <code>Control</code>)</li> <li>set_render(control: <code>Control</code>, fn: <code>Fn</code>)</li> <li>set_events(control: <code>Control</code>, fn: <code>Fn</code>)</li> <li>unset_events(control: <code>Control</code>, id: <code>String</code>)</li> <li>set_process(control: <code>Control</code>, fn: <code>Fn</code>)</li> <li>get_state_data(control: <code>Control</code>)</li> <li>set_state_data(control: <code>Control</code>, data: <code>Any</code>)</li> </ul> <p> Control.create(ui_entity: <code>Entity</code>) \u00b6 returns <code>Control</code></p> <p>Create a \"blank\" control for layout or custom input/drawing. Returns the new Control.   </p> <p> Control.destroy(control: <code>Control</code>) \u00b6 returns <code>None</code></p> <p>Destroy an existing control.</p> <pre><code>  var control = Control.create(_ui)\n  //do stuff and then later...\n  Control.destroy(control)\n</code></pre> <p> Control.destroy_children(control: <code>Control</code>) \u00b6 returns <code>None</code></p> <p>Destroy the children of a control.   </p> <p> Control.valid(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>Check if a control exists and has not been destroyed.</p> <pre><code>  var control = Control.create(_ui)\n  Log.print(Control.valid(control)) //true\n  Control.destroy(control)\n  Log.print(Control.valid(control)) //false\n</code></pre> <p> Control.get_ui(control: <code>Control</code>) \u00b6 returns <code>Entity</code></p> <p>Get UI entity a control is part of.</p> <pre><code>  var control = Control.create(_ui)\n  var control_ui = Control.get_ui(control)\n  Log.print(control_ui == _ui) //true\n</code></pre> <p> Control.get(id: <code>String</code>) \u00b6 returns <code>Control</code></p> <p>Get a control by its id.</p> <pre><code>  var control = Control.create(_ui)\n  Control.set_id(control, \"test_id\")\n  var control_by_id = Control.get(\"test_id\")\n  Log.print(control == control_by_id) //true\n</code></pre> <p> Control.exists(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>Check if a control with a specific id exists.   </p> <p> Control.clear(control: <code>Control</code>, uiclear_action: <code>UIClear</code>) \u00b6 returns <code>None</code></p> <p>Clear the children of a control in a specific manner.   </p> <p> Control.press(control: <code>Control</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Send a press or release event to the control (in the center of the control)   </p> <p> Control.enter(control: <code>Control</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Send a enter or exit event to the control   </p> <p> Control.can_see(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if this control can be seen, or false if clipped.   </p> <p> Control.can_see_area(control: <code>Control</code>, area: <code>Rect</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if the area at this control can be seen or false if clipped.   </p> <p> Control.can_see_point(control: <code>Control</code>, point: <code>Vec</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if the point at this control can be seen or false if clipped.   </p> <p> Control.set_type(control: <code>Control</code>, type: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Control.get_type(control: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Control.set_id(control: <code>Control</code>, id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>Set the id of a control. Good for debugging and retrieving controls by their id. Must be unique, so adding <code>ID.unique()</code> to the id can be useful.</p> <pre><code>  var control = Control.create(_ui)\n  Control.set_id(control, \"good_recognizable_control_name_%(ID.unique())\")\n</code></pre> <p> Control.get_id(control: <code>Control</code>) \u00b6 returns <code>String</code></p> <p>Retrieve the id of a control.   </p> <p> Control.get_bounds_abs(control: <code>Control</code>, into: <code>List</code>) \u00b6 returns <code>None</code></p> <p>Retrieve the bounds(position and size) of a control (relative to the UI modifier) into a list <code>[x, y, width, height]</code>. The passed list must have at least 4 elements and the function will write into the first 4. Passing a list into the function instead of returning a value is to avoid allocating memory where not needed.</p> <pre><code>  var parent = Control.create(_ui)\n  Control.set_pos(parent, 50, 50)\n  var child = Control.create(_ui)\n  Control.child_add(parent, child)\n  Control.set_pos(child, 100, 100)\n  Control.set_size(child, 20, 20)\n  var bounds = [0,0,0,0]\n  Control.get_bounds_abs(child, bounds)\n  Log.print(bounds) // [150, 150, 20, 20]\n</code></pre> <p> Control.get_bounds(control: <code>Control</code>, into: <code>List</code>) \u00b6 returns <code>None</code></p> <p>Retrieve the bounds(position and size) of a control (relative to their parent control or ui modifier if there is none) into a list <code>[x, y, width, height]</code>. The passed list must have at least 4 elements and the function will write into the first 4. Passing a list into the function instead of returning a value is to avoid allocating memory where not needed.</p> <pre><code>  var parent = Control.create(_ui)\n  Control.set_pos(parent, 50, 50)\n  var child = Control.create(_ui)\n  Control.child_add(parent, child)\n  Control.set_pos(child, 100, 100)\n  Control.set_size(child, 20, 20)\n  var bounds = [0,0,0,0]\n  Control.get_bounds(child, bounds)\n  Log.print(bounds) // [100, 100, 20, 20]\n</code></pre> <p> Control.set_allow_bounds_event(control: <code>Control</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Enables bounds events for the control. Since there are many controls that may be resized during layout events, only ones that ask for the event  will receive it to save time.   </p> <p> Control.get_allow_bounds_event(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>Returns true if this control sends bounds events.   </p> <p> Control.set_bounds_abs(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the control bounds(position and size) relative to the UI modifier.   </p> <p> Control.set_bounds(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>, w: <code>Num</code>, h: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the control bounds(position and size) relative to the parent control.   </p> <p> Control.set_pos_abs(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the control position relative to the UI modifier.   </p> <p> Control.set_pos(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the control position relative to the parent control, or UI modifier if no parent exists.   </p> <p> Control.set_system_cursor(control: <code>Control</code>, cursor: <code>SystemCursor</code>) \u00b6 returns <code>None</code></p> <p>If the control has input enabled, when entered it will set the system cursor to the given type.   </p> <p> Control.set_size(control: <code>Control</code>, w: <code>Num</code>, h: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the control size.   </p> <p> Control.get_pos_x(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>Get the control position x component relative to its parent control.   </p> <p> Control.get_pos_x_abs(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>Get the control position x component.   </p> <p> Control.get_pos_y(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>Get the control position y component relative to its parent control.   </p> <p> Control.get_pos_y_abs(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>Get the control position y component.   </p> <p> Control.get_width(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>Get the control width.   </p> <p> Control.get_height(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>Get the control height.   </p> <p> Control.contains(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>Bool</code></p> <p>Check whether the a point is within the control bounds   </p> <p> Control.get_entity(control: <code>Control</code>) \u00b6 returns <code>Entity</code></p> <p>Get the entity that has the UI modifier the control in.   </p> <p> Control.get_parent(control: <code>Control</code>) \u00b6 returns <code>Control</code></p> <p>Get the entity this entity is a child of or <code>null</code> if there isnt any.   </p> <p> Control.get_allow_input(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether the control recieves input events in its <code>set_process</code> function.   </p> <p> Control.set_allow_input(control: <code>Control</code>, allow: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set whether the control recieves input events in its <code>set_process</code> function.   </p> <p> Control.set_allow_drag(control: <code>Control</code>, allow: <code>Bool</code>, tag: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Set whether the control recieves drag events   </p> <p> Control.set_droppable_payload(control: <code>Control</code>, value: <code>Handle</code>) \u00b6 returns <code>None</code></p> <p>Set a value that will be passed through the drag event to the drop event on the other side.            This value is a handle/number, so you can pass api handles, a number, a hashed string, or a block instance   </p> <p> Control.get_droppable_payload(control: <code>Control</code>) \u00b6 returns <code>Handle</code></p> <p>Get the drop payload for this control   </p> <p> Control.set_droppable_tags(control: <code>Control</code>, tags: <code>List</code>) \u00b6 returns <code>None</code></p> <p>Set the droppable tags that are allowed for this control, as an array of strings   </p> <p> Control.get_droppable_tags(control: <code>Control</code>) \u00b6 returns <code>List</code></p> <p>Get the droppable tags that are allowed for this control, as an array of strings   </p> <p> Control.get_allow_keys(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether the control recieves key events in its <code>set_process</code> function.   </p> <p> Control.set_allow_keys(control: <code>Control</code>, allow: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set whether the control recieves key events in its <code>set_process</code> function.   </p> <p> Control.get_allow_tab(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether the control can be \"tabbed\" to.   </p> <p> Control.set_allow_tab(control: <code>Control</code>, allow: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set whether the control can be \"tabbed\" to.   </p> <p> Control.get_visible(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether a control is visible.   </p> <p> Control.set_visible(control: <code>Control</code>, visible: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set whether a control (or its children) is visible. Note that when a control is not visible, it also doesnt contribute to the layout.   </p> <p> Control.get_opacity(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>Get a control opacity value.   </p> <p> Control.set_opacity(control: <code>Control</code>, opacity: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set a control opacity value. Affects children opacity as well.   </p> <p> Control.get_disabled(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether a control is disabled. This refers to the \"inputable\" state of inputs like buttons or text fields.   </p> <p> Control.set_disabled(control: <code>Control</code>, disabled: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set whether a control is disabled. This refers to the \"inputable\" state of inputs like buttons or text fields.   </p> <p> Control.get_enabled(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether a control is enabled. This refers to the \"inputable\" state of inputs like buttons or text fields.   </p> <p> Control.set_enabled(control: <code>Control</code>, enabled: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set whether a control is enabled. This refers to the \"inputable\" state of inputs like buttons or text fields.   </p> <p> Control.get_clip(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>Get whether a control should clip its contents.   </p> <p> Control.set_clip(control: <code>Control</code>, clip: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set whether a control should clip its contents.   </p> <p> Control.get_nodes(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>Get how many child controls this control has recursively. So 1 if it doesnt have any children, 2 if it has 1 child, 3 if it has 2 children or if it has 1 child which itself has a child, etc... Only valid after <code>UI.commit</code>.   </p> <p> Control.get_depth(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>Get the depth generated for a control, not including the depth offset.   </p> <p> Control.get_depth_offset(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>Get the depth offset of a control.   </p> <p> Control.set_depth_offset(control: <code>Control</code>, depth_offset: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the depth offset for a control, allowing you to move it in front or behind other controls if the generated depth doesnt work for you   </p> <p> Control.get_input_inside(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>Check whether the input (usually mouse cursor) is currently in a control. (In sync with <code>UIEvent.enter</code> and <code>UIEvent.exit</code>)   </p> <p> Control.get_input_pressed(control: <code>Control</code>) \u00b6 returns <code>Bool</code></p> <p>Check whether the input (usually mouse cursor) is currently in a control and any of its buttons are pressed.   </p> <p> Control.child_at_point(control: <code>Control</code>, x: <code>Num</code>, y: <code>Num</code>) \u00b6 returns <code>Control</code></p> <p>Get the top child control at a specific (absolute) point.   </p> <p> Control.child_count(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>Get the amount of children a control has.   </p> <p> Control.child_index(control: <code>Control</code>, child: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>Get the index of a child control.   </p> <p> Control.child_get(control: <code>Control</code>, index: <code>Num</code>) \u00b6 returns <code>Child</code></p> <p>Get a child control by its index.   </p> <p> Control.child_add(control: <code>Control</code>, child: <code>Control</code>, internal: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Make a control the child control of another control. If you mark the child as internal, it wont be queried by other methods affecting children.   </p> <p> Control.child_add(control: <code>Control</code>, child: <code>Control</code>) \u00b6 returns <code>None</code></p> <p>Make a control the child control of another control. This means the childs position will be relative to its parent, layout depends a lot on those relationships and its used by functions like destroy_children.</p> <pre><code>  //create parent\n  var parent = Control.create(_ui)\n  Control.set_bounds(parent, 200, 200, 100, 100)\n  //create child\n  var child = Control.create(_ui)\n  Control.set_bounds(child, 25, 25, 50, 50)\n\n  //parent child to parent\n  Control.child_add(parent, child)\n\n  var bounds = [0,0,0,0]\n  Control.get_bounds_abs(child, bounds)\n  Log.print(bounds) //[225, 225, 50, 50]\n\n  Control.clear(parent, UIClear.destroy)\n  Log.print(Control.child_count(parent)) //0\n  Log.print(Control.valid(child)) //false\n\n  UI.commit(_ui)\n</code></pre> <p> Control.child_remove(control: <code>Control</code>, child: <code>Control</code>) \u00b6 returns <code>None</code></p> <p>Remove a child from a control, unparenting it.   </p> <p> Control.children_bounds(control: <code>Control</code>, into: <code>List</code>) \u00b6 returns <code>None</code></p> <p>Get the combined bounds of all children of a control into a list <code>[x, y, width, height]</code>. The passed list must have at least 4 elements and the function will write into the first 4. Passing a list into the function instead of returning a value is to avoid allocating memory where not needed.   </p> <p> Control.set_behave(control: <code>Control</code>, behave: <code>UIBehave</code>) \u00b6 returns <code>None</code></p> <p>Set how the control behaves in the layout as a child of its container. You can combine characteristics with a bit or operator (<code>|</code>).   </p> <p> Control.get_behave(control: <code>Control</code>) \u00b6 returns <code>UIBehave</code></p> <p>Returns the behave bitflags for the control   </p> <p> Control.set_contain(control: <code>Control</code>, contain: <code>UIContain</code>) \u00b6 returns <code>None</code></p> <p>Set how the control behaves in the layout as a container of its children. You can combine characteristics with a bit or operator (<code>|</code>).   </p> <p> Control.get_contain(control: <code>Control</code>) \u00b6 returns <code>UIContain</code></p> <p>Returns the contain bitflags for the control   </p> <p> Control.set_margin(control: <code>Control</code>, left: <code>Num</code>, top: <code>Num</code>, right: <code>Num</code>, bottom: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the margins of a control. Only the margins set in <code>set_behave</code> are actually observed.   </p> <p> Control.set_limits(control: <code>Control</code>, min_x: <code>Num</code>, min_y: <code>Num</code>, max_x: <code>Num</code>, max_y: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the min and max size of a control when using layout.   </p> <p> Control.get_margin(control: <code>Control</code>) \u00b6 returns <code>List</code></p> <p>Get the margins of a control.   </p> <p> Control.set_render(control: <code>Control</code>, fn: <code>Fn</code>) \u00b6 returns <code>None</code></p> <p>Set a custom render function with the arguments <code>|control, state, x, y, w, h|</code>.  Useful for making your own controls.   </p> <p> Control.set_events(control: <code>Control</code>, fn: <code>Fn</code>) \u00b6 returns <code>String</code></p> <p>Add a function to handle events on a control. Returns an <code>id</code> for the newly added event that can be used to remove it.</p> <pre><code>  var btn = UIButton.create(ui)\n  UIButton.set_text(btn, \"click me!\")\n  Control.set_events(btn) {|event|\n    if(event.type == UIEvent.release) {\n      Log.print(\"clicked button\")\n    }\n  }\n</code></pre> <p> Control.unset_events(control: <code>Control</code>, id: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Remove an event handling function from a control. Takes in the id that was returned upon registering the function.   </p> <p> Control.set_process(control: <code>Control</code>, fn: <code>Fn</code>) \u00b6 returns <code>None</code></p> <p>Set a custom process function with the arguments <code>|control, state, event, x, y, w, h|</code>.  Useful for making your own controls.   </p> <p> Control.get_state_data(control: <code>Control</code>) \u00b6 returns <code>Any</code></p> <p>Get the state data associated with this control.   </p> <p> Control.set_state_data(control: <code>Control</code>, data: <code>Any</code>) \u00b6 returns <code>None</code></p> <p>Set state data associated with this control. Can be any wren object.   </p>"},{"location":"api/v/next/ui/image/","title":"Image","text":""},{"location":"api/v/next/ui/image/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/ui/image/#luxe-uiimage-module","title":"<code>luxe: ui/image</code> module","text":"<ul> <li>UIImage </li> </ul>"},{"location":"api/v/next/ui/image/#uiimage","title":"UIImage","text":"<p><code>import \"luxe: ui/image\" for UIImage</code></p> <p><code>UIImage</code> is a type of <code>Control</code> made to display images.</p> <pre><code>  var image = UIImage.create(ui)\n  UIImage.set_image(image, Assets.image(\"path/to/image\"))\n  //setup positioning etc with `Control.___`\n</code></pre> <ul> <li>create(ui_entity: <code>Entity</code>)</li> <li>set_image(control: <code>UIImage</code>, image: <code>Image</code>)</li> <li>set_image(control: <code>UIImage</code>, image: <code>Image</code>, flags: <code>UIImageFlags</code>)</li> <li>get_image(control: <code>UIImage</code>)</li> <li>set_material(control: <code>UIImage</code>, material: <code>Material</code>)</li> <li>set_uv(control: <code>UIImage</code>, left: <code>Num</code>, top: <code>Num</code>, right: <code>Num</code>, bottom: <code>Num</code>)</li> <li>set_color(control: <code>UIImage</code>, color: <code>Color</code>)</li> <li>get_color(control: <code>UIImage</code>)</li> <li>set_angle(control: <code>UIImage</code>, degrees: <code>Num</code>)</li> <li>set_fit(control: <code>UIImage</code>, fit: <code>UIImageFit</code>)</li> <li>get_fit(control: <code>UIImage</code>)</li> </ul> <p> UIImage.create(ui_entity: <code>Entity</code>) \u00b6 returns <code>UIImage</code></p> <p>Create a new UIImage control.   </p> <p> UIImage.set_image(control: <code>UIImage</code>, image: <code>Image</code>) \u00b6 returns <code>None</code></p> <p>Set image of <code>UIImage</code> control (uses <code>UIImageFlags.none</code> with linear interpolation). Setting an image will reset any set custom material and use an internal material created from the <code>luxe: material_basis/ui_solid</code> basis instead.   </p> <p> UIImage.set_image(control: <code>UIImage</code>, image: <code>Image</code>, flags: <code>UIImageFlags</code>) \u00b6 returns <code>None</code></p> <p>Set displayed image of <code>UIImage</code> control. The flags determine what sampler is used to read the image. Setting an image will reset any set custom material and use an internal material created from the <code>luxe: material_basis/ui_solid</code> basis instead. <pre><code>  var image = UIImage.create(ui)\n  UIImage.set_image(image, Assets.image(\"path/to/image\"), UIImageFlags.pixelated)\n</code></pre></p> <p> UIImage.get_image(control: <code>UIImage</code>) \u00b6 returns <code>Image</code></p> <p>Get currently displayed image of <code>UIImage</code>.   </p> <p> UIImage.set_material(control: <code>UIImage</code>, material: <code>Material</code>) \u00b6 returns <code>None</code></p> <p>Set the material used to render the <code>UIImage</code>. Setting a custom material will reset the controls image, so you need to author that via the inputs on your material.   </p> <p> UIImage.set_uv(control: <code>UIImage</code>, left: <code>Num</code>, top: <code>Num</code>, right: <code>Num</code>, bottom: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the uv bounds, default is (0, 0, 1, 1). Drawing only top left of the image would be (0.5, 0.5, 1, 1).   </p> <p> UIImage.set_color(control: <code>UIImage</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>Set the tint color of the <code>UIImage</code>. Communicated to the shader via vertex colors.   </p> <p> UIImage.get_color(control: <code>UIImage</code>) \u00b6 returns <code>Color</code></p> <p>Get the current tint color of the <code>UIImage</code>.   </p> <p> UIImage.set_angle(control: <code>UIImage</code>, degrees: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the angle of the <code>UIImage</code> control. Note that this will not affect child controls.   </p> <p> UIImage.set_fit(control: <code>UIImage</code>, fit: <code>UIImageFit</code>) \u00b6 returns <code>None</code></p> <p>Set the fit mode   </p> <p> UIImage.get_fit(control: <code>UIImage</code>) \u00b6 returns <code>UIImageFit</code></p> <p>Get the fit mode   </p>"},{"location":"api/v/next/ui/label/","title":"Label","text":""},{"location":"api/v/next/ui/label/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/ui/label/#luxe-uilabel-module","title":"<code>luxe: ui/label</code> module","text":"<ul> <li>UIAutoSize </li> <li>UILabel </li> <li>UIOverflowScroll </li> </ul>"},{"location":"api/v/next/ui/label/#uiautosize","title":"UIAutoSize","text":"<p><code>import \"luxe: ui/label\" for UIAutoSize</code></p> <p>no docs found</p> <ul> <li>none</li> <li>width</li> <li>height</li> <li>both</li> </ul> <p> UIAutoSize.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIAutoSize.width \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIAutoSize.height \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIAutoSize.both \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/label/#uilabel","title":"UILabel","text":"<p><code>import \"luxe: ui/label\" for UILabel</code></p> <p>no docs found</p> <ul> <li>create(ui_entity: <code>Any</code>)</li> <li>set_text(label: <code>Any</code>, text: <code>Any</code>)</li> <li>get_text(label: <code>Any</code>)</li> <li>get_render_text(label: <code>Any</code>)</li> <li>get_text_extents(label: <code>Any</code>, offset: <code>Any</code>, count: <code>Any</code>)</li> <li>get_text_extents(label: <code>Any</code>)</li> <li>set_font(label: <code>Any</code>, font: <code>Any</code>)</li> <li>get_font(label: <code>Any</code>)</li> <li>set_color(label: <code>Any</code>, color: <code>Any</code>)</li> <li>get_color(label: <code>Any</code>)</li> <li>set_color_hover(label: <code>Any</code>, color: <code>Any</code>)</li> <li>get_color_hover(label: <code>Any</code>)</li> <li>set_text_size(label: <code>Any</code>, size: <code>Any</code>)</li> <li>get_text_size(label: <code>Any</code>)</li> <li>set_align(label: <code>Any</code>, align: <code>Any</code>)</li> <li>get_align(label: <code>Any</code>)</li> <li>set_align_vertical(label: <code>Any</code>, align: <code>Any</code>)</li> <li>get_align_vertical(label: <code>Any</code>)</li> <li>set_text_style(label: <code>Any</code>, style: <code>TextStyle</code>)</li> <li>get_text_style(label: <code>Any</code>)</li> <li>set_max_visible(label: <code>Any</code>, visible_count: <code>Num</code>)</li> <li>get_max_visible(label: <code>Any</code>)</li> <li>set_auto_size(label: <code>Any</code>, state: <code>UIAutoSize</code>)</li> <li>set_overflow_scroll(label: <code>Any</code>, type: <code>UIOverflowScroll</code>, speed: <code>Num</code>, wait: <code>Num</code>, pause: <code>Num</code>)</li> <li>set_overflow_scroll(label: <code>Any</code>, speed: <code>Num</code>, wait: <code>Num</code>, pause: <code>Num</code>)</li> <li>set_loc(label: <code>Any</code>, space: <code>String</code>, key: <code>String</code>)</li> <li>set_loc(label: <code>Any</code>, key: <code>String</code>)</li> <li>set_loc_with_args(label: <code>Any</code>, space: <code>String</code>, key: <code>String</code>, args: <code>List</code>)</li> <li>set_loc_with_args(label: <code>Any</code>, key: <code>String</code>, args: <code>List</code>)</li> <li>set_outline(control: <code>UILabel</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>)</li> <li>set_shadow(control: <code>UILabel</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>)</li> </ul> <p> UILabel.create(ui_entity: <code>Any</code>) \u00b6 returns <code>UILabel</code></p> <p>no docs found   </p> <p> UILabel.set_text(label: <code>Any</code>, text: <code>Any</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UILabel.get_text(label: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> UILabel.get_render_text(label: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.get_text_extents(label: <code>Any</code>, offset: <code>Any</code>, count: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.get_text_extents(label: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.set_font(label: <code>Any</code>, font: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.get_font(label: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.set_color(label: <code>Any</code>, color: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.get_color(label: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.set_color_hover(label: <code>Any</code>, color: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.get_color_hover(label: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.set_text_size(label: <code>Any</code>, size: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.get_text_size(label: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.set_align(label: <code>Any</code>, align: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.get_align(label: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.set_align_vertical(label: <code>Any</code>, align: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.get_align_vertical(label: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.set_text_style(label: <code>Any</code>, style: <code>TextStyle</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UILabel.get_text_style(label: <code>Any</code>) \u00b6 returns <code>TextStyle</code></p> <p>no docs found   </p> <p> UILabel.set_max_visible(label: <code>Any</code>, visible_count: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UILabel.get_max_visible(label: <code>Any</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> UILabel.set_auto_size(label: <code>Any</code>, state: <code>UIAutoSize</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UILabel.set_overflow_scroll(label: <code>Any</code>, type: <code>UIOverflowScroll</code>, speed: <code>Num</code>, wait: <code>Num</code>, pause: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UILabel.set_overflow_scroll(label: <code>Any</code>, speed: <code>Num</code>, wait: <code>Num</code>, pause: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UILabel.set_loc(label: <code>Any</code>, space: <code>String</code>, key: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UILabel.set_loc(label: <code>Any</code>, key: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.set_loc_with_args(label: <code>Any</code>, space: <code>String</code>, key: <code>String</code>, args: <code>List</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UILabel.set_loc_with_args(label: <code>Any</code>, key: <code>String</code>, args: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UILabel.set_outline(control: <code>UILabel</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>) \u00b6 returns <code>None</code></p> <p>Set the text outline parameters.   </p> <p> UILabel.set_shadow(control: <code>UILabel</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>) \u00b6 returns <code>None</code></p> <p>Set the text shadow parameters.   </p>"},{"location":"api/v/next/ui/label/#uioverflowscroll","title":"UIOverflowScroll","text":"<p><code>import \"luxe: ui/label\" for UIOverflowScroll</code></p> <p>no docs found</p> <ul> <li>none</li> <li>always</li> <li>width_overflow</li> </ul> <p> UIOverflowScroll.none \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIOverflowScroll.always \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIOverflowScroll.width_overflow \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/list/","title":"List","text":""},{"location":"api/v/next/ui/list/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/ui/list/#luxe-uilist-module","title":"<code>luxe: ui/list</code> module","text":"<ul> <li>UIList </li> </ul>"},{"location":"api/v/next/ui/list/#uilist","title":"UIList","text":"<p><code>import \"luxe: ui/list\" for UIList</code></p> <p>no docs found</p> <ul> <li>create(ui_entity: <code>Any</code>)</li> <li>add(list: <code>Any</code>, control: <code>Any</code>)</li> <li>remove(list: <code>Any</code>, control: <code>Any</code>)</li> <li>clear(list: <code>Any</code>, uiclear_action: <code>Any</code>)</li> <li>refresh(list: <code>Any</code>)</li> <li>set_flex_width(list: <code>Any</code>, state: <code>Any</code>)</li> <li>set_percent(list: <code>Any</code>, vertical: <code>Any</code>, horizontal: <code>Any</code>)</li> <li>set_percent_v(list: <code>Any</code>, vertical: <code>Any</code>)</li> <li>set_percent_h(list: <code>Any</code>, horizontal: <code>Any</code>)</li> <li>get_percent_v(list: <code>Any</code>)</li> <li>get_percent_h(list: <code>Any</code>)</li> <li>set_scroll(list: <code>Any</code>, vertical: <code>Any</code>, horizontal: <code>Any</code>)</li> <li>set_scroll_v(list: <code>Any</code>, vertical: <code>Any</code>)</li> <li>set_scroll_h(list: <code>Any</code>, horizontal: <code>Any</code>)</li> <li>get_scroll_v(list: <code>Any</code>)</li> <li>get_scroll_h(list: <code>Any</code>)</li> <li>can_scroll_v(list: <code>Any</code>)</li> <li>can_scroll_h(list: <code>Any</code>)</li> <li>count(list: <code>Any</code>)</li> <li>get(list: <code>Any</code>, index: <code>Any</code>)</li> <li>index(list: <code>Any</code>, control: <code>Any</code>)</li> </ul> <p> UIList.create(ui_entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.add(list: <code>Any</code>, control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.remove(list: <code>Any</code>, control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.clear(list: <code>Any</code>, uiclear_action: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.refresh(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.set_flex_width(list: <code>Any</code>, state: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.set_percent(list: <code>Any</code>, vertical: <code>Any</code>, horizontal: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.set_percent_v(list: <code>Any</code>, vertical: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.set_percent_h(list: <code>Any</code>, horizontal: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.get_percent_v(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.get_percent_h(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.set_scroll(list: <code>Any</code>, vertical: <code>Any</code>, horizontal: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.set_scroll_v(list: <code>Any</code>, vertical: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.set_scroll_h(list: <code>Any</code>, horizontal: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.get_scroll_v(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.get_scroll_h(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.can_scroll_v(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.can_scroll_h(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.count(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.get(list: <code>Any</code>, index: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIList.index(list: <code>Any</code>, control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/list_filtered/","title":"List filtered","text":""},{"location":"api/v/next/ui/list_filtered/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/ui/list_filtered/#luxe-uilist_filtered-module","title":"<code>luxe: ui/list_filtered</code> module","text":"<ul> <li>State </li> <li>UIListFiltered </li> <li>UIListFilteredItem </li> </ul>"},{"location":"api/v/next/ui/list_filtered/#state","title":"State","text":"<p><code>import \"luxe: ui/list_filtered\" for State</code></p> <p>no docs found</p> <ul> <li>list</li> <li>set_filter_sizes(height: <code>Num</code>, text_size: <code>Num</code>)</li> <li>set_filter_string(text: <code>String</code>)</li> <li>add(control: <code>Any</code>, keywords: <code>Any</code>)</li> <li>remove(control: <code>Any</code>)</li> <li>clear(uiclear_action: <code>Any</code>)</li> <li>refresh()</li> <li>focus()</li> <li>placeholder=(v : Any)</li> <li>placeholder</li> <li>events</li> <li>new(ui: <code>Any</code>, control: <code>Any</code>)</li> <li>has_filter</li> <li>get_filter()</li> <li>force_filter(text: <code>Any</code>, focus: <code>Any</code>)</li> <li>cancel_filter()</li> <li>filter(filter: <code>String</code>)</li> <li>filter_and_sort(items: <code>List</code>, filter: <code>String</code>)</li> </ul> <p> State.list \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.set_filter_sizes(height: <code>Num</code>, text_size: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.set_filter_string(text: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.add(control: <code>Any</code>, keywords: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.remove(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.clear(uiclear_action: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.refresh() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.focus() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.placeholder=(v : Any) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> State.placeholder \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> State.events \u00b6 returns <code>Events</code></p> <p>no docs found   </p> <p> State.new(ui: <code>Any</code>, control: <code>Any</code>) \u00b6 returns <code>State</code></p> <p>no docs found   </p> <p> State.has_filter \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.get_filter() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.force_filter(text: <code>Any</code>, focus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.cancel_filter() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.filter(filter: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.filter_and_sort(items: <code>List</code>, filter: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/list_filtered/#uilistfiltered","title":"UIListFiltered","text":"<p><code>import \"luxe: ui/list_filtered\" for UIListFiltered</code></p> <p>no docs found</p> <ul> <li>MATCH</li> <li>create(ui: <code>Any</code>)</li> <li>set_bounds(list: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>)</li> <li>set_size(list: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>)</li> <li>set_filter_sizes(list: <code>Any</code>, height: <code>Num</code>, text_size: <code>Num</code>)</li> <li>on_filter(list: <code>Control</code>, fn: <code>Fn</code>)</li> <li>get_placeholder(list: <code>Any</code>, text: <code>Any</code>)</li> <li>set_placeholder(list: <code>Any</code>, text: <code>Any</code>)</li> <li>set_filter(list: <code>Any</code>, fn: <code>Any</code>)</li> <li>get_filter(list: <code>Any</code>)</li> <li>set_filter_string(list: <code>Any</code>, text: <code>String</code>)</li> <li>get_list_view(list: <code>Any</code>)</li> <li>add(list: <code>Any</code>, control: <code>Any</code>, keywords: <code>Any</code>)</li> <li>remove(list: <code>Any</code>, control: <code>Any</code>)</li> <li>clear(list: <code>Any</code>, uiclear_action: <code>Any</code>)</li> <li>refresh(list: <code>Any</code>)</li> <li>focus(list: <code>Any</code>)</li> </ul> <p> UIListFiltered.MATCH \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.create(ui: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.set_bounds(list: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.set_size(list: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.set_filter_sizes(list: <code>Any</code>, height: <code>Num</code>, text_size: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.on_filter(list: <code>Control</code>, fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.get_placeholder(list: <code>Any</code>, text: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.set_placeholder(list: <code>Any</code>, text: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.set_filter(list: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.get_filter(list: <code>Any</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> UIListFiltered.set_filter_string(list: <code>Any</code>, text: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.get_list_view(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.add(list: <code>Any</code>, control: <code>Any</code>, keywords: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.remove(list: <code>Any</code>, control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.clear(list: <code>Any</code>, uiclear_action: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.refresh(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIListFiltered.focus(list: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/list_filtered/#uilistfiltereditem","title":"UIListFilteredItem","text":"<p><code>import \"luxe: ui/list_filtered\" for UIListFilteredItem</code></p> <p>no docs found</p> <ul> <li>control</li> <li>keywords</li> <li>result</li> <li>result=(v : FuzzyResult)</li> <li>new(control: <code>Control</code>, keywords: <code>List</code>)</li> </ul> <p> UIListFilteredItem.control \u00b6 returns <code>Control</code></p> <p>no docs found   </p> <p> UIListFilteredItem.keywords \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> UIListFilteredItem.result \u00b6 returns <code>FuzzyResult</code></p> <p>no docs found   </p> <p> UIListFilteredItem.result=(v : FuzzyResult) \u00b6 returns <code>FuzzyResult</code></p> <p>no docs found   </p> <p> UIListFilteredItem.new(control: <code>Control</code>, keywords: <code>List</code>) \u00b6 returns <code>UIListFilteredItem</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/panel/","title":"Panel","text":""},{"location":"api/v/next/ui/panel/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/ui/panel/#luxe-uipanel-module","title":"<code>luxe: ui/panel</code> module","text":"<ul> <li>UIPanel </li> </ul>"},{"location":"api/v/next/ui/panel/#uipanel","title":"UIPanel","text":"<p><code>import \"luxe: ui/panel\" for UIPanel</code></p> <p>no docs found</p> <ul> <li>create(ui: <code>Entity</code>)</li> <li>set_color(panel: <code>Control</code>, color: <code>Color</code>)</li> <li>get_color(panel: <code>Control</code>)</li> <li>set_border(panel: <code>Control</code>, size: <code>Num</code>, color: <code>Color</code>)</li> <li>set_radius(panel: <code>Control</code>, radius: <code>Float4</code>, smoothness: <code>Float4</code>)</li> </ul> <p> UIPanel.create(ui: <code>Entity</code>) \u00b6 returns <code>UIPanel</code></p> <p>no docs found   </p> <p> UIPanel.set_color(panel: <code>Control</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UIPanel.get_color(panel: <code>Control</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UIPanel.set_border(panel: <code>Control</code>, size: <code>Num</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UIPanel.set_radius(panel: <code>Control</code>, radius: <code>Float4</code>, smoothness: <code>Float4</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/progress/","title":"Progress","text":""},{"location":"api/v/next/ui/progress/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/ui/progress/#luxe-uiprogress-module","title":"<code>luxe: ui/progress</code> module","text":"<ul> <li>UIProgress </li> </ul>"},{"location":"api/v/next/ui/progress/#uiprogress","title":"UIProgress","text":"<p><code>import \"luxe: ui/progress\" for UIProgress</code></p> <p>no docs found</p> <ul> <li>create(ui_entity: <code>Any</code>)</li> <li>set_progress(control: <code>Any</code>, value: <code>Any</code>)</li> <li>get_progress(control: <code>Any</code>)</li> </ul> <p> UIProgress.create(ui_entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIProgress.set_progress(control: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIProgress.get_progress(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/scroll/","title":"Scroll","text":""},{"location":"api/v/next/ui/scroll/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/ui/scroll/#luxe-uiscroll-module","title":"<code>luxe: ui/scroll</code> module","text":"<ul> <li>UIScroll </li> </ul>"},{"location":"api/v/next/ui/scroll/#uiscroll","title":"UIScroll","text":"<p><code>import \"luxe: ui/scroll\" for UIScroll</code></p> <p>no docs found</p> <ul> <li>create(ui_entity: <code>Any</code>)</li> <li>add(scroll: <code>Any</code>, control: <code>Any</code>)</li> <li>remove(scroll: <code>Any</code>, control: <code>Any</code>)</li> <li>count(scroll: <code>Any</code>)</li> <li>clear(scroll: <code>Any</code>, uiclear_action: <code>Any</code>)</li> <li>get(scroll: <code>Any</code>, index: <code>Any</code>)</li> <li>index(scroll: <code>Any</code>, control: <code>Any</code>)</li> <li>refresh(scroll: <code>Any</code>)</li> <li>set_percent(scroll: <code>Any</code>, vertical: <code>Any</code>, horizontal: <code>Any</code>)</li> <li>set_scroll(scroll: <code>Any</code>, vertical: <code>Any</code>, horizontal: <code>Any</code>)</li> <li>set_percent_v(scroll: <code>Any</code>, vertical: <code>Any</code>)</li> <li>set_percent_h(scroll: <code>Any</code>, horizontal: <code>Any</code>)</li> <li>set_scroll_v(scroll: <code>Any</code>, vertical: <code>Any</code>)</li> <li>set_scroll_h(scroll: <code>Any</code>, horizontal: <code>Any</code>)</li> <li>get_percent_v(scroll: <code>Any</code>)</li> <li>get_percent_h(scroll: <code>Any</code>)</li> <li>get_scroll_v(scroll: <code>Any</code>)</li> <li>get_scroll_h(scroll: <code>Any</code>)</li> <li>can_scroll_v(scroll: <code>Any</code>)</li> <li>can_scroll_h(scroll: <code>Any</code>)</li> </ul> <p> UIScroll.create(ui_entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.add(scroll: <code>Any</code>, control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.remove(scroll: <code>Any</code>, control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.count(scroll: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.clear(scroll: <code>Any</code>, uiclear_action: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.get(scroll: <code>Any</code>, index: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.index(scroll: <code>Any</code>, control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.refresh(scroll: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.set_percent(scroll: <code>Any</code>, vertical: <code>Any</code>, horizontal: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.set_scroll(scroll: <code>Any</code>, vertical: <code>Any</code>, horizontal: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.set_percent_v(scroll: <code>Any</code>, vertical: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.set_percent_h(scroll: <code>Any</code>, horizontal: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.set_scroll_v(scroll: <code>Any</code>, vertical: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.set_scroll_h(scroll: <code>Any</code>, horizontal: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.get_percent_v(scroll: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.get_percent_h(scroll: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.get_scroll_v(scroll: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.get_scroll_h(scroll: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.can_scroll_v(scroll: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIScroll.can_scroll_h(scroll: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/slider/","title":"Slider","text":""},{"location":"api/v/next/ui/slider/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/ui/slider/#luxe-uislider-module","title":"<code>luxe: ui/slider</code> module","text":"<ul> <li>UISlider </li> </ul>"},{"location":"api/v/next/ui/slider/#uislider","title":"UISlider","text":"<p><code>import \"luxe: ui/slider\" for UISlider</code></p> <p>no docs found</p> <ul> <li>create(ui_entity: <code>Any</code>)</li> <li>set_value(control: <code>Any</code>, value: <code>Any</code>, event_kind: <code>Any</code>)</li> <li>set_value(control: <code>Any</code>, value: <code>Any</code>)</li> <li>get_value(control: <code>Any</code>)</li> <li>set_step(control: <code>Any</code>, value: <code>Any</code>)</li> <li>get_step(control: <code>Any</code>)</li> <li>set_min(control: <code>Any</code>, value: <code>Any</code>)</li> <li>get_min(control: <code>Any</code>)</li> <li>set_max(control: <code>Any</code>, value: <code>Any</code>)</li> <li>get_max(control: <code>Any</code>)</li> <li>set_inverted(control: <code>Any</code>, value: <code>Any</code>)</li> <li>get_inverted(control: <code>Any</code>)</li> </ul> <p> UISlider.create(ui_entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UISlider.set_value(control: <code>Any</code>, value: <code>Any</code>, event_kind: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UISlider.set_value(control: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UISlider.get_value(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UISlider.set_step(control: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UISlider.get_step(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UISlider.set_min(control: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UISlider.get_min(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UISlider.set_max(control: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UISlider.get_max(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UISlider.set_inverted(control: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UISlider.get_inverted(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/tabs/","title":"Tabs","text":""},{"location":"api/v/next/ui/tabs/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/ui/tabs/#luxe-uitabs-module","title":"<code>luxe: ui/tabs</code> module","text":"<ul> <li>UITabs </li> </ul>"},{"location":"api/v/next/ui/tabs/#uitabs","title":"UITabs","text":"<p><code>import \"luxe: ui/tabs\" for UITabs</code></p> <p>no docs found</p> <ul> <li>create(ui: <code>Any</code>)</li> <li>set_active(control: <code>Control</code>, index: <code>Num</code>)</li> <li>get_active(control: <code>Control</code>)</li> <li>get_count(control: <code>Control</code>)</li> <li>set_colors(control: <code>Control</code>, active: <code>Color</code>, inactive: <code>Color</code>)</li> <li>get_tab_header(control: <code>Control</code>, index: <code>Num</code>)</li> <li>get_tab(control: <code>Control</code>, index: <code>Num</code>)</li> <li>add_tab(control: <code>Control</code>, title: <code>String</code>, title_color: <code>Color</code>)</li> </ul> <p> UITabs.create(ui: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UITabs.set_active(control: <code>Control</code>, index: <code>Num</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> UITabs.get_active(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> UITabs.get_count(control: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> UITabs.set_colors(control: <code>Control</code>, active: <code>Color</code>, inactive: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UITabs.get_tab_header(control: <code>Control</code>, index: <code>Num</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p> <p> UITabs.get_tab(control: <code>Control</code>, index: <code>Num</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p> <p> UITabs.add_tab(control: <code>Control</code>, title: <code>String</code>, title_color: <code>Color</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/text/","title":"Text","text":""},{"location":"api/v/next/ui/text/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/ui/text/#luxe-uitext-module","title":"<code>luxe: ui/text</code> module","text":"<ul> <li>UIText </li> </ul>"},{"location":"api/v/next/ui/text/#uitext","title":"UIText","text":"<p><code>import \"luxe: ui/text\" for UIText</code></p> <p>no docs found</p> <ul> <li>create(ui_entity: <code>Any</code>)</li> <li>set_text(control: <code>Any</code>, text: <code>Any</code>)</li> <li>get_text(control: <code>Any</code>)</li> <li>set_font(control: <code>Any</code>, font: <code>Any</code>)</li> <li>get_font(control: <code>Any</code>)</li> <li>set_colors(control: <code>Any</code>, bg: <code>Color</code>, border: <code>Color</code>, border_hover: <code>Color</code>, border_focused: <code>Color</code>)</li> <li>set_radius(control: <code>Control</code>, radius: <code>Float4</code>, smoothness: <code>Float4</code>)</li> <li>set_color(control: <code>Any</code>, color: <code>Any</code>)</li> <li>get_color(control: <code>Any</code>)</li> <li>set_text_size(control: <code>Any</code>, size: <code>Any</code>)</li> <li>get_text_size(control: <code>Any</code>)</li> <li>set_align(control: <code>Any</code>, align: <code>Any</code>)</li> <li>get_align(control: <code>Any</code>)</li> <li>set_align_vertical(control: <code>Any</code>, align: <code>Any</code>)</li> <li>get_align_vertical(control: <code>Any</code>)</li> <li>select_all(control: <code>Any</code>)</li> <li>invalidate(control: <code>Control</code>, change_before: <code>String</code>)</li> <li>set_outline(control: <code>UIText</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>)</li> <li>set_shadow(control: <code>UIText</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>)</li> </ul> <p> UIText.create(ui_entity: <code>Any</code>) \u00b6 returns <code>UIText</code></p> <p>no docs found   </p> <p> UIText.set_text(control: <code>Any</code>, text: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.get_text(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.set_font(control: <code>Any</code>, font: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.get_font(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.set_colors(control: <code>Any</code>, bg: <code>Color</code>, border: <code>Color</code>, border_hover: <code>Color</code>, border_focused: <code>Color</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.set_radius(control: <code>Control</code>, radius: <code>Float4</code>, smoothness: <code>Float4</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UIText.set_color(control: <code>Any</code>, color: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.get_color(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.set_text_size(control: <code>Any</code>, size: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.get_text_size(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.set_align(control: <code>Any</code>, align: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.get_align(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.set_align_vertical(control: <code>Any</code>, align: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.get_align_vertical(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.select_all(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.invalidate(control: <code>Control</code>, change_before: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIText.set_outline(control: <code>UIText</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>) \u00b6 returns <code>None</code></p> <p>Set the text outline parameters.   </p> <p> UIText.set_shadow(control: <code>UIText</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>) \u00b6 returns <code>None</code></p> <p>Set the text shadow parameters.   </p>"},{"location":"api/v/next/ui/window/","title":"Window","text":""},{"location":"api/v/next/ui/window/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/ui/window/#luxe-uiwindow-module","title":"<code>luxe: ui/window</code> module","text":"<ul> <li>UIWindow </li> <li>UIWindowChange </li> </ul>"},{"location":"api/v/next/ui/window/#uiwindow","title":"UIWindow","text":"<p><code>import \"luxe: ui/window\" for UIWindow</code></p> <p><code>UIWindow</code> is a <code>Control</code> with a title bar, close button, and can be moved around  and resized like a windowed application on a desktop operating system. As you'd expect, you can attach other <code>Controls</code> to it that stay attached as you move it around.</p> <pre><code>  var window = UIWindow.create(ui)\n  UIWindow.set_text(window, \"I'm a window!\")\n  UIWindow.set_title_size(window, 24)\n  UIWindow.set_text_size(window, 14)\n  UIWindow.set_resizable(window, true)\n  Control.set_bounds(window, 64, 64, 680, 360)\n</code></pre> <ul> <li>create(ui_entity: <code>Entity</code>)</li> <li>close(control: <code>UIWindow</code>)</li> <li>set_collapsed(control: <code>UIWindow</code>, state: <code>Bool</code>)</li> <li>get_collapsed(control: <code>UIWindow</code>)</li> <li>set_text(control: <code>UIWindow</code>, text: <code>String</code>)</li> <li>set_text_size(control: <code>UIWindow</code>, size: <code>Num</code>)</li> <li>set_text_color(control: <code>UIWindow</code>, color: <code>Color</code>)</li> <li>set_text_font(control: <code>UIWindow</code>, font: <code>Font</code>)</li> <li>set_title_size(control: <code>UIWindow</code>, size: <code>Num</code>)</li> <li>set_resizable(control: <code>UIWindow</code>, state: <code>Bool</code>)</li> <li>set_bring_to_front(control: <code>UIWindow</code>, state: <code>Bool</code>)</li> <li>set_closable(control: <code>UIWindow</code>, state: <code>Bool</code>)</li> <li>set_collapsible(control: <code>UIWindow</code>, state: <code>Bool</code>)</li> <li>set_draggable(control: <code>UIWindow</code>, state: <code>Bool</code>)</li> <li>get_resizable(control: <code>UIWindow</code>)</li> <li>get_bring_to_front(control: <code>UIWindow</code>)</li> <li>get_closable(control: <code>UIWindow</code>)</li> <li>get_collapsible(control: <code>UIWindow</code>)</li> <li>get_draggable(control: <code>UIWindow</code>)</li> <li>set_outline(control: <code>UIWindow</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>)</li> <li>set_shadow(control: <code>UIWindow</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>)</li> </ul> <p> UIWindow.create(ui_entity: <code>Entity</code>) \u00b6 returns <code>UIWindow</code></p> <p>Create a new <code>UIWindow</code> control for the given UI.   </p> <p> UIWindow.close(control: <code>UIWindow</code>) \u00b6 returns <code>None</code></p> <p>Make the given window disappear.   </p> <p> UIWindow.set_collapsed(control: <code>UIWindow</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set whether the given window's body is drawn (false, uncollapsed) or only the titlebar (true, collapsed).   </p> <p> UIWindow.get_collapsed(control: <code>UIWindow</code>) \u00b6 returns <code>Bool</code></p> <p>Get if the given window is collapsed.   </p> <p> UIWindow.set_text(control: <code>UIWindow</code>, text: <code>String</code>) \u00b6 returns <code>None</code></p> <p>Set the titlebar text of the given window.   </p> <p> UIWindow.set_text_size(control: <code>UIWindow</code>, size: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the size of the titlebar text of the given window.   </p> <p> UIWindow.set_text_color(control: <code>UIWindow</code>, color: <code>Color</code>) \u00b6 returns <code>None</code></p> <p>Set the color of the titlebar text of the given window.   </p> <p> UIWindow.set_text_font(control: <code>UIWindow</code>, font: <code>Font</code>) \u00b6 returns <code>None</code></p> <p>Set the font of the titlebar text of the given window.   </p> <p> UIWindow.set_title_size(control: <code>UIWindow</code>, size: <code>Num</code>) \u00b6 returns <code>None</code></p> <p>Set the height of the titlebar of the given window.   </p> <p> UIWindow.set_resizable(control: <code>UIWindow</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set if a window can be resized by dragging its bottom right corner.   </p> <p> UIWindow.set_bring_to_front(control: <code>UIWindow</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set if a window will bring itself to the front of the UI when interacted with.   </p> <p> UIWindow.set_closable(control: <code>UIWindow</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set if a window has a Close button the user can press.   </p> <p> UIWindow.set_collapsible(control: <code>UIWindow</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set if a window has a Collapse button the user can press.   </p> <p> UIWindow.set_draggable(control: <code>UIWindow</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>Set if a window can be dragged around with the mouse.   </p> <p> UIWindow.get_resizable(control: <code>UIWindow</code>) \u00b6 returns <code>Bool</code></p> <p>Get if a window can be resized by the user.   </p> <p> UIWindow.get_bring_to_front(control: <code>UIWindow</code>) \u00b6 returns <code>unknown</code></p> <p>Get if a window will bring itself to the front of the UI when interacted with.   </p> <p> UIWindow.get_closable(control: <code>UIWindow</code>) \u00b6 returns <code>unknown</code></p> <p>Get if a window has its Close button visible.   </p> <p> UIWindow.get_collapsible(control: <code>UIWindow</code>) \u00b6 returns <code>unknown</code></p> <p>Get if a window has its Collapse button visible.   </p> <p> UIWindow.get_draggable(control: <code>UIWindow</code>) \u00b6 returns <code>unknown</code></p> <p>Get if a window can be dragged around with the mouse.   </p> <p> UIWindow.set_outline(control: <code>UIWindow</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>) \u00b6 returns <code>None</code></p> <p>Set the text outline parameters.   </p> <p> UIWindow.set_shadow(control: <code>UIWindow</code>, radius: <code>Num</code>, softness: <code>Num</code>, color: <code>Color</code>, offset: <code>Float2</code>) \u00b6 returns <code>None</code></p> <p>Set the text shadow parameters.   </p>"},{"location":"api/v/next/ui/window/#uiwindowchange","title":"UIWindowChange","text":"<p><code>import \"luxe: ui/window\" for UIWindowChange</code></p> <p>no docs found</p> <ul> <li>close</li> <li>open</li> <li>collapse</li> <li>uncollapse</li> <li>move</li> <li>name(value: <code>Any</code>)</li> </ul> <p> UIWindowChange.close \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWindowChange.open \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWindowChange.collapse \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWindowChange.uncollapse \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWindowChange.move \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWindowChange.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/world/","title":"World","text":""},{"location":"api/v/next/ui/world/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/ui/world/#luxe-uiworld-module","title":"<code>luxe: ui/world</code> module","text":"<ul> <li>BucketKind </li> <li>TreeNodeIter </li> <li>UIWorld </li> <li>UIWorldEvent </li> <li>UIWorldIcon </li> </ul>"},{"location":"api/v/next/ui/world/#bucketkind","title":"BucketKind","text":"<p><code>import \"luxe: ui/world\" for BucketKind</code></p> <p>no docs found</p> <ul> <li>folders</li> <li>contexts</li> <li>entities</li> <li>name(value: <code>Any</code>)</li> </ul> <p> BucketKind.folders \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BucketKind.contexts \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BucketKind.entities \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> BucketKind.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/world/#treenodeiter","title":"TreeNodeIter","text":"<p><code>import \"luxe: ui/world\" for TreeNodeIter</code></p> <p>no docs found</p> <ul> <li>node</li> <li>new(node: <code>TreeNode</code>, depth: <code>Num</code>)</li> <li>iteratorValue(index: <code>Num</code>)</li> <li>next_bucket(from_start: <code>Bool</code>)</li> <li>iterate(index: <code>Num</code>)</li> </ul> <p> TreeNodeIter.node \u00b6 returns <code>TreeNode</code></p> <p>no docs found   </p> <p> TreeNodeIter.new(node: <code>TreeNode</code>, depth: <code>Num</code>) \u00b6 returns <code>TreeNodeIter</code></p> <p>no docs found   </p> <p> TreeNodeIter.iteratorValue(index: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TreeNodeIter.next_bucket(from_start: <code>Bool</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> TreeNodeIter.iterate(index: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/world/#uiworld","title":"UIWorld","text":"<p><code>import \"luxe: ui/world\" for UIWorld</code></p> <p>no docs found</p> <ul> <li>create(ui: <code>UI</code>)</li> <li>set_world(control: <code>Control</code>, world: <code>World</code>)</li> <li>set_handle_default_icons(control: <code>Control</code>, enable: <code>Bool</code>)</li> <li>refresh(control: <code>Control</code>)</li> <li>get_view(control: <code>Control</code>)</li> <li>scroll_to(control: <code>Control</code>, entity: <code>Entity</code>)</li> <li>set_selection(control: <code>Control</code>, selection: <code>Selection</code>)</li> <li>get_selection(control: <code>Control</code>)</li> <li>enter_select_mode(control: <code>Control</code>, enter_state: <code>Bool</code>, display: <code>String</code>)</li> <li>show_rename(control: <code>Control</code>)</li> </ul> <p> UIWorld.create(ui: <code>UI</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p> <p> UIWorld.set_world(control: <code>Control</code>, world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorld.set_handle_default_icons(control: <code>Control</code>, enable: <code>Bool</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorld.refresh(control: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorld.get_view(control: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorld.scroll_to(control: <code>Control</code>, entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorld.set_selection(control: <code>Control</code>, selection: <code>Selection</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UIWorld.get_selection(control: <code>Control</code>) \u00b6 returns <code>Selection</code></p> <p>no docs found   </p> <p> UIWorld.enter_select_mode(control: <code>Control</code>, enter_state: <code>Bool</code>, display: <code>String</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> UIWorld.show_rename(control: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/world/#uiworldevent","title":"UIWorldEvent","text":"<p><code>import \"luxe: ui/world\" for UIWorldEvent</code></p> <p>no docs found</p> <ul> <li>filter</li> <li>save</li> <li>save_all</li> <li>delete</li> <li>duplicate</li> <li>rename</li> <li>active_context</li> <li>focus</li> <li>close</li> <li>kind</li> <li>items</li> <li>data</li> <li>new(kind: <code>UIWorldEvent</code>, items: <code>List</code>, data: <code>Any</code>)</li> </ul> <p> UIWorldEvent.filter \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldEvent.save \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldEvent.save_all \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldEvent.delete \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldEvent.duplicate \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldEvent.rename \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldEvent.active_context \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldEvent.focus \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldEvent.close \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldEvent.kind \u00b6 returns <code>Any</code></p> <p>no docs found   </p> <p> UIWorldEvent.items \u00b6 returns <code>Any</code></p> <p>no docs found   </p> <p> UIWorldEvent.data \u00b6 returns <code>Any</code></p> <p>no docs found   </p> <p> UIWorldEvent.new(kind: <code>UIWorldEvent</code>, items: <code>List</code>, data: <code>Any</code>) \u00b6 returns <code>UIWorldEvent</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/world/#uiworldicon","title":"UIWorldIcon","text":"<p><code>import \"luxe: ui/world\" for UIWorldIcon</code></p> <p>no docs found</p> <ul> <li>icon</li> <li>enabled</li> <li>enabled(handle: <code>Num</code>)</li> <li>tooltip</li> <li>tooltip=(v : String)</li> <li>selection_based</li> <li>selection_based=(v : String)</li> <li>allow_indirect</li> <li>allow_indirect=(v : String)</li> <li>svg</li> <li>svg=(v : Any)</li> <li>new(world_view: <code>UIWorld</code>)</li> <li>enable()</li> <li>enable(handle: <code>Num</code>)</li> <li>disable()</li> <li>disable(handle: <code>Num</code>)</li> <li>can_do_direct_only_action(list: <code>List</code>)</li> <li>on_selection(fn: <code>Fn</code>)</li> <li>on_release(fn: <code>Fn</code>)</li> <li>on_enter(fn: <code>Fn</code>)</li> <li>on_exit(fn: <code>Fn</code>)</li> </ul> <p> UIWorldIcon.icon \u00b6 returns <code>Control</code></p> <p>no docs found   </p> <p> UIWorldIcon.enabled \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> UIWorldIcon.enabled(handle: <code>Num</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> UIWorldIcon.tooltip \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> UIWorldIcon.tooltip=(v : String) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldIcon.selection_based \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> UIWorldIcon.selection_based=(v : String) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldIcon.allow_indirect \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> UIWorldIcon.allow_indirect=(v : String) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldIcon.svg \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> UIWorldIcon.svg=(v : Any) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> UIWorldIcon.new(world_view: <code>UIWorld</code>) \u00b6 returns <code>UIWorldIcon</code></p> <p>no docs found   </p> <p> UIWorldIcon.enable() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldIcon.enable(handle: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldIcon.disable() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldIcon.disable(handle: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldIcon.can_do_direct_only_action(list: <code>List</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> UIWorldIcon.on_selection(fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldIcon.on_release(fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldIcon.on_enter(fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIWorldIcon.on_exit(fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/field/choice/","title":"Choice","text":""},{"location":"api/v/next/ui/field/choice/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/ui/field/choice/#luxe-uifieldchoice-module","title":"<code>luxe: ui/field/choice</code> module","text":"<ul> <li>State </li> <li>UIChoice </li> </ul>"},{"location":"api/v/next/ui/field/choice/#state","title":"State","text":"<p><code>import \"luxe: ui/field/choice\" for State</code></p> <p>no docs found</p> <ul> <li>list</li> <li>new(ui: <code>Any</code>, control: <code>Any</code>)</li> <li>resize()</li> <li>add(control: <code>Any</code>, keywords: <code>Any</code>)</li> <li>remove(control: <code>Any</code>)</li> <li>clear(uiclear_action: <code>Any</code>)</li> <li>count()</li> <li>get(index: <code>Num</code>)</li> <li>refresh()</li> <li>focus()</li> <li>placeholder=(v : Any)</li> <li>placeholder</li> <li>fn=(v : Any)</li> <li>fn</li> <li>has_filter</li> <li>force_filter(text: <code>Any</code>, focus: <code>Any</code>)</li> <li>cancel_filter()</li> <li>filter(filter: <code>Any</code>)</li> </ul> <p> State.list \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.new(ui: <code>Any</code>, control: <code>Any</code>) \u00b6 returns <code>State</code></p> <p>no docs found   </p> <p> State.resize() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.add(control: <code>Any</code>, keywords: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.remove(control: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.clear(uiclear_action: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.count() \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> State.get(index: <code>Num</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p> <p> State.refresh() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.focus() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.placeholder=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.placeholder \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.fn=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.fn \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.has_filter \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.force_filter(text: <code>Any</code>, focus: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.cancel_filter() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> State.filter(filter: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/field/choice/#uichoice","title":"UIChoice","text":"<p><code>import \"luxe: ui/field/choice\" for UIChoice</code></p> <p>no docs found</p> <ul> <li>create(ui: <code>UI</code>)</li> <li>get_placeholder(choice: <code>Control</code>)</li> <li>set_placeholder(choice: <code>Control</code>, text: <code>String</code>)</li> <li>set_filter(choice: <code>Control</code>, fn: <code>Fn</code>)</li> <li>add(choice: <code>Control</code>, control: <code>Control</code>, keywords: <code>List</code>)</li> <li>remove(choice: <code>Control</code>, control: <code>Control</code>)</li> <li>clear(choice: <code>Control</code>, uiclear_action: <code>UIClear</code>)</li> <li>refresh(choice: <code>Control</code>)</li> <li>focus(choice: <code>Control</code>)</li> <li>count(choice: <code>Control</code>)</li> <li>get_choice(choice: <code>Control</code>, index: <code>Num</code>)</li> </ul> <p> UIChoice.create(ui: <code>UI</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p> <p> UIChoice.get_placeholder(choice: <code>Control</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> UIChoice.set_placeholder(choice: <code>Control</code>, text: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIChoice.set_filter(choice: <code>Control</code>, fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIChoice.add(choice: <code>Control</code>, control: <code>Control</code>, keywords: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIChoice.remove(choice: <code>Control</code>, control: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIChoice.clear(choice: <code>Control</code>, uiclear_action: <code>UIClear</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIChoice.refresh(choice: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIChoice.focus(choice: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIChoice.count(choice: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> UIChoice.get_choice(choice: <code>Control</code>, index: <code>Num</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/field/color/","title":"Color","text":""},{"location":"api/v/next/ui/field/color/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/ui/field/color/#luxe-uifieldcolor-module","title":"<code>luxe: ui/field/color</code> module","text":"<ul> <li>UIColor </li> <li>UIColorData </li> </ul>"},{"location":"api/v/next/ui/field/color/#uicolor","title":"UIColor","text":"<p><code>import \"luxe: ui/field/color\" for UIColor</code></p> <p>no docs found</p> <ul> <li>create(ui: <code>Entity</code>)</li> <li>set_color(control: <code>Control</code>, color: <code>Color</code>)</li> <li>set_colors(control: <code>Control</code>, colors: <code>Color</code>)</li> <li>get_color(control: <code>Control</code>)</li> <li>get_text_field(vec: <code>Control</code>, index: <code>Num</code>)</li> </ul> <p> UIColor.create(ui: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIColor.set_color(control: <code>Control</code>, color: <code>Color</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIColor.set_colors(control: <code>Control</code>, colors: <code>Color</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIColor.get_color(control: <code>Control</code>) \u00b6 returns <code>Color</code></p> <p>no docs found   </p> <p> UIColor.get_text_field(vec: <code>Control</code>, index: <code>Num</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/field/color/#uicolordata","title":"UIColorData","text":"<p><code>import \"luxe: ui/field/color\" for UIColorData</code></p> <p>no docs found</p> <ul> <li>new(ui: <code>Entity</code>, control: <code>Control</code>)</li> <li>create(root: <code>Control</code>)</li> <li>reset_mixed()</li> <li>set_color(color: <code>Color</code>)</li> <li>set_colors(colors: <code>List</code>)</li> <li>colors_similar(colors: <code>List</code>)</li> <li>destroy()</li> <li>get_color()</li> <li>get_text_field(index: <code>Num</code>)</li> </ul> <p> UIColorData.new(ui: <code>Entity</code>, control: <code>Control</code>) \u00b6 returns <code>UIColorData</code></p> <p>no docs found   </p> <p> UIColorData.create(root: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIColorData.reset_mixed() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIColorData.set_color(color: <code>Color</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIColorData.set_colors(colors: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIColorData.colors_similar(colors: <code>List</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIColorData.destroy() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIColorData.get_color() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIColorData.get_text_field(index: <code>Num</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/field/framemarks/","title":"Framemarks","text":""},{"location":"api/v/next/ui/field/framemarks/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/ui/field/framemarks/#luxe-uifieldframemarks-module","title":"<code>luxe: ui/field/framemarks</code> module","text":"<ul> <li>UIFrameMarks </li> <li>UIFrameMarksState </li> </ul>"},{"location":"api/v/next/ui/field/framemarks/#uiframemarks","title":"UIFrameMarks","text":"<p><code>import \"luxe: ui/field/framemarks\" for UIFrameMarks</code></p> <p>no docs found</p> <ul> <li>create(ui: <code>Entity</code>)</li> </ul> <p> UIFrameMarks.create(ui: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/field/framemarks/#uiframemarksstate","title":"UIFrameMarksState","text":"<p><code>import \"luxe: ui/field/framemarks\" for UIFrameMarksState</code></p> <p>no docs found</p> <ul> <li><code>var style : null = PathStyle.new</code></li> <li>new(ui: <code>Entity</code>, ctrl: <code>Control</code>)</li> </ul> <p> UIFrameMarksState.new(ui: <code>Entity</code>, ctrl: <code>Control</code>) \u00b6 returns <code>UIFrameMarksState</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/field/number/","title":"Number","text":""},{"location":"api/v/next/ui/field/number/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/ui/field/number/#luxe-uifieldnumber-module","title":"<code>luxe: ui/field/number</code> module","text":"<ul> <li>UINumber </li> <li>UINumberState </li> </ul>"},{"location":"api/v/next/ui/field/number/#uinumber","title":"UINumber","text":"<p><code>import \"luxe: ui/field/number\" for UINumber</code></p> <p>no docs found</p> <ul> <li>create(ui: <code>Any</code>)</li> <li>get_text_field(num: <code>Control</code>)</li> <li>get_value(num: <code>Control</code>)</li> <li>get_valid(num: <code>Control</code>)</li> <li>set_value(num: <code>Control</code>, value: <code>Num</code>)</li> <li>set_precision(num: <code>Control</code>, value: <code>Num</code>)</li> <li>get_precision(num: <code>Control</code>, value: <code>Num</code>)</li> <li>set_validation(num: <code>Control</code>, fn: <code>Fn</code>)</li> </ul> <p> UINumber.create(ui: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumber.get_text_field(num: <code>Control</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p> <p> UINumber.get_value(num: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> UINumber.get_valid(num: <code>Control</code>) \u00b6 returns <code>Num</code></p> <p>no docs found   </p> <p> UINumber.set_value(num: <code>Control</code>, value: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumber.set_precision(num: <code>Control</code>, value: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumber.get_precision(num: <code>Control</code>, value: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumber.set_validation(num: <code>Control</code>, fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/field/number/#uinumberstate","title":"UINumberState","text":"<p><code>import \"luxe: ui/field/number\" for UINumberState</code></p> <p>no docs found</p> <ul> <li>validation</li> <li>validation=(v : Any)</li> <li>text_control</li> <li>text_value</li> <li>precision</li> <li>precision=(v : Any)</li> <li>value</li> <li>valid</li> <li>new(ui: <code>Any</code>, ctrl: <code>Any</code>)</li> <li>set_value(value: <code>Any</code>)</li> <li>resize(x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>)</li> <li>refresh_radial()</li> <li>expand_radial(state: <code>Any</code>)</li> <li>fix(value: <code>Num</code>)</li> <li>on_radial_event(event: <code>Any</code>)</li> <li>cancel_radial_capture()</li> <li>render_radial(control: <code>Any</code>, state: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>)</li> <li>make_num(string: <code>String</code>)</li> <li>validate(num: <code>Num</code>)</li> <li>try_expression(string: <code>String</code>)</li> <li>on_text_event(event: <code>Any</code>)</li> </ul> <p> UINumberState.validation \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.validation=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.text_control \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.text_value \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.precision \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.precision=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.value \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.valid \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.new(ui: <code>Any</code>, ctrl: <code>Any</code>) \u00b6 returns <code>UINumberState</code></p> <p>no docs found   </p> <p> UINumberState.set_value(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.resize(x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.refresh_radial() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.expand_radial(state: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.fix(value: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.on_radial_event(event: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.cancel_radial_capture() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.render_radial(control: <code>Any</code>, state: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.make_num(string: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.validate(num: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.try_expression(string: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UINumberState.on_text_event(event: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/field/path/","title":"Path","text":""},{"location":"api/v/next/ui/field/path/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/ui/field/path/#luxe-uifieldpath-module","title":"<code>luxe: ui/field/path</code> module","text":"<ul> <li>UIPath </li> <li>UIPathState </li> <li>UIPathType </li> </ul>"},{"location":"api/v/next/ui/field/path/#uipath","title":"UIPath","text":"<p><code>import \"luxe: ui/field/path\" for UIPath</code></p> <p>no docs found</p> <ul> <li>create(ui: <code>Entity</code>)</li> <li>set_validation(path: <code>Control</code>, fn: <code>Fn</code>)</li> <li>set_defaults(path: <code>Control</code>, default_path: <code>String</code>, filters: <code>String</code>)</li> <li>set_defaults(path: <code>Control</code>, default_path: <code>String</code>)</li> <li>set_type(path: <code>Control</code>, type: <code>UIPathType</code>)</li> <li>get_text_field(path: <code>Control</code>)</li> <li>get_path(path: <code>Control</code>)</li> <li>set_path(path: <code>Control</code>, path_value: <code>String</code>)</li> </ul> <p> UIPath.create(ui: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIPath.set_validation(path: <code>Control</code>, fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>set a validation function to be called which will ensure the path is validated before use   </p> <p> UIPath.set_defaults(path: <code>Control</code>, default_path: <code>String</code>, filters: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>set the default file dialog path and file dialog filters   </p> <p> UIPath.set_defaults(path: <code>Control</code>, default_path: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>set the default file dialog path   </p> <p> UIPath.set_type(path: <code>Control</code>, type: <code>UIPathType</code>) \u00b6 returns <code>unknown</code></p> <p>set the path type, to open/save/folder   </p> <p> UIPath.get_text_field(path: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>return the text field   </p> <p> UIPath.get_path(path: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>return the path stored in the field   </p> <p> UIPath.set_path(path: <code>Control</code>, path_value: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>set the path stored in the field (will be validated)   </p>"},{"location":"api/v/next/ui/field/path/#uipathstate","title":"UIPathState","text":"<p><code>import \"luxe: ui/field/path\" for UIPathState</code></p> <p>no docs found</p> <ul> <li>new(ui: <code>Entity</code>, control: <code>Control</code>)</li> <li>get_text_field()</li> <li>get_path()</li> <li>set_path(path: <code>String</code>)</li> <li>set_validation(fn: <code>Fn</code>)</li> <li>set_defaults(default_path: <code>String</code>, filters: <code>String</code>)</li> <li>set_type(type: <code>UIPathType</code>)</li> </ul> <p> UIPathState.new(ui: <code>Entity</code>, control: <code>Control</code>) \u00b6 returns <code>UIPathState</code></p> <p>no docs found   </p> <p> UIPathState.get_text_field() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIPathState.get_path() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIPathState.set_path(path: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIPathState.set_validation(fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIPathState.set_defaults(default_path: <code>String</code>, filters: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIPathState.set_type(type: <code>UIPathType</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/field/path/#uipathtype","title":"UIPathType","text":"<p><code>import \"luxe: ui/field/path\" for UIPathType</code></p> <p>no docs found</p> <ul> <li>open</li> <li>save</li> <li>folder</li> </ul> <p> UIPathType.open \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIPathType.save \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIPathType.folder \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/field/vector/","title":"Vector","text":""},{"location":"api/v/next/ui/field/vector/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/ui/field/vector/#luxe-uifieldvector-module","title":"<code>luxe: ui/field/vector</code> module","text":"<ul> <li>UIVector </li> <li>UIVectorState </li> </ul>"},{"location":"api/v/next/ui/field/vector/#uivector","title":"UIVector","text":"<p><code>import \"luxe: ui/field/vector\" for UIVector</code></p> <p>no docs found</p> <ul> <li>create(ui: <code>Any</code>)</li> <li>get_component_count(vec: <code>Control</code>)</li> <li>set_component_count(vec: <code>Control</code>, count: <code>Num</code>)</li> <li>get_value(vec: <code>Control</code>)</li> <li>set_value(vec: <code>Control</code>, value: <code>Vec</code>)</li> <li>get_text_field(vec: <code>Control</code>, index: <code>Num</code>)</li> </ul> <p> UIVector.create(ui: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIVector.get_component_count(vec: <code>Control</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIVector.set_component_count(vec: <code>Control</code>, count: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIVector.get_value(vec: <code>Control</code>) \u00b6 returns <code>Vec</code></p> <p>no docs found   </p> <p> UIVector.set_value(vec: <code>Control</code>, value: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIVector.get_text_field(vec: <code>Control</code>, index: <code>Num</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p>"},{"location":"api/v/next/ui/field/vector/#uivectorstate","title":"UIVectorState","text":"<p><code>import \"luxe: ui/field/vector\" for UIVectorState</code></p> <p>no docs found</p> <ul> <li>components</li> <li>components=(v : Any)</li> <li>value</li> <li>set_value(value: <code>Vec</code>)</li> <li>get_text_field(index: <code>Num</code>)</li> <li>make_field(index: <code>Num</code>)</li> <li>new(ui: <code>Any</code>, ctrl: <code>Any</code>)</li> <li>on_event(field: <code>Any</code>, event: <code>Any</code>)</li> </ul> <p> UIVectorState.components \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIVectorState.components=(v : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIVectorState.value \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIVectorState.set_value(value: <code>Vec</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIVectorState.get_text_field(index: <code>Num</code>) \u00b6 returns <code>Control</code></p> <p>no docs found   </p> <p> UIVectorState.make_field(index: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> UIVectorState.new(ui: <code>Any</code>, ctrl: <code>Any</code>) \u00b6 returns <code>UIVectorState</code></p> <p>no docs found   </p> <p> UIVectorState.on_event(field: <code>Any</code>, event: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/world/modifier/","title":"Modifier","text":""},{"location":"api/v/next/world/modifier/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/world/modifier/#luxe-worldmodifier-module","title":"<code>luxe: world/modifier</code> module","text":"<ul> <li>Modifier </li> <li>ModifierChange </li> </ul>"},{"location":"api/v/next/world/modifier/#modifier","title":"Modifier","text":"<p><code>import \"luxe: world/modifier\" for Modifier</code></p> <p>no docs found</p> <ul> <li>create(modifier_id: <code>String</code>, entity: <code>Entity</code>)</li> <li>destroy(modifier_id: <code>String</code>, entity: <code>Entity</code>)</li> <li>has(modifier_id: <code>String</code>, entity: <code>Entity</code>, ignore_removed_flag: <code>Bool</code>)</li> <li>has(modifier_id: <code>String</code>, entity: <code>Entity</code>)</li> <li>get_missing_expected(modifier_meta: <code>ModifierMeta</code>, entity: <code>Entity</code>)</li> <li>has_expected(modifier_meta: <code>ModifierMeta</code>, entity: <code>Entity</code>)</li> <li>set_transient(entity: <code>Entity</code>, modifier_id: <code>String</code>, state: <code>Bool</code>)</li> <li>set_transient(entity: <code>Entity</code>, modifier_id: <code>String</code>, state: <code>Bool</code>, commit: <code>Bool</code>)</li> <li>get_transient(entity: <code>Entity</code>, modifier_id: <code>String</code>)</li> <li>get(entity: <code>String</code>, modifier_id: <code>String</code>)</li> <li>get_attached_to(world: <code>World</code>, modifier_id: <code>String</code>)</li> <li>get_meta(modifier_id: <code>String</code>)</li> <li>connect(world: <code>World</code>, modifier_id: <code>String</code>, wire: <code>Num</code>, fn: <code>Fn</code>)</li> <li>send(modifier_id: <code>String</code>, wire: <code>Num</code>, entity: <code>Entity</code>, data: <code>Any</code>)</li> <li>get_attached(entity: <code>Entity</code>)</li> <li>get_modifier_id(world: <code>World</code>, block: <code>Block</code>)</li> </ul> <p> Modifier.create(modifier_id: <code>String</code>, entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Modifier.destroy(modifier_id: <code>String</code>, entity: <code>Entity</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Modifier.has(modifier_id: <code>String</code>, entity: <code>Entity</code>, ignore_removed_flag: <code>Bool</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Modifier.has(modifier_id: <code>String</code>, entity: <code>Entity</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Modifier.get_missing_expected(modifier_meta: <code>ModifierMeta</code>, entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifier.has_expected(modifier_meta: <code>ModifierMeta</code>, entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifier.set_transient(entity: <code>Entity</code>, modifier_id: <code>String</code>, state: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Modifier.set_transient(entity: <code>Entity</code>, modifier_id: <code>String</code>, state: <code>Bool</code>, commit: <code>Bool</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> Modifier.get_transient(entity: <code>Entity</code>, modifier_id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> Modifier.get(entity: <code>String</code>, modifier_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifier.get_attached_to(world: <code>World</code>, modifier_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifier.get_meta(modifier_id: <code>String</code>) \u00b6 returns <code>ModifierMeta</code></p> <p>no docs found   </p> <p> Modifier.connect(world: <code>World</code>, modifier_id: <code>String</code>, wire: <code>Num</code>, fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifier.send(modifier_id: <code>String</code>, wire: <code>Num</code>, entity: <code>Entity</code>, data: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Modifier.get_attached(entity: <code>Entity</code>) \u00b6 returns <code>Set</code></p> <p>Returns a set of attached modifier IDs for the given entity   </p> <p> Modifier.get_modifier_id(world: <code>World</code>, block: <code>Block</code>) \u00b6 returns <code>String</code></p> <p>Returns a modifier id (or null if not found) for the given data block   </p>"},{"location":"api/v/next/world/modifier/#modifierchange","title":"ModifierChange","text":"<p><code>import \"luxe: world/modifier\" for ModifierChange</code></p> <p>no docs found</p> <ul> <li><code>var world : World = 0</code></li> <li><code>var block : Block = 0</code></li> <li><code>var instance : BlockInstance = 0</code></li> <li><code>var field_path : String = null</code></li> <li><code>var field_id : String = null</code></li> <li>new()</li> <li>update(in_world: <code>World</code>, in_block: <code>Block</code>, in_instance: <code>BlockInstance</code>, in_field_path: <code>String</code>)</li> <li>array_count(field: <code>String</code>)</li> <li>value</li> <li>value_for(field: <code>String</code>)</li> <li>value_for(field: <code>String</code>, array_index: <code>Num</code>)</li> </ul> <p> ModifierChange.new() \u00b6 returns <code>ModifierChange</code></p> <p>no docs found   </p> <p> ModifierChange.update(in_world: <code>World</code>, in_block: <code>Block</code>, in_instance: <code>BlockInstance</code>, in_field_path: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierChange.array_count(field: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierChange.value \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierChange.value_for(field: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ModifierChange.value_for(field: <code>String</code>, array_index: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/world/prototype/","title":"Prototype","text":""},{"location":"api/v/next/world/prototype/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/world/prototype/#luxe-worldprototype-module","title":"<code>luxe: world/prototype</code> module","text":"<ul> <li>Prototype </li> </ul>"},{"location":"api/v/next/world/prototype/#prototype","title":"Prototype","text":"<p><code>import \"luxe: world/prototype\" for Prototype</code></p> <p>no docs found</p> <ul> <li>create(world: <code>World</code>, prototype: <code>Prototype</code>)</li> <li>create(world: <code>World</code>, prototype: <code>Prototype</code>, context_into: <code>Entity</code>, name: <code>String</code>, context_instance_uuid: <code>String</code>, subfolder: <code>String</code>)</li> <li>has(entity: <code>Entity</code>)</li> </ul> <p> Prototype.create(world: <code>World</code>, prototype: <code>Prototype</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Prototype.create(world: <code>World</code>, prototype: <code>Prototype</code>, context_into: <code>Entity</code>, name: <code>String</code>, context_instance_uuid: <code>String</code>, subfolder: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Prototype.has(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/world/scene/","title":"Scene","text":""},{"location":"api/v/next/world/scene/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/world/scene/#luxe-worldscene-module","title":"<code>luxe: world/scene</code> module","text":"<ul> <li>Scene </li> <li>SceneReady </li> <li>Stage </li> </ul>"},{"location":"api/v/next/world/scene/#scene","title":"Scene","text":"<p><code>import \"luxe: world/scene\" for Scene</code></p> <p>no docs found</p> <ul> <li>create(world: <code>World</code>, scene: <code>Scene</code>)</li> <li>create(world: <code>World</code>, scene: <code>Scene</code>, on_ready: <code>Fn</code>)</li> <li>has(entity: <code>Entity</code>)</li> </ul> <p> Scene.create(world: <code>World</code>, scene: <code>Scene</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scene.create(world: <code>World</code>, scene: <code>Scene</code>, on_ready: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Scene.has(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/world/scene/#sceneready","title":"SceneReady","text":"<p><code>import \"luxe: world/scene\" for SceneReady</code></p> <p>no docs found</p> <ul> <li><code>var world : World = 0</code></li> <li><code>var scene : Entity = Entity.none</code></li> <li>new(world: <code>World</code>, scene: <code>Entity</code>)</li> <li>editor_new(world: <code>World</code>, scene: <code>Entity</code>)</li> <li>ready(world: <code>World</code>, scene: <code>Entity</code>)</li> <li>ready()</li> <li>editor_ready(world: <code>World</code>, scene: <code>Entity</code>)</li> <li>editor_ready()</li> <li>tick(delta: <code>Num</code>)</li> <li>editor_tick(delta: <code>Num</code>)</li> <li>destroy(world: <code>World</code>, scene: <code>Entity</code>)</li> <li>destroy()</li> <li>editor_destroy(world: <code>World</code>, scene: <code>Entity</code>)</li> <li>editor_destroy()</li> </ul> <p> SceneReady.new(world: <code>World</code>, scene: <code>Entity</code>) \u00b6 returns <code>SceneReady</code></p> <p>no docs found   </p> <p> SceneReady.editor_new(world: <code>World</code>, scene: <code>Entity</code>) \u00b6 returns <code>SceneReady</code></p> <p>no docs found   </p> <p> SceneReady.ready(world: <code>World</code>, scene: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SceneReady.ready() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SceneReady.editor_ready(world: <code>World</code>, scene: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SceneReady.editor_ready() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SceneReady.tick(delta: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SceneReady.editor_tick(delta: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SceneReady.destroy(world: <code>World</code>, scene: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SceneReady.destroy() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SceneReady.editor_destroy(world: <code>World</code>, scene: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SceneReady.editor_destroy() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/world/scene/#stage","title":"Stage","text":"<p><code>import \"luxe: world/scene\" for Stage</code></p> <p>no docs found</p> <ul> <li>create(world: <code>World</code>, stage: <code>Stage</code>)</li> </ul> <p> Stage.create(world: <code>World</code>, stage: <code>Stage</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/world/world/","title":"World","text":""},{"location":"api/v/next/world/world/#luxe-api-202512","title":"<code>luxe</code> API (<code>2025.1.2</code>)","text":""},{"location":"api/v/next/world/world/#luxe-worldworld-module","title":"<code>luxe: world/world</code> module","text":"<ul> <li>OldEvent </li> <li>Wire </li> <li>World </li> </ul>"},{"location":"api/v/next/world/world/#oldevent","title":"OldEvent","text":"<p><code>import \"luxe: world/world\" for OldEvent</code></p> <p>no docs found</p> <ul> <li>destroy</li> <li>tick</li> </ul> <p> OldEvent.destroy \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> OldEvent.tick \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/world/world/#wire","title":"Wire","text":"<p><code>import \"luxe: world/world\" for Wire</code></p> <p>no docs found</p> <ul> <li><code>var id : Num = null</code></li> <li><code>var uuid : String = null</code></li> <li><code>var type : String = null</code></li> <li><code>var target : String = null</code></li> <li>create()</li> <li>send(entity: <code>Entity</code>)</li> <li>send(entity: <code>Entity</code>, data: <code>Any</code>)</li> <li>prepare()</li> <li>connect(world: <code>World</code>, uuid: <code>String</code>, fn: <code>Fn</code>)</li> <li>send(world: <code>World</code>, uuid: <code>String</code>, entity: <code>Entity</code>)</li> <li>send(world: <code>World</code>, uuid: <code>String</code>, entity: <code>Entity</code>, args: <code>Any</code>)</li> </ul> <p> Wire.create() \u00b6 returns <code>Wire</code></p> <p>no docs found   </p> <p> Wire.send(entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Wire.send(entity: <code>Entity</code>, data: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Wire.prepare() \u00b6 returns <code>Any</code></p> <p>no docs found   </p> <p> Wire.connect(world: <code>World</code>, uuid: <code>String</code>, fn: <code>Fn</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Wire.send(world: <code>World</code>, uuid: <code>String</code>, entity: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Wire.send(world: <code>World</code>, uuid: <code>String</code>, entity: <code>Entity</code>, args: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"api/v/next/world/world/#world","title":"World","text":"<p><code>import \"luxe: world/world\" for World</code></p> <p>no docs found</p> <ul> <li>get_system(world: <code>World</code>, modifier_id: <code>String</code>)</li> <li>get_scene(world: <code>World</code>, scene_id: <code>String</code>)</li> <li>get_scene_for(world: <code>World</code>, scene: <code>Entity</code>)</li> <li>exists(id: <code>String</code>)</li> <li>valid(world: <code>World</code>)</li> <li>get(id: <code>String</code>)</li> <li>get_id(world: <code>World</code>)</li> <li>set_id(world: <code>World</code>, id: <code>String</code>)</li> <li>get_default()</li> <li>set_default(world: <code>World</code>)</li> <li>list(world: <code>World</code>)</li> <li>list_ids(world: <code>World</code>)</li> <li>clear(world: <code>World</code>)</li> <li>duplicate(world: <code>World</code>)</li> <li>tag_add(world: <code>Any</code>, tag: <code>Any</code>)</li> <li>tag_remove(world: <code>Any</code>, tag: <code>Any</code>)</li> <li>tag_has(world: <code>Any</code>, tag: <code>Any</code>)</li> <li>get_scene_roots(world: <code>World</code>)</li> <li>get_delta(world: <code>Any</code>)</li> <li>tick(world: <code>World</code>, when: <code>FrameWhen</code>, section: <code>FrameSection</code>, priority: <code>Num</code>)</li> <li>tick(world: <code>World</code>)</li> <li>tick(world: <code>World</code>, delta: <code>Num</code>)</li> <li>schedule(world: <code>Any</code>, time: <code>Any</code>, count: <code>Any</code>, fn: <code>Any</code>)</li> <li>schedule(world: <code>Any</code>, time: <code>Any</code>, fn: <code>Any</code>)</li> <li>unschedule(world: <code>Any</code>, handle: <code>Any</code>)</li> <li>render_with_set(world: <code>Any</code>, camera: <code>Any</code>, set: <code>Any</code>, target_path: <code>Any</code>)</li> <li>render_with_set(world: <code>Any</code>, camera: <code>Any</code>, set: <code>Any</code>, target_path: <code>Any</code>, settings: <code>Any</code>)</li> <li>render_with_set(world: <code>Any</code>, camera: <code>Any</code>, set: <code>Any</code>, target_path: <code>Any</code>, target_resource: <code>Any</code>, target_region: <code>Any</code>, settings: <code>Any</code>)</li> <li>render(world: <code>Any</code>, camera: <code>Any</code>, target_path: <code>Any</code>)</li> <li>render(world: <code>Any</code>, camera: <code>Any</code>, target_path: <code>Any</code>, settings: <code>Any</code>)</li> <li>render(world: <code>Any</code>, camera: <code>Any</code>, target_path: <code>Any</code>, target_resource: <code>Any</code>, target_region: <code>Any</code>, settings: <code>Any</code>)</li> <li>render(world: <code>Any</code>, desc: <code>Any</code>)</li> <li>render_fn(world: <code>Any</code>, camera: <code>Any</code>, target_resource: <code>Any</code>, target_region: <code>Any</code>, settings: <code>Any</code>, fn: <code>Any</code>)</li> <li>get_phases(world: <code>World</code>)</li> <li>get_phase_modifiers(world: <code>World</code>, phase: <code>Num</code>, stage: <code>Num</code>)</li> <li>get_modifier_block(world: <code>World</code>, modifier_id: <code>String</code>)</li> <li>get_sorted_modifiers(world: <code>World</code>)</li> <li>get_rate(world: <code>Any</code>)</li> <li>set_rate(world: <code>Any</code>, rate: <code>Any</code>)</li> <li>set_time(world: <code>Any</code>, time: <code>Any</code>)</li> <li>time(world: <code>Any</code>)</li> <li>render_set(world: <code>Any</code>)</li> <li>render_set_add(world: <code>Any</code>, geometry: <code>Any</code>)</li> <li>render_set_add(world: <code>Any</code>, geometry: <code>Any</code>, entity: <code>Any</code>)</li> <li>render_set_remove(world: <code>Any</code>, geometry: <code>Any</code>)</li> <li>render_set_remove(world: <code>Any</code>, geometry: <code>Any</code>, entity: <code>Any</code>)</li> <li>render_get_entity(world: <code>Any</code>, geometry: <code>Any</code>)</li> <li>render_get_entity_set(entity: <code>Any</code>)</li> <li>disable(world: <code>Any</code>, state: <code>Any</code>, entities: <code>Any</code>)</li> <li>disable(world: <code>Any</code>, state: <code>Any</code>)</li> <li>emit(world: <code>Any</code>, tags: <code>Any</code>)</li> <li>emit(world: <code>Any</code>, tags: <code>Any</code>, data: <code>Any</code>)</li> <li>listen(world: <code>Any</code>, tags: <code>Any</code>, fn: <code>Any</code>)</li> <li>unlisten(world: <code>Any</code>, tags: <code>Any</code>, fn: <code>Any</code>)</li> <li>create()</li> <li>create(id: <code>Any</code>)</li> <li>destroy(world: <code>Any</code>)</li> <li>on_register_system(world: <code>World</code>, fn: <code>Fn</code>)</li> <li>off_register_system(world: <code>World</code>, listener: <code>Handle</code>)</li> <li>tick_now(world: <code>Any</code>, delta: <code>Any</code>)</li> <li>live_worlds</li> </ul> <p> World.get_system(world: <code>World</code>, modifier_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.get_scene(world: <code>World</code>, scene_id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.get_scene_for(world: <code>World</code>, scene: <code>Entity</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.exists(id: <code>String</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> World.valid(world: <code>World</code>) \u00b6 returns <code>Bool</code></p> <p>no docs found   </p> <p> World.get(id: <code>String</code>) \u00b6 returns <code>World</code></p> <p>no docs found   </p> <p> World.get_id(world: <code>World</code>) \u00b6 returns <code>String</code></p> <p>no docs found   </p> <p> World.set_id(world: <code>World</code>, id: <code>String</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.get_default() \u00b6 returns <code>World</code></p> <p>no docs found   </p> <p> World.set_default(world: <code>World</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> World.list(world: <code>World</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> World.list_ids(world: <code>World</code>) \u00b6 returns <code>List</code></p> <p>no docs found   </p> <p> World.clear(world: <code>World</code>) \u00b6 returns <code>None</code></p> <p>no docs found   </p> <p> World.duplicate(world: <code>World</code>) \u00b6 returns <code>World</code></p> <p>no docs found   </p> <p> World.tag_add(world: <code>Any</code>, tag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.tag_remove(world: <code>Any</code>, tag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.tag_has(world: <code>Any</code>, tag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.get_scene_roots(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>Returns a Set of scene root entities in the given world   </p> <p> World.get_delta(world: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.tick(world: <code>World</code>, when: <code>FrameWhen</code>, section: <code>FrameSection</code>, priority: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.tick(world: <code>World</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.tick(world: <code>World</code>, delta: <code>Num</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.schedule(world: <code>Any</code>, time: <code>Any</code>, count: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.schedule(world: <code>Any</code>, time: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.unschedule(world: <code>Any</code>, handle: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render_with_set(world: <code>Any</code>, camera: <code>Any</code>, set: <code>Any</code>, target_path: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render_with_set(world: <code>Any</code>, camera: <code>Any</code>, set: <code>Any</code>, target_path: <code>Any</code>, settings: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render_with_set(world: <code>Any</code>, camera: <code>Any</code>, set: <code>Any</code>, target_path: <code>Any</code>, target_resource: <code>Any</code>, target_region: <code>Any</code>, settings: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render(world: <code>Any</code>, camera: <code>Any</code>, target_path: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render(world: <code>Any</code>, camera: <code>Any</code>, target_path: <code>Any</code>, settings: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render(world: <code>Any</code>, camera: <code>Any</code>, target_path: <code>Any</code>, target_resource: <code>Any</code>, target_region: <code>Any</code>, settings: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render(world: <code>Any</code>, desc: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render_fn(world: <code>Any</code>, camera: <code>Any</code>, target_resource: <code>Any</code>, target_region: <code>Any</code>, settings: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.get_phases(world: <code>World</code>) \u00b6 returns <code>Set</code></p> <p>Return the set of phases in the world, in order   </p> <p> World.get_phase_modifiers(world: <code>World</code>, phase: <code>Num</code>, stage: <code>Num</code>) \u00b6 returns <code>Set</code></p> <p>Return a set of modifier ids in the phase/stage   </p> <p> World.get_modifier_block(world: <code>World</code>, modifier_id: <code>String</code>) \u00b6 returns <code>Block</code></p> <p>Get the block for the given modifier <code>modifier_id</code> in <code>world</code> </p> <p> World.get_sorted_modifiers(world: <code>World</code>) \u00b6 returns <code>Set</code></p> <p>Get the list of modifiers in <code>world</code> (sorted by their order)   </p> <p> World.get_rate(world: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.set_rate(world: <code>Any</code>, rate: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.set_time(world: <code>Any</code>, time: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.time(world: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render_set(world: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render_set_add(world: <code>Any</code>, geometry: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render_set_add(world: <code>Any</code>, geometry: <code>Any</code>, entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render_set_remove(world: <code>Any</code>, geometry: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render_set_remove(world: <code>Any</code>, geometry: <code>Any</code>, entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render_get_entity(world: <code>Any</code>, geometry: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.render_get_entity_set(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.disable(world: <code>Any</code>, state: <code>Any</code>, entities: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.disable(world: <code>Any</code>, state: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.emit(world: <code>Any</code>, tags: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.emit(world: <code>Any</code>, tags: <code>Any</code>, data: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.listen(world: <code>Any</code>, tags: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.unlisten(world: <code>Any</code>, tags: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.create() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.create(id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.destroy(world: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.on_register_system(world: <code>World</code>, fn: <code>Fn</code>) \u00b6 returns <code>Handle</code></p> <p>Add a function to be called when a new modifier system is added to a world.   </p> <p> World.off_register_system(world: <code>World</code>, listener: <code>Handle</code>) \u00b6 returns <code>None</code></p> <p>Unsubscribe a listener from the creation of new modifier systems.   </p> <p> World.tick_now(world: <code>Any</code>, delta: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> World.live_worlds \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"guide/concepts/","title":"concepts","text":""},{"location":"guide/concepts/#concepts","title":"concepts","text":"<p>luxe is created with a design philosophy, having a better understanding of some of the choices, concepts and ideas should help you use it better.</p>"},{"location":"guide/concepts/#api-concepts","title":"API concepts","text":""},{"location":"guide/concepts/#api-patterns","title":"API patterns","text":"<p>All APIs in luxe aim to be consistent, and many concepts have a pattern behind them.   </p> <p>API functions operate on instances, and all API functions that are related live on the same class. For example the <code>World</code> API deals with all the functions that operate on a world, <code>Entity</code> has functions that operate on entities.</p> <p>Creating anything in luxe uses a function starting with <code>create</code>.  Cleaning up always uses a function starting with <code>destroy</code>.   </p>"},{"location":"guide/concepts/#api-design","title":"API design","text":"<p>In luxe, the API is not object oriented.  In object oriented APIs, you create an instance of something,   and then call functions on that instance. For example,</p> <pre><code>var world = World.new()\n    world.set_time(0)\n    world.destroy()\n</code></pre> <p>In luxe however, the API is not object oriented for various reasons (like performance, aesthetics and preference). The same code above in the luxe API looks like this, where the API is used consistently to operate on an instance:</p> <pre><code>var world = World.create()\n    World.set_time(world, 0)\n    World.destroy(world)\n</code></pre> <p>Sometimes these instances are called a handle, so the terms will be used interchangeably.</p> <p>This makes it easier to find all call sites of any particular API, and instead of treating objects as instances which have a cost to create and maintain, they are treated as a primitive value. They're just like a number, making them light weight. </p> <p>This design makes instances very cheap to create and maintain, and makes them especially convenient for many use cases in games and game engine APIs. For example when dealing with networking, plugins and other programming languages a primitive value is significantly easier for everyone.</p> <p>They're also a little bit safer, because using an invalid handle doesn't necessarily generate crashes or null values. Finally, in larger projects, it is not possible to efficiently operate on many instances in memory, but handles are a lot more efficient.</p>"},{"location":"guide/concepts/#commit","title":"Commit","text":"<p>Several APIs in luxe use a concept called <code>commit</code>, where changes are made in bulk first, and then committed. 2D drawing for example, you queue up drawing by calling the API, and then commit the changes when done. UI is also an example.</p> <p>This makes bulk changes cheaper, and is a good way to make things more efficient.</p>"},{"location":"guide/launcher/","title":"luxe launcher","text":""},{"location":"guide/workflow/","title":"workflow","text":""},{"location":"guide/workflow/#luxe-workflow","title":"luxe workflow","text":"<p>This guide will briefly cover the workflow involved in a typical luxe project,  like where to put things and how a project functions.</p>"},{"location":"guide/workflow/#scripting","title":"Scripting","text":"<p>When making a game in luxe, you'll typically be writing your game in a programming language called Wren. Wren is very easy to learn, and is familiar if you're used to C#, lua or js.</p>"},{"location":"guide/workflow/#this-wren-primer-is-a-quick-introduction-if-youre-familiar-with-other-languages","title":"This Wren primer is a quick introduction if you're familiar with other languages.You can Read the Wren documentation for more details.","text":"<p>We'll have our own version of the Wren docs soon as luxe has customized Wren</p>"},{"location":"guide/workflow/#code-completion","title":"code completion","text":"<p>luxe supports code completion and other IDE features through Visual Studio Code (instructions here).</p> <p>The implementation is a work in progress. Some APIs don't complete (<code>Input</code> + <code>IO</code>). Not all classes have documentation yet. As time goes on more and more stuff will have docs and type annotations.</p> <p>The completion works when the luxe agent module is installed and running.  The agent is automatically installed and Visual Studio Code automatically runs the agent. Below you can see it in action (exact specifics might have changed over time, it is frequently improving).</p>"},{"location":"guide/workflow/#game-lifecycle","title":"Game lifecycle","text":"<p>When you run your project, there are a few quick steps that prepare the game to run, and then control is handed over to you. Before the game runs, any outdated assets are compiled and then when the game starts, the project settings are applied, then it's your turn.</p>"},{"location":"guide/workflow/#gamewren","title":"<code>game.wren</code>","text":"<p>Control is handed over to you inside your <code>game.wren</code> file. This is your entry script, and inside it you will typically have a <code>ready</code>, <code>tick</code>  function. </p> <p>Your <code>ready</code> function is where you start making your game. From here you can load some levels, create some entities, and populate a world. </p> <p>When that's done, your <code>tick</code> function is called once every frame as the game runs. Inside this function things can be updated (for example, things are moved around, or the HUD is updated). </p> <p>outline data  Since it is likely you created a project from an outline,  your game code is often adjusted to include helper methods and to set up the project for you. For example the empty template creates a world, which is accessible via the <code>world</code> getter e.g  <pre><code>var player = Entity.create(world)\n</code></pre></p>"},{"location":"guide/workflow/#asset-workflow","title":"Asset workflow","text":""},{"location":"guide/workflow/#an-asset-is","title":"an asset is...","text":"<p>In luxe an asset refers to content files in your project folder. </p> <p>There are many different types of assets in luxe that you use to create your game, like animations, materials, fonts, meshes and more.</p>"},{"location":"guide/workflow/#source-assets","title":"source assets","text":"<p>Your project will likely have a number of source assets like images, fonts and audio files, these can all go in your project folder. </p> <p>Source assets are referenced by luxe assets, in order to tell luxe what you want from them, and are only used when your project data is compiled. </p>"},{"location":"guide/workflow/#luxe-assets","title":"luxe assets","text":"<p>Then there are the assets themselves, which can refer to source assets and other luxe asset files. These often have settings and information about the source asset, but most of them will actually be the content for your game.</p> <p>luxe assets are named <code>example.type.lx</code>. For instance, an image would be <code>image/player.image.lx</code>. Both the type and the lx extension are needed.</p> <p>If you were making a level for example, you would have an asset to describe it. You would also probably have assets describing all the types of pre-composed entities for your game with all their modifiers set up, all the materials describing how things should be drawn, what input mappings you have, animation curves and more.</p> <p>While these files are easy to create, read and edit by hand, most of these will be created and edited using the editor tools instead.</p> <p>In luxe, you can do basically everything via assets. You can also do the same via code - which means assets complement a code based workflow, they don't often replace it.</p>"},{"location":"guide/workflow/#data-compiling","title":"data compiling","text":"<p>Now that we have all our source assets, and all the assets describing them and describing our game content, it gets converted into a format luxe can efficiently use when the game runs. This makes it possible to load everything quickly when the game is running.</p> <p>The compilation step is quick and keeps track of things that have changed, so that iterating on your game is fast and easy.</p> <p>There is a new asset system since 2023.11.0 that co-exists with the old asset system. Note that there's a transition period where both are active but soon only the new one will be. This can add a little extra time on the compiling step but usually not noticeably slower.</p>"},{"location":"guide/workflow/#asset-parcels","title":"asset parcels","text":"<p>The final piece of the asset puzzle is how assets actually get loaded in luxe.</p> <p>With luxe, you typically don't load assets one at a time. Instead they are grouped together into what we call a parcel. A parcel is an asset that lists a bunch of other assets that are related, and should be loaded together.</p> <p>When a parcel is loaded all of it's assets become available to the game. When the parcel is unloaded, they are cleaned up and removed (unless multiple parcels list the same asset, in which case it stays until it's not needed).</p> <p>Using parcels gives you a lot of control but with a very simple workflow, and serves many important purposes in luxe. Some examples of using parcels include a level specific parcel, an area specific parcel (like streaming in and out sections of a world), and they're useful for modding and add-on/DLC content.</p> <p>A parcels is usually compiled into a single data file, making it easier to distribute your game content with the game.</p>"},{"location":"guide/workflow/#the-entry-parcel","title":"The entry parcel","text":"<p>The default behaviour in luxe is that the entry parcel is automatic. You don't have to do anything for it to work, it will load all of the assets inside of your project folder for you. This allows you to focus on making your game without worrying about it.</p> <p>For most small to medium games all of your content can be loaded this even when shipped. For larger projects, you'll probably end up with several parcels, but this is in progress, see below.</p> <p>Manually controlled parcels</p> <p>At the moment, you can't load parcels manually.</p> <p>For bigger games, the entry parcel is typically where you'd store a splash screen and any essentials before the game loads the rest itself. Your project has a <code>parcel</code> setting, which is specifically for when the game starts up. This parcel is loaded first, before you get control, and means that any assets in this parcel are ready when your game starts. </p> <p>From there, the game can load other parcels and assets as it needs.</p>"},{"location":"guide/workflow/#ignoring-assets","title":"Ignoring assets","text":"<p>Your project config folder can have a file named <code>ignore</code> in it, so that you can ignore folders and files inside your project. This will also control what ends up in the automatic entry parcel. Put one path per line inside the luxe ignore file. An example is given below where no markdown files and <code>some_folder/</code> won't end up in loaded in game.</p> <pre><code>*.md\nsome_folder/\n</code></pre>"},{"location":"guide/workflow/#project-workflow","title":"project workflow","text":""},{"location":"guide/workflow/#project-outlines","title":"project outlines","text":"<p>Most projects are created from an outline, which is responsible for making it easier to get started making a game. As there are many types of projects that you can make with luxe, each of these have specific needs and defaults. As an example, a 3D project and a 2D only project may have very different defaults.</p> <p>With luxe this happens in the project outline, which is set up based on the type of project. The outline configures the basic skeleton, making your project ready to use. For example, in a pixel art outline, the worlds, cameras and settings would be configured for what pixel art needs.</p> <p>You can freely modify your outline as it belongs to your project.</p> <p>Warning</p> <p>Changing the template may require manually updating it,  if the base template changes and you want those changes in your project.</p>"},{"location":"guide/workflow/#the-empty-outline","title":"The <code>empty</code> outline","text":"<p>This outline is for a basic 2D game and is a good starting point to tinker with luxe!</p> <p>worlds  It creates two worlds for you, one called <code>world</code> and <code>ui</code>.  You can put UI entities in the <code>ui</code> world, and game entities in the <code>game</code> world.  The worlds are automatically updated and drawn when the game updates.</p> <p>cameras  The UI is drawn after the game, and each world also has it's own camera, so moving the game camera won't affect the UI. A camera is an entity with a <code>Transform</code> and a <code>Camera</code> attached. To control the game camera use <code>camera</code> and for the UI camera use <code>ui_camera</code>. e.g <code>Transform.set_pos(camera, 10, 10)</code></p> <p>Both cameras are set up as the size of the window, which makes 1 window pixel = 1 world unit. This handles high DPI screens automatically, keeping your world units the same. It does however mean that changing the window size changes how much of your world you can see, which you may want to configure yourself. todo: link to guide on how</p> <p>For convenience you can get the window size from <code>width</code> and <code>height</code> and if needed the device pixel ratio as <code>scale</code>. You can also access the mouse position in world space using <code>mouse</code>, e.g <code>mouse.x</code> or <code>mouse.y</code>.</p>"},{"location":"guide/workflow/#the-tutorial-outline","title":"The <code>tutorial</code> outline","text":"<p>Immediate term this template matches the old workflows and is being updated. It has some useful info but a lot of stuff has changed since and it is being updated. </p>"},{"location":"guide/workflow/#the-pixel-art-outline","title":"The <code>pixel art</code> outline","text":"<p>This outline includes automatic pixel art scaling and a fixed world size, and handles converting the mouse coordinates for you via <code>mouse.x</code>/<code>mouse.y</code>.  It includes a UI world and game world as well.</p>"},{"location":"guide/wren-primer/","title":"wren primer","text":""},{"location":"guide/wren-primer/#introduction-to-wren-scripting","title":"Introduction to Wren scripting","text":"<p>Scripting in luxe is done with the Wren programming language.  Wren is a class based language, which should be familiar if you're used to other languages.   </p> <p>This page isn't intended as a programming tutorial,  but rather a quick start guide for getting started with Wren in luxe.</p>"},{"location":"guide/wren-primer/#string-interpolation","title":"String interpolation","text":"<p>A useful thing to start with, is that within a string,   you can put Wren expressions inside of a <code>%( )</code> section to combine the values.    </p> <pre><code>var value = \"luxe\"\nLog.print(\"hello %(value)\")     //prints \"hello luxe\"\nLog.print(\"hello %(5 + 5 - 2)\") //prints \"hello 8\"\n</code></pre>"},{"location":"guide/wren-primer/#annotations","title":"Annotations","text":"<p>Classes and variables use <code>#annotations</code> to signal information to the engine or language.</p> <p>The most common useful one would be <code>#doc = \"A documentation string\"</code>. </p> <pre><code>#doc = \"Whether or not to display the thing\"\nvar visible : Bool = true\n</code></pre> <p>You should add documentation to methods, variables and classes whenever you can. These show up in code completion as well as other places. You can also use the raw string (longer string) syntax  for documentation. Here's a full example:</p> <pre><code>#doc=\"\"\"\n  Attach a `Sprite` modifier to `entity`, drawn using `image`,\n  with a given size of `width`x`height`.\n\n    ```js\n    var entity = Entity.create(world)\n    var image = Assets.image(\"luxe: image/logo\")\n    Sprite.create(entity, material, 128, 128)\n    ```\n\"\"\"\n#args(\n  entity = \"The entity to attach the `Sprite` to\",\n  image = \"The image to display on the sprite\",\n  width = \"The width in world units for the sprite\",\n  height = \"The height in world units for the sprite\"\n)\nforeign static create(entity: Entity, image: Image, width: Num, height: Num) : None\n</code></pre>"},{"location":"guide/wren-primer/#a-note-on-typing","title":"A note on typing","text":"<p>The version of Wren in luxe allows optional typing, and the completion handles inferring types.</p> <p><code>var num: Num = 5</code> can often be written as <code>var num = 5</code> and still have a known type.</p> <p>Types allow error checking when calling methods, and accidental typos on variables. While the typing isn't fully whole just yet, it continues to improve. Aim to always type your code,  especially at the API edges.  </p> <p>A variable is typed like this:  <code>var name: Type</code> </p> <p>And a method is typed like this:  <code>method(param: Type) : Return { }</code></p>"},{"location":"guide/wren-primer/#a-basic-class","title":"A basic class","text":"<pre><code>class Hello {\n  construct new() {\n    Log.print(\"hello\")\n  }\n}\n\n//prints:\n// 'hello'\nvar hello = Hello.new()\n</code></pre> <p>Some useful notes: </p> <ul> <li><code>construct</code> is the keyword for a constructor</li> <li>The <code>new</code> is on the right hand side, instead of <code>new Hello()</code>, it's <code>Hello.new()</code></li> <li>That's because <code>new</code> is just a function name! <code>construct create</code> is fine, or as you'll see in the luxe game class, <code>construct ready</code></li> <li>You call a constructor on the class itself, via the class name</li> </ul>"},{"location":"guide/wren-primer/#basic-functions","title":"Basic functions","text":"<pre><code>class Hello {\n  construct new() { Log.print(\"hello\") }\n  //simple method\n  luxe() { Log.print(\"luxe\") }\n}\n\n//prints:\n// 'hello'\n// 'luxe'\nvar hello = Hello.new()\n//call simple method\nhello.luxe()\n</code></pre> <ul> <li>That <code>simple method</code> is called <code>luxe</code>, it requires no keywords</li> <li>It is a class method, and is called on an instance of the class, not the class itself</li> </ul>"},{"location":"guide/wren-primer/#variables","title":"Variables","text":"<p>Variables in luxe will be familiar as well. Scope works as you'd expect, with local variables and class variables.</p> <pre><code>class Hello {\n\n  //explicit class fields must come first in the class\n  //and must be initialized. can use any expression!\n  var value = 3\n\n  construct new() {\n\n    //a class field that is private\n    _private = 0\n\n  }\n\n  print() {\n\n    var local = \"cannot be seen outside this scope\"\n    Log.print(local)\n\n    //we can access our value variable from here,\n    //because it belongs to this class\n    value = value + 2\n    //prints 5\n    Log.print(value)\n    //also prints 5, as _value is a private field declared by `var value`\n    Log.print(_value)\n    //prints 0\n    Log.print(_private)\n    //prints null, prefer declaring explicit fields instead for errors\n    Log.print(_not_defined)\n\n  }\n}\n</code></pre> <ul> <li>local variables work as expected!</li> <li>class variables are typically explicitly defined</li> <li>class fields can be local only using the regular wren _field syntax</li> <li>explicit class fields also declare an underscore getter</li> </ul>"},{"location":"guide/wren-primer/#getters-and-setters","title":"Getters and setters","text":"<p>Private fields in a class cannot be seen from outside.   In other languages terms: all private variables (non explicit var) are private to this class only.</p> <p>In order to make our values accessible from outside, we make them available first. We do that with getters and setters, which gives us read/write access control as well.</p> <pre><code>class Hello {\n\n  //automatic form\n  //generates `auto { _auto }`\n  //and `auto=(v) { _auto=v }`\n  var auto = true\n\n  //manual short form\n  value { _value }\n  value=(new_value) { _value = new_value }\n\n  //long form, read only\n  other_value {\n    return _other_value\n  }\n\n  construct new() { \n    _value = 4\n    _other_value = 5\n  }\n\n}\n\nvar hello = Hello.new()\n    hello.value = 6             //update value\nLog.print(hello.value)       //prints 6\nLog.print(hello.other_value) //prints 5\n</code></pre> <ul> <li>Explicit class var fields declare a getter/setter for you, making them public</li> <li>A getter is a method without arguments, i.e no <code>()</code> after the name</li> <li>A setter is a method with <code>=(one_arg)</code>, where the incoming value is passed in</li> <li>Short form is a convenient way to say \"return whatever I put in a single line\", like these:</li> <li><code>number { 3 }</code>, <code>string { \"string\" }</code>, <code>list { [] }</code> </li> <li>(This comes in really handy later as you'll see)</li> <li>If you need to use more than one line/one expression, you must use <code>return</code> </li> <li>note that <code>other_value</code> doesn't have a setter, it can't be set from outside</li> </ul>"},{"location":"guide/wren-primer/#static-methods-and-variables","title":"Static methods and variables","text":"<p>Static methods work largely the same as the class instance ones,  except for the static keyword up front. Like in other languages,  you can't access class variables or methods from static methods.</p> <pre><code>class Hello {\n  //static getter\n  static get { 5 }\n  //static setter\n  static set=(value) { Log.print(value) }\n  //static method\n  static method() {\n    Log.print(\"static method!\")\n  }\n}\n\nLog.print(Hello.get) //prints 5\nHello.set = \"hello\"     //prints hello\nHello.method()          //prints \"static method!\"\n</code></pre> <ul> <li>You call the methods directly on the class itself</li> </ul> <p>Static variables work the same as class variables, except for an extra underscore.</p> <p><code>__static_value</code> instead of <code>_value</code></p> <pre><code>class Hello {\n  //static getter\n  static get { __value }\n  //static setter\n  static set=(value) { __value = value }\n  //static method\n  static init() {\n    __value = 5\n  }\n}\n\nHello.init()\nLog.print(Hello.get) //prints 5\nHello.set = 6           //prints hello\nLog.print(Hello.get) //prints 6\n</code></pre>"},{"location":"guide/wren-primer/#functions","title":"Functions","text":"<p>Wren can store functions in variables and pass them to other functions and methods. The distinction between functions and methods is important.</p> <pre><code>var notify = Fn.new() {\n  Log.print(\"you have been notified!\")\n}\n\nnotify.call()\n</code></pre> <ul> <li>note that we use <code>notify.call()</code> and not <code>notify()</code></li> </ul> <p>Arguments </p> <p>Arguments in a function using the <code>|arg1, arg2, arg3|</code> syntax.</p> <pre><code>var notify = Fn.new() {|message|\n  Log.print(\"you have been notified, message: %(message)\")\n}\n\nnotify.call(\"the message!\")\n</code></pre>"},{"location":"guide/wren-primer/#passing-functions-to-methods","title":"Passing functions to methods","text":"<p>You can pass functions to other functions or methods. Note that you cannot pass a method this way. </p> <pre><code>class Hello {\n  construct new() {\n    _function = null\n    _name = null\n  }\n  set_function(name, fn) {\n    _name = name\n    _function = fn\n  }\n\n  call_function(value) {\n    if(_function != null) _function.call(value) \n  }\n}\n\nvar hello = Hello.new()\n\n//we can store a function in a variable, and pass it into the method\nvar variable = Fn.new() {|value| Log.print(value) } \nhello.set_function(\"name\", variable)\nhello.call_function(5) //print 5\n\n//We can also pass a function directly\nhello.set_function(\"name\", Fn.new() {|value| Log.print(value + 8) })\nhello.call_function(8) //print 16\n</code></pre>"},{"location":"guide/wren-primer/#function-short-form-syntax","title":"Function short form syntax","text":"<p>Wren has some special syntax for functions to make them more succinct.  This relates to the \"short form: where a single expression is a return value\" mentioned before as well.  Using the same example as before, but with the short form for a function:</p> <pre><code>hello.set_function(\"name\") {|value|\n  Log.print(\"hello %(value)\")\n}\n</code></pre> <p>How does this work?</p> <ul> <li><code>Fn.new {|value| }</code> becomes <code>{|value| }</code> </li> </ul> <p>When does this work?</p> <ul> <li>It works only when the last argument accepts a function</li> <li>It works when calling <code>Fn.new</code> which we saw before!</li> <li>The below example doesn't work, we have to use a variable or a longer form</li> </ul> <pre><code>  set_function(fn, name) {\n    _name = name\n    _function = fn\n  }\n\n  ...\n\n  //requires the long form!\n  hello.set_function(Fn.new(){|value| }, \"name\")\n</code></pre>"},{"location":"guide/wren-primer/#why-short-form-is-nice","title":"Why short form is nice","text":"<p>In Wren, a lot of methods accept a function.  A good example is the Sequence class. </p> <p>Notice how compact the usage of the <code>where</code> function is.  It uses both short forms: A single expression returns <code>true</code> or <code>false</code>, inside a short form function.  The <code>where</code> function is defined as <code>where(predicate)</code>, since it's only one argument, the last argument, it's valid to use the short form.</p> <pre><code>var list = [1,2,3,4]\nvar even = list.where {|value| value % 2 == 0 }\nLog.print(even.toList) //prints [2, 4]\n</code></pre> <p>Many many functions are much nicer this way </p> <pre><code>[\"one\", \"two\", \"three\"].each {|word| Log.print(word) }\n</code></pre>"},{"location":"guide/wren-primer/#try-wren-online","title":"Try Wren online","text":"<p>You can try Wren in your browser or on your phone, just in case you didn't know.</p> <p>https://wren.io/try/</p>"},{"location":"learn/drawing-2d/","title":"2D drawing","text":""},{"location":"learn/drawing-2d/#drawing-shapes-and-lines","title":"Drawing shapes and lines","text":"<p>The drawing APIs are a work in progress but still usable. Some parameters might change order and so on in the near future. These changes will be clearly marked.   </p>"},{"location":"learn/drawing-2d/#drawing-contexts","title":"Drawing contexts","text":"<p>In the intro guide, a concept called service APIs was mentioned, which are general purpose tools that can be used directly. Drawing contexts are one of these services!</p> <p><code>import \"luxe: draw\" for Draw, PathStyle, LineJoin, LineCap</code> </p> <p>The first step in using the <code>Draw</code> API is to create a drawing context. Think of it like a canvas to draw on. </p> <p>To create a context, we have to tell the canvas where to draw, and in our case, which world to draw into. To do this we ask the world for it's 'render set'. This is telling the canvas to draw inside our world, when the world is drawn. We're ready to draw a shape!</p> <pre><code>var context = Draw.create(World.render_set(world))\n</code></pre> <p>In practice, if you're drawing UI, you would use <code>app.ui</code> for the world argument, and if drawing into the game world, use <code>app.world</code>.</p>"},{"location":"learn/drawing-2d/#drawing-a-box","title":"Drawing a box","text":"<p>We'll start by drawing a box, using <code>Draw.quad(context, x, y, z, w, h, angle, color)</code>.   Keep reading if you don't see any drawing happening.</p> <pre><code>  //create the drawing context in the game world\nvar context = Draw.create(World.render_set(app.world))\n  //draw a quad to the context\nDraw.quad(context, 10, 10, 0, 200, 250, 0, [1, 0, 0.487, 1])\n</code></pre> <p>When you run this code, nothing shows up! </p> <p>This is because the context is waiting for more drawing so it can operate efficiently. When we are done drawing, we call <code>Draw.commit(context)</code> to finalize the drawing and commit it to the context. This will make it show up on screen, and it will stay there until you call commit again. </p> <p>Let's make the box visible:</p> <pre><code>var angle = 0\n  //a nice pink color\nvar color = [1, 0, 0.487, 1]\n  //create the drawing context in the game world\nvar context = Draw.create(World.render_set(app.world))\n  //draw a quad to the context\nDraw.quad(context, 10, 10, 0, 200, 250, angle, color)\n  //we're done drawing for now, draw it!\nDraw.commit(context)\n</code></pre> <p>When you run this, you should see the box show up, something like this:</p> <p></p>"},{"location":"learn/drawing-2d/#when-to-commit","title":"When to commit?","text":"<p>The reason the drawing context keeps our drawing going once we've committed it is because it allows us to draw a lot more, very efficiently. </p> <p>For example, if you were making a game that had a grid in the world, drawing the grid every frame has a cost. Instead, we can draw the grid once, up front, and let the context keep it rendered for us. Or if we had a game with a scrolling star field in the background, we can draw a lot of stars just once, and have them stay. </p> <p>This makes the drawing persistent, but what about drawing dynamically? </p> <p>To draw something different every game update (during your <code>tick</code> function), you can call <code>Draw.commit(context)</code> every tick. Let's draw a block that changes size each frame.</p> <p>When you call commit, it takes any drawing that was done since the commit before that, and draws it into the canvas. Any drawing that is committed, will stay visible until the next commit, at which point it will be cleared. This means if you want to clear a context, just call <code>commit</code> without drawing!</p>"},{"location":"learn/drawing-2d/#drawing-a-dynamic-box","title":"Drawing a dynamic box","text":"<p>For this example, we'll be using time to animate something. So let's <code>import \"luxe: io\" for IO</code> in our <code>game.wren</code> before running this. We also move the variables to class variables, so that we can see them from the tick function.</p> <pre><code>  construct ready() {\n\n    _angle = 0\n      //a nice pink color\n    _color = [1, 0, 0.487, 1]\n      //create the drawing context in the game world\n    _context = Draw.create(World.render_set(app.world))\n\n  } //ready\n\n  tick(delta) {\n\n      //calculate a small bounce using time\n    var bounce = (IO.timestamp() * 3).sin * 25\n    var height = 200 + bounce\n\n      //draw a quad to the context\n    Draw.quad(_context, 10, 10, 0, 200, height, _angle, _color)\n      //we're done drawing for now, draw it!\n    Draw.commit(_context)\n\n  }\n</code></pre> <p>With that drawing happening, we should now see a box animating like the one shown below.</p> <p> If the video below won't load, view it here instead. </p>"},{"location":"learn/drawing-2d/#multiple-contexts","title":"Multiple contexts","text":"<p>We can use multiple contexts to build layers in our game or UI, and they can all coexist. For example, if our UI in the game displayed a number that changes all the time, we can draw that part dynamically in it's own context. The rest of the UI might not change at all, so we can draw that in it's own context, up front, just the one time.</p> <p>It is very common to have several contexts around! That's what they're for.</p>"},{"location":"learn/drawing-2d/#conclusion","title":"Conclusion","text":"<p>The drawing contexts are useful for more than just in game or UI items! </p> <p>You'll find that drawing debug information with the contexts is a very useful tool while making games. They're a multi purpose tool, useful for making entire games with, drawing optional debug details, or using to add layers to your worlds.</p>"},{"location":"learn/modules/","title":"using modules","text":""},{"location":"learn/modules/#reference-a-module","title":"Reference a module","text":"<p>Alongside your <code>project.luxe</code> file, there is a file called <code>luxe.project/modules.lx</code>. Dependencies on modules can be added to this file, or added via the launcher. The tutorial covers this. For example, if you were using a module called <code>arcade</code> at version <code>0.0.24</code> it would look like this:</p> <pre><code>  modules = {\n    luxe = \"2025.6.5\"\n    arcade = \"0.0.24\"\n  } //modules\n</code></pre>"},{"location":"learn/multiple-wren-files/","title":"multiple wren files","text":""},{"location":"learn/multiple-wren-files/#using-multiple-wren-files","title":"Using multiple wren files","text":"<p>In your project, you can make more files to separate your code. Project scripts are imported as an absolute id, relative to the project root.</p> <p>If you create a file called <code>player.wren</code> inside the root of your project,  you can import it with <code>import \"player\" for Player</code> at the top of <code>game.wren</code>.</p> <p>Note there is no extension, no luxe module syntax (<code>luxe: string</code>) and no preceding dot-slash like <code>./player</code>.</p> <p>If you created that file inside of a folder, like <code>player/logic/backpack.wren</code>, you would use <code>import \"player/logic/backpack\" for Backpack</code>. </p> <p>You always use that import id, even if you were inside a script in the <code>player/logic/</code> folder. </p>"},{"location":"learn/overview/","title":"overview","text":""},{"location":"learn/overview/#learn-to","title":"learn to ...","text":"<p>Learn to do specific things, in a single page tutorial format! These are made to be short, quick and easy to skim for specific tasks and outcomes using luxe.</p> <p>These tutorials assume some basic familiarity with luxe concepts, which you can get from the guide and the full tutorial.</p>"},{"location":"learn/random-numbers/","title":"random numbers","text":""},{"location":"learn/random-numbers/#generate-random-numbers","title":"Generate random numbers","text":"<p>For API documentation and example usage, view the Wren random docs.</p> <pre><code>import \"random\" for Random\n\nconstruct ready() {\n\n  var rng = Random.new()\n\n    //float values between 0 and 1\n\n  rng.float() // 0.53178795980617\n  rng.float() // 0.20180515043262\n  rng.float() // 0.43371948658705\n\n    //float with a range \n  rng.float(-10, 10) //-5.9638969913476\n\n    //int values\n  rng.int(-10, 10) // -6\n\n    //pull a random value from a list\n  var list = [0,1,2,3,4,5]\n  var item = rng.sample(list)\n  var items = rng.sample(list, 3)\n\n    //randomize list\n  rng.shuffle(list) //list is modified in place\n\n}\n</code></pre>"},{"location":"learn/tilemaps/","title":"tilemaps","text":""},{"location":"learn/tilemaps/#using-tilemaps","title":"Using tilemaps","text":"<p>In this tutorial we'll:</p> <ul> <li>Create a tile map</li> <li>Add visuals to it to paint with</li> <li>Paint some tiles, make some brushes</li> <li>Use that tile map in the world</li> <li>Add collision to it using the Arcade modifier</li> </ul> <p>Assets</p> <p>This tutorial is using the Amarelo tilesheet. </p> <p></p> <p>You can grab it for free from the link above, or save the image below into your project.</p> <p>The image is small because it is pixel art. We'll use the <code>pixel</code> outline to work at this scale</p> <p></p>"},{"location":"learn/tilemaps/#create-the-project","title":"Create the project","text":"<p>We'll use the launcher to create the project, and use the pixel project outline. When creating the project, is offers the choice of a background color. We'll pick custom, and match the background color to the tiles. You can use <code>#cbcac5</code> as the color.</p> <p></p>"},{"location":"learn/tilemaps/#tiles-editor-context","title":"Tiles editor context","text":"<p>We can find the tile editor using the context menu:</p> <p></p> <p>Once we enter it, this is what it looks like:</p> <p></p>"},{"location":"learn/tilemaps/#create-a-tilemap","title":"Create a tilemap","text":"<p>We'll need a tiles asset to paint into. The editor can open and edit multiple at once, but we'll just need one for now. Omni has a create button just for this, so let's use it to create a tiles asset.</p> <p></p> <p>This will present you with the asset location, where we'll name our asset <code>outside</code> and hit the create 'tiles' asset button.</p> <p></p> <p>Once we do, we'll see something along these lines: The brush tool is selected, and it has a visuals panel with no visuals yet.</p> <p></p> <p>Tiles visual assets</p> <p>When you create tile based games, it's often common for multiple areas in a game to share the same visuals.</p> <p>If you had a snowy outdoor tile set, it can often be used in a few different tile map assets around different locations in the game.  In luxe there is a tiles visual asset that can be shared across tile maps, and one is created for your tiles by default (for now).</p> <p>WIP: Note there are multiple assets involved, so make sure to save all!</p>"},{"location":"learn/tilemaps/#adding-visuals","title":"Adding visuals","text":"<p>Since there was a visual asset created for our tiles, we can go straight to adding visuals. </p> <p>Let's take a walk through adding regular images (often used to break up the tile grid), and tile sheets (multiple tiles packed into one image).</p> <p>When the brush tool is active, and a visual asset is selected, there's a <code>+</code> button to add tile visuals.</p> <p></p> <p>Once we hit the <code>+</code> button we'll be presented with a list of options to add:</p> <p></p> <p>We have added some images from the tutorial project for example</p>"},{"location":"learn/tilemaps/#adding-images","title":"adding images","text":"<p>If we choose <code>add images...</code> we'll be presented with the asset picker, which allows us to select multiple assets at once.</p> <p></p> <p>Selecting an asset will highlight it, allowing us to pick a few, and then hit continue. We'll not do this yet, and use <code>select none</code> to cancel the test selection.</p> <p></p> <p>Instead, since we have <code>image/prop</code> and <code>image/rooftop</code> folders, let's say we want to add just the rooftop assets for now. We can use the folders filtering to limit the list:</p> <p></p> <p>We can add multiple folders if we like:</p> <p></p> <p>Once we have filtered our list, we can use select all, and multi select to add or remove items from the selection.</p> <p></p> <p>If you select <code>continue &gt;</code> we are given the chance to customize the visuals, typically the uv and size field. The size is how big the actual tile will be when painted as a tile, so this is typically something to take note of. It defaults to the image size, for our example we'll change it to 10x smaller, e.g <code>29.3 x 22.7</code>.</p> <p>If you select the <code>all</code> button, you can quickly edit the uv or size of any of the added visuals in one go.</p> <p></p> <p>Once we're <code>done &gt;</code> we can see the visuals have been added to our tile palette, this is where we can select a tile to paint with. </p> <p></p> <p>Selecting our new image and painting with it will allow us to treat the image like a tile.</p> <p></p> <p>Selecting an existing tile that was painted on the tile map will allow you to customize the individually painted tiles. You can make one bigger or smaller, different colors, offsets and so on at the tile level.</p> <p></p>"},{"location":"learn/tilemaps/#adding-tile-sheets","title":"adding tile sheets","text":"<p>The process for adding a tile sheet with mutliple tiles is very similar, all the filtering and selecting is the same, the important thing is what happens in the customize page. </p> <p>First choose add tile sheets (pixel this time!):</p> <p></p> <p>We'll go pick our tiles image by searching for it, then hitting <code>continue &gt;</code></p> <p>Ignore the weird sorting for now when searching!</p> <p></p> <p>The customize page shows our tiles image with a small grid overlayed on top. </p> <p></p> <p>Since we know our tilemap has <code>8</code> tiles across, and <code>11</code> tiles down, we can enter this. If you're not sure, you can see a realtime preview of the grid as you change these:</p> <p></p> <p>If you only know the tile size in pixels, you can change the <code>input</code> to <code>as_size</code>, which will let you input pixel size for the tiles. Our are 8x8 which was calculated automatically by the grid, and the grid would be auto calculated if we input a size.</p> <p></p> <p>If we hover an individual tile on the grid we can see a preview of that tile:</p> <p></p> <p>And finally, the advanced section has settings for if your tiles have padding, or a margin on the image. We don't need this here, but it is there:</p> <p></p> <p>Once we select <code>done &gt;</code> we will see all the individual tiles added to our tile palette, allowing us to paint with them.</p> <p></p>"},{"location":"learn/tilemaps/#tile-grid-size","title":"Tile grid size","text":"<p>If we paint a tile we should notice that it doesn't fit as expected!</p> <p></p> <p>If you select the tilemap itself, instead of a layer to paint on, you can configure the grid size of the tile map as well as the background color. Our grid should be 16x16 for this one, and immediately it updates to look correct:</p> <p></p>"},{"location":"learn/tilemaps/#brushes","title":"Brushes","text":"<p>The benefit of tile maps, is that painting tiles is all about the sum of parts. We combine small repetitive pieces into much larger images.</p> <p>This is very often a recursive process. We combine 4 tiles to make a window. We combine 2 windows and a door to make a house. We combine many houses to make a city and so on. </p> <p>To facilitate this workflow, luxe tiles work based on combining tiles into brushes. This doesn't just apply when you make a brush manually, it actually applies to every operation. Painting is brush based, copy takes the selection and makes a brush, cut creates a brush and so on.</p>"},{"location":"learn/tilemaps/#brush-history","title":"brush history","text":"<p>Any time you do an operation that creates a brush, the brush history panel will remember it, so you can return to it and use it to build more elaborate things:</p> <p></p> <p>You'll also be able to save that brush into an asset, so that it's reusable across tile maps + sessions using the save icon. After that it'll exist in the brush tab instead of brush history! Making brushes reusable is important, but a significant amount of the brushes can be temporary because you can always select and copy them.</p> <p>This is also true while painting, using a corner of the tilemap to compose a complex brush, then copying it out, optionally saving it is a very important part of the workflow!</p>"},{"location":"learn/tilemaps/#making-a-brush","title":"making a brush","text":"<p>We'll start by painting a window. For this we used flip (F or V key by default) and rotate (R) to reuse the same tile in different ways.</p> <p></p> <p>We switch to the select tool by pressing Q or using the select tool icon.</p> <p></p> <p>We can drag a rectangle in order to select the region of tiles we care about:</p> <p></p> <p>When we release the rectangle each tile will show as selected:</p> <p></p> <p>When we press copy (Ctrl+C) it will copy our selection into a brush, and we can now paint with the whole window as a brush!</p> <p></p> <p>If we draw with the brush around on the tile map you'll notice that the brush will be treated as a whole unit, it won't paint over itself, so we can lay down windows side by side easily:</p> <p></p> <p>You can control this behaviour from the top toolbar, there's a few modes. Selecting the icon will cycle through modes for painting.</p> <p></p> <p>And as mentioned, we created a brush by copying, so it shows in the brush history.</p> <p></p>"},{"location":"learn/tilemaps/#the-tiles-modifier","title":"The tiles modifier","text":"<p>To use the tile map we just created, we use the typical workflow using modifiers in the world editor. </p> <p>Create an entity, attach the <code>Tiles</code> modifier, and select the tiles asset you created.</p> <p>Automatic updates/hot updating of the tiles assets in the world are still being finalized, you might need to reload the editor to see the latest version of your tilemap.</p> <p>To demonstrate, here's a painted tilemap:</p> <p></p> <p>Once we attach them to an entity, we can see and use them in the world:</p> <p></p> <p>And since they're an entity with a modifier, we can duplicate, scale, transform them as usual using <code>Transform</code>.</p> <p></p>"},{"location":"learn/tilemaps/#tile-collision-with-arcade","title":"Tile collision with Arcade","text":"<p>If you're using the arcade collision module, it provides a modifier that can convert tiles into solid shapes. This combines nearby tiles into rectangles to make the least amount of rectangles.</p> <p></p>"},{"location":"learn/tilemaps/#tile-tags","title":"tile tags","text":"<p>To start, we have to tag our tiles with a tag. The default one the arcade tiles collision uses is <code>solid</code>.  We select the tiles we want to be solid collision, and edit the tags to include <code>solid</code>.</p> <p></p>"},{"location":"learn/tilemaps/#arcade-collision","title":"arcade collision","text":"<p>In the world editor, you attach the <code>Arcade: Tile collision</code> modifier it to the entity with the <code>Tiles</code> on:</p> <p></p> <p>Once you have, you can match the tag so that the collision is automatically generated!</p> <p></p>"},{"location":"learn/tilemaps/#new-tile-editor","title":"New tile editor","text":"<p>Note that this iteration of the tile editor is brand new, please report any issues, workflow quirks and so on. We'll be polishing it up as we go! </p>"},{"location":"learn/modifiers/custom-modifiers/","title":"custom modifiers","text":""},{"location":"learn/modifiers/custom-modifiers/#custom-modifiers","title":"Custom modifiers","text":"<p>Typically, modifiers are where you'll write a majority of your gameplay code. Naturally, that means you need to be able to add modifiers of your own to the mix. These modifiers become available in the editor, and can be used from code to combine and create complex behaviours in a modular way.</p> <p>The modifiers have been rewritten and are just now landing in 2024.x. This means there may be bugs, gaps or other mysteries. Please let us know if you run into unexpected behaviour!</p> <p>Modifiers exist in a world, and there is one system per world for a modifier type. A modifier system in a world will see and modify ALL entities that have the modifier attached. This is a little different from a 1:1 relationship, and enables gameplay code to be expressive about multiple things at once easily, but will still be familiar as you typically are still operating per entity.</p> <p>As an example, a door modifier will be attached to 20 entities in a world, but in that world  there is only one door modifier system running. That system knows about all doors in that world, and  can answer questions like how many doors are open, without a lot of effort or looping or searching.</p> <p>Modifiers can also run custom code in the editor, allowing custom behaviour between editor and the game. Any of the system functions (init, attach, etc) have an <code>editor_</code> prefixed equivalent as well.</p>"},{"location":"learn/modifiers/custom-modifiers/#making-a-modifier","title":"Making a modifier","text":""},{"location":"learn/modifiers/custom-modifiers/#step-1-a-modifierwren-file","title":"Step 1. A modifier.wren file","text":"<p>A modifier is a script asset with a <code>modifier</code> subtype. To make a door modifier, you would make a file named <code>door.modifier.wren</code> in your project, typically inside a <code>system/door.modifier.wren</code> by convention.</p> <p>In a Wren file, <code>This</code> is a built in variable for \"module id\".</p> <p>This file contains three important pieces that we'll get into below:</p> <ul> <li>A description of your system data per entity</li> <li>A user facing API for your system</li> <li>The system implementation</li> </ul> <p>Take a look at the example below:</p> <pre><code>import \"system/door.modifier.api\" for API, Modifier, APIGet, APISet\n\n#block = data\nclass Data {\n  var locked: Bool = false\n}\n\n#api\n#desc = \"**A door**. Can be locked or unlocked.\"\n#keywords(door, entrance, lock)\nclass Door is API {\n  static unlock(entity: Entity) {\n    get(entity).locked = false\n  }\n}\n\n#system\n#phase(on, tick)\nclass System is Modifier {\n\n  init(world: World) {\n    Log.print(\"init `%(This)` in world `%(world)`\")\n  }\n\n  attach(entity: Entity, door: Data) {\n    Log.print(\"attached to entity `%(entity)` - locked? %(door.locked)\")\n  }\n\n  detach(entity: Entity, door: Data) {\n    Log.print(\"detached from `%(entity)`\")\n  }\n\n  tick(delta: Num) {\n    each {|entity: Entity, door: Data|\n      //use door.*\n    } \n  }\n\n}\n</code></pre> <p>Currently there's a <code>door.modifier.api.wren</code> generated for your system alongside it, this  is a temporary generated file and won't stay long term.</p>"},{"location":"learn/modifiers/custom-modifiers/#use-via-editor","title":"Use via editor","text":"<p>If you save your file and re-open your project in the editor (it's not able to hot reload at the moment). Once opened, on an entity you can select attach and see your Door modifier is now available.</p> <p></p> <p>And if attached, will show up in omni along with the other modifiers below the scene outline.</p> <p></p>"},{"location":"learn/modifiers/custom-modifiers/#use-via-code","title":"Use via code","text":"<p>To use the modifier in code, you import the API class from the modifier id. Ours was called <code>system/door.modifier.wren</code> which makes the modifier id <code>system/door.modifier</code>.</p> <pre><code>import \"system/door.modifier\" for Door\n\n...\n\nvar door = Entity.create(\"door\")\nDoor.create(door)\nDoor.unlock(door)\n</code></pre>"},{"location":"learn/modifiers/custom-modifiers/#data-field-types","title":"Data field types","text":"<p>Docs WIP</p> <p>These will get documented nicely, but here is a dump of the types and examples available to systems. Some of these have rough edges and will change slightly (nothing major).</p> <p></p> <pre><code>#block = data\nclass Data {\n\n  #display = \"Number (count)\"\n  var number : Num = 11\n  #display = \"name\"\n  var string : String = \"luxe\" \n  var enum : MyTextAlign = MyTextAlign.bottom //defined below\n  var uuid : UUID = null\n  var link : Link = null //a reference to an entity in the editor/scene\n  var color : Color = [1,1,1,1]\n  var float2 : Float2 = [1,1]\n  var float3 : Float3 = [1,1,1]\n  var float4 : Float4 = [1,1,1,1]\n  var boolean : Bool = true\n\n  //Asset types have a type stored in the #tag \n  //so that the editor can show just the type you care about\n\n  #tag = \"luxe: type/scene.asset\"\n  var scene_to_load : Asset = \"some/asset\"\n\n  //Strings can be tagged to add an OS file picker\n  //with `path`, `path.open`, `path.save`, and `path.folder`\n\n  #tag = \"path.folder\"\n  var project_location: String = \"\"\n\n  //Show if can hide fields that aren't relevant\n  //based on the value in another option field.\n  //So this field will only be visible in the UI if the enum is \n  //set to MyTextAlign.center in the UI \n\n  #show_if(enum = center)\n  var other : Num = 22\n\n  //Arrays\n\n  //They have a count for efficiency,\n  //the count isn't a limit. It's how much\n  //space to reserve for your common use case,\n  //which will make operating on this field faster.\n\n  //For now, we specify the type as a tag on the field,\n  //this will be improved later.\n  //Any primitive array can have a default\n\n  #count = 4\n  #type = Num\n  var array_number : List = [22, 33, 44, 55]\n\n  #count = 2\n  #type = MyTextAlign\n  var array_enum : List = [MyTextAlign.center]\n\n  //No defaults for objects here, \n  //defaults are defined in the object itself\n  var obj : Obj = Object\n\n  //Arrays of objects are valid too,\n  //and they work similarly, they can't\n  //have a default here. The list can \n  //have an empty default though\n\n  #count = 1\n  #type = Obj\n  var obj_array : List = []\n\n  //Groups\n  //Any consecutive fields with the same group tag \n  //will be collected together in a collapsible group\n\n  #group=\"Stuff Together\"\n  var hey : Num = 99.0\n  #group=\"Stuff Together\"\n  var hi : String = \"how?\" \n\n  #group=\"Other Together\"\n  var why : Num = 99.0\n  #group=\"Other Together\"\n  var here : String = \"how?\" \n\n}\n\n//option tag is required\n#option\nclass MyTextAlign {\n  static left { \"left\" }\n  static center { \"center\" }\n  static right { \"right\" }\n  static top { \"top\" }\n  static bottom { \"bottom\" }\n}\n\n//Objects have the same types as above\nclass Obj {\n  var other: Num = 1\n  var some: String = \"fields\"\n  var here: Color = [111,112,113,114]\n  var yea: Float2 = [11, 12]\n}\n</code></pre> <p></p> <p>To be continued...</p>"},{"location":"learn/modifiers/luxe-modifiers/","title":"luxe modifiers","text":""},{"location":"learn/modifiers/luxe-modifiers/#luxe-modifiers","title":"luxe modifiers","text":"<p>As we found out in the guide, luxe often works based on modifiers attached to an entity to give it the ability to do things. Below, we'll do a real brief tour of the base modifiers luxe provides, before looking at how to make our own systems.</p>"},{"location":"learn/modifiers/luxe-modifiers/#anim","title":"Anim","text":"<p>The animation modifier is an animation player that can play several animations at once.  The animations themselves can affect any entity, not just the one the animation player is attached to.</p>"},{"location":"learn/modifiers/luxe-modifiers/#camera","title":"Camera","text":"<p>A 2D or 3D camera for rendering with. Also provides important tools for  converting between coordinate spaces, like taking a world space point and finding the screen space 2D value for it. To move a camera, give it a Transform if it doesn't have one, and use <code>Transform.set_pos</code> as normal.</p>"},{"location":"learn/modifiers/luxe-modifiers/#mesh","title":"Mesh","text":"<p>A mesh modifier displays geometry from mesh assets (3D or 2D), and provides mesh levels (for e.g LOD).  Can be used for simple 2D geometry from external apps, 3D sprites or complex 3D games.</p>"},{"location":"learn/modifiers/luxe-modifiers/#skeleton","title":"Skeleton","text":"<p>Typically for animation or IK. Can be driven by Anim or manually.</p>"},{"location":"learn/modifiers/luxe-modifiers/#skin","title":"Skin","text":"<p>A skin for a mesh, which binds the mesh to a Skeleton modifier.</p>"},{"location":"learn/modifiers/luxe-modifiers/#sprite","title":"Sprite","text":"<p>A simple 2D image. Provides tools like color tint, flipping, tiling or sub UV display, skew, size and so on.</p>"},{"location":"learn/modifiers/luxe-modifiers/#tags","title":"Tags","text":"<p>Gives an entity the ability to have one or more tags associated with. Tags are a powerful way to interact with and filter the world.</p>"},{"location":"learn/modifiers/luxe-modifiers/#text","title":"Text","text":"<p>Displays text attached to an entity. </p>"},{"location":"learn/modifiers/luxe-modifiers/#transform","title":"Transform","text":"<p>Position, rotation and scale for an entity.  When present, any other modifiers that deal with transform typically reference this one. To move an entity with <code>Text</code> attached around, set the transform position.</p>"},{"location":"learn/modifiers/luxe-modifiers/#tiles","title":"Tiles","text":"<p>Displays a <code>tiles</code> asset attached to an entity. This is what you'd use to bring a tilemap into the world.</p> <p>Now that we've learned about what exists, let's look at making our own.</p>"},{"location":"learn/ui/basic-layout/","title":"basic layout","text":""},{"location":"learn/ui/basic-layout/#basic-ui-layout","title":"Basic UI layout","text":"<p>There's a basic layout engine for UI that is currently code only,  but will be able to be used from assets over time.</p> <p>The examples at the end have images to show how the options work.</p>"},{"location":"learn/ui/basic-layout/#getting-started","title":"Getting started","text":"<p>The first important step for layout is enabling it on a given UI canvas. We'll import the layout mode enum for the UI, as well as the ones for layout.</p> <pre><code>import \"luxe: ui\" for UILayoutMode, UIBehave, UIContain\n</code></pre> <p>Then we tell the UI we have to use <code>UILayoutMode.flex</code> via <code>UI.set_layout_mode</code>.</p> <pre><code>var ui = Entity.create(app.world, \"ui\")\nUI.create(ui, x, y, w, h, depth, app.camera)\n//now tell it to use flex layout mode\nUI.set_layout_mode(ui, UILayoutMode.flex)\n</code></pre> <p>Don't forget to commit changes which will update layout when you make changes to the UI! <pre><code>UI.commit(ui)\n</code></pre></p>"},{"location":"learn/ui/basic-layout/#the-api","title":"The API","text":"<p>There's only 3 methods needed for the layout engine.</p> <pre><code>Control.set_behave(control: Control, behave: UIBehave)\nControl.set_contain(control: Control, contain: UIContain)\nControl.set_margin(control: Control, left: Num, top: Num, right: Num, bottom: Num)\n</code></pre>"},{"location":"learn/ui/basic-layout/#the-concepts","title":"The concepts","text":"<p>The margins are just margins, they're relative to other controls.</p> <p>The first key concept is <code>contain</code>: as a container, how does my contents behave.   </p> <p>The second is <code>behave</code>: as a child, how do I behave.</p> <p>We'll start by looking at how <code>contain</code> works, which has two main approaches of laying out the contents of a container.</p> <p>Set a size to zero if you want it to be filled in by the layout engine. If you specify a fixed size it will try to respect it.</p>"},{"location":"learn/ui/basic-layout/#contain","title":"Contain","text":""},{"location":"learn/ui/basic-layout/#free-layout","title":"free layout","text":"<p>The first type is called <code>UIContain.layout</code> which is free layout. A child can set their margins to control their relative position, it won't be affected by other controls.</p> <p>To use this, you'd set <code>Control.set_contain(container, UIContain.layout)</code> on the container.</p>"},{"location":"learn/ui/basic-layout/#flex-layout","title":"flex layout","text":"<p>The second kind is <code>UIContain.flex</code>, the one you typically use a dynamic layout for: flexible automatic layout.</p>"},{"location":"learn/ui/basic-layout/#rowcolumn","title":"row/column","text":"<p>To use this, you start by choosing a type of layout (row/column). These are <code>UIContain.row</code> and <code>UIContain.column</code>. </p> <p>With <code>row</code>, contents of the container will be placed side by side.   With <code>column</code>, they'll be stacked vertically.</p> <p>optional flex</p> <p>Technically <code>UIContain.flex</code> exists, which defaults to <code>row</code>, but you can leave out the <code>flex</code> when specifying flex options since it's implied.</p>"},{"location":"learn/ui/basic-layout/#fit-contents","title":"fit contents","text":"<p>Sometimes we want a container to be the size of the children. This will ordinarily happen automatically if you don't set a fixed size for the container, but you can also use <code>UIContain.vfit</code> and <code>UIContain.hfit</code> to force the behaviour and ignore the container size. </p> <p>Note that children relying on the container size (like vfill) while the container expecting a size from the children (vfit) may behave in an unclear way, since it's somewhat impractical. Make sure somewhere a size is specified so it can resolve what you really mean. Better errors around this are planned.</p>"},{"location":"learn/ui/basic-layout/#alignment","title":"alignment","text":"<p>Now that we have our contents arranged side by side or vertically, we can decide how they'll be aligned. We do this with <code>UIContain.start</code>, <code>UIContain.middle</code>, <code>UIContain.end</code> and <code>UIContain.justify</code>. </p> <p><code>start</code> will align left (row) or top (column).   <code>end</code> is right (row) or bottom (column).   <code>middle</code> will align them in the center either way.  <code>justify</code> will insert spacing to stretch across whole area, spacing them out evenly.   </p>"},{"location":"learn/ui/basic-layout/#wrapping","title":"wrapping","text":"<p>Finally, we have <code>UIContain.wrap</code>/<code>UIContain.nowrap</code>. <code>nowrap</code> means single line, and won't wrap if the container gets too small. <code>wrap</code> would rearrange contents making it multi-line if that happened.</p>"},{"location":"learn/ui/basic-layout/#behave","title":"Behave","text":"<p>The next set of options available come from <code>UIBehave</code>, which decide how a control will behave when inside a container. The container decides how things will be arranged in relation to each other, but a container has options on how it will act as well.</p> <p>Behaviour is also relative to the <code>contain</code> of the parent. Some options won't make sense if the parent is in <code>flex</code> mode, but all options are valid for <code>layout</code> mode. </p> <p>The options are listed below. Some options are a shorthand for multiple options, such as <code>UIBehave.left | UIBehave.right | UIBehave.top | UIBehave.bottom</code> meaning the same as <code>UIBehave.fill</code>. You'll also notice that margins are used in relation here as well.</p> <ul> <li><code>fill</code> - anchor to all four directions</li> <li><code>left</code> - anchor to left item or left side of parent</li> <li><code>top</code> - anchor to top item or top side of parent</li> <li><code>right</code> - anchor to right item or right side of parent</li> <li><code>bottom</code> - anchor to bottom item or bottom side of parent</li> <li><code>hfill</code> - anchor to both left and right item or parent borders</li> <li><code>vfill</code> - anchor to both top and bottom item or parent borders</li> <li><code>hcenter</code> - center horizontally, with left margin as offset</li> <li><code>vcenter</code> - center vertically, with top margin as offset</li> <li><code>center</code> - center in both directions, with left/top margin as offset</li> </ul>"},{"location":"learn/ui/basic-layout/#examples","title":"Examples","text":"<p>It may be easier to see examples to make sense of these options! Don't forget to commit changes to the ui itself and changes to the layout. The first example will have all the setup code, subsequent ones will just show relevant bits.</p> <p>There's also the <code>samples/wip/ui</code> sample, which has been updated to use the layout API.</p>"},{"location":"learn/ui/basic-layout/#a-row-of-controls","title":"A row of controls","text":"<pre><code>var ui = Entity.create(app.world, \"ui\")\nUI.create(ui, 0, 0, app.width, app.height, 0, app.camera)\n\n//First we create a container\nvar container = Control.create(ui)\nControl.set_bounds(container, 20, 20, 400, 100)\n//Then we want children to be in a row, and spaced evenly\nControl.set_contain(ui, container, UIContain.row | UIContain.justify)\n//We are relative to the canvas, so anchor left...\nControl.set_behave(ui, container, UIBehave.left)\n//And set a margin of 8 units away from the side\nControl.set_margin(ui, container, 8, 0, 0, 0)\n\n//Now we'll make a few controls to put inside\n\nfor(i in 0 ... 4) {\n\n  //This is for the margin, we only want\n  //a left margin on the first one.\n  var left = 0\n  if(i == 0) left = 5\n\n  var block = Control.create(ui)\n  // Notice that we don't set the size of the control, \n  // because the layout will do that for us by definition. \n  // We set our behaviour to fill, both vertically and horizontally.\n  Control.set_behave(ui, block, UIBehave.fill)\n  //We add margins so we're not touching the edges\n  Control.set_margin(ui, block, left, 5, 5, 5)\n  //And add it to the control\n  Control.child_add(container, block)\n}\n\n//Commit changes\nUI.commit(ui)\n</code></pre>"},{"location":"learn/ui/basic-layout/#a-stack-of-controls","title":"A stack of controls","text":"<p>Let's rearrange these verticallly, and make them fixed height.  We can still specify sizes of our controls if the layout settings don't override it.  (We can set a size to <code>0</code> too which signals that the layout will control it).</p> <p>The container changes, note that we've removed <code>justify</code> and made it <code>start</code> so they'll be aligned to the top of the container. The 4 images below are <code>start</code>, <code>middle</code>, <code>end</code> and <code>justify</code> respectively. <pre><code>Control.set_contain(ui, container, \n  UIContain.column | UIContain.start)\n</code></pre></p> <p> </p> <p>And then the blocks, we set them to horizontal fill, so they'll expand all available space on x. We don't set any vertical layout options, so we set the size vertically to a fixed size.</p> <pre><code>for(i in 0 ... 4) {\n  var block = Control.create(ui)\n  var top = 0\n  if(i == 0) top = 5\n  Control.set_size(block, 0, 40)\n  Control.set_behave(ui, block, UIBehave.hfill)\n  Control.set_margin(ui, block, 5, top, 5, 5)\n  Control.child_add(container, block)\n}\n</code></pre>"},{"location":"learn/ui/custom-controls/","title":"custom controls","text":""},{"location":"learn/ui/custom-controls/#custom-controls","title":"Custom controls","text":""},{"location":"learn/ui/custom-controls/#custom-control-blank-control","title":"custom control = blank control","text":"<p>More specifically, </p> <p>a custom control is a blank control that has been specialized.</p> <p>This is exactly how the built in controls work too. There are two behaviours that separate a custom control from a custom one:</p> <ul> <li>response to built in events (and optionally emitting new events)</li> <li>the rendering behaviour of a control</li> </ul>"},{"location":"learn/ui/custom-controls/#custom-behaviour","title":"custom behaviour","text":"<p>We can use <code>Control.set_process(control, function)</code> to handle built in events, and then implement custom behaviour and events based on them.</p> <p>Let's make a nonsense example, a control that emits a change event based  on which quadrant the input is in. We'll make a helper function that returns one.</p> <pre><code>get_quadrant(x,y,w,h, input_x, input_y) {\n  var mid_x = (x + w*0.5)\n  var mid_y = (y + h*0.5)\n\n  var is_left = input_x &gt; x &amp;&amp; input_x &lt;= mid_x\n  var is_right = input_x &gt; mid_x &amp;&amp; input_x &lt; (x + w)\n  var is_top = input_y &gt; y &amp;&amp; input_y &lt;= mid_y\n  var is_bottom = input_y &gt; mid_y &amp;&amp; input_y &lt; (y + h)\n\n  if(is_left &amp;&amp; is_top)     return 0\n  if(is_right &amp;&amp; is_top)    return 1\n  if(is_right &amp;&amp; is_bottom) return 2\n  if(is_left &amp;&amp; is_bottom)  return 3\n\n  return -1\n} //get_quadrant\n</code></pre>"},{"location":"learn/ui/custom-controls/#quadrant-change-event","title":"Quadrant change event","text":"<p>Now we can make our control behave this way, and fire a user facing event. Note that we need to call <code>Control.set_allow_input</code> so that we get the move event. <pre><code>var custom = Control.create(ui)\nControl.set_allow_input(custom, true)\nControl.set_process(custom) {|control, state, event, x,y,w,h|\n  if(event.control != control) return //required\n\n    //we respond to a move event\n  if(event.type == UIEvent.move) {\n    var quadrant = get_quadrant(x,y,w,h, event.x,event.y)\n    if(quadrant != -1) {\n      UI.events_emit(control, UIEvent.change, quadrant)\n    }\n  } //move event\n} //set_process\n</code></pre></p> <p>This example is interesting, but it doesn't remember what quadrant it was in, so it sends the event any time the mouse moves, regardless of if there was a change in quadrant.</p>"},{"location":"learn/ui/custom-controls/#persistent-state","title":"Persistent state","text":"<p>To fix that, we'll use that <code>state</code> value that's being passed into our process function. To do that, we can store any value we want in there, via <code>Control.set_state_data(control, data)</code>. That means we could store a class with variables, or just a single value like a number.</p> <p>For this example, we'll store the quadrant itself to keep it simple.</p> <pre><code>var custom = Control.create(ui)\nControl.set_allow_input(custom, true)\nControl.set_state_data(custom, -1) //no quadrant\nControl.set_process(custom) {|control, state, event, x,y,w,h|\n  if(event.control != control) return //required\n\n  if(event.type == UIEvent.move) {\n    var current_quadrant = state\n    var new_quadrant = get_quadrant(x,y,w,h, event.x,event.y)\n    if(new_quadrant != current_quadrant) {\n      UI.events_emit(control, UIEvent.change, quadrant)\n      Control.set_state_data(custom, new_quadrant) \n    }\n  } //move event\n} //set_process\n</code></pre> <p>There, now the event only fires when there's an actual change.</p>"},{"location":"learn/ui/custom-controls/#our-specialized-api","title":"Our specialized API","text":"<p>Since we've made a control that behaves in a specialized way, we should make it available via an idiomatic <code>create</code> function.</p> <pre><code>class Quadrant {\n  static create(ui) {\n    //our create lives here now\n    var custom = Control.create(ui)\n    Control.set_allow_input(custom, true)\n    // ... continued\n    // ...\n    // then return our new control\n    return custom\n  } //create\n} //Quadrant\n</code></pre>"},{"location":"learn/ui/custom-controls/#the-user-facing-side","title":"The user facing side","text":"<p>The user of our quadrant control can now create one,  and would use the regular event callback to handle our custom event.  In this example we've reused the <code>change</code> event and given it meaning for our control.</p> <pre><code>var quadrant = Quadrant.create(ui)\nControl.set_event(quadrant) {|event|\n  if(event.type == UIEvent.change) {\n    Log.print(\"quadrant changed! now `%(event.change)`\")\n  }\n}\n</code></pre>"},{"location":"learn/ui/custom-controls/#custom-rendering","title":"custom rendering","text":"<p>Similar to the <code>Control.set_process()</code> function, there exists a <code>Control.set_render()</code> function too. Let's make our control draw a colored box showing the active quadrant. This extends what we have so far, we just add a custom render function as well.</p>"},{"location":"learn/ui/custom-controls/#displaying-the-active-quad","title":"displaying the active quad","text":"<pre><code>var colors = [[1,0,0,1], [0,1,0,1], [0,0,1,1], [1,1,1,1], [0,0,0,1]]\n\nControl.set_render(custom) {|control, state, x,y,w,h|\n  //depth is relative in UI, so we ask for depth 0 \n  //relative to our control to draw at.\n  var depth = UI.draw_depth_of(control, 0) \n\n  var angle = 0         //just for clarity / no magic numbers\n  var quadrant = state  //remember we're just storing a number\n\n  //if no quadrant, just draw a black box covering the whole control\n  if(quadrant == -1) {\n\n    UI.draw_quad(control, x, y, depth, w, h, angle, colors[4])\n\n  } else {\n\n    var mid_x = w*0.5\n    var mid_y = h*0.5\n\n    var box_x = x\n    var box_y = y\n    var box_w = mid_x\n    var box_h = mid_y\n\n    if(quadrant == 1 || quadrant == 2) box_x = box_x + mid_x\n    if(quadrant == 2 || quadrant == 3) box_y = box_y + mid_y\n\n    UI.draw_quad(control, \n      box_x, box_y, depth, \n      box_w, box_h, \n      angle, colors[quadrant])\n\n  } //has quadrant\n} //set_render\n</code></pre>"},{"location":"learn/ui/custom-controls/#more-drawing","title":"more drawing","text":"<p>There are several drawing functions, found here in the UI API. </p> <p>They offer drawing either solid or outlined versions of basic shapes similar  to the Draw API. There's also text and images as you'd expect.</p> <p>One side effect of this style of rendering, is that you have access to state outside of the control.</p> <p>That includes game state, player state, and more. If your control was doing custom rendering,  there's no need for it to be updated with (for example) the number of plants a player has watered, because you can read it directly, it will always show the latest value.</p>"},{"location":"learn/ui/intro/","title":"overview","text":""},{"location":"learn/ui/intro/#ui-in-luxe","title":"UI in luxe","text":"<p>work in progress</p> <p>The UI has parts that are still being defined, but the basics are there.</p>"},{"location":"learn/ui/intro/#ui-is-a-modifier","title":"UI is a Modifier","text":"<p>UI exists within a <code>World</code>, and is attached to an <code>Entity</code> like other modifiers. This means that a UI can easily follow the entity if it is moved.</p> <p>When you create a UI on an <code>Entity</code>, you're creating a canvas. A canvas is like an isolated little space, dedicated to elements within that canvas.</p> <p>These elements are called controls, a canvas is a container for controls.  UI controls don't belong to the world (they are not entities), they belong to the canvas. We'll see how that looks below.</p> <p>A canvas also has it's own coordinate space, where 0,0 is top left for the origin, and Y values increase downward. This is different from world space, where Y+ is up.</p>"},{"location":"learn/ui/intro/#creating-a-canvas","title":"Creating a canvas","text":"<p>To create a UI, we need an entity to attach it to.</p> <p>When we attach the UI, we also give it a camera, which it will use to calculate input. That means if your object is in a 3D world, input should work as expected without extra effort.</p> <pre><code>var ui = Entity.create(app.world, \"ui\")\nvar x = 0\nvar y = 0\nvar w = 500 //these are in world units\nvar h = 500\nvar depth = 0\nUI.create(ui, x, y, w, h, depth, app.camera)\n</code></pre>"},{"location":"learn/ui/intro/#creating-a-control","title":"Creating a control","text":"<p>Now that we have a canvas, we can create controls inside it. Controls are positioned relative to the canvas unless they're a child of another control. Controls have a <code>bounds</code>, which is a rectangle, and is also top left, y+ going down.</p> <p>Let's create a panel, as a background, so we can see our canvas.</p> <p>To create a control, we pass in the canvas that it will be created in. Once created, we can configure it. The first step is usually setting the size or the bounds, via <code>Control.set_bounds(control, x,y,w,h)</code>.</p> <pre><code>//we'll use the same w/h from above\nvar bg = UIPanel.create(ui)\nControl.set_bounds(bg, 0,0,w,h)\nUIPanel.set_color(bg, [0,0,0,0.25])\n</code></pre> <p>So here we can see that we got a panel control in return from <code>create</code>.  This value is an instance of a control that belongs to this canvas.</p>"},{"location":"learn/ui/intro/#committing-ui-changes","title":"Committing UI Changes","text":"<p>Now, this part is important.   </p> <p>A concept that luxe uses is the <code>commit</code> concept.</p> <p>UI is a great example of this concept, where you want to make several changes to the UI that could be expensive, or could have dependencies (like layout being relative).</p> <p>Once you've made a series of changes, you MUST call commit to finalize them.</p> <p>In fact, in this example, if you don't, nothing will render!  So we must call <code>UI.commit(ui)</code> to make sure it shows up.</p>"},{"location":"learn/ui/intro/#controls-and-specialized-controls","title":"Controls and Specialized Controls","text":"<p>All controls are a <code>Control</code>, but not all controls are a <code>UIPanel</code>.</p> <p>Controls like <code>UIPanel</code> specialize a control, and offer their own API on top of the <code>Control</code> API, like <code>UIPanel.set_color</code>. The <code>Control</code> API is valid for all controls, regardless of their type, but specialized controls  only work with the same API that their create function is from.</p> <p>Let's also create a button that takes up the upper right hand side of our canvas. This would be half the size on width and height, and be positioned at the middle of the canvas on x. We'll use this to hook up an event!</p> <pre><code>var button = UIButton.create(ui)\nControl.set_bounds(button, w/2, 0, w/2, h/2)\nUIButton.set_text(button, \"click!\")\n</code></pre>"},{"location":"learn/ui/intro/#control-events","title":"Control events","text":"<p>When we have a control, we can listen for events on that control and respond to them as needed.  Like our button will have a <code>UIEvent.release</code> event when clicked.</p> <pre><code>Control.set_events(button) {|event|\n  if(event.type == UIEvent.release) {\n    Log.print(\"The button was clicked! x %(event.x) y %(event.y)\")\n  }\n}\n</code></pre> <p>There are many default events for a control, but it's possible for controls to send custom events too. Some events are dependent on settings like <code>Control.set_allow_input</code>/<code>Control.set_allow_keys</code>, which determine if a control will receive mouse and keyboard input. </p> <p>You can also print the events to see what kind of events are happening and when:</p> <pre><code>Control.set_events(button) {|event|\n  Log.print(\"event from button %(event)\")\n}\n</code></pre>"},{"location":"learn/ui/intro/#empty-controls-as-containers","title":"Empty controls as containers","text":"<p>If you don't use a specialized <code>create</code> function,  you get a blank control that has all the default behaviours of a control,  like input and bounds.</p> <p>A blank control is often used as a container to make groups,  so you can easily refer to a single control to move a bunch of controls.</p>"},{"location":"learn/ui/intro/#full-example","title":"Full example","text":"<pre><code>import \"luxe: io\" for IO\nimport \"luxe: game\" for Ready\nimport \"luxe: input\" for Input, Key\nimport \"luxe: world\" for UI, UIEvent, Entity\nimport \"luxe: ui\" for UIButton, Control, UILabel, UISlider, UIPanel\n\nimport \"outline/app\" for App\n\nclass Game is Ready {\n\n  construct ready() {\n\n    super(\"ready!\")\n\n    app = App.new()\n\n    var ui = Entity.create(app.world, \"ui\")\n    var x = 0\n    var y = 0\n    var w = 500 //these are in world units\n    var h = 500\n    var depth = 0\n    UI.create(ui, x, y, w, h, depth, app.camera)\n\n    var bg = UIPanel.create(ui)\n    Control.set_bounds(bg, 0,0,w,h)\n    UIPanel.set_color(bg, [0,0,0,0.25])\n\n    //we'll use the ui w/h from above\n    var button = UIButton.create(ui)\n    Control.set_bounds(button, w/2, 0, w/2, h/2)\n    UIButton.set_text(button, \"click!\")\n\n    Control.set_events(button) {|event|\n      if(event.type == UIEvent.release) {\n        Log.print(\"The button was clicked! x %(event.x) y %(event.y)\")\n      }\n    }\n\n    //create a blank container\n    var container = Control.create(ui)\n    Control.set_bounds(container, 0, h/2, 128, 32)\n\n    //create a background as well\n    var container_bg = UIPanel.create(ui)\n    Control.set_bounds(container_bg, 0,0,128,32)\n    UIPanel.set_color(container_bg, [0,0,0,1])\n\n    //create some controls to put inside it\n    var label = UILabel.create(ui)\n        Control.set_bounds(label, 4, 0, 64, 30)\n        UILabel.set_text(label, \"progress\")\n    var slider = UISlider.create(ui)\n        Control.set_bounds(slider, 64, 10, 60, 10)\n\n    //now add them to the container\n    Control.child_add(container, container_bg)\n    Control.child_add(container, label)\n    Control.child_add(container, slider)\n\n    UI.commit(ui)\n\n  } //ready\n\n  tick(delta) {\n\n    if(Input.key_state_released(Key.escape)) {\n      IO.shutdown()\n    }\n\n  } //tick\n\n  app { _app }\n  app=(v) { _app=v }\n\n} //Game\n</code></pre>"},{"location":"learn/ui/intro/#debug-visualization","title":"Debug Visualization","text":"<p>In your settings file (like <code>outline/settings.settings.lx</code>), we can specify a debug flag that will draw outlines for each control, and show some info about what controls are hovered. Inside the settings file, put <code>engine.ui.debug_vis = true</code> at the root. </p> <p>Also relevant: A <code>Control</code> doesn't have a name by default, you have to set one using <code>Control.set_id(control, \"some name\")</code>.</p>"},{"location":"learn/ui/intro/#final-note-specialized-containers","title":"Final Note: Specialized Containers","text":"<p>Some containers are specialized because they provide additional behaviour. UIList and UIScroll are two examples of such controls, as the both provide scrolling.</p> <p>In both cases, adding a child (via <code>Control.child_add</code>) to the control itself does not count  as adding it to the container, but is treated as a regular child of the control.  You would need to use <code>UIScroll.add(scroll, control)</code> or <code>UIList.add(scroll, control)</code> instead.</p> <p>why?  Imagine you had a scroll area (or a list), and you wanted to place a button on the top right.  You wouldn't want this button to scroll as part of the container, but instead be fixed at the top. If the scroll used <code>Control.child_add</code> it wouldn't have a way (currently) to distinguish this type of child, from one you did want to scroll around as part of the container.</p> <p>potential change</p> <p>This behaviour may change, as I think it's got its own set of quirks.</p>"},{"location":"learn/ui/ui-assets/","title":"Ui assets","text":""},{"location":"learn/ui/ui-assets/#ui-loaded-via-assets","title":"UI loaded via assets","text":""},{"location":"manual/overview/","title":"overview","text":""},{"location":"manual/overview/#luxe-user-manual","title":"luxe user manual","text":"<p>While the guide is a good introduction to using luxe, the manual is the more detailed breakdown of the user workflow and systems.</p> <p>The manual is split into sections, some quick and some in depth.</p> <ul> <li>The runtime manual goes over the engine lifecycle.<ul> <li>Covering details like the main loop, event systems and entry system.</li> </ul> </li> <li>The asset system manual goes over how assets work.<ul> <li>This covers the build pipeline, file formats, and design goals.</li> </ul> </li> <li>The rendering manual goes over how rendering works.<ul> <li>This covers the low and high level usage, pipelines and more.</li> </ul> </li> </ul>"},{"location":"manual/assets/overview/","title":"overview","text":"<p>overview.md</p>"},{"location":"manual/rendering/concepts/","title":"Rendering concepts","text":"<p>The below is a list of key concepts the luxe renderer uses, based on this set of questions:</p> <ul> <li>What is rendered? (Geometry)</li> <li>What controls how that looks? (Materials)</li> <li>How is it decided what gets rendered? (Render Set)</li> <li>What happens during rendering? (Render Path)</li> <li>Where does the rendering end up? (Resources/Render Targets/Target Region)</li> </ul> <p>Many of these concepts will be expanded in detail in the pipeline section,  but are important to understand how rendering fits together.</p>"},{"location":"manual/rendering/concepts/#geometry","title":"Geometry","text":"<p>What is rendered?</p> <p>In luxe the basic unit of work for the renderer is called Geometry.   Geometry is a container for vertex buffers, a vertex count, and a material. </p> <p>A vertex buffer contains information for the geometry such as positions, colors or uvs, which get handed to the GPU, and the vert count controls how many vertices for this geometry will get drawn. </p>"},{"location":"manual/rendering/concepts/#materials","title":"Materials","text":"<p>What controls how that looks?</p> <p>A material controls what geometry will look like once rendered: which shaders are used, what material inputs are set, and what blend modes are active. </p> <p>A material basis defines a type of material, and a material instance customizes the type with different material input values. </p> <p>A basis is typically defined in a <code>material.basis.lx</code> asset, and an instance inside a <code>material.lx</code> asset.</p>"},{"location":"manual/rendering/concepts/#render-set","title":"Render Set","text":"<p>How is it decided what gets rendered?</p> <p>A render set is a list of <code>Geometry</code>.    </p> <p>In luxe, when submitting a render, a <code>set</code> is passed in to tell the renderer what geometry to draw.  On the high level, each world has a render set, and when rendered, submits it.   </p> <p>On the low level you can make your own render set via <code>var set = Render.create_set()</code>.   </p> <ul> <li>use <code>Render.set_add(set, geometry)</code> to add,</li> <li>or <code>Render.set_remove(set, geometry)</code> to remove</li> </ul> <p>A render set is how you control visibility of geometry.  To hide an object, remove it from the set.</p>"},{"location":"manual/rendering/concepts/#render-graph","title":"Render Graph","text":"<p>What happens during rendering?</p> <p>Rendering in luxe is designed as a Render Graph, a scriptable one.</p> <p>With a render graph, you describe what you want to happen,  and the renderer will execute the set of steps when it is time. The path taken contains the steps to execute.</p> <p>At the moment, the render graph is scripted only,  but in future will be a visual node based graph too.</p>"},{"location":"manual/rendering/concepts/#render-path","title":"Render Path","text":"<p>What happens during rendering?</p> <p>A render path is what contains the steps to execute.  This is \"the path that the renderer will take\" when submitting.   </p> <p>In the scripted render graph, you can add <code>layers</code> which are executed in order.</p> <p>There's a <code>render layer</code> which renders geometry from a <code>set</code>.  There's also a <code>pass layer</code> which renders a fullscreen pass (as a triangle). </p> <p>In each case, a layer contains configuration including a destination target.</p>"},{"location":"manual/rendering/concepts/#render-targets-resources","title":"Render Targets (resources)","text":"<p>Where does the rendering end up?</p> <p>Rendering ends up in a render target, which is an image that has been defined as a resource, and given a name. An image must be defined as a resource first, to be rendered to. The render graph speaks about these resources by name when deciding where to render. </p> <p>Using <code>Render.define_resource(name, image)</code> will define a resource pointing to the given image will be defined.</p>"},{"location":"manual/rendering/concepts/#special-targets","title":"Special targets","text":"<p><code>screen</code>  Refers to the target window/primary backbuffer (likely a better name will come later)</p> <p><code>target</code>  This refers to \"the target resource on the submit\". </p> <p>Both world and direct rendering can take a resource name to render to.  Any graph nodes that specify <code>target</code> will draw into the resource from the submission,  because often they won't know the name of the target resource directly. This also means you can share render paths across multiple different renders into different targets because their name won't be hardcoded.</p> <p>An example: you're rendering a world into a resource called <code>scene</code>.  Inside the render graph, you have to render something into a lower res target called <code>scene_low_res</code> and blur it. Then, you combine that with the other stuff into <code>scene</code>, by using <code>target</code> as the destination.</p>"},{"location":"manual/rendering/concepts/#target-region","title":"Target Region","text":"<p>In luxe rendering, a target region is defined as <code>x, y, w, h</code>, but with values in the <code>0...1</code> range.</p> <p>A full screen region would be <code>0 0 1 1</code>, where <code>1</code> is the full width and height.  A region of <code>0.5 0 0.5 1</code> would be a split screen region (right hand side).</p> <p>This is because in the majority of cases, you don't want to encode a resolution into the viewport.  Doing so makes the viewport size stateful, and means that if the resolution changes, all values become wrong.</p> <p>By making the values map automatically to the destination target size, you are more often expressing intent rather than state. Some examples: split screen is always 0.5, regardless of resolution. A minimap might always be 10% of the screen size. </p> <p>This avoids a large class of bugs that are hard to debug,  but does require some viewport calculations to happen on your end if doing subregions.</p>"},{"location":"manual/rendering/high-level/","title":"High level rendering","text":"<p>On the highest level everything is typically drawn via a <code>World</code>. This includes Modifier Systems that provide drawing, like <code>Sprite</code>, <code>Mesh</code> or <code>UI</code>,  as well as Service APIs like the <code>Draw</code> drawing API.</p>"},{"location":"manual/rendering/overview/","title":"Rendering in luxe","text":"<p>Please note that rendering is a fairly wide and deep topic.</p>"},{"location":"manual/rendering/overview/#concepts","title":"Concepts","text":"<p>The concepts page covers important concepts related to how things are rendered in luxe.  This covers topics like targets and viewports, for deciding how and where things render.</p>"},{"location":"manual/rendering/overview/#tiers","title":"Tiers","text":"<p>In luxe, rendering occupies mutliple tiers of access/usage.  On the user facing side, there is a high level and a low level.</p> <p>Internally there are more layers, like mid level and lowest level (the backend, which abstracts away graphics APIs, making it portable).</p>"},{"location":"manual/rendering/overview/#high-level","title":"High level","text":"<p>In a typical game, a lot of the time, you render <code>Worlds</code>, and not individual objects. This includes Modifier Systems that provide drawing, like <code>Sprite</code>, <code>Mesh</code> or <code>UI</code>,  as well as Service APIs like the <code>Draw</code> drawing API, which places its contents into the world.</p> <p>The world will track which renderable items are in it, and when that world is rendered, the active ones will be submitted to be drawn.</p>"},{"location":"manual/rendering/overview/#low-level","title":"Low level","text":"<p>Below that, you can access the <code>Render</code> API directly, which offers access to <code>Geometry</code> and more, as well as a <code>Render.submit</code> call.</p> <p>This allows manually controlling which geometry is submitted and when, as well as offers access to  modifying geometry or images directly.</p>"},{"location":"manual/rendering/overview/#differences","title":"Differences","text":"<p>It's important to remember that the higher level tools will be doing work for you.  If you bypass that work, you'll have to do more work yourself. </p> <p>More details on each:</p> <ul> <li>High level</li> <li>Low level</li> </ul>"},{"location":"manual/runtime/overview/","title":"overview","text":"<p>overview.md</p>"},{"location":"modules/arcade/api/","title":"Api","text":""},{"location":"modules/arcade/api/#arcade-api-0015","title":"<code>arcade</code> API (<code>0.0.15</code>)","text":"<ul> <li>arcade: modifier/arcade </li> <li>arcade: modifier/collision/oneway </li> <li>arcade: modifier/collision/tiles </li> <li>arcade: modifier/control/platformer </li> <li>arcade: modifier/control/topdown </li> <li>arcade: modifier/trigger/script </li> <li>arcade: modifier/trigger/teleport </li> </ul>"},{"location":"modules/arcade/api/modifier/arcade/","title":"Arcade","text":""},{"location":"modules/arcade/api/modifier/arcade/#arcade-api-0015","title":"<code>arcade</code> API (<code>0.0.15</code>)","text":""},{"location":"modules/arcade/api/modifier/arcade/#arcade-modifierarcade-module","title":"<code>arcade: modifier/arcade</code> module","text":"<ul> <li>Arcade </li> <li>CollisionEvent </li> <li>ContactCache </li> <li>ContactState </li> <li>Shape2DDraw </li> <li>ShapeType </li> <li>SimpleSpatialHash </li> </ul>"},{"location":"modules/arcade/api/modifier/arcade/#arcade","title":"Arcade","text":"<p><code>import \"arcade: modifier/arcade\" for Arcade</code></p> <p>no docs found</p> <ul> <li>create(entity: <code>Any</code>)</li> <li>destroy(entity: <code>Any</code>)</li> <li>has(entity: <code>Any</code>)</li> <li>get_vel(entity: <code>Any</code>)</li> <li>set_vel(entity: <code>Any</code>, vel: <code>Any</code>)</li> <li>get_vel_min(entity: <code>Any</code>)</li> <li>set_vel_min(entity: <code>Any</code>, min: <code>Any</code>)</li> <li>get_acc(entity: <code>Any</code>)</li> <li>set_acc(entity: <code>Any</code>, acc: <code>Any</code>)</li> <li>get_max_speed(entity: <code>Any</code>)</li> <li>set_max_speed(entity: <code>Any</code>, max_speed: <code>Any</code>)</li> <li>get_solid(entity: <code>Any</code>)</li> <li>set_solid(entity: <code>Any</code>, solid: <code>Any</code>)</li> <li>get_dynamic(entity: <code>Any</code>)</li> <li>set_dynamic(entity: <code>Any</code>, dynamic: <code>Any</code>)</li> <li>get_restitution(entity: <code>Any</code>)</li> <li>set_restitution(entity: <code>Any</code>, restitution: <code>Any</code>)</li> <li>get_drag(entity: <code>Any</code>)</li> <li>set_drag(entity: <code>Any</code>, drag: <code>Any</code>)</li> <li>set_drag_x(entity: <code>Any</code>, drag_x: <code>Any</code>)</li> <li>set_drag_y(entity: <code>Any</code>, drag_y: <code>Any</code>)</li> <li>add_collision_callback(entity: <code>Any</code>, fn: <code>Any</code>)</li> <li>remove_collision_callback(entity: <code>Any</code>, fn: <code>Any</code>)</li> <li>get_frame_collision_normals(entity: <code>Any</code>)</li> <li>collided_with_normal_angle(entity: <code>Any</code>, angle_center: <code>Any</code>, angle_spread: <code>Any</code>)</li> <li>set_shape_type(entity: <code>Any</code>, shape_type: <code>Any</code>)</li> <li>get_shape_type(entity: <code>Any</code>)</li> <li>get_width(entity: <code>Any</code>)</li> <li>get_height(entity: <code>Any</code>)</li> <li>set_width(entity: <code>Any</code>, width: <code>Any</code>)</li> <li>set_height(entity: <code>Any</code>, height: <code>Any</code>)</li> <li>set_centered(entity: <code>Any</code>, centered: <code>Any</code>)</li> <li>set_radius(entity: <code>Any</code>, radius: <code>Any</code>)</li> <li>set_broadphase_cell_size(world: <code>Any</code>, size: <code>Any</code>)</li> <li>set_debug_draw_enabled(world: <code>Any</code>, enabled: <code>Any</code>)</li> <li>get_debug_draw_enabled(world: <code>Any</code>)</li> <li>toggle_debug_draw_enabled(world: <code>Any</code>)</li> <li>set_ignored(entity: <code>Any</code>, other: <code>Any</code>, state: <code>Any</code>)</li> <li>refresh(entity: <code>Any</code>)</li> </ul> <p> Arcade.create(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Arcade.destroy(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Arcade.has(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Arcade.get_vel(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Arcade.set_vel(entity: <code>Any</code>, vel: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Arcade.get_vel_min(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Arcade.set_vel_min(entity: <code>Any</code>, min: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Arcade.get_acc(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Arcade.set_acc(entity: <code>Any</code>, acc: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Arcade.get_max_speed(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Arcade.set_max_speed(entity: <code>Any</code>, max_speed: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Arcade.get_solid(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Arcade.set_solid(entity: <code>Any</code>, solid: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Arcade.get_dynamic(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Arcade.set_dynamic(entity: <code>Any</code>, dynamic: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Arcade.get_restitution(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Arcade.set_restitution(entity: <code>Any</code>, restitution: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Arcade.get_drag(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Arcade.set_drag(entity: <code>Any</code>, drag: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Arcade.set_drag_x(entity: <code>Any</code>, drag_x: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Arcade.set_drag_y(entity: <code>Any</code>, drag_y: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Arcade.add_collision_callback(entity: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Arcade.remove_collision_callback(entity: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Arcade.get_frame_collision_normals(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Arcade.collided_with_normal_angle(entity: <code>Any</code>, angle_center: <code>Any</code>, angle_spread: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Arcade.set_shape_type(entity: <code>Any</code>, shape_type: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Arcade.get_shape_type(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Arcade.get_width(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Arcade.get_height(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Arcade.set_width(entity: <code>Any</code>, width: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Arcade.set_height(entity: <code>Any</code>, height: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Arcade.set_centered(entity: <code>Any</code>, centered: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Arcade.set_radius(entity: <code>Any</code>, radius: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Arcade.set_broadphase_cell_size(world: <code>Any</code>, size: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Arcade.set_debug_draw_enabled(world: <code>Any</code>, enabled: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Arcade.get_debug_draw_enabled(world: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Arcade.toggle_debug_draw_enabled(world: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Arcade.set_ignored(entity: <code>Any</code>, other: <code>Any</code>, state: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Arcade.refresh(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"modules/arcade/api/modifier/arcade/#collisionevent","title":"CollisionEvent","text":"<p><code>import \"arcade: modifier/arcade\" for CollisionEvent</code></p> <p>no docs found</p> <ul> <li>begin</li> <li>overlap</li> <li>end</li> <li>name(value: <code>Any</code>)</li> </ul> <p> CollisionEvent.begin \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CollisionEvent.overlap \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CollisionEvent.end \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CollisionEvent.name(value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"modules/arcade/api/modifier/arcade/#contactcache","title":"ContactCache","text":"<p><code>import \"arcade: modifier/arcade\" for ContactCache</code></p> <p>no docs found</p> <ul> <li>new()</li> <li>listen(entity: <code>Any</code>, fn: <code>Any</code>)</li> <li>unlisten(entity: <code>Any</code>, fn: <code>Any</code>)</li> <li>track(entity: <code>Any</code>)</li> <li>untrack(entity: <code>Any</code>)</li> <li>overlapped(entity_a: <code>Any</code>, entity_b: <code>Any</code>, normal: <code>Any</code>, overlap_dist: <code>Any</code>)</li> <li>send_event(entity_a: <code>Any</code>, entity_b: <code>Any</code>, state: <code>Any</code>, normal: <code>Any</code>, overlap_dist: <code>Any</code>, flip: <code>Any</code>)</li> <li>set_ignored(entity_a: <code>Any</code>, entity_b: <code>Any</code>, ignored: <code>Any</code>)</li> <li>is_ignored(entity_a: <code>Any</code>, entity_b: <code>Any</code>)</li> <li>post_collision()</li> </ul> <p> ContactCache.new() \u00b6 returns <code>ContactCache</code></p> <p>no docs found   </p> <p> ContactCache.listen(entity: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ContactCache.unlisten(entity: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ContactCache.track(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ContactCache.untrack(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ContactCache.overlapped(entity_a: <code>Any</code>, entity_b: <code>Any</code>, normal: <code>Any</code>, overlap_dist: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ContactCache.send_event(entity_a: <code>Any</code>, entity_b: <code>Any</code>, state: <code>Any</code>, normal: <code>Any</code>, overlap_dist: <code>Any</code>, flip: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ContactCache.set_ignored(entity_a: <code>Any</code>, entity_b: <code>Any</code>, ignored: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ContactCache.is_ignored(entity_a: <code>Any</code>, entity_b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ContactCache.post_collision() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"modules/arcade/api/modifier/arcade/#contactstate","title":"ContactState","text":"<p><code>import \"arcade: modifier/arcade\" for ContactState</code></p> <p>no docs found</p> <ul> <li>not_seen</li> <li>seen_last_frame</li> <li>seen_this_frame</li> </ul> <p> ContactState.not_seen \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ContactState.seen_last_frame \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ContactState.seen_this_frame \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"modules/arcade/api/modifier/arcade/#shape2ddraw","title":"Shape2DDraw","text":"<p><code>import \"arcade: modifier/arcade\" for Shape2DDraw</code></p> <p>no docs found</p> <ul> <li>draw_shape(shape: <code>Any</code>, ctx: <code>Any</code>, style: <code>Any</code>, depth: <code>Any</code>)</li> <li>draw_poly(verts: <code>Any</code>, ctx: <code>Any</code>, style: <code>Any</code>, depth: <code>Any</code>)</li> </ul> <p> Shape2DDraw.draw_shape(shape: <code>Any</code>, ctx: <code>Any</code>, style: <code>Any</code>, depth: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Shape2DDraw.draw_poly(verts: <code>Any</code>, ctx: <code>Any</code>, style: <code>Any</code>, depth: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"modules/arcade/api/modifier/arcade/#shapetype","title":"ShapeType","text":"<p><code>import \"arcade: modifier/arcade\" for ShapeType</code></p> <p>no docs found</p> <ul> <li>rect</li> <li>circle</li> </ul> <p> ShapeType.rect \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ShapeType.circle \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"modules/arcade/api/modifier/arcade/#simplespatialhash","title":"SimpleSpatialHash","text":"<p><code>import \"arcade: modifier/arcade\" for SimpleSpatialHash</code></p> <p>no docs found</p> <ul> <li>new(world: <code>Any</code>)</li> <li>set_cell_size(size: <code>Any</code>)</li> <li>bounds_to_grid(bounds: <code>Any</code>)</li> <li>bounds(x: <code>Any</code>, y: <code>Any</code>, aabb_w: <code>Any</code>, aabb_h: <code>Any</code>, into: <code>Any</code>)</li> <li>bounds_uncentered(x: <code>Any</code>, y: <code>Any</code>, aabb_w: <code>Any</code>, aabb_h: <code>Any</code>, into: <code>Any</code>)</li> <li>has_changed(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, centered: <code>Any</code>)</li> <li>query_area(x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, fn: <code>Any</code>)</li> <li>update(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, aabb_w: <code>Any</code>, aabb_h: <code>Any</code>, centered: <code>Any</code>)</li> <li>refresh(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, aabb_w: <code>Any</code>, aabb_h: <code>Any</code>, centered: <code>Any</code>)</li> <li>remove(entity: <code>Any</code>)</li> <li>remove(entity: <code>Any</code>, completely: <code>Any</code>)</li> <li>draw(ctx: <code>Any</code>, ctx_ui: <code>Any</code>, style: <code>Any</code>)</li> <li>text(draw: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, size: <code>Any</code>, text: <code>Any</code>)</li> <li>get_depth(count: <code>Any</code>, min: <code>Any</code>, max: <code>Any</code>, value: <code>Any</code>)</li> <li>get_color(colors: <code>Any</code>, min: <code>Any</code>, max: <code>Any</code>, value: <code>Any</code>, into: <code>Any</code>)</li> </ul> <p> SimpleSpatialHash.new(world: <code>Any</code>) \u00b6 returns <code>SimpleSpatialHash</code></p> <p>no docs found   </p> <p> SimpleSpatialHash.set_cell_size(size: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SimpleSpatialHash.bounds_to_grid(bounds: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SimpleSpatialHash.bounds(x: <code>Any</code>, y: <code>Any</code>, aabb_w: <code>Any</code>, aabb_h: <code>Any</code>, into: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SimpleSpatialHash.bounds_uncentered(x: <code>Any</code>, y: <code>Any</code>, aabb_w: <code>Any</code>, aabb_h: <code>Any</code>, into: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SimpleSpatialHash.has_changed(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, centered: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SimpleSpatialHash.query_area(x: <code>Any</code>, y: <code>Any</code>, w: <code>Any</code>, h: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SimpleSpatialHash.update(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, aabb_w: <code>Any</code>, aabb_h: <code>Any</code>, centered: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SimpleSpatialHash.refresh(entity: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, aabb_w: <code>Any</code>, aabb_h: <code>Any</code>, centered: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SimpleSpatialHash.remove(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SimpleSpatialHash.remove(entity: <code>Any</code>, completely: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SimpleSpatialHash.draw(ctx: <code>Any</code>, ctx_ui: <code>Any</code>, style: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SimpleSpatialHash.text(draw: <code>Any</code>, x: <code>Any</code>, y: <code>Any</code>, z: <code>Any</code>, size: <code>Any</code>, text: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SimpleSpatialHash.get_depth(count: <code>Any</code>, min: <code>Any</code>, max: <code>Any</code>, value: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> SimpleSpatialHash.get_color(colors: <code>Any</code>, min: <code>Any</code>, max: <code>Any</code>, value: <code>Any</code>, into: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"modules/arcade/api/modifier/collision/oneway/","title":"Oneway","text":""},{"location":"modules/arcade/api/modifier/collision/oneway/#arcade-api-0015","title":"<code>arcade</code> API (<code>0.0.15</code>)","text":""},{"location":"modules/arcade/api/modifier/collision/oneway/#arcade-modifiercollisiononeway-module","title":"<code>arcade: modifier/collision/oneway</code> module","text":"<ul> <li>CollisionOneWay </li> </ul>"},{"location":"modules/arcade/api/modifier/collision/oneway/#collisiononeway","title":"CollisionOneWay","text":"<p><code>import \"arcade: modifier/collision/oneway\" for CollisionOneWay</code></p> <p>no docs found</p> <ul> <li>create(entity: <code>Any</code>)</li> <li>destroy(entity: <code>Any</code>)</li> <li>has(entity: <code>Any</code>)</li> </ul> <p> CollisionOneWay.create(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CollisionOneWay.destroy(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> CollisionOneWay.has(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"modules/arcade/api/modifier/collision/tiles/","title":"Tiles","text":""},{"location":"modules/arcade/api/modifier/collision/tiles/#arcade-api-0015","title":"<code>arcade</code> API (<code>0.0.15</code>)","text":""},{"location":"modules/arcade/api/modifier/collision/tiles/#arcade-modifiercollisiontiles-module","title":"<code>arcade: modifier/collision/tiles</code> module","text":"<ul> <li>TileCollision </li> </ul>"},{"location":"modules/arcade/api/modifier/collision/tiles/#tilecollision","title":"TileCollision","text":"<p><code>import \"arcade: modifier/collision/tiles\" for TileCollision</code></p> <p>no docs found</p> <ul> <li>create(entity: <code>Any</code>)</li> <li>destroy(entity: <code>Any</code>)</li> <li>has(entity: <code>Any</code>)</li> <li>get_colliders(entity: <code>Any</code>)</li> </ul> <p> TileCollision.create(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TileCollision.destroy(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TileCollision.has(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TileCollision.get_colliders(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"modules/arcade/api/modifier/control/platformer/","title":"Platformer","text":""},{"location":"modules/arcade/api/modifier/control/platformer/#arcade-api-0015","title":"<code>arcade</code> API (<code>0.0.15</code>)","text":""},{"location":"modules/arcade/api/modifier/control/platformer/#arcade-modifiercontrolplatformer-module","title":"<code>arcade: modifier/control/platformer</code> module","text":"<ul> <li>ControlPlatformer </li> <li>InputMap </li> </ul>"},{"location":"modules/arcade/api/modifier/control/platformer/#controlplatformer","title":"ControlPlatformer","text":"<p><code>import \"arcade: modifier/control/platformer\" for ControlPlatformer</code></p> <p>no docs found</p> <ul> <li>create(entity: <code>Any</code>)</li> <li>destroy(entity: <code>Any</code>)</li> <li>has(entity: <code>Any</code>)</li> <li>get_movement_k(entity: <code>Any</code>)</li> <li>set_movement_k(entity: <code>Any</code>, movement_k: <code>Any</code>)</li> <li>get_target_run_speed(entity: <code>Any</code>)</li> <li>set_target_run_speed(entity: <code>Any</code>, target_run_speed: <code>Any</code>)</li> <li>get_jump_height(entity: <code>Any</code>)</li> <li>set_jump_height(entity: <code>Any</code>, jump_height: <code>Any</code>)</li> <li>get_jump_distance(entity: <code>Any</code>)</li> <li>set_jump_distance(entity: <code>Any</code>, jump_distance: <code>Any</code>)</li> <li>get_gravity_scale(entity: <code>Any</code>)</li> <li>set_gravity_scale(entity: <code>Any</code>, gravity_scale: <code>Any</code>)</li> <li>get_jump_count(entity: <code>Any</code>)</li> <li>set_jump_count(entity: <code>Any</code>, jump_count: <code>Any</code>)</li> <li>get_enabled(entity: <code>Any</code>)</li> <li>set_enabled(entity: <code>Any</code>, enabled: <code>Any</code>)</li> <li>is_grounded(entity: <code>Any</code>)</li> <li>has_input(entity: <code>Any</code>)</li> </ul> <p> ControlPlatformer.create(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ControlPlatformer.destroy(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ControlPlatformer.has(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ControlPlatformer.get_movement_k(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ControlPlatformer.set_movement_k(entity: <code>Any</code>, movement_k: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ControlPlatformer.get_target_run_speed(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ControlPlatformer.set_target_run_speed(entity: <code>Any</code>, target_run_speed: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ControlPlatformer.get_jump_height(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ControlPlatformer.set_jump_height(entity: <code>Any</code>, jump_height: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ControlPlatformer.get_jump_distance(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ControlPlatformer.set_jump_distance(entity: <code>Any</code>, jump_distance: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ControlPlatformer.get_gravity_scale(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ControlPlatformer.set_gravity_scale(entity: <code>Any</code>, gravity_scale: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ControlPlatformer.get_jump_count(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ControlPlatformer.set_jump_count(entity: <code>Any</code>, jump_count: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ControlPlatformer.get_enabled(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ControlPlatformer.set_enabled(entity: <code>Any</code>, enabled: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ControlPlatformer.is_grounded(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ControlPlatformer.has_input(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"modules/arcade/api/modifier/control/platformer/#inputmap","title":"InputMap","text":"<p><code>import \"arcade: modifier/control/platformer\" for InputMap</code></p> <p>no docs found</p> <ul> <li>left</li> <li>right</li> <li>jump</li> </ul> <p> InputMap.left \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputMap.right \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputMap.jump \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"modules/arcade/api/modifier/control/topdown/","title":"Topdown","text":""},{"location":"modules/arcade/api/modifier/control/topdown/#arcade-api-0015","title":"<code>arcade</code> API (<code>0.0.15</code>)","text":""},{"location":"modules/arcade/api/modifier/control/topdown/#arcade-modifiercontroltopdown-module","title":"<code>arcade: modifier/control/topdown</code> module","text":"<ul> <li>ControlTopdown </li> <li>InputMap </li> </ul>"},{"location":"modules/arcade/api/modifier/control/topdown/#controltopdown","title":"ControlTopdown","text":"<p><code>import \"arcade: modifier/control/topdown\" for ControlTopdown</code></p> <p>no docs found</p> <ul> <li>create(entity: <code>Any</code>)</li> <li>destroy(entity: <code>Any</code>)</li> <li>has(entity: <code>Any</code>)</li> <li>get_movement_k(entity: <code>Any</code>)</li> <li>set_movement_k(entity: <code>Any</code>, movement_k: <code>Any</code>)</li> <li>get_target_speed(entity: <code>Any</code>)</li> <li>set_target_speed(entity: <code>Any</code>, target_speed: <code>Any</code>)</li> </ul> <p> ControlTopdown.create(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ControlTopdown.destroy(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ControlTopdown.has(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ControlTopdown.get_movement_k(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ControlTopdown.set_movement_k(entity: <code>Any</code>, movement_k: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ControlTopdown.get_target_speed(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ControlTopdown.set_target_speed(entity: <code>Any</code>, target_speed: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"modules/arcade/api/modifier/control/topdown/#inputmap","title":"InputMap","text":"<p><code>import \"arcade: modifier/control/topdown\" for InputMap</code></p> <p>no docs found</p> <ul> <li>up</li> <li>down</li> <li>left</li> <li>right</li> </ul> <p> InputMap.up \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputMap.down \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputMap.left \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> InputMap.right \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"modules/arcade/api/modifier/trigger/script/","title":"Script","text":""},{"location":"modules/arcade/api/modifier/trigger/script/#arcade-api-0015","title":"<code>arcade</code> API (<code>0.0.15</code>)","text":""},{"location":"modules/arcade/api/modifier/trigger/script/#arcade-modifiertriggerscript-module","title":"<code>arcade: modifier/trigger/script</code> module","text":"<ul> <li>ScriptTrigger </li> <li>TriggerScript </li> </ul>"},{"location":"modules/arcade/api/modifier/trigger/script/#scripttrigger","title":"ScriptTrigger","text":"<p><code>import \"arcade: modifier/trigger/script\" for ScriptTrigger</code></p> <p>no docs found</p> <ul> <li>world</li> <li>new(world: <code>Any</code>)</li> <li>begin(entity: <code>Any</code>, other: <code>Any</code>, normal: <code>Any</code>, overlap_distance: <code>Any</code>)</li> <li>overlap(entity: <code>Any</code>, other: <code>Any</code>, normal: <code>Any</code>, overlap_distance: <code>Any</code>)</li> <li>end(entity: <code>Any</code>, other: <code>Any</code>, normal: <code>Any</code>, overlap_distance: <code>Any</code>)</li> </ul> <p> ScriptTrigger.world \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ScriptTrigger.new(world: <code>Any</code>) \u00b6 returns <code>ScriptTrigger</code></p> <p>no docs found   </p> <p> ScriptTrigger.begin(entity: <code>Any</code>, other: <code>Any</code>, normal: <code>Any</code>, overlap_distance: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ScriptTrigger.overlap(entity: <code>Any</code>, other: <code>Any</code>, normal: <code>Any</code>, overlap_distance: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> ScriptTrigger.end(entity: <code>Any</code>, other: <code>Any</code>, normal: <code>Any</code>, overlap_distance: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"modules/arcade/api/modifier/trigger/script/#triggerscript","title":"TriggerScript","text":"<p><code>import \"arcade: modifier/trigger/script\" for TriggerScript</code></p> <p>no docs found</p> <ul> <li>create(entity: <code>Any</code>)</li> <li>destroy(entity: <code>Any</code>)</li> <li>has(entity: <code>Any</code>)</li> </ul> <p> TriggerScript.create(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TriggerScript.destroy(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TriggerScript.has(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"modules/arcade/api/modifier/trigger/teleport/","title":"Teleport","text":""},{"location":"modules/arcade/api/modifier/trigger/teleport/#arcade-api-0015","title":"<code>arcade</code> API (<code>0.0.15</code>)","text":""},{"location":"modules/arcade/api/modifier/trigger/teleport/#arcade-modifiertriggerteleport-module","title":"<code>arcade: modifier/trigger/teleport</code> module","text":"<ul> <li>TriggerTeleport </li> </ul>"},{"location":"modules/arcade/api/modifier/trigger/teleport/#triggerteleport","title":"TriggerTeleport","text":"<p><code>import \"arcade: modifier/trigger/teleport\" for TriggerTeleport</code></p> <p>no docs found</p> <ul> <li>create(entity: <code>Any</code>)</li> <li>destroy(entity: <code>Any</code>)</li> <li>has(entity: <code>Any</code>)</li> </ul> <p> TriggerTeleport.create(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TriggerTeleport.destroy(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TriggerTeleport.has(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"modules/tktween/api/","title":"Api","text":""},{"location":"modules/tktween/api/#tktween-api-002","title":"<code>tktween</code> API (<code>0.0.2</code>)","text":"<ul> <li>tktween: modifier/tktween </li> </ul>"},{"location":"modules/tktween/api/modifier/tktween/","title":"Tktween","text":""},{"location":"modules/tktween/api/modifier/tktween/#tktween-api-002","title":"<code>tktween</code> API (<code>0.0.2</code>)","text":""},{"location":"modules/tktween/api/modifier/tktween/#tktween-modifiertktween-module","title":"<code>tktween: modifier/tktween</code> module","text":"<ul> <li><code>tktween</code> API (<code>0.0.2</code>)</li> <li><code>tktween: modifier/tktween</code> module<ul> <li>Easing</li> <li>TKTween</li> <li>TweenControl</li> <li>TweenSprite</li> <li>TweenStep</li> <li>TweenTransform</li> </ul> </li> </ul>"},{"location":"modules/tktween/api/modifier/tktween/#easing","title":"Easing","text":"<p><code>import \"tktween: modifier/tktween\" for Easing</code></p> <p>See https://easings.net/ or the Easings sample app for a visual description of  these easing functions.</p> <ul> <li>linear</li> <li>smoothstep</li> <li>in_quad</li> <li>out_quad</li> <li>inout_quad</li> <li>in_cubic</li> <li>out_cubic</li> <li>inout_cubic</li> <li>in_quartic</li> <li>out_quartic</li> <li>inout_quartic</li> <li>in_quintic</li> <li>out_quintic</li> <li>inout_quintic</li> <li>sqrt_s(t: <code>Any</code>)</li> <li>in_circ</li> <li>out_circ</li> <li>inout_circ</li> <li>in_expo</li> <li>out_expo</li> <li>inout_expo</li> <li>in_back</li> <li>out_back</li> <li>inout_back</li> <li>in_elastic</li> <li>out_elastic</li> <li>inout_elastic</li> <li>in_bounce</li> <li>out_bounce</li> <li>inout_bounce</li> </ul> <p> Easing.linear \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Easing.smoothstep \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Easing.in_quad \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Easing.out_quad \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Easing.inout_quad \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Easing.in_cubic \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Easing.out_cubic \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Easing.inout_cubic \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Easing.in_quartic \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Easing.out_quartic \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Easing.inout_quartic \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Easing.in_quintic \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Easing.out_quintic \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Easing.inout_quintic \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Easing.sqrt_s(t: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Easing.in_circ \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Easing.out_circ \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Easing.inout_circ \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Easing.in_expo \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Easing.out_expo \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Easing.inout_expo \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Easing.in_back \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Easing.out_back \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Easing.inout_back \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Easing.in_elastic \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Easing.out_elastic \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Easing.inout_elastic \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Easing.in_bounce \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Easing.out_bounce \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> Easing.inout_bounce \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"modules/tktween/api/modifier/tktween/#tktween","title":"TKTween","text":"<p><code>import \"tktween: modifier/tktween\" for TKTween</code></p> <p>The modifier to attach to an entity to control tweening.</p> <ul> <li>create(entity: <code>Any</code>)</li> <li>destroy(entity: <code>Any</code>)</li> <li>has(entity: <code>Any</code>)</li> <li>tween(entity: <code>Any</code>, fn: <code>Any</code>)</li> <li>make_tween(entity: <code>Any</code>, duration: <code>Any</code>)</li> <li>cancel_all(entity: <code>Any</code>)</li> <li>cancel(entity: <code>Any</code>, tween_id: <code>Any</code>)</li> <li>InvalidID</li> </ul> <p> TKTween.create(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TKTween.destroy(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TKTween.has(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TKTween.tween(entity: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Starts a potentially multi-step tween. Pass a function with no parameters  that starts at least one TweenStep for this to do anything useful. <code>entity</code> - The entity that owns this tween. When the entity is destroyed, the tween will be destroyed. Note that the tween may operate on other entities besides the owner, but just be careful to cancel the tween before they are removed.   <pre><code>    \n// Multi step tween: will first fade in while rising up from 100 to 200 over 3 seconds, \n// then play a sound, then cycle through all the hues over 5 seconds.\nTKTween.tween( _logo ) { \n  Log.print(\"Starting tween...\")\n  TweenStep.duration( 3.0 ).easing( Easing.cubic ).start { |tval| \n    Log.print(\"First tween step, tval is %(tval)\")\n    Sprite.set_alpha( _logo, tval )\n    Transform.set_pos_y( _logo, Math.lerp( 100, 200, tval ) )\n  }\n  Audio.play(\"tada\") // you can do side effects between tween steps!\n  TweenStep.duration( 5.0 ).easing( Easing.cubic ).start { |tval| \n    Log.print(\"Second tween step, tval is %(tval)\")\n    var c = Color.color_from_hue(  tval )\n    Sprite.set_color( _logo, c.r, c.g, c.b, 1.0 )\n  }\n  Log.print(\"Tween is finished.\")\n  Sprite.set_color( _logo, 1, 1, 1, 1  )\n}\n</code></pre></p> <p> TKTween.make_tween(entity: <code>Any</code>, duration: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Makes a one-step function tween but doesn't start it yet. <code>entity</code> - The entity that owns this tween. <code>duration</code> - Duration of the tween in seconds. Returns a <code>TweenStep</code>, you can chain effects onto it and call start() on this with the tween function you want.   <pre><code>// Fades in _ent over 5 seconds\nTKTween.make_tween( _ent, 5.0 ).easing( Easing.cubic ).start { |tval|\n  Log.print(\"Tval is %(tval)\")\n  Sprite.set_opacity( _ent, tval )\n}      \n</code></pre></p> <p>There is also a version of start that will take in two values and blend between them so you   don't need to do the lerp yourself. This works on Sequences like vec2 and vec3 as well.   <pre><code>TKTween.make_tween( _logo, 1.0 ).repeatForever().start( [100, 100], pos ) { |p|      \n  Transform.set_pos( _logo, p.x, p.y )\n}\n</code></pre></p> <p> TKTween.cancel_all(entity: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TKTween.cancel(entity: <code>Any</code>, tween_id: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TKTween.InvalidID \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"modules/tktween/api/modifier/tktween/#tweencontrol","title":"TweenControl","text":"<p><code>import \"tktween: modifier/tktween\" for TweenControl</code></p> <p>Helpers for a UI Control instance, so you don't need to manually tween commonly used effects.</p> <ul> <li>bounds(ui: <code>Any</code>, control: <code>Any</code>, duration: <code>Any</code>, rect_a: <code>Any</code>, rect_b: <code>Any</code>)</li> </ul> <p> TweenControl.bounds(ui: <code>Any</code>, control: <code>Any</code>, duration: <code>Any</code>, rect_a: <code>Any</code>, rect_b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"modules/tktween/api/modifier/tktween/#tweensprite","title":"TweenSprite","text":"<p><code>import \"tktween: modifier/tktween\" for TweenSprite</code></p> <p>Helpers for the Sprite modifier, so you don't need to manually tween commonly used effects for an entity.</p> <ul> <li>alpha(ent: <code>Any</code>, duration: <code>Any</code>, alpha_a: <code>Any</code>, alpha_b: <code>Any</code>)</li> <li>color(ent: <code>Any</code>, duration: <code>Any</code>, color_a: <code>Any</code>, color_b: <code>Any</code>)</li> <li>color_hsv(ent: <code>Any</code>, duration: <code>Any</code>, hsv_a: <code>Any</code>, hsv_b: <code>Any</code>)</li> </ul> <p> TweenSprite.alpha(ent: <code>Any</code>, duration: <code>Any</code>, alpha_a: <code>Any</code>, alpha_b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TweenSprite.color(ent: <code>Any</code>, duration: <code>Any</code>, color_a: <code>Any</code>, color_b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TweenSprite.color_hsv(ent: <code>Any</code>, duration: <code>Any</code>, hsv_a: <code>Any</code>, hsv_b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"modules/tktween/api/modifier/tktween/#tweenstep","title":"TweenStep","text":"<p><code>import \"tktween: modifier/tktween\" for TweenStep</code></p> <p>no docs found</p> <ul> <li>duration(duration: <code>Any</code>)</li> <li>fn=(value : Any)</li> <li>sys=(value : Any)</li> <li>tween_id=(value : Any)</li> <li>effect(fn: <code>Any</code>)</li> <li>easing(easing_fn: <code>Any</code>)</li> <li>repeat(num: <code>Any</code>)</li> <li>repeatForever()</li> <li>invert()</li> <li>clamp()</li> <li>start(fn: <code>Any</code>)</li> <li>start(value_a: <code>Any</code>, value_b: <code>Any</code>, fn: <code>Any</code>)</li> <li>start()</li> <li>real_start(fn: <code>Any</code>)</li> <li>wait()</li> </ul> <p> TweenStep.duration(duration: <code>Any</code>) \u00b6 returns <code>TweenStep</code></p> <p>no docs found   </p> <p> TweenStep.fn=(value : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TweenStep.sys=(value : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TweenStep.tween_id=(value : Any) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TweenStep.effect(fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TweenStep.easing(easing_fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TweenStep.repeat(num: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TweenStep.repeatForever() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TweenStep.invert() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TweenStep.clamp() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TweenStep.start(fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TweenStep.start(value_a: <code>Any</code>, value_b: <code>Any</code>, fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TweenStep.start() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TweenStep.real_start(fn: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>no docs found   </p> <p> TweenStep.wait() \u00b6 returns <code>unknown</code></p> <p>no docs found   </p>"},{"location":"modules/tktween/api/modifier/tktween/#tweentransform","title":"TweenTransform","text":"<p><code>import \"tktween: modifier/tktween\" for TweenTransform</code></p> <p>Helpers for the Transform modifier, so you don't need to manually tween commonly used effects for an entity.</p> <ul> <li>move(ent: <code>Any</code>, duration: <code>Any</code>, pos_a: <code>Any</code>, pos_b: <code>Any</code>)</li> <li>move_to(ent: <code>Any</code>, duration: <code>Any</code>, pos_dest: <code>Any</code>)</li> <li>scale(ent: <code>Any</code>, duration: <code>Any</code>, scale_a: <code>Any</code>, scale_b: <code>Any</code>)</li> <li>angle2D(ent: <code>Any</code>, duration: <code>Any</code>, degrees_a: <code>Any</code>, degrees_b: <code>Any</code>)</li> <li>rotate_around_axis(ent: <code>Any</code>, duration: <code>Any</code>, axis: <code>Any</code>, degrees_a: <code>Any</code>, degrees_b: <code>Any</code>)</li> </ul> <p> TweenTransform.move(ent: <code>Any</code>, duration: <code>Any</code>, pos_a: <code>Any</code>, pos_b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Tweens from <code>pos_a</code> to <code>pos_b</code> over <code>duration</code> seconds. Equivalent to:   <pre><code>TKTween.make_tween( ent, duration ).start( pos_a, pos_b ) { |p|      \n  Transform.set_pos( ent, p.x, p.y )\n}\n</code></pre>   Example:   <pre><code>TweenTransform.move( _logo, 1.3, [100, 500], pos )\n              .repeat(2)\n              .easing( Easing.cubic )\n              .start()\n</code></pre></p> <p> TweenTransform.move_to(ent: <code>Any</code>, duration: <code>Any</code>, pos_dest: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Tweens from current position to <code>pos_dest</code> over <code>duration</code> seconds. Example: <pre><code>TweenTransform.move_to( _logo, 1.3, pos )\n              .repeat(2)\n              .easing( Easing.cubic )\n              .start()\n</code></pre></p> <p> TweenTransform.scale(ent: <code>Any</code>, duration: <code>Any</code>, scale_a: <code>Any</code>, scale_b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Tweens scale beteen two values. Values given can be <code>Num</code>s for a uniform scale, or vecs for a non-uniform scale. Example: <pre><code>// Make the logo appear with a bouncy pop-in effect\nTweenTransform.scale( _logo, 2.0, 0.01, 1.0 )\n              .easing( Easing.out_elastic )\n              .start()\n</code></pre> Or non-uniform scale: <pre><code>// Squash and stretch -- bounce from flat and wide to tall and skinny\nTweenTransform.scale( _logo, 2.0, [2.0, 0.5], [0.5, 1.5] )\n              .easing( Easing.inout_bounce )\n              .start()\n</code></pre></p> <p> TweenTransform.angle2D(ent: <code>Any</code>, duration: <code>Any</code>, degrees_a: <code>Any</code>, degrees_b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Tweens 2D rotation from <code>angle_a</code> to <code>angle_b</code>. Example: <pre><code>TweenTransform.angle2D( _arrow, 3.0, 90.0, 270.0 )\n              .easing( Easing.inout_bounce )\n              .start()\n</code></pre></p> <p> TweenTransform.rotate_around_axis(ent: <code>Any</code>, duration: <code>Any</code>, axis: <code>Any</code>, degrees_a: <code>Any</code>, degrees_b: <code>Any</code>) \u00b6 returns <code>unknown</code></p> <p>Tweens rotation around <code>axis</code> from <code>angle_a</code> to <code>angle_b</code> Example: <pre><code>// flip over\nTweenTransform.rotate_around_axis( _logo, 1.4, [ 0, 1, 0], 0, 180 )\n              .easing( Easing.inout_quartic )\n              .start()\n</code></pre></p>"},{"location":"release-notes/agent/","title":"Agent","text":"<p>Typically, the 2022.x is what matters for compatibility, the y part in 2022.x.y isn't as important.</p>"},{"location":"release-notes/agent/#202421","title":"2024.2.1","text":"<ul> <li>Add code Outline to vscode! (Izzy)</li> <li>Lots of bug fixes and improvements to reliability</li> </ul>"},{"location":"release-notes/agent/#202204","title":"2022.0.4","text":"<ul> <li>add completion for assets</li> <li>fix jump to definition on classes with a superclass</li> </ul>"},{"location":"release-notes/agent/#202203","title":"2022.0.3","text":"<ul> <li>Fix bug causing the agent to die when it shouldn't, requiring restarts</li> <li>Fixed bug in code actions around offering imports for missing classes</li> </ul>"},{"location":"release-notes/agent/#202201-2","title":"2022.0.1-2","text":"<p>Rewrite of a lot of stuff by Ronja, includes a ton of changes.  Let us know if you find issues. Some key things:</p> <ul> <li>Improves completion in general</li> <li>Improves completion on inheritance</li> <li>Improves completion on missing classes (IO/Input/Wren Core)</li> <li>Improves import completion flow</li> <li>Adds automatic import code actions</li> <li>Fix import as redirections</li> <li>Add jump to import</li> <li>And more</li> </ul>"},{"location":"release-notes/agent/#202102-3","title":"2021.0.2-3","text":"<ul> <li>parses doc comments from attributes on classes + methods</li> <li>fix infinite loop that sometimes leaves it eating all the ram ever</li> <li>fix recursive imports not finding the actual class for completion</li> <li>add completion for fields in a class</li> </ul>"},{"location":"release-notes/editor/","title":"luxe editor release notes","text":""},{"location":"release-notes/editor/#202423","title":"2024.2.3","text":"<ul> <li>Camera; fix scroll wheel being weird</li> <li>Fix inspector showing up if omni is never opened (Izzy)</li> <li>Double click outline to focus selected (Ronja)</li> <li>Rename on F2 (Ronja)</li> </ul>"},{"location":"release-notes/editor/#202422","title":"2024.2.2","text":"<ul> <li>Add fit bounds for ortho camera (Ronja)</li> <li>Double click to focus (in view) (Ronja)</li> <li>Remove debug cubes  :'( </li> </ul>"},{"location":"release-notes/editor/#202421","title":"2024.2.1","text":"<ul> <li>World 2.0; several fixes</li> <li>World 2.0; add delete/duplicate button to UI</li> <li>World 2.0; fix issues with duplicate and delete </li> <li>World 2.0; clean up visual glitchyness </li> <li>World 2.0; create undo (entity)  </li> <li>World 2.0; attach undo </li> <li>World 2.0; select created</li> <li>World; fix anim track crashes in old editor</li> <li>World; fix keyframe window being bugged in anim track</li> </ul>"},{"location":"release-notes/editor/#2023112","title":"2023.11.2","text":"<ul> <li>prevent crash from noodles on first launch of a new project</li> </ul>"},{"location":"release-notes/editor/#2023111","title":"2023.11.1","text":"<ul> <li>World 2.0; Select created items</li> <li>World 2.0; use built in color picker</li> <li>World 2.0; Vector fields tab properly</li> <li>World 2.0; Color fields have color + show color picker now</li> </ul>"},{"location":"release-notes/editor/#2023110","title":"2023.11.0","text":"<p>Big long list coming soon.</p>"},{"location":"release-notes/editor/#202205","title":"2022.0.5","text":"<ul> <li>Hopefully have that UI clipping fixed </li> <li>Hopefully have that memory explosion fixed on mac/linux</li> <li>Disable debug ui as it's causing trouble</li> <li>World; Add convert to prototype (ronja)</li> <li>World; Add layer delete button (ronja)</li> <li>World; Add undo for prototype spawn (ronja)</li> <li>World; fix transform links with undo (ronja)</li> <li>World; fix error on same names bug in multiple layers (ronja)</li> <li>World; disallow renaming prototype members for now (ronja)</li> <li>Transform; prevent cyclic links (ronja)</li> </ul>"},{"location":"release-notes/editor/#202204","title":"2022.0.4","text":"<ul> <li>Allow modifier options to use number type for numeric enums</li> <li>Project; fix path display and cropping of info text</li> <li>World; fix selection showing up incorrectly when switching worlds</li> </ul>"},{"location":"release-notes/editor/#202203","title":"2022.0.3","text":"<ul> <li>Fix duplicate extensions on bulk sprite import (2022.0.2 hotfix)</li> <li>add <code>luxe.editor.debug.enabled</code> to disable debug console (2022.0.2 hotfix)</li> <li>Assets; lists of assets can be filtered (e.g by custom modifiers)</li> <li>Editor; check right alt key as well in a dozen places</li> </ul>"},{"location":"release-notes/editor/#202202","title":"2022.0.2","text":"<ul> <li>Editor; fix tooltips outside of parent clip showing up (ronja)</li> <li>World; fix selection outline for render module, make more consistent</li> <li>Tiles; perf; with many visuals in palette, only render visible ones</li> <li>Tiles; sheet; add spacing and margin for tiles on add</li> <li>Tiles; sheet; add display size input option for scaling on add</li> <li>Tiles; sheet; change to use a tile size and calculate rows/cols</li> <li>Modules; fix weird slowdown on refresh</li> </ul>"},{"location":"release-notes/editor/#202201","title":"2022.0.1","text":"<ul> <li>Play Standalone; Fixed 2 crashes there, playing should be reliable</li> <li>Play Standalone; now shows playing/running state (as a quick solution) </li> <li>Color Picker now changes on click as well not just drag (jonathan)</li> <li>Tiles; add tile size setting for atlas imports, quicker than counting tiles</li> <li>Import; Fix import dialogs hanging on macOS</li> <li>Import; add multiple sprite import from a folder</li> <li>UI; fix weird clipping issue on resizing the editor</li> </ul>"},{"location":"release-notes/editor/#2021010","title":"2021.0.10","text":""},{"location":"release-notes/editor/#new-stuff","title":"new stuff","text":"<p>multi-select  When multiple entities are under the mouse in the world editor, you can now hold <code>ctrl</code> and click to show a list. This list has a filter and will stay open while you select entities from it. Hold shift and click the entities in the list to select multiple, as you'd expect. To dismiss the list, right click. The list is also dismissed when there's nothing to select,  so clicking empty space will dismiss it (this is a wip but still plenty useful already).</p> <p>color-picker  There's a new color picker (finally) that Ronja implemented! All (almost) color fields have been replaced with it. If you have issues let us know.</p> <p>color-picker </p>"},{"location":"release-notes/editor/#resilience","title":"resilience","text":"<p>The editor will crash a lot less when you have invalid code in a modifier. It used to crash on attach for example,  but now it will check for errors during attach and display them. </p> <p>It also does this on project load now, so you're unable to open a project that has script errors (for now!). This is still better than crashing.</p>"},{"location":"release-notes/editor/#workflow-issues","title":"workflow issues","text":"<p>Many of the major workflow issues reported during closed beta have been addressed, like Omni stealing shortcut keys,  and the ability to view the log while running the game from the editor. To view the log/debug panel, press <code>alt + backtick</code>.</p> <p>Another big workflow issue was the camera in the world editor losing focus while rotating in 3D mode. The camera now holds focus and doesn't get interrupted by the UI at all, as intended.</p> <ul> <li>Editor; context switcher now looks interactable</li> <li>Editor; add initial debug view (shows log). <code>alt + backtick</code></li> <li>Editor; replace all file save/open dialogs with a consistent UIPath field</li> <li>Editor; replace most color pickers with a color picker control</li> <li>Camera; fix focus issues with camera, fix wasd mouse wheel speed</li> <li>Project; when loading, show error/don't crash if project is missing dependencies </li> <li>Project; when loading, show errors if code has an error, don't crash </li> <li>Tiles; fix shortcuts being consumed by omni </li> <li>World; add multi-select list (hold ctrl + click) for selection</li> <li>World; add delete section button to omni </li> <li>World; anim; display save notifications for animations </li> <li>World; anim; delete track/s button inside track settings</li> <li>World; fix shortcuts being consumed by omni </li> <li>World; fix 3d camera being miles away from origin, now fits 1 unit</li> <li>World; fix 3d camera losing control when entering omni</li> <li>World; Anim; don't take focus when other UI has UI focus</li> <li>World; don't crash when modifiers cause errors, display a message instead</li> <li>Camera; when modifiers are held (alt/ctrl/shift) wheel doesn't zoom</li> <li>World; Camera; add back F for \"fit to view\", very rough/wip</li> <li>Tiles; fix <code>shift+mouse wheel</code> scroll changing paint depth</li> <li>UI; use flex layout mode for UI going forward</li> <li>UI; checkbox style refactored across the editor</li> <li>UI; fix glitching controls bug</li> <li>Add first pass of hex grid shader (ronja)</li> <li>Add color picker (ronja)</li> </ul>"},{"location":"release-notes/editor/#202109","title":"2021.0.9","text":"<ul> <li>Fix crash from previewing an animation (Dolichomps)</li> <li>Fix preview camera being upside down in 2D (voidberg)</li> </ul>"},{"location":"release-notes/editor/#202108","title":"2021.0.8","text":"<ul> <li>Open Prototype will switch to already open prototypes</li> <li>Fix anim crashes when creating anims in a prototype world</li> <li>Fix wacky enter/exit outline expansion behaviour</li> <li>World; hold shift while hovered in outline to expand</li> <li>Fix crashes from changing values on spawned prototypes</li> <li>Fix crash when cancelling several actions in omni</li> <li>Fix ui focus not working when omni is closed</li> <li>Fix \"add track\" repeatedly adding options to omni</li> <li>Fix crash on clicking cancel on the asset import view</li> <li>World; camera; some fixes to capture behaviour</li> </ul>"},{"location":"release-notes/editor/#202107","title":"2021.0.7","text":"<ul> <li>Fix regression from imports added in 2021.0.6, paths should work as intended</li> <li>Fix duplicate options added when clicking import repeatedly #52</li> <li>Fix anim view stealing focus when switching contexts #48</li> <li>Fix path lowercase behaviour in more places e.g #53</li> <li>UI; double click setting added <code>engine.runtime.input.rapid_press_interval</code></li> <li>UI; double click time default increased to 0.45s (was 0.2s)</li> <li>Anim; Sprite Value Track now exposes uv.horizontal/uv.vertical</li> <li>Anim; Sprite Value Track now exposes uv.left/uv.right/uv.top/uv.bottom</li> <li>Material previews for sprite based materials render as 2D images</li> </ul>"},{"location":"release-notes/editor/#202106","title":"2021.0.6","text":"<ul> <li>remove Str.lower on paths removing cross platform behaviour</li> <li>remove create asset options from asset lists (use import menu)</li> <li>fix tab behaviours for several things</li> </ul>"},{"location":"release-notes/editor/#202105","title":"2021.0.5","text":"<ul> <li>Values / Tags - fix enter key being stolen </li> <li>Anim - fix loading creating duplicate tracks</li> <li>Anim - add transform track settings to editor</li> <li>Anim - add sprite value track settings</li> <li>World - fix assumptions of project-local paths in world editor, so scenes in modules can be edited</li> </ul>"},{"location":"release-notes/editor/#202104","title":"2021.0.4","text":"<ul> <li>luxe 2021.0.4 compatability</li> <li>rename default scene folder to <code>scene/</code> instead of <code>scenes/</code> for consistency</li> <li>bunches of work on the animation editor</li> <li>fix escape key taking action when text fields are focused</li> <li>fix omni key taking action when text fields are focused</li> <li>custom modifiers - show validation errors properly on vec fields</li> <li>scene outline - fix renaming scenes to be consistent with layers</li> <li>scene outline - add several tooltips to things</li> </ul>"},{"location":"release-notes/editor/#202103","title":"2021.0.3","text":"<ul> <li>luxe 2021.0.3 compatability</li> <li>Editor - Fix several places where Str.fixed is used to display nicer numbers</li> <li>Editor - Fix notifications blocking input to the top bar</li> <li>Editor - Added toggle grid via <code>ctrl-G</code>/<code>cmd-G</code></li> <li>Editor - Show a message in asset lists when there are no assets of that type</li> <li>Editor - Add tooltip to asset lists so you can see long names</li> <li>Editor - Fixed material/image previews from sometimes not showing up</li> <li>World - Text - update material properly when changing it</li> <li>World - Text - fix crash when text is saved without a default, or by duplicate</li> <li>World - Transform - link disallows + shows \"can't link to self\" and \"no transform attached\"</li> <li>World - Anim - anim view is now per world</li> <li>World - Anim - Fix mouse issues with animation views</li> <li>World - Anim - used shared doc context with world, now undoable/redoable</li> <li>World - Anim - allowing editing properties without stealing focus</li> <li>World - fix a crash when an error happens and invalid code was called</li> <li>World - gizmo now remembers world/local toggle</li> <li>World - transform gizmo (T) now shows a snap toggle for translation on space as well</li> <li>World - guard accessing invalid entities in highlights + outline, to prevent crashes</li> <li>World - fix crash from deleting a prototype where it deselected after destroy</li> <li>World - fix spawn prototype button being sneaky and sometimes not showing up</li> <li>World - fix open/create scene options showing in prototype worlds</li> <li>World - prototype or preview worlds now respect the default 2d/3d setting</li> <li>Tiles - when refreshing, don't access invalid entities to prevent crashes</li> <li>Tiles - fix painting brushes without overlap while dragging</li> <li>Tiles - show image/atlas source add panels separately for clarity</li> <li>Tiles - add tooltips to visual source add panels</li> <li>Tiles - display notifications for key events</li> </ul>"},{"location":"release-notes/editor/#202102","title":"2021.0.2","text":"<ul> <li>luxe 2021.0.2 compatability</li> <li>fix some issues with luxe dev mode</li> <li>fix deploy only deploying host target</li> <li>world - anim preview exploration</li> <li>world - anim fix doc updates on track properties changing</li> <li>world - anim fix track open not updating settings</li> <li>world - fix mouse staying connected on world destroy</li> <li>fix crash when asset reloading fails to compile</li> </ul>"},{"location":"release-notes/editor/#202101","title":"2021.0.1","text":"<ul> <li>luxe 2021.0.1 compatability</li> <li>UI - fix lists with filters, fixes annoying mouse snapping bug on click</li> <li>Animation editor continued work (sprites, etc)</li> <li>Remove old anim context, rename materials to reduce confusion</li> <li>block in assets context</li> </ul>"},{"location":"release-notes/editor/#202100","title":"2021.0.0","text":"<ul> <li>luxe 2021.0.0 compatability</li> <li>Project - add hot reload for meshes, images and shaders (only)</li> <li>Project - clean up landing page + recent projects and such</li> <li>UI - add notifier for important actions</li> <li>UI - add \"open folder\" when a project is open</li> <li>UI - added tooltips to a lot of things to test the tooltip stuff</li> <li>UI - visual polish for several things</li> <li>Noodles - fix for y+ up</li> <li>World - allow closing a prototype world</li> <li>World - add <code>editor=\"options\"</code> so enums act like selectable lists in editor</li> <li>World - fix selection of prototype entities via the icon</li> <li>World - highlight all children of a prototype when selected</li> <li>World - wip - scene outline expands on mouse enter. if you see weirdness, move the mouse out of omni</li> <li>World - add link to <code>Transform</code> for connecting entities in editor</li> <li>World - add initial sort option for scene outline, default to alphabetical</li> <li>World - change how active layer works. clicking a layer now activates it. use edit to rename</li> <li>World - fix bug when saving would save invisible internal scenes into the project</li> <li>World - selecting a child of a prototype selects the root, hold alt to select child</li> <li>World - clicking multiple times to select things behind the first one</li> <li>World - Anim - clean up on closing a project</li> <li>World - Anim - lots of UI work and fixes toward a usable editor. It can load/save basics.</li> </ul>"},{"location":"release-notes/editor/#202035","title":"2020.3.5","text":"<ul> <li>luxe 2020.3.5 compatability</li> <li>world - gizmo adapts to the scale of the world (tilman)</li> <li>world - fix selection rendering in custom rendering</li> <li>world - fix axes and grid rendering in custom rendering</li> <li>world - gizmos persist snap settings when editing</li> <li>world - gizmo snap settings select all on focus</li> </ul>"},{"location":"release-notes/editor/#202034","title":"2020.3.4","text":"<ul> <li>luxe 2020.3.4 compatability</li> <li>load project strings up front</li> <li>fix loading prototypes (tilman) </li> <li>fix preview in world editor using old data (tilman) </li> <li>fix obscure case in scene outline displaying prototype entities loose</li> <li>when selecting part of a prototype in view, select the root instead (tilman)</li> <li>show errors when duplicating/deleting parts of a prototype</li> <li>redo duplicating, now anything i.e prototype instances can be duplicated</li> <li>initial support for deleting prototype roots (not undoable, but saveable)</li> </ul>"},{"location":"release-notes/editor/#202033","title":"2020.3.3","text":"<ul> <li>luxe 2020.3.3 compatability</li> <li>Fix some crashes in tiles and filtered lists</li> <li>Update create material tool to latest material format </li> <li>Add tag to preview world so it can be identified (tilman)</li> <li>Swap Q/E controls on camera as they were inverted (tilman)</li> </ul>"},{"location":"release-notes/editor/#202032","title":"2020.3.2","text":"<ul> <li>luxe 2020.3.2 compatability</li> <li>Fix crash when closing a project and some other places</li> <li>World - prevent naming two entities the same thing to avoid bugs atm (eva)</li> </ul>"},{"location":"release-notes/editor/#202031","title":"2020.3.1","text":"<ul> <li>luxe 2020.3.1 compatability</li> <li>fix a crash when closing a scene sometimes</li> <li>set default world and camera for reaching</li> <li>use project compiler for project assets (not editor compiler)</li> </ul>"},{"location":"release-notes/editor/#202030","title":"2020.3.0","text":"<ul> <li>luxe 2020.3.0 compatability</li> <li>editor - load input entry setting so game input bindings exist</li> <li>editor - choosing file paths on windows was broken, all fixed now</li> <li>editor - make keymap UI slightly taller for legibility</li> <li>world - fix bug in scene preview where old scenes could linger (fixed by tilman)</li> <li>world - don't allow selecting prototype entities for entity reference atm</li> <li>world - add shift-B to display bounds of world contents</li> <li>world - fix crash with new modifier block format (ronja)</li> <li>tiles - add 45 degree snap when rotating (hold shift) (eduardo)</li> <li>tiles - add material input name to sources</li> <li>tiles - store a pixelated flag for sources</li> <li>tiles - can now set color on tiles via the editor</li> <li>tiles - fix gaps when painting fast (eduardo)</li> </ul>"},{"location":"release-notes/editor/#202020","title":"2020.2.0","text":"<ul> <li>luxe 2020.2.0 compatability</li> </ul>"},{"location":"release-notes/editor/#202012","title":"2020.1.2","text":"<ul> <li>doc - context concept for plural doc editing + undo</li> <li>world - add <code>luxe.editor.world.camera.default</code> setting, \"2D\"/\"3D\"</li> <li>world - fix prototype scenes showing up in preview mode (tilman)</li> <li>world - hide ui for scenes inside prototype worlds</li> <li>world - more wip animation editing, not usable yet (though saving works)</li> <li>project - handle errors when loading projects gracefully, not aborts</li> <li>project - fix a few crashes when closing/opening projects in a row</li> </ul>"},{"location":"release-notes/editor/#202011","title":"2020.1.1","text":"<ul> <li>latest luxe path support</li> <li>fix intro tooltip location</li> <li>fix text wrapping in various places</li> <li>more work on new animation views (not done)</li> </ul>"},{"location":"release-notes/editor/#202010","title":"2020.1.0","text":""},{"location":"release-notes/editor/#editor","title":"editor","text":"<ul> <li>new versioning</li> <li>fix projects that use dev versions by version number</li> <li>make sure project settings are loaded for use</li> <li>make sure project dependencies are loaded as well</li> <li>lx parsing now labels all sources for better errors</li> <li>fix doc handling keys with dots inside. entities etc can be named whatever</li> <li>doc now has transient docs for handling behind the scenes change</li> <li>editor handles cancel (esc), commit (enter), and tab for custom modifiers</li> <li>recent projects shown by order of access, shared with launcher</li> <li>now handles project path from command line</li> <li>expose access to editor contexts for modifiers</li> <li>fix direction of zoom with mouse wheel in 3d spaces</li> </ul>"},{"location":"release-notes/editor/#world","title":"world","text":"<ul> <li>fix renaming layers being broken in some cases</li> <li>don't allow unselectable things to be selected from scene view</li> <li>active worlds concept for prototype + animation editing</li> <li>prototypes now openable, editable, creatable</li> <li>prototypes overrides can now be edited</li> <li>prototypes can now accept modifiers on their root entity</li> <li>fix active layer in various cases, like load/close/new/etc</li> <li>handle many errors more gracefully as messages, not aborts</li> <li>game rendering is now handled, so in editor looks like the game</li> <li>fix duplicating entities handling dependency ordering right</li> <li>fix custom modifiers vector fields using last selected values</li> <li>Shift P shows physics debug (if available)</li> <li>fix crash on entities without an ID</li> <li>gizmos now can snap (press space bar with gizmo active)</li> </ul>"},{"location":"release-notes/editor/#tiles","title":"tiles","text":"<ul> <li>flip keys will now flip selected tiles (if select tool is on)</li> <li>drawing ui in world space for consistency</li> <li>fix rotation in some cases</li> <li>fix clearing tags</li> <li>tags + offset are now painted correctly</li> <li>displays dimensions of select rect, useful for measuring</li> <li>highlight + select all with visuals (ctrl click, alt click)</li> </ul>"},{"location":"release-notes/editor/#0031","title":"0.0.31","text":""},{"location":"release-notes/editor/#editor_1","title":"editor","text":"<ul> <li>fix same source/dest image import zeroing file (jonathan)</li> <li>fix context switcher ui location on resize</li> <li>fix loading projects with dependencies, again</li> <li>when deploying, the folder now opens on complete</li> <li>anim - don't show buttons with no project (that crash on click)</li> </ul>"},{"location":"release-notes/editor/#tiles_1","title":"tiles","text":"<ul> <li>fix crash sometimes on <code>viaul</code></li> <li>try different logic for half texels</li> <li>fixed crash on removing tiles modifier</li> </ul>"},{"location":"release-notes/editor/#world_1","title":"world","text":"<ul> <li>modifiers now add their dependencies first if missing</li> <li>modifiers now get notified when in editor for events</li> <li>attach list for modifiers cleaned up and sorted nicely</li> <li>fix missing strings on modifier asset select</li> <li>log attach errors to log as well in case of crashes</li> <li>fix ui world camera on window resize </li> </ul>"},{"location":"release-notes/editor/#0030","title":"0.0.30","text":""},{"location":"release-notes/editor/#omni","title":"omni","text":"<ul> <li>fix fast switch not resetting on esc (tilman)</li> <li>fix context changes cancelling pages. fixes 'attach' (tilman)</li> <li>fixed scroll jumping to be more consistent again</li> </ul>"},{"location":"release-notes/editor/#editor_2","title":"editor","text":"<ul> <li>cleaned up project intro flow</li> <li>omni now uses the luxe logo as intended (not a weird symbol)</li> <li>fixed material/image create outside <code>world</code> (jonathan)</li> <li>create material/images ensure path exists (jonathan)</li> <li>improved material/image create workflow (added file select)</li> </ul>"},{"location":"release-notes/editor/#project","title":"project","text":"<ul> <li>added deploy panel for making builds</li> <li>make it possible to load projects with dependencies!</li> </ul>"},{"location":"release-notes/editor/#world_2","title":"world","text":"<ul> <li>fix state of collapsed scene view selected entities (tilman)</li> <li>fix missing strings on id32/id64 field types</li> <li>fixed ui for id32/id64 field types</li> <li>add entity select for custom modifiers</li> <li>tags - fixed crashes when adding sometimes</li> </ul>"},{"location":"release-notes/editor/#0029","title":"0.0.29","text":""},{"location":"release-notes/editor/#editor_3","title":"editor","text":"<ul> <li>added keymaps to tiles, world</li> <li>added readme to tiles, world</li> <li>fixed omni snapping awkwardly in most cases</li> <li>fixed omni filtering being case sensitive</li> <li>bring back fast switcher UI immediate term</li> <li>context switcher closes when clicking outside of</li> <li>add 'create material...' in material select</li> <li>add 'create image...' in image select</li> <li>add hover previews for materials/images</li> <li>anim - removed crashing logic, can now play with it</li> </ul>"},{"location":"release-notes/editor/#world_3","title":"world","text":"<ul> <li>custom modifiers now display id32/id64 correctly</li> <li>clean up attach modifiers UI a bit</li> </ul>"},{"location":"release-notes/editor/#tiles_2","title":"tiles","text":"<ul> <li>added size operations to tiles</li> <li>properties panel can edit selected tiles</li> <li>\"add visual source\" now has an image source</li> </ul>"},{"location":"release-notes/editor/#0028","title":"0.0.28","text":"<ul> <li>editor - fixed an issue with project upgrades</li> </ul>"},{"location":"release-notes/editor/#0027","title":"0.0.27","text":""},{"location":"release-notes/editor/#editor_4","title":"editor","text":"<ul> <li>resizable window</li> <li>added several wip tooltips</li> <li>context switcher usability improved</li> <li>play button is now global (not world only)</li> <li>project - 'update bin' is now dev toggle</li> <li>modules - 'view update' link fixed on updates</li> </ul>"},{"location":"release-notes/editor/#tiles_3","title":"tiles","text":"<ul> <li>rectangle selection (cmd/ctrl drag with select tool)</li> <li>fixed rogue rendering with no project open</li> </ul>"},{"location":"release-notes/editor/#0026","title":"0.0.26","text":""},{"location":"release-notes/editor/#editor_5","title":"editor","text":"<ul> <li>added log.txt so errors can be relayed</li> <li>more game level rendering integration</li> <li>omni now has placeholder text and cancel button (sg)</li> <li>omni has initial version of mini (tooltips), more in .27</li> <li>new project displays latest outlines better (Jonathan)</li> </ul>"},{"location":"release-notes/editor/#tiles_4","title":"tiles","text":"<ul> <li>fixed bugs in painting not applying (by Tilman)</li> <li>fixed stack view getting clipped text (by Tilman)</li> <li>brushes with rotation paste incorrectly (by Tilman)</li> <li>fixed file name issues on saving tiles (Tilman)</li> <li>visuals now use texel center, fixes bleeding (Tilman)</li> </ul>"},{"location":"release-notes/editor/#camera","title":"camera","text":"<ul> <li>fixed zoom speed, adding setting (everyone)</li> <li>add space key to drag as alternate (01010111/Eduardo)</li> <li>mouse wheel changes speed in free fly mode</li> </ul>"},{"location":"release-notes/editor/#anim","title":"anim","text":"<ul> <li>initial work in progress anim editor. not usable yet.</li> </ul>"},{"location":"release-notes/editor/#world_4","title":"world","text":"<ul> <li>fixed play in editor, works well now</li> <li>fix crash on renaming a layer (everyone)</li> <li>custom modifiers can be removed now (Noel)</li> <li>added animation modifier, to attach anims</li> <li>blank scenes default to scenes/ folder</li> </ul>"},{"location":"release-notes/editor/#0025","title":"0.0.25","text":"<ul> <li>select drag while holding alt now works </li> <li>tiles - add basic tagging support</li> <li>tiles - display tile stack better</li> <li>world - add duplicate (cmd/ctrl D)</li> <li>omni - don't take focus on context switching</li> <li>project - add modules button for consistency</li> <li>update sublime/vscode support with new errors</li> </ul>"},{"location":"release-notes/editor/#0024","title":"0.0.24","text":"<ul> <li>fix settings.lx not loading correctly (Tilman/sponge)</li> </ul>"},{"location":"release-notes/editor/#0023","title":"0.0.23","text":"<ul> <li>added settings.lx for tweaking window size</li> <li>added tiles reset rotation key (Eduardo)</li> <li>fixed world selection state on switching back (Tilman)</li> <li>fixed world uuid bugs causing delete to crash</li> <li>fixed world bug in not removing entities from list</li> <li>fixed horizontal scroll inverted (Tilman)</li> <li>fixed escape = quit, use cmd+Q/alt+F4/close window (La)</li> <li>fixed tiles context clean up on closing project (Tilman)</li> <li>fixed tiles bug on certain actions (cut/palette)</li> <li>fixed tiles aspect visual bug (fixed source previously)</li> <li>fixed windows install not creating the link (sponge/torcado)</li> </ul>"},{"location":"release-notes/editor/#0022","title":"0.0.22","text":"<ul> <li>added tiles background color setting</li> <li>added tiles toggle grid key (<code>G</code>)</li> </ul>"},{"location":"release-notes/editor/#0021","title":"0.0.21","text":"<ul> <li>fixed readme from project displaying everywhere (Jonathan)</li> </ul>"},{"location":"release-notes/editor/#0020","title":"0.0.20","text":"<ul> <li>added uninstall module version button</li> <li>added getting started to view readme in project view</li> <li>added sample browser in modules/installed/module/version</li> <li>added update project prompt for convenience</li> <li>added resilience when attaching modifiers (Jonathan)</li> <li>fixed modifiers list mismatch on project change (Jonathan)</li> <li>fixed tiles sources with wider ratio display bug (Jonathan)</li> </ul>"},{"location":"release-notes/editor/#0019","title":"0.0.19","text":"<ul> <li>fixed play standalone not working via assumptions</li> </ul>"},{"location":"release-notes/editor/#0018","title":"0.0.18","text":"<ul> <li>fixed custom modifiers in world/runtime (dev.78)</li> <li>world - added play standalone (cmd/ctrl P or Play icon)</li> <li>world - added single click to rename (torcado)</li> <li>world - fixed enter key commits name (Brody)</li> <li>tiles - added tool display hints/icons</li> <li>tiles - display open asset name</li> <li>tiles - added save as...</li> <li>fixed input bindings in world feeling off (Jonathan)</li> <li>fixed cancel save crashing</li> <li>fixed saving invalid tiles from clear/paint (Brody)</li> <li>fixed crash placing tile after clearing map (torcado)</li> <li>various minor bugs and improvements!</li> </ul>"},{"location":"release-notes/editor/#0017","title":"0.0.17","text":"<ul> <li>fixed tiles refresh on save also when loaded via scene (Jonathan)</li> </ul>"},{"location":"release-notes/editor/#0016","title":"0.0.16","text":"<ul> <li>tiles automatically refresh in world on save (Jonathan)</li> <li>added header in subsection of attach for clarity (torcado)</li> <li>fixed crash: adding visual modifers when gizmo shown</li> <li>fixed camera input being linked in diff contexts (Jonathan)</li> <li>fixed T (transform gizmo) crash in world editor (torcado)</li> <li>display modules in sorted order for consistency (Jonathan)</li> </ul>"},{"location":"release-notes/editor/#0015","title":"0.0.15","text":"<ul> <li>include windows build</li> </ul>"},{"location":"release-notes/editor/#0014","title":"0.0.14","text":"<ul> <li>display readme clearer, and scrolling</li> <li>when not focused, make app use much less cpu/energy</li> </ul>"},{"location":"release-notes/editor/#0013","title":"0.0.13","text":"<ul> <li>fixed tiles being available when no project is open</li> <li>fixed tiles grid setting being stored wrong (Jonathan)</li> <li>fixed newly created tiles breaking in world (Jonathan)</li> </ul>"},{"location":"release-notes/editor/#0012","title":"0.0.12","text":"<ul> <li>added version display to status bar</li> <li>fixed <code>remove missing project</code> lingering (Jonathan)</li> <li>fixed <code>transform</code> crashing on selection (Jonathan)</li> <li>added better error messages on <code>transform</code> misuse (Jonathan)</li> </ul>"},{"location":"release-notes/editor/#0011","title":"0.0.11","text":"<ul> <li>fixed entities not getting their uuid saved (Jonathan)</li> <li>fixed scrollwheel direction again (Jim/Jonathan)</li> <li>fixed ID panel floating around when it shouldn't</li> </ul>"},{"location":"release-notes/engine/","title":"luxe release notes","text":""},{"location":"release-notes/engine/#202423","title":"2024.2.3","text":"<p>This build fixes issues from last build + more big beta todos.</p> <ul> <li>Color; add Color.hex_string </li> <li>Frame; mark; add a history so it doesn't crash after time</li> <li>Text; another color fix</li> <li>Mesh; new mesh importer pipeline merged in (to document)</li> <li>Render; fix issue with shadows in 3d render module</li> <li>Text Style; fix asset types not finding fonts</li> </ul>"},{"location":"release-notes/engine/#202422","title":"2024.2.2","text":"<p>More work on stabilizing new modifiers and world tick! The changes to world tick may take time to finalize but  for most content works as is and shouldn't be visible.</p> <ul> <li>Render; fix some text color bugs </li> <li>UI; more tweaks on UI layout/auto size interactions</li> <li>Outlines; Fix copying .gitignore and .vscode as intended</li> <li>Frame; add initial Frame.mark helper for seeing frame timelines</li> <li>World; changes in how world tick world</li> <li>World; modifiers now use init instead of new() removing need for super()</li> <li>Editor; Editor api for accessing editor instance in modifiers</li> <li>Text; add initial shadow/outline effects (Ronja)</li> <li>Agent; fix some minor issues and auto restart agent as needed</li> <li>Assets; fix off by one error by moving generated assets into project</li> <li>Scene 2.0; fix scene scripts running in editor</li> <li>Scene 2.0; fix scene scripts not running tick</li> <li>Scene 2.0; scene scripts have parent class now (no required functions)</li> </ul>"},{"location":"release-notes/engine/#202421","title":"2024.2.1","text":"<p>Lots of stability and bug fixes on the new modifier workflows,  scene/prototypes and editor this time around. Not necessarily fully complete yet, but much closer to parity and much more reliable.</p> <ul> <li>Scene 2.0; add scene scripts</li> <li>Scene 2.0; fix wrong modifier APIs used</li> <li>Scene 2.0; add unload for scene/prototype (Entity.destroy(root))</li> <li>Text; fix jumpy text</li> <li>Wren; allow { on new line in more places</li> <li>World; revise how attach/detach and modifier events work</li> <li>Assets; fix font face gen not being found on first compile</li> <li>Assets; fix crashes when certain apis are used certain ways</li> <li>Toggle; add get() api</li> <li>Tiles; fix crash in certain cases</li> <li>Blocks; several major bugs found + fixed </li> <li>Blocks; fix arrays being incorrect for lx inputs in new data</li> <li>Blocks; add destroy</li> <li>Engine; clean up wip memory from in dev code</li> <li>Engine; fix a couple memory corruption issues</li> </ul>"},{"location":"release-notes/engine/#2023112","title":"2023.11.2","text":"<ul> <li>Outline; fix pixel art project dependency version</li> <li>Fix uninitialized crash in new var fields (thanks msminotaur!)</li> </ul>"},{"location":"release-notes/engine/#2023111","title":"2023.11.1","text":"<ul> <li>Outline; add pixel art outline with auto scaling and all that</li> <li>Wren; fix a few issues with new fields in completion</li> <li>Wren; fix explicit fields not initializing parent class fields</li> <li>Basis; add pixelated AA shader + basis for scaling pixel art</li> <li>UI; add UIColor control + ColorPicker control</li> </ul>"},{"location":"release-notes/engine/#2023110","title":"2023.11.0","text":"<p>Whew. Important to note that this build was 1.5 ish years of constant use and change, so the list of changes and fixes is incomplete at best. There's also a lot of  foundation changes that shift the engine to it's more final form for open beta.</p> <p>There's a huge list, not all listed here.</p> <p>Some of these things are still in flight and will land in the next few versions, but we're switching back to the rapid iterative builds where we have frequent builds instead.</p>"},{"location":"release-notes/engine/#asset-db","title":"Asset db","text":"<p>There's a new wip asset database which tracks missing assets or assets moving around,  and will be able to answer questions about references and lots more. </p> <p>Currently the new asset system co-exists with the old one. Some assets are handled by the old system and some handled by the new. This is all pretty transparent but, there are things that are less efficient or things that are doing extra work cos of it. Those will go away as we finish this up, but shouldn't affect your day to day use much.</p>"},{"location":"release-notes/engine/#new-project-format","title":"New project format","text":"<p>The project has changed shape a bit, there's now a <code>luxe.project/</code> folder which  contains things like the version.lx, modules.lx, ignore and so on. This folder will be where all project configuration lives and keeps the root clean for your content.</p> <p>This also makes those things more machine editable, for example you can write to version.build.lx and it'll automatically be available as a setting <code>project.build</code> to display in game. We use this to write git version hashes into that.</p>"},{"location":"release-notes/engine/#rendering-and-shaders","title":"Rendering and Shaders","text":"<p>The shaders have evolved a lot, make sure if you had project local shaders you look at the  module shaders.emsl for the new Draw, View, Frame inputs. These change the <code>input.view.mvp</code>  and friends to <code>input.draw.mvp</code> and so on. </p> <p>Shaders also now send their data as buffers (more modern) which allows a lot of stuff like compute and other things to use the data more effectively. This is largely transparent for you.</p>"},{"location":"release-notes/engine/#ui-layout","title":"UI Layout","text":"<p>Controls in the UI now have flex layout built in. You opt in with <code>UI.set_layout_mode</code>, and use <code>Control.set_behave</code> and <code>Control.set_contain</code> to control the layout.</p>"},{"location":"release-notes/engine/#agent-code-completion","title":"Agent + Code completion","text":"<p>The agent has seen many improvements! Code completion, references and jump to definition should work better now. There are more places with annotations and  inferred types and more to come.</p>"},{"location":"release-notes/engine/#wren","title":"Wren","text":"<p>We've been improving the baseline wren as well. There's a new GC that is aware it's running in a game and does work on a frame level, allowing things to spread  out and not spike as much. Still wip, but significantly smoother in a bigger game  like Mossfield Origins.</p>"},{"location":"release-notes/engine/#explicit-fields","title":"Explicit fields","text":"<p>We've also now got explicit field declarations!  They go first in a class, must be initialized.</p> <p>This reduces boilerplate a lot for one thing.  Before you had to write this for every field:</p> <pre><code>field { _field }\nfield=(v) { _field=v }\n// ... initialize\n_field = 3\n</code></pre> <p>But now, you can just do this:</p> <pre><code>var field = 3\n</code></pre> <p>This generates the get/set for you, but you still have the <code>_field</code> though. It will only generate it if one doesn't exist, so you can override the behavior and still treat them as regular methods, and existing code is compatible.</p> <pre><code>class Example {\n  var number = 2\n  construct new() {\n    number = number + 2\n    Log.print(_number) //4\n  }\n}\n</code></pre> <p>Fields like this can be initialized with any expression since the initializer  is executed when an instance is constructed. So you can do things like</p> <pre><code>var entity = Some.code(here)\n</code></pre>"},{"location":"release-notes/engine/#random-sampling-of-changes","title":"Random sampling of changes","text":"<ul> <li>Topograph sort service API</li> <li>Frame; add Frame.skip(N)</li> <li>Render; expose write mask to pass layer</li> <li>Input; add display name for keys</li> <li>Draw; add plane3D, bounds3D and aabb3D for geo</li> <li>Selection; add selection service api</li> <li>UI; add wip world inspector control (view scene in game)</li> <li>Add fuzzy search for strings</li> <li>UI; add filtered list api</li> <li>IO; add wip Ptr and Uint64 type</li> <li>Str; add format api</li> <li>Str; is_alphanumeric</li> <li>LX; deterministic key serialization</li> <li>Sprite; add create where it'll infer the size from the image</li> <li>Wren; var field</li> <li>Mac; Universal Intel/Apple Silicon binary</li> <li>Mesh; auto instancing, with location and tag options</li> <li>UI; wip drag and drop</li> <li>UI; send destroy events</li> <li>Fix clipboard corruption on some platforms</li> <li>Render; vsync setting can be changed dynamically</li> <li>UI; make commits more efficient</li> <li>Text; add wrap, styles, markup, shaping and more</li> <li>Fonts; new font compiler + latest MTSDF </li> <li>Jobs; add new task system (internal atm)</li> <li>Render; add writable buffers for compute</li> <li>Render; expose compute properly</li> <li>Wren; new wip frame based GC with better dials</li> <li>Sprite; add set geometry</li> <li>UI; add set_system_cursor to control (wip)</li> <li>Input; add system + custom mouse cursors on desktop</li> <li>Atlas; add rect exists </li> <li>Render; clean up mat4 vertex inputs </li> <li>UI; nicer debug visualization and control over it</li> <li>Video; wip simple video player (mpg1)</li> <li>Entity; add on create/destroy listeners</li> <li>UI; add any_focused query</li> <li>UI; Label; add auto size width/height/both </li> <li>Draw; expose mat basis on create</li> <li>Camera; add zoom 2d</li> <li>Geometry; add get_aabb</li> <li>Entity; destroy changed a bit, no defer needed, safe in loops</li> <li>Text; add loc to text objects</li> <li>Loc; add PO/POT parsing and handling</li> <li>Loc; add initial Localization apis</li> <li>UI; add localization to label</li> <li>UI; fixed control destroy should take children with</li> <li>UI; control enter/exit consistency</li> <li>UI; fix events being missed sometimes</li> <li>Transform; euler&lt;&gt;quat cache for more stable to and from</li> <li>UI; move layout to built in</li> <li>Draw; add line3d, camera, frustum, plus, plus3d, ring3d</li> <li>Camera; add get_frustum</li> <li>Render; remove Float3 types from inputs</li> <li>Render; Input buffers now use buffer objects </li> <li>Wren; add Log.print(...) instead of System.print</li> <li>Wren; add Sys.stackCaller() for debugging</li> <li>Wren; renamed System -&gt; Sys</li> <li>add IO.date_and_time(from: Num)</li> <li>add IO.date_and_time(from: Num, format: String)</li> <li>Input; fix graph node events</li> <li>Sprite; new sprite incoming</li> <li>Sort render geo by basis as well</li> <li>Crash; Initial crash handling (windows only atm, wip)</li> <li>Plot; add plot service for storing numbers over time</li> <li>Toggle; add Toggle service API (multi boolean for e.g pause)</li> <li>SVG; add experimental svg -&gt; geo + svg -&gt; image apis</li> <li>Triangulate; add initial triangulate helper apis</li> <li>Noise; add Noise API with various flavours of noise</li> <li>Wren; add orderedKeys to map</li> <li>Audio; add playing? query</li> <li>Audio; add pause and pause_of api</li> <li>UI; Panel; border is now interior to the control</li> <li>search for set border and half the size if breaking</li> <li>Transform; fix get_angle2D_world returning local angle</li> <li>Mesh; clean up some memory on destroy</li> <li>Render; fix headless crashes</li> <li>Render; perf; use frame allocator for queue data</li> <li>LX; parse errors and surface them (via Result)</li> <li>Wren; add Result type to core</li> <li>Wren; add Option type to core</li> <li>UI; Control; add get pos/size</li> <li>UI; Control; add get UI from control api</li> <li>LX: use canonical Wren NaN to avoid bugs</li> <li>Transform: fix issue with unlink previous parent</li> </ul>"},{"location":"release-notes/engine/#202205","title":"2022.0.5","text":"<p>This build is largely bug fixes and foundations that aren't visible just yet.</p> <ul> <li>Engine; fix a bunch of memory leaks and issues </li> <li>Zip; fix unzipping files on linux/mac</li> <li>Outlines; new format for outlines which will show up in new build</li> <li>Assets; add get_script which can return script code in release builds</li> <li>UI; add UIImageFlags for pixelated images or images with mips</li> <li>UI; add Control docs (ronja)</li> <li>UI; add UITabs control with tabs</li> <li>UI; fix Control.destroy_children not cleaning up parent properly (ronja)</li> <li>Loc; initial Localization api; Not in use yet</li> <li>Physics; add Body3D.get_aabb</li> <li>Blocks; BLOCKS BLOCKS BLOCKS</li> <li>UI; add UIBlock control for displaying blocks</li> <li>World; fix Layer destroy </li> <li>Mesh; move all lods when transform changes as intended</li> <li>Render; fix MRT clear color issues</li> <li>Render; support PBO style uploads for images</li> <li>Render; use scratch memory for submissions instead of allocating</li> </ul>"},{"location":"release-notes/engine/#202204","title":"2022.0.4","text":""},{"location":"release-notes/engine/#sprite-import-autofill","title":"Sprite Import Autofill","text":"<p>When importing a sprite, the material and image name will now default to the file name of the imported sprite. This speeds up workflow (thanks miniglitch for the suggestion).</p>"},{"location":"release-notes/engine/#asset-id-completion","title":"Asset ID completion","text":"<p>When an API signals to completion that it accepts an asset type, completion can now show the list of assets of that type. All thanks to Ronja.</p>"},{"location":"release-notes/engine/#windows-unicode-path-fixes","title":"Windows unicode path fixes","text":"<p>If your user name on Windows included a non ascii character it could confuse the path APIs of the engine, causing trouble when trying to install luxe. This should be fixed where any user name or project folder name can work as intended, even if named with emoji etc. Thanks to Cepukka and Nomad_Hermit for debugging!</p> <ul> <li>Runtime; fix more bugs in schedules </li> <li>Render; use Uint16 for index buffer replace/update as intended</li> <li>UI; fix bugs in destroying ui </li> <li>Mesh; fix first item ignoring transforms in editor</li> <li>Values; fix memory issue causing weird bugs</li> <li>Transform; add <code>get_world_matrix(entitym into_matrix)</code></li> <li>Tiles; add clearer errors for set_visual </li> <li>Draw; path3d + path report errors for invalid point counts</li> <li>Sprite; add clearer errors for contains </li> <li>Docs; add pqueue and AnimEvent docs</li> <li>Fix \\\" causing code coloring issues</li> <li>UI; tweak contrast of toggle control</li> <li>UI; tweak contrast of toggle control</li> <li>Input; add <code>mouse_state_wheel()</code> query, returns a float2</li> <li>Math; add angle2d for signed 2d angles between directions</li> <li>Completion; add \"asset_type\" annotations </li> <li>luxeignore; ignore log files so they aren't loaded as assets</li> </ul>"},{"location":"release-notes/engine/#202203","title":"2022.0.3","text":"<ul> <li>Save; add initial save system</li> <li>IO; image save now has an extra hdr bool variant</li> <li>Web; don't do background sleep, it can lock up the browser</li> <li>Web; fix IDBFS mounting and access for save data</li> <li>Web; template includes fixes for deploying direct to e.g itch.io</li> <li>Web; emsdk 3.1.1</li> </ul>"},{"location":"release-notes/engine/#202202","title":"2022.0.2","text":"<ul> <li>Render; don't skip rendering geometry in multiple layers if found in the first</li> <li>Draw; add Draw.ngon/ngon_solid for drawing triangles, hexagons, etc</li> <li>Draw; fix a few ring + circle bugs when non-uniform radius</li> <li>Transform; add get_scale_world and component getters</li> <li>UI; Control; add can_see/can_see_area/can_see_point</li> <li>Render; fix bug in layer passes that could cause crashes</li> <li>Math; add documentation (ronja)</li> </ul>"},{"location":"release-notes/engine/#202201","title":"2022.0.1","text":"<ul> <li>Wren; fix some script compiler errors when tabs are present, and other minor bugs</li> <li>Mesh; fix some build errors creating new errors</li> <li>Mesh; fix texture parsing creating errors </li> <li>UI; add missing UIImage.get_color</li> <li>UI; add missing UIButton.get_render_text</li> <li>UI; fix weird clipping issue (caused by compiler inlining)</li> <li>UI; fix recursive events bug causing sliders to explode</li> <li>IO; fix processes sharing stdio handles causing a crash </li> </ul>"},{"location":"release-notes/engine/#2021010","title":"2021.0.10","text":""},{"location":"release-notes/engine/#wren-changes","title":"wren changes","text":"<p>The way errors are handled and printed by the engine/language now allow vscode to correctly jump to the right line when alt clicked in the terminal. Additionally, only the actual error is promoted to a \"problem\" in the Problem tab, rather than every line of the callstack. </p>"},{"location":"release-notes/engine/#completion-stuff","title":"completion stuff","text":"<p>Ronja has been hard at work making the experience in vscode better for completion. They're rewritten it to be able to handle inheritance, not randomly silently fail over time, and a whole lot more. </p> <p>There's at least a dozen fixes, make sure you grab the latest agent version when it's available.</p>"},{"location":"release-notes/engine/#render-changes","title":"render changes","text":"<p>A lot of work has been going into improving meshes workflow, like automatic instancing and various features. These are most useful in 3D but it's worth noting that if you're using 3D and run into issues please report them. There are parts still undocumented too, since they're new/potentially volatile. If you wanna use them, you know where to ask!</p> <ul> <li>Project; add <code>postdeploy()</code> hook in project.luxe (for web build templates)</li> <li>Input; add <code>set_mouse_pos(x: Num, y: Num)</code></li> <li>Input; add <code>set_mouse_visible(state: Bool)</code></li> <li>Draw; add initial <code>path3D(context, points, style)</code> for 3D lines</li> <li>Draw; add alpha to <code>PathStyle</code></li> <li>Color; fix bug in hsv conversion (ronja)</li> <li>Color; add <code>hex_color(color: Color, include_alpha: Bool)</code> to get hex int from color (ronja)</li> <li>Color; add <code>Color.pink</code> for the luxe pink color</li> <li>Math; add <code>Math.approx</code> for comparing float numbers</li> <li>Build; fix asset extensions causing issues with non-luxe assets with the same extension</li> <li>Build; Mesh; fix compiler error when trying to report a mesh error</li> <li>Build; Mesh; fix material imports from assets (for later importing)</li> <li>World; Mesh; add initial instanced flag for automatic mesh instancing</li> <li>World; optimize transform change event sets from allocating every time</li> <li>Render; optimize image input setting in backend</li> <li>Render; optimize render passes a bunch</li> <li>Render; add \"replace tags\" to material basis for direct pipeline control </li> <li>Render; add <code>engine.render.metrics.gpu</code> setting, exposing the opengl GPU timer</li> <li>Runtime; fix crash when things queue something during shutdown</li> <li>Runtime; emit <code>engine.ready</code> for scripts opting into ready from elsewhere</li> <li>Runtime; add <code>debug</code> section in frame after <code>visual</code>, before <code>end</code></li> <li>Runtime; logs are rotated for log.txt, log.1.txt etc instead of overwriting each time</li> <li>Runtime; fix tick functions being rearranged</li> <li>Runtime; exposed logs to user facing code for display</li> <li>Release; disable windows console window in release builds</li> <li>IO; regex now allows 32 groups/sub matches (was 16)</li> <li>IO; fix missing image_failure_reason() endpoint</li> <li>IO; work on UV backed process API, not finished</li> <li>UI; add <code>UI.set_layout_mode(mode: UILayoutMode)</code> to opt into flex layout</li> <li>UI; add wip <code>luxe: ui/field/number</code> for consistent number fields with precision radial</li> <li>UI; add wip <code>luxe: ui/field/vector</code> for consistent float\u2154/4 fields using number fields</li> <li>UI; add wip <code>luxe: ui/field/choice</code> a filtered dropdown list (wip name)</li> <li>UI; add wip <code>luxe: ui/field/path</code> a path selector field</li> <li>UI; display control + id + type below mouse in debug vis</li> <li>UI; add <code>UI.mouse_to_canvas(ui: Entity, x: Num, y: Num)</code> for Input -&gt; UI conversion</li> <li>UI; add <code>UI.set_debug_mode(mode: UIDebugMode)</code> for individual debug vis</li> <li>UI; Panel; add missing <code>UIPanel.get_color(panel: Control)</code> API</li> <li>UI; Slider; now emits change/commit events for drag vs release </li> <li>UI; add missing <code>UI.has(entity: Entity)</code> API</li> <li>UI; optimize UI drawing creating a new material each time, reuses them</li> <li>UI; make layout part of the UI system itself, and allow partial layouts</li> <li>UI; layout now contains UIContain.vfit and UIContain.hfit to explicitly ensure size to children</li> <li>UI; fix children_at_point behaviour for controls outside of parent</li> <li>UI; fix marked control not getting reset when leaving canvas (nihilocrat)</li> <li>UI; fix text change events sending previous text as well</li> <li>UI; fix text double click time counting when unfocused</li> <li>UI; fix invalid ui crashing the events processing (e.g destroy a ui from an event)</li> <li>UI; redo checkbox visual behaviour</li> <li>UI; add quad_detailed to ui draw</li> <li>Lists; remove_where now returns the value like the rest of wren (non breaking change)</li> <li>API; remove old <code>luxe: array</code> - replace with <code>luxe: containers</code></li> <li>API; remove old <code>luxe: geometry</code>, no longer used (moved to old lines sample)</li> <li>Wren; make error messages line up when using tabs (ronja)</li> <li>Wren; fix blank wren files erroring as not found</li> <li>Wren; fix missing debug info for class locations (ronja)</li> <li>Wren; work on exposing the debugger, use <code>--wren-debugger</code> to enable</li> <li>Wren; work on vm level profiling built in (not exposed yet)</li> <li>Wren; add line + module to runtime errors</li> <li>Wren; change how stacks + errors are reported for vscode</li> <li>internal; fix imgui implementation (not exposed yet)</li> <li>internal; significant work on the new blocks (not user facing yet)</li> </ul>"},{"location":"release-notes/engine/#202109","title":"2021.0.9","text":"<ul> <li>render; allow setting depth_write/depth_compare for a pass layer</li> <li>render; fix rendering to array textures</li> <li>world; ui; error on cancelling events without a ui attached</li> </ul>"},{"location":"release-notes/engine/#202108","title":"2021.0.8","text":"<ul> <li>materials; add error when specifying a missing input to a basis for debugging</li> <li>render; add <code>Render.valid_text(text)</code></li> <li>render; cache render passes by id to avoid create materials infinitely</li> <li>astar; add a second infinite loop guard for rare edge case (couldn't find why)</li> <li>window; don't sleep at all if background time is set to 0</li> <li>ui; control; add get/set_enabled</li> <li>ui; disable \"last line doesn't justify\" behaviour of layout</li> <li>web; fix emscripten preload cache being aggressive</li> <li>draw; draw text returns render text object as intended</li> <li>draw; fix circles going one step too many</li> <li>IO; add <code>IO.date_and_time()</code> for printing current time</li> <li>fix crash when removing a tick from inside a tick</li> <li>fix assert on Entity.set_name when name isn't a string</li> <li>potential fix for unicode names being weird on windows</li> <li>io; return \"web\" for IO.os() on web target</li> <li>tiles; error when trying to create a tile without a Tiles modifier</li> <li>world; prototype now errors when asking on non prototypes</li> </ul>"},{"location":"release-notes/engine/#202107","title":"2021.0.7","text":"<ul> <li>Fix regression from imports added in 2021.0.6, paths should work as intended</li> <li>UI; double click setting added <code>engine.runtime.input.rapid_press_interval</code></li> <li>UI; double click time default increased to 0.45s (was 0.2s)</li> <li>Anim; Sprite Value Track now exposes uv.horizontal/uv.vertical</li> <li>Anim; Sprite Value Track now exposes uv.left/uv.right/uv.top/uv.bottom</li> </ul>"},{"location":"release-notes/engine/#202106","title":"2021.0.6","text":"<ul> <li>mac; fixes for build deployment target (now 10.13)</li> <li>Str.path normalizes drive letters for windows paths</li> <li>outline; fix tutorial background sleep, add logo for clarity</li> <li>UI; control; move tab concerns to control level so it works everywhere</li> </ul>"},{"location":"release-notes/engine/#202105","title":"2021.0.5","text":"<ul> <li>latest SDL - 2.0.14</li> <li>latest emsdk - 2.0.25</li> <li>Draw - fix rect_detailed for y+ up and clamped radius</li> <li>Draw - add rect detailed example/test to sample</li> <li>LX - fix bug serializing vectors of bool</li> </ul>"},{"location":"release-notes/engine/#202104","title":"2021.0.4","text":"<ul> <li>Fix Assets class being special, so now it gets proper completion</li> <li>Docs + types for code completion for several classes</li> <li>Assets, Anim, Assert, Strings, Audio, Color</li> <li>modules: containers, draw, editor, events, game, id, sat2d</li> <li>UI - add commit event to text fields</li> <li>UI - text field now cancels input on escape, commits on enter, and can tab forward</li> <li>UI - recursively handle UI events properly, so no events are lost</li> <li>Sprite - in editor, update size on changing material automatically</li> <li>Assets - import for sprite shows warnings for existing content not errors</li> <li>Transform - add <code>set_snap(x, y)</code></li> </ul>"},{"location":"release-notes/engine/#202103","title":"2021.0.3","text":"<p>Minor breaking change: If you had a constructor that returns any value (including <code>this</code>), that's invalid. Often you can just convert to <code>static new() {}</code> or similar and have an internal <code>construct</code> method instead.</p> <ul> <li><code>Str.fixed</code> now uses a reliable format where 0.1 remains 0.1 instead of 0.1000001231</li> <li>add <code>Str.vec</code> which formats a vec using Str.fixed</li> <li><code>LX</code> now stringifies numbers using <code>Str.fixed</code> with 6 digits precision (:todo: configurable)</li> <li>Wren - clean up attributes spam</li> <li>Wren - latest version of 0.4.0 https://github.com/wren-lang/wren/releases/tag/0.4.0</li> <li>Wren - fix crashy behaviour in much bigger projects due to unitialized value</li> <li>Wren - fix newlines being different based on file newlines within strings</li> <li>Anim - Sprite frames track resets material on reset</li> <li>Anim - Sprite frames track now sets the material if it's not a match, as intended</li> <li>Anim - Sprite frames track allow inverted ranges for start/end index</li> <li>Anim - Sprite values track now allows animating sprite properties as a curve</li> <li>Anim - Transform - relative animations now work as intended</li> <li>Anim - add <code>set_interval_time</code>, sets the time in 0...1 range for a live anim</li> <li>Anim - add <code>track_get_range</code>/<code>track_set_range</code>, sets the range for a track in a live anim</li> <li>Anim - <code>play</code>/<code>play_only</code> now error properly if you pass a null asset id</li> <li>Anim - fix crash when animation modifier accessed an old entity</li> <li>World - when requesting a system, return a new one if not present (instead of error)</li> <li>Transform - fix some ways to set a position not respecting snap</li> <li>Transform - fix unlink without a parent asserting, error properly instead</li> <li>Transform - fix linking to self being an infinite loop + crash, error properly instead</li> <li>Transform - add experimental <code>get_pos_world_unsnapped</code></li> <li>Runtime - add <code>engine.runtime.quit</code> setting, if false, quit will do nothing and fire an event</li> <li>Render - add error for missing material basis on <code>Material.create</code></li> <li>UI - add <code>UI.make</code> experimentally (it's like spawn but returns a properly sized container)</li> <li>Sprite - initial annotations for completion/docs</li> <li>Math - add <code>dir2D(pos, target)</code></li> </ul>"},{"location":"release-notes/engine/#202102","title":"2021.0.2","text":"<ul> <li>Windows - fix resize/moving a window from blocking the game</li> <li>Wren - add annotations (available at runtime as SomeClass.meta)</li> <li>Wren - add raw string literal \"\"\"like this\"\"\", can cross lines and include anything</li> <li>Wren - add list.remove(item)</li> <li>Wren - add experimental way to call a function by name</li> <li>Transform - fix bugs due to use of euler in animation track</li> <li>Transform - add global default snap setting e.g pixels <code>engine.transform.snap = [1,1,0]</code></li> <li>Transform - experiment with applying transforms on spawning prototypes more</li> <li>World - clean up some memory properly</li> <li>IO - fix creating paths across drive boundaries, fixes launcher</li> <li>LX - add raw string support to lx files</li> <li>LX - escape some json content correctly when saving json</li> <li>Mesh - fix a bug where changing the mesh asset could crash if done a certain way</li> <li>Runtime - queued ticks will process recursively queued ticks correctly now</li> <li>String - add indent(string) and indent_strip(string) for convenience</li> <li>Outline - add vscode default tasks to empty outline</li> <li>Tiles - add Tile.get/Tile.set for storing values on a tile</li> <li>Color - add hex(value, alpha)</li> <li>Result - add Result type experimentally</li> <li>World - modifiers have find_entity(relative_entity, uuid) for finding entities</li> <li>Camera - if no default camera exists when one is created, set it as default</li> <li>UI - fix obscure timing issue with dead controls being marked</li> <li>UI - add <code>Control.destroy_children(control)</code></li> <li>Wren - fix infinite loop in some parsing cases</li> <li>Wren - error on missing imports up front</li> <li>Wren - warn on single quote strings</li> <li>Wren - warn when imports mismatch case</li> <li>Math - vector angle between <code>angle(v1, v2, up)</code></li> <li>fix some dev mode issues</li> <li>fix crash when asset reloading fails to compile</li> <li>add debug file to find issues in lx parse till there's real errors</li> </ul>"},{"location":"release-notes/engine/#202101","title":"2021.0.1","text":"<ul> <li>UI - fix nasty text focus bug (eduardo, bach)</li> <li>UI - when setting text, error properly on not-a-string</li> <li>Render - add atlas API and assets for atlas support</li> <li>Sprite - add atlas support via Sprite.create(entity, atlas, atlas_image_id)</li> <li>Sprite - add origin setting (0.5, 0.5 center default. 0,0 is bottom left)</li> <li>Anim - Sprite track now has proper frame based information instead of keys</li> <li>Bytes - subscript [] returns uint8 (instead of int8) as intended</li> <li>Render - add window_hide(state)</li> <li>Render - add <code>engine.runtime.window.allow_screensaver</code> to not block</li> <li>Render - add VertexInputRate for per instance vs per vert</li> <li>Render - add get/set_instance_count for geometry</li> <li>Shaders - add pixel perfect aspect upscaling shader for outlines</li> <li>Shaders - add input.view.time to shaders</li> <li>World - add proper errors on invalid material for Sprite</li> <li>Samples - add previews and sample.lx for new launcher</li> <li>Deploy - add experimental custom icon support + a default icon</li> <li>Compiler - print success status</li> <li>Docs - work on tutorial</li> </ul>"},{"location":"release-notes/engine/#202100","title":"2021.0.0","text":"<ul> <li>Fix major font rendering bug.... </li> <li>Fix filewatch again</li> <li>Scripts - add an error for missing imports</li> <li>Game - add <code>Frame.schedule</code> for calling functions in future, absolute time</li> <li>World - add <code>World.schedule</code> for calling functions in future, world relative time</li> <li>World - add Camera.cull and some tools for frustum culling when rendering</li> <li>World - add World.render with a second camera to cull with (can be same as render cam)</li> <li>World - experimental render view descriptors</li> <li>Settings - add <code>has</code> query</li> <li>UI - add <code>UIList.can_scroll</code></li> <li>UI - add <code>UIWindow.get_collapsed</code></li> <li>UI - fix some event ids being stomped</li> <li>UI - fix events being sent to parents even if they didn't want them</li> <li>UI - visual polish for several things</li> <li>Math - add <code>dist2D</code> for non vector</li> <li>Anim - transform tracks now have an absolute flag</li> <li>Anim - fix reverse rate not working as intended. reverse now works again</li> <li>Material - add depth bias setting to basis</li> <li>Expand color class with some constants, hsv functions and lerp</li> <li>Render - explore plural tags for render layers</li> <li>Regex - fix bugs and update lib for utf8 support + for substitutions </li> </ul>"},{"location":"release-notes/engine/#202035","title":"2020.3.5","text":""},{"location":"release-notes/engine/#stability-fixes","title":"stability fixes","text":"<p>There were a few vague crashes that happened occasionally when running a (bigger) project, and re-running normally worked. This was introduced not long ago by mistake when I was testing the new native lx parser. </p> <p>All instances of weird behaviour have been found and fixed, so things are back to being stable + reliable again. I've also optimized a couple places for script compilation to be much more snappy when iterating.</p>"},{"location":"release-notes/engine/#lots-of-physics-work","title":"lots of physics work","text":"<p>For 7DFPS I was making a physics game, that necessitated a bunch of work on physics. Instead of doing the minimum, I took the opportunity to implement the intended filtering + collision model, add collision callbacks, physics materials, and body settings assets.</p> <p>This filtering model is based on \"ignore/overlap/collide\" being the 3 settings for a body.  When two bodies overlap, the \"least\" type is used. e.g ignore vs collide = ignore. overlap vs collide = overlap. This means any body can be collidable (solid) or overlapping (triggers, etc).</p> <p>The callbacks send events for overlap <code>begin</code>, <code>active</code>, and <code>end</code>.  A collide event is also sent if the result is <code>collide</code>.</p> <p>These are only applied to 3D at the moment, but the same code + model applies to 2D and will make it's way there soon.</p>"},{"location":"release-notes/engine/#lots-of-transform-work","title":"lots of transform work","text":"<p>Similiarly, I needed some special transformation stuff, so instead of just adding the one I needed I added a lot of the fundamentals for dealing with transforms. This is still based on the idea that transforms should be possible to use without resorting to math constructs like matrix or quaternions. Lot of progress here!</p> <p>There's lots to see otherwise: </p> <ul> <li>Window - Fix fullscreen to be borderless windowed, add alt+enter handling</li> <li>Scripts - optimize recompilation a lot for faster iteration</li> <li>Wren - 0.4.0 - changes here - https://github.com/wren-lang/wren/releases/tag/0.4.0-pre</li> <li>Wren - fix corruption in GC due to an unmarked value I added</li> <li>Wren - fix potential access of uninitializd memory</li> <li>Wren - fix corruption in GC due LX parsing - https://github.com/wren-lang/wren/issues/869</li> <li>Draw - add <code>Draw.cross(context, x, y, z, radius, angle, style)</code></li> <li>Draw - add simple ring variant <code>Draw.ring(context, ox, oy, oz, radius, smoothness, style)</code></li> <li>Math - Add <code>Math.length(vec)</code>, <code>Math.length_sq(vec)</code>, <code>Math.length_sq2D(vec)</code></li> <li>Math - Add <code>Math.angle(vec, other_vec)</code></li> <li>String - fix <code>Str.fixed(string, precision)</code> affecting the number</li> <li>Assets - Meshes now auto triangulate, so no need to triangulate inputs</li> <li>Assets - Mesh compiler prints more useful nested info for choosing a node</li> <li>Physics 3D - fix bugs when editing physics bodies in editor (tilman)</li> <li>Physics 3D - add body config asset</li> <li>Physics 3D - add collider materials asset</li> <li>Physics 3D - fix mesh collider when meshes were indexed</li> <li>Physics 3D - fix mesh internal seam collisions for smooth collisions</li> <li>Physics 3D - add mesh MeshColliderType for controlling behaviour</li> <li>Physics 3D - add callbacks for overlap + collide events</li> <li>Physics 3D - add initial wip filtering for collide/overlap/ignore</li> <li>Physics - Fix debug vis in editor</li> <li>UI - add <code>UIText.select_all(control)</code></li> <li>Transform - fix look_at when linked to another transform (tilman)</li> <li>Transform - fix bugs in world rotation setting (tilman)</li> <li>Transform - add <code>rotate_around(entity, x, y, z, axis_x, axis_y, axis_z, degrees)</code></li> <li>Transform - add <code>rotate_around_world(entity, x, y, z, axis_x, axis_y, axis_z, degrees)</code></li> <li>Transform - add <code>world_point_to_local(entity, x, y, z)</code></li> <li>Transform - add <code>local_point_to_world(entity, x, y, z)</code></li> <li>Transform - add <code>local_dir_to_world(entity, x, y, z)</code></li> <li>Transform - add <code>world_dir_to_local(entity, x, y, z)</code></li> <li>Transform - add <code>local_vector_to_world(entity, x, y, z)</code></li> <li>Transform - add <code>world_vector_to_local(entity, x, y, z)</code></li> <li>Transform - add <code>set_rotation_slerp(entity, from, to, t)</code></li> <li>Transform - add <code>set_rotation_slerp_world(entity, from, to, t)</code></li> <li>Transform - add <code>set_rotation_slerp_angle_axis(entity, axis, from, to, t)</code></li> <li>Transform - add <code>set_rotation_slerp_angle_axis_world(entity, axis, from, to, t)</code></li> <li>Transform - add <code>rotate_angle_axis_slerp(entity, axis, angle_amount)</code></li> <li>Transform - add <code>rotate_angle_axis_slerp_world(entity, axis, angle_amount)</code></li> </ul>"},{"location":"release-notes/engine/#202034","title":"2020.3.4","text":"<ul> <li>Runtime - allow background_sleep to affect headless apps</li> <li>World - add Scene.entity_forget for moving entities around manually</li> <li>UI - don't abort on &gt; 1000 events (can happen when file dialog is up)</li> <li>Compiler - add transient concept for compiling transient data in editor</li> </ul>"},{"location":"release-notes/engine/#202033","title":"2020.3.3","text":"<ul> <li>Wren - add continue keyword to use in loops</li> <li>Wren - skip type-style annotations in several places</li> <li>Wren - method arity checks are now reported as an error where possible</li> <li>Wren - method max parameters is now a compile time check</li> <li>Wren - improvements to the script check parsing + graceful failure</li> <li>Math - <code>random_point_in_unit_circle</code> streamlined by ronja</li> <li>Input - fix <code>Input.set_mouse_capture</code> to work as intended across platforms (tilman)</li> <li>Input - add <code>Input.mouse_x_rel()</code>/<code>Input.mouse_y_rel()</code> for capture use</li> <li>LX - add a stringify to json flag for strict json output</li> <li>UI - fix crash when control is destroyed while another is captured (ronja)</li> <li>UI - fix events not being cancelled for listeners (ronja)</li> <li>UI - fix a rogue wrenalyzer complaint about UIWindowChange (ronja)</li> <li>Assets - auto generated images have a <code>generate_mipmaps_at_load</code> added</li> <li>Camera - set2D/set3D for less confusion (set2D uses x/y/w/h and converts internally)</li> <li>Render - Resource IDs like images are passed to debug tools (e.g renderdoc)</li> <li>Render - Fix material override bug being wrong on web</li> <li>Render - Refactor FBO handling to be more strictly conformant (webgl2)</li> <li>Render - fix some issues running headless builds</li> <li>IO - fix http server issue on some platforms (tilman)</li> </ul>"},{"location":"release-notes/engine/#202032","title":"2020.3.2","text":"<ul> <li>IO - add logging for failure to create directories</li> <li>Anim - fix validation of animations so script errors happen (eva)</li> <li>UI - fix destroyed controls not updating marked state (ronja)</li> <li>UI - fix relative mouse offsets being wrong (ronja)</li> <li>UI - fix crash when marked update finds destroyed controls</li> <li>UI - custom events now have proper cancellable IDs and can be cancelled</li> <li>UI - fix bug where captured controls lose events due to new marked fix</li> <li>UI - fix scroll areas not updating when resized, they do now</li> <li>Render - fix bug in opengl backend causing many sprites to fail (jonathan)</li> <li>Transform - add change callbacks <code>listen(entity, fn)</code> / <code>listen_all(world, fn)</code> </li> <li>World - add <code>World.valid(world)</code></li> </ul>"},{"location":"release-notes/engine/#202031","title":"2020.3.1","text":"<ul> <li>Wren - Allow newline before a dot so you can do fluent syntax</li> <li>Wren - List now has <code>indexOf(item)</code> and <code>swap(index, other)</code></li> <li>Wren - Num now has <code>var max = 3.max(7)</code>, <code>.min(other)</code> and <code>num.clamp(0, 1)</code></li> <li>Astar - add 2D pathfinding API </li> <li>Anim - fix crashing when the entity an autoplay was queued for is gone</li> <li>Settings - fix string settings being stored as bool (??)</li> <li>luxe: pqueue - add MinPQ and MaxPQ priority queues</li> <li>Lists - <code>binary_search_first</code>, <code>remove_where</code>, <code>index_of_where</code> args</li> <li>Render - add vsync flag (<code>engine.render.vsync</code> now works)</li> <li>Render - pass layer can now use a basis</li> <li>Render - pass layer can now access <code>.dest</code> directly</li> <li>Render - add <code>Render.submit_fn</code></li> <li>Render - backend fixes for some incorrect strings (shader errors)</li> <li>Render - fix important viewport bug </li> <li>Render - can now correctly render to cubemaps</li> <li>Render - can now correctly render to mip levels of images</li> <li>Render - add missing <code>Image.destroy</code> and <code>Image.valid</code></li> <li>Render - add <code>view_inverse</code>, <code>proj_inverse</code>, and more to <code>View</code> inputs</li> <li>Runtime - filewatch fixes + also now respects dupes, ignores for N frames</li> <li>Runtime - fix a bunch of plugin bugs while testing a rust plugin</li> <li>Input - fix <code>set_mouse_capture(state)</code> capturing cursor like FPS games need</li> <li>World - add optional <code>into</code> arg to <code>World.world_point_to_view</code></li> <li>World - add <code>World.set_default(world)</code>/<code>World.get_default()</code></li> <li>World - add <code>Modifiers.has_system_in_world(modifier_id, world)</code></li> <li>World - wip: <code>Entity.valid</code> checked for modifier tick before sending</li> <li>World - Transform now has <code>sync_world(world)</code> and <code>sync(entity)</code></li> <li>UI - Fix custom events firing incorrectly (ronja)</li> <li>UI - Fix Text taking focus when things are above it (like editor scene buttons)</li> <li>UI - Fix text rendering (button/window/text/label) being delayed by a rendered frame</li> <li>UI - querying label metrics is now accurate at all times (brody)</li> <li>UI - Fix layout bugs (update recommendation from layout dev)</li> <li>UI - Fix enter/exit only happening on mouse move, and exit other bugs (ronja)</li> <li>docs - fix how to for <code>random</code> (jonathan)</li> <li>docs - document <code>Assets</code> API</li> <li>docs - document <code>luxe: containers</code>/<code>Lists</code>/<code>MapOrdered</code> API</li> <li>docs - document <code>luxe: draw</code>/<code>LineCap</code>/<code>LineJoin</code>/<code>PathStyle</code>/ API</li> <li>docs - document <code>luxe: editor</code>/<code>Editor</code> API</li> <li>docs - document <code>luxe: events</code>/<code>Events</code> API</li> <li>docs - document <code>luxe: game</code>/<code>Frame</code>/<code>Ready</code> API</li> <li>docs - document <code>luxe: id</code>/<code>ID</code> API</li> </ul>"},{"location":"release-notes/engine/#202030","title":"2020.3.0","text":"<p>Time for some clean up, yay project changes!</p>"},{"location":"release-notes/engine/#new-game-class","title":"new game class","text":"<p>In it's simplest form, a game class before 2020.3.0 looked like this: <pre><code>import \"luxe: game\" for Game\nclass game is Game {\n  construct ready() {\n    System.print(\"ready!\")\n  }\n}\n</code></pre></p> <p>This has changed to the following, as a more final form.  Notes: the <code>super</code> is required, the base class is now <code>Ready</code>,         and the actual class is called <code>Game</code>. <pre><code>import \"luxe: game\" for Ready\nclass Game is Ready {\n  construct ready() {\n    super(\"ready!\") //or just super() is fine\n  }\n}\n</code></pre></p>"},{"location":"release-notes/engine/#new-project-class","title":"New project class","text":"<p>Similarly, the project class has been finalized too. Before 2020.3.0: <pre><code>import \"luxe: project\" for Project\nclass project is Project {\n  construct new(target) {}\n}\n</code></pre></p> <p>And after: The base class is <code>Entry</code>, the actual class is <code>Project</code>,  and the constructor is called <code>entry</code> too. <pre><code>import \"luxe: project\" for Entry\nclass Project is Entry {\n  construct entry(target) {}\n}\n</code></pre></p>"},{"location":"release-notes/engine/#access-your-game-class","title":"Access your Game class","text":"<p>You can now reach the live instance of your game class anywhere.</p> <p>Just use <code>import \"luxe: game\" for Game</code>, this variable contains your game instance. For example, <code>Game.app</code> would be accessible from other scripts now.</p>"},{"location":"release-notes/engine/#default-input-maps","title":"default input maps","text":"<p>Previously input maps weren't loaded by the editor and the template didn't have one. This is better now, if you set <code>engine.input.entry</code> in your entry settings file, then the editor + the game will automatically load this input config for you. </p> <p>This means for example, previewing a scene in editor would work with the arcade module again, since it used input maps for input but there wasn't any loaded before.</p>"},{"location":"release-notes/engine/#new-main-loop","title":"New main loop","text":"<p>Renaming: Note that <code>World.tick_world</code> was renamed to <code>World.tick</code>,  and <code>World.tick_systems</code> was removed. We just use <code>World.tick</code> now.</p> <p>The main loop is getting closer to done too, so you now have access to it from anywhere and can schedule callbacks within it.  You can access it via <code>luxe: game</code> for <code>Frame</code> atm.  The system is a work in progress, but useful so far.</p> <p>The loop works based on sections, and at the moment those are predefined by luxe. They are <code>begin, init, sim, visual, end</code> in that order. Sim being simulation, as in the update function.</p> <p>You can use <code>Frame.on</code>, <code>Frame.before</code> and <code>Frame.after</code> to place callbacks in or around a section. These ones are recurring callbacks and happen every tick, they return a handle  that can be used with <code>Frame.off</code> to remove them.</p> <p>The other ones are once off callbacks. <code>Frame.queue</code> will run the callback at the end of the section that's running. <code>Frame.next</code> will run the callback at the start of a frame (before any sections) and <code>Frame.end</code> will runt the callback right at the end of the current frame (after all sections).</p> <p>As an example, empty project outline and samples now use it to update and render worlds. Note that you don't need to change anything in your project, it should still work as before even if you don't use this new form. <pre><code>//update our worlds\n  Frame.on(Frame.sim) {|delta|\n    World.tick(_world, delta)\n    World.tick(_ui_world, delta)\n  }\n//render our worlds\n  Frame.on(Frame.visual) {|delta|\n    World.render(_world, _camera, \"game\", {\"clear_color\":_color})\n    World.render(_ui_world, _ui_camera, \"ui\")\n  }\n</code></pre></p>"},{"location":"release-notes/engine/#animation-events","title":"Animation events","text":"<p>Animation tracks now have events, default ones, custom ones and a tick event.</p> <p>The default events are <code>start</code> and <code>complete</code> which fire when an animation begins playing and when it ends (via stop or otherwise). Note that these are  for the entire animation, not a particular track.</p> <p>For tracks, if you set <code>tick_event = true</code> in your anim asset for that track,  it will fire an event every time the animation is updated. This means you can now use an animation track to drive other things directly. Example below.</p> <p>The track also can have a list of custom events, which behave like keyframes. In this example, the animation is 0...1 on the timeline, but in the middle and quarter of the way through, a custom event will get fired each time that time is crossed. This let's you respond to keyframes directly, such as playing sounds or effects at key points. (note that an audio track is still coming, but this means you can use them already).</p> <pre><code>events = [\n  { time=0.25 event=\"quarter\" }\n  { time=0.5 event=\"middle\" }\n]\n</code></pre> <p>Listening to the events  The event handler is set on an animation instance, one that is returned from <code>Anim.play</code>. In the example below, the animation is fading in a mesh, but I'm using the tick event to also scale the mesh based on the values in the animation curve.  You can see it in action here: https://i.imgur.com/uYHNbOS.mp4 <pre><code>var anim = Anim.play(entity, \"anims/example\")\nAnim.on_event(entity, anim) {|entity, anim, time, value, track_type, track, event|\n  //event will be `tick`, `start`, `complete` or a custom value.\n  if(Strings.get(event) == \"tick\" &amp;&amp; Entity.valid(entity)) {\n    var scale = 9.5 + (0.5 * value)\n    Transform.set_scale(entity, scale, scale, scale)\n  }\n}\n</code></pre></p>"},{"location":"release-notes/engine/#ui-layout-api","title":"UI Layout API","text":"<p>There's a new modifier for doing dynamic layout with UI. It's documented in the layout tutorial here.</p>"},{"location":"release-notes/engine/#material-changes","title":"Material changes","text":"<p>The format of the material basis has changed a bit.  Some of the changes are a warning and some are an error. You can look at the default assets to see more examples, but here's the changes:</p> <p>Write mask used to be a string, and is now a map, like <code>write_mask = { red=true green=true blue=true alpha=true }</code>. Any values left out will mean false, so <code>write_mask = { red=true }</code> will write only to the red channel. </p> <p><code>samplers</code> have been removed, images are now a regular input and not in a separate section. This affects the basis file (<code>.material_basis.lx</code>), the material instances (<code>.material.lx</code>) and the <code>Material.set_image</code>/<code>Material.get_image</code> API. </p> <p>Images are accessed by name (not index like before), like other material inputs, so the API is now <code>Material.set_input(material, \"sprite.image\", image)</code> and <code>var image = Material.get_input_image(material, \"sprite.image\")</code>.</p> <p>Before (this is from <code>sprite.material_basis.lx</code>):</p> <pre><code>samplers = {\n  sprite.image = {\n    index = 0\n    type = \"image2D\"\n    sampler_state = \"linear_repeat\"\n  }\n}\ninputs = {\n  sprite.uv = {\n    type = \"float4\"\n    value = [0 0 1 1]\n  }\n  ...\n</code></pre> <p>After:</p> <pre><code>inputs = {\n  sprite.image = {\n    type = \"image\"\n    value = {\n      type = \"image2D\"\n      sampler_state = \"linear_repeat\"\n    }\n  }\n  sprite.uv = {\n    type = \"float4\"\n    value = [0 0 1 1]\n  }\n  ...\n</code></pre> <p>That's the basis, this is the material instances (this is from <code>logo.material.lx</code>): <pre><code>material = {\n  basis = \"luxe: material_basis/sprite\"\n  samplers = { 0 = \"luxe: image/logo\" }\n  inputs = {\n    sprite.color = [1 1 1 1]\n    sprite.uv = [0 0 1 1]\n  }\n}\n</code></pre></p> <p>After:</p> <pre><code>material = {\n  basis = \"luxe: material_basis/sprite\"\n  inputs = {\n    sprite.image = \"luxe: image/logo\"\n    sprite.color = [1 1 1 1]\n    sprite.uv = [0 0 1 1]\n  }\n}\n</code></pre> <ul> <li>docs - add wren intro</li> <li>docs - expand rendering concepts page</li> <li>docs - add UI basics + custom controls tutorial</li> <li>docs - document <code>UIEvent</code> </li> <li>input - add <code>all</code> node for convenience</li> <li>project - fix .luxeignore folders, <code>path/</code> now ignores path</li> <li>project - project class refactored and cleaned up</li> <li>project - added injected settings to entry settings </li> <li>project - magic settings: <code>project.name</code>, <code>project.version</code>, <code>project.package</code></li> <li>project - magic setting <code>project.build_type</code>, one of <code>dev</code> or <code>release</code></li> <li>outline - add default input map so e.g <code>arcade</code> just works</li> <li>samples - clear out old samples that were wrong, update ones that stay</li> <li>API - block in <code>Set</code> concept which will get used soon in more places</li> <li>game - add <code>engine.input.entry</code>, entry input asset to load</li> <li>game - main loop now running as sections with ranges + priorities</li> <li>game - main loop now accessible via <code>Frame</code> in <code>luxe: game</code></li> <li>game - add <code>Frame.next</code>, <code>Frame.end</code> and <code>Frame.queue</code></li> <li>game - game class refactored and cleaned up</li> <li>game - <code>luxe: game</code> for <code>Game</code>,<code>Renderer</code> for access from anywhere</li> <li>build - cache binary hash of binaries, so new builds trigger rebuilds</li> <li>world - renamed <code>World.tick_world</code> -&gt; <code>World.tick</code></li> <li>world - remove <code>World.tick_systems</code>, just <code>World.tick</code> is enough</li> <li>world - <code>Scene</code> scripts use <code>new(world)</code> + don't take an arg from <code>Scene.load</code></li> <li>world - add <code>World.clear(world)</code> which empties the world</li> <li>world - fix bug in <code>Entity.create</code> causing an internal assert (Whuop)</li> <li>tiles - add <code>get_color</code> and <code>set_color</code> per tile, in data + editor as well</li> <li>render - fix missing arg in Image.redefine (Ronja)</li> <li>render - material now has stencil refs (basis-&gt;material-&gt;geo)</li> <li>render - text now uses an array of images for fonts</li> <li>render - fixed bug with text bounds + vertical align being inverted</li> <li>render - mesh data in assets can specify stencil refs</li> <li>ui - add UIWindowChange for window change events </li> <li>ui - add layout helper (code only atm)</li> <li>ui - removed 'root' concepts in rendering, fixing several bugs + more efficient</li> <li>ui - <code>Control.set_events</code> is now plural, returns ID for <code>Control.unset_events</code></li> <li>ui - fix <code>enter</code> and <code>exit</code> meaning something different, now works as intended</li> <li>ui - fix scroll handles stealing focus even when not visible (Ronja)</li> <li>ui - add <code>UI.set_material_basis(ui, solid, text)</code></li> <li>strings - removed old <code>Glob</code> API (use <code>IO.wildcard_match(needle, haystack)</code>)</li> <li>material - shader library can now be specified per stage</li> <li>material - remove old samplers concepts + API (<code>Material.get_image/set_image</code>)</li> <li>material - write mask now a map <code>write_mask = { red=true green=true blue=true alpha=true }</code></li> <li>anim - tracks now have custom events <code>events=[{ time=0.5 event=\"event\" }, ...]</code></li> <li>anim - anim now fires <code>start</code> and <code>complete</code> events on begin/end</li> <li>anim - use <code>Anim.on_event</code> + <code>|entity, anim, time, value, track_type, track, event|</code></li> <li>log - fix bug in log error checking that caused an SDL_RW error on log.txt</li> <li>wren - add <code>Num.tau</code>, on instances: <code>num.max(val)</code>, <code>num.min(val)</code>, <code>num.clamp(min,max)</code>. </li> </ul>"},{"location":"release-notes/engine/#202020","title":"2020.2.0","text":"<p>Because of breaking changes, it's time for 2020.2.x Note that there may be a few more changes related to the same work in 2020.2.x,  it will always be clear what is changed.</p>"},{"location":"release-notes/engine/#ui-controls","title":"UI Controls","text":"<p>All UI controls (except Control itself, for now) now have  the UI prefix for consistency. That means <code>Button</code> becomes  <code>UIButton</code>, <code>Panel</code> =&gt; <code>UIPanel</code> etc. </p>"},{"location":"release-notes/engine/#image-api","title":"Image API","text":"<p>Previously the Image API was minimal and tucked under <code>Render.image_*</code>. <code>luxe: render</code> now has a proper <code>Image</code> class with a bunch of queries, a destroy function which was missing, and a <code>redefine</code> function, for resizing or recreating the same handle under a new ImageDesc.</p>"},{"location":"release-notes/engine/#transform-api","title":"Transform API","text":"<p>Some of the 2D focused APIs, namely <code>Transform.set_depth</code> changed to  <code>set_depth2D</code>, as well as <code>get_depth2D</code>. <code>set_angle2D</code> now has <code>get_angle2D</code>, and in both cases a <code>_world</code> variant for world vs local space exists too.</p> <ul> <li>paths - fix for windows mklink needing root first (bin link)</li> <li>Added 2D depth + angle get/set for world + local</li> <li>modifiers tick in order of their priority (tilman)</li> <li>material inputs fix potential bug for defaults</li> <li>UI controls renamed</li> <li>UI canvas now requires a camera (technically was optional before)</li> <li>UI - text was flickering weirdly on some GPUs (ronja)</li> <li>UI - renamed entity arg to ui_entity for clarity</li> </ul>"},{"location":"release-notes/engine/#202012","title":"2020.1.2","text":"<ul> <li>wren - fix some stack issues causing false script errors</li> <li>modules - fix some crashes in weird old code</li> <li>filewatch - fix some crashes due to pulling the rug on uv</li> <li>filewatch - paths normalized for consistency</li> <li>filewatch - fix bugs in add/remove e.g (bool same = strcmp(a,b))</li> <li>docs - document assert usage</li> <li>docs - update some sprite usage docs for clarity (eduardo)</li> <li>Lists.add_unique now returns true/false (true if added)</li> <li>ui - label now has color_hover options</li> <li>lx - add apply</li> </ul>"},{"location":"release-notes/engine/#202011","title":"2020.1.1","text":"<ul> <li>block in Render.submit_now()</li> <li>Str.path uses native path normalization for consistency</li> <li>new luxe root folder support</li> <li>fix newlines in descriptions for modifiers</li> <li><code>luxe: events</code> now uses proper hash combining</li> <li>webgl1 support fixes, including new shader support</li> </ul>"},{"location":"release-notes/engine/#202010","title":"2020.1.0","text":"<p>Another big release, lots of changes not listed likely...</p>"},{"location":"release-notes/engine/#new-versioning","title":"new versioning","text":"<p>The new 2020.x.x format is in use.  luxe 2020.1.x is compatible with editor 2020.1.x,  and will generally be stable or minor changes. This means any 2020.1.x update is safe,  where 2020.2.x might change bigger things.</p>"},{"location":"release-notes/engine/#new-projectmoduleslx","title":"new project.modules.lx","text":"<p>This file tracks dependencies and metadata, including the version of luxe your project is using.</p>"},{"location":"release-notes/engine/#latest-wren","title":"latest wren","text":"<p>Previously luxe was a few years behind wren for reasons. It's now using the latest version.</p>"},{"location":"release-notes/engine/#new-prototypes","title":"new prototypes","text":"<p>The new runtime based prototypes are online and  mostly working, variants too. They're editable in the editor and can be spawned and created from there. Modifiers can be  attached to instances once spawned, and overrides applied. There's also a newer api for dealing with the inner elements. Prototypes are now also an entity that is returned.</p>"},{"location":"release-notes/engine/#y-is-now-up-in-2d","title":"Y+ is now up in 2D","text":"<p>Matches with 3D, fixes math to be consistent with trig functions, makes animation curves not upside down, and much more. Note that UI is still y+ down from top left origin.</p>"},{"location":"release-notes/engine/#updated-samples","title":"updated samples","text":"<p>Many samples were migrated for Y+ up and moved to system tests. This means they're a bit easier to read and understand,  have a readme and more. The sample template is now  also part of the API meaning samples share the same code.</p>"},{"location":"release-notes/engine/#_luxedata-is-gone-luxe-is-used","title":"<code>_luxe.data</code> is gone, <code>.luxe</code> is used","text":"<p>Delete <code>_luxe.data</code> from any project, it will error on random issues.</p>"},{"location":"release-notes/engine/#changes","title":"changes","text":"<ul> <li>audio - latest soloud</li> <li>script - fix clang windows + computed gotos (faster)</li> <li>script - fix memory leak on certain (failed) file reads</li> <li>script - fix leaks from scripts loaded to wren</li> <li>assets - fix size limit of 2gb on parcels</li> <li>lx - API usage now tracks source names for better errors</li> <li>lx - fix keys with dots in working with get/set/remove</li> <li>lx - now using native LX parser, much faster overall</li> <li>io - add time_since_epoch_utc</li> <li>io - add hash file</li> <li>events - add clear_all for tag</li> <li>spaces - in user names shouldn't break anymore</li> <li>shaders - add ref keyword</li> <li>text - fix many alignment and layout bugs</li> <li>anim - fix memory leaks on certain tracks</li> <li>anim - interpolation is now per key, fallback to track</li> <li>anim - layers -&gt; tracks</li> <li>anim - fix autoplay happening too early, fixes crashes</li> <li>anim - fix major bug on anim stop, affecting other anims</li> <li>tags - fix bug when removing tag that doesn't exist crashes</li> <li>draw - added rect detailed</li> <li>draw - circle conventions made consistent</li> <li>draw - fix circles having off by one error</li> <li>draw - ui - text now uses unique material, so no glitching</li> <li>transform - fix bug where linked entities stayed on destroy</li> <li>transform - add get_link/get_linked</li> <li>transform - add get/set world component wise</li> <li>transform - add set_euler_*_world</li> <li>transform - add get_euler_*_world</li> <li>transform - links in data are now uuid, not name</li> <li>transform - initial snap setting (for pixel snap, set to 1)</li> <li>UI - added draw rect detailed</li> <li>UI - add render mode settings (in world vs to image)</li> <li>UI - now works as intended in world space automatically</li> <li>UI - control/scroll/list: add get index for control</li> <li>UI - fix bug when control is invalid breaks further events</li> <li>UI - add window text/title size, redefine set_collapsed</li> <li>UI - fix dead entities existing in the UI &lt;-&gt; entity map</li> <li>UI - fix entities not destroying UI on destroy</li> <li>UI - fix render data cleanup on destroy</li> <li>bytes - add BytesWriter</li> <li>outlines - empty - add cameras to defaults</li> <li>deploy - fix luxe path when version is dev</li> <li>project - use project.modules.lx for dependencies</li> <li>project - now uses native wildcard, speeds up a lot</li> <li><code>luxe: array</code> - renamed to <code>luxe: containers</code></li> <li>Lists - add prepend/append</li> <li>added <code>luxe: test</code>, initial unit testing basis</li> <li>modules - version solver integrated (not active yet)</li> <li>text - Text.get_extents(entity) (no args)</li> <li>text - add get/set material</li> <li>modifiers - fix bug where path doesn't exist on create (tilman)</li> <li>modifiers - fix cached build state being wrong, now reliable</li> <li>modifiers - blocks are now refactored for the new workflow</li> <li>string - add quick wrap() helper</li> <li>string - add path_is_absolute</li> <li>input - add Input.deadzone(x, y, zone) for convenience</li> <li>scenes - fix multiple modifiers of same type in many layers</li> <li>scenes - fix compiling scenes from modules</li> <li>shape2d - add destroy</li> <li>shape2d - add get_bounds</li> <li>phys3d - add capsule shape</li> <li>phys3d - add cast_shape</li> <li>phys3d - add set_allow_rotation</li> <li>phys3d - add query_sphere and query_box</li> <li>phys3d - fix major bug in debug mode vs release (scaling)</li> <li>tiles - add get_all</li> <li>tiles - add get all with visual</li> <li>tiles - fix bugs with pairing functions on web target</li> <li>tiles - fix bug with tile not changing</li> <li>values - add has_key</li> <li>values - fix editor changing values</li> <li>values - add clear</li> <li>math - add random_point_in_unit_circle</li> <li>math - add smoothstep, smootherstep, weighted_avg</li> <li>math - add map_linear, nearest_power_of_two, within_range</li> <li>math - add wrap_radians, wrap_angle, lerp_angle, angle_delta</li> <li>render - add trilinear sampler states</li> <li>render - add material input blocks</li> <li>render - refactor material inputs for consistency and usage</li> <li>render - render pass layers now use material inputs (breaking)</li> <li>render - layers + images now have a display_id (renderdoc)</li> <li>image - add generate_mips flag in image.lx</li> <li>image - load before basis since they can be used as defaults now</li> <li>settings - load settings before game.wren</li> <li>build - fix script compiler error about a newline after a dot</li> </ul>"},{"location":"release-notes/engine/#100-dev86","title":"1.0.0-dev.86","text":"<ul> <li>tiles - fixed crash on querying empty tilemap for tags</li> <li>tiles - fixed crash in removing tiles in editor</li> <li>script - allow release builds access to modules opt in</li> </ul>"},{"location":"release-notes/engine/#100-dev85","title":"1.0.0-dev.85","text":"<ul> <li>io - added file watch events on desktop</li> <li>log - try more resilient log writes over cwd</li> <li>log - add log level control from entry settings</li> <li>settings - add Settings.apply</li> <li>render - blocked in image redefinition for later</li> <li>world - add <code>Scene.entity_list</code></li> <li>world - add <code>Prototype.entity_list</code></li> <li>modifiers - require 'class' field in modifier.lx</li> <li>modifiers - prevent using keywords in fields (tilman)</li> <li>modifiers - fix bugs in modifiers with booleans</li> <li>moduler - disable old auto download properly</li> </ul>"},{"location":"release-notes/engine/#100-dev84","title":"1.0.0-dev.84","text":"<ul> <li>docs - new docs for <code>Sprite</code>, <code>Anim</code> and more.</li> <li>settings - add background_sleep setting to window</li> <li>debug - fixed wren debugger on linux</li> <li>sat2d - fix returns no overlap on missed circle collision</li> <li>render - fix crash accessing out of bounds images</li> <li>tiles - add Tile api for set/get tile size</li> <li>tiles - fixed internal data desync as depth/coord change</li> <li>wren - fixed += etc not being allowed by script compiler</li> </ul>"},{"location":"release-notes/engine/#100-dev83","title":"1.0.0-dev.83","text":"<ul> <li>web - web deploy should work again</li> <li>world - Scene, Layer, Prototype now exist (not on World.*)</li> <li>anim - renamed animation layers -&gt; tracks</li> <li>text - fixed vertical align with bounds &gt; 1 line</li> <li>render - added sort_by_z, sort_by_z_reverse, none</li> <li>build - fixed bug causing run to fail on prior errors</li> <li>build - fixed jump to error for project.luxe files</li> <li>docs - added link to wren in workflow</li> <li>docs - added a few more tutorials</li> <li>docs - cleaned up some details</li> <li>Sprite - added <code>Sprite.contains(entity, x, y)</code></li> <li>ui - scroll handles block mouse events leaking</li> <li>engine - added event stream for e.g resized</li> </ul>"},{"location":"release-notes/engine/#100-dev82","title":"1.0.0-dev.82","text":"<ul> <li>anim - system refactored, data changed. see samples!</li> <li>anim - return instance handles, api uses them now</li> <li>anim - repeats renamed to play_count</li> <li>anim - loop=true/false added to data files</li> <li>anim - added anim modifier, with auto play list</li> <li>anim - fixed transform anims in edit mode</li> <li>anim - add reset on stop, so state can be reverted</li> <li>anim - add y range (so y can be relative or absolute)</li> <li>anim - add play_only for solo playing</li> <li>tiles - fix bugs in painting tiles</li> <li>camera - add get/set default for a world</li> <li>camera - get_fov_vertical, get_near, get_far, get_aspect</li> <li>camera - get_projection</li> <li>entity - Entity.world -&gt; Entity.get_world</li> <li>world - systems have a priorty to sort by (temporary)</li> <li>transform - add get_rotation_matrix</li> <li>transform - add look at, set angle axis, rotate angle axis</li> <li>transform - scene load now tries linking objects on load</li> <li>mesh - add control over enabled and active mesh levels</li> <li>mesh - add level/element count getters</li> <li>ui - select all with cmd-a/ctrl-a in text fields</li> <li>ui - add component-wise size getters for controls</li> <li>ui - fix controls crossing UI canvas owners</li> <li>ui - add engine.ui.debug_vis setting</li> <li>ui - add input graph node setting to canvas</li> <li>ui - add window close/collapse functions</li> <li>ui - add canvas enumeration</li> <li>sat2d - fix shape sweeps, poly vs poly edge case</li> <li>sat2d - return intersected, normals for sweeps</li> <li>physics - don't simulate in edit mode</li> <li>physics2d - now using bullet only, liquidfun is gone</li> <li>physics2d - refactor APIs a lot. Body2D. see samples</li> <li>physics3d - blocking in 3d apis</li> <li>bytes - add clear, write_uuid</li> <li>math - add distance for vectors, lerp</li> <li>string - fix for fixed function broke on non decimals</li> <li>assets - string data loaded in release builds</li> <li>assets - wip packable modules</li> <li>io - added zip_decompress for byte decompression</li> <li>settings - fixed bool type (fullscreen flag now works)</li> <li>window - x/y positions can be set from settings</li> <li>window - engine.runtime.window.display for which monitor</li> <li>render - better error messages in several places</li> <li>render - fix array images internally (data driven atm)</li> <li>render - added array types to material inputs/shaders</li> <li>render - send camera pos and world matrix to shaders</li> <li>render - add image generate mipmaps helper</li> <li>render - add tick to renderer script</li> <li>render - add R and RG image types</li> <li>wren - experimental debugger support via vscode</li> <li>wren - added Num log2 and exp</li> <li>wren - fixed script compiler missing new fields</li> <li>wren - optimized script compiling, more reliable now</li> <li>wren - added <code>+= -= /= *= &amp;= |= &gt;&gt;= &lt;&lt;= ^= %=</code></li> </ul>"},{"location":"release-notes/engine/#100-dev81","title":"1.0.0-dev.81","text":"<ul> <li>web builds are back (<code>luxe deploy --target web</code>)</li> <li>image - add api for getting bytes from an image</li> <li>camera - add apis for get/set matrices</li> <li>camera - add look at, clip to world and world to clip</li> <li>tiles - apis for grabbing tiles by tag and depth</li> <li>fonts - fix accessing invalid pages sometimes</li> <li>bytes - fix <code>pos=</code> assertions</li> <li>fix CI for linux builds + include linux build</li> </ul>"},{"location":"release-notes/engine/#100-dev80","title":"1.0.0-dev.80","text":"<ul> <li>important world bug fixes</li> <li>added settings.lx loading </li> </ul>"},{"location":"release-notes/engine/#100-dev79","title":"1.0.0-dev.79","text":"<ul> <li>update samples and readmes for samples</li> </ul>"},{"location":"release-notes/engine/#100-dev78","title":"1.0.0-dev.78","text":"<ul> <li>fixed custom modifiers</li> <li>lots of other stuff</li> </ul>"},{"location":"release-notes/launcher/","title":"luxe launcher release notes","text":""},{"location":"release-notes/launcher/#0021","title":"0.0.21","text":"<ul> <li>add new project wizard screen with folder choice</li> <li>fix download issue on mac/linux</li> <li>refactor everything so we can iterate more</li> </ul>"},{"location":"release-notes/launcher/#0018-20","title":"0.0.18-20","text":"<ul> <li>add download latest to module list</li> <li>add run project button on projects</li> <li>add \"show remote\" toggle to modules</li> <li>add search to projects and modules</li> <li>add some crash resilience </li> <li>show running state for samples</li> </ul>"},{"location":"release-notes/launcher/#0017","title":"0.0.17","text":"<ul> <li>fix crash when leaving tools + settings page too quickly</li> </ul>"},{"location":"release-notes/launcher/#0016","title":"0.0.16","text":"<ul> <li>fix linux: remove Str.lower on paths (obviously) breaking across platforms</li> <li>fix default antialiasing being too high (breaks on linux sometimes)</li> </ul>"},{"location":"release-notes/launcher/#0014","title":"0.0.14","text":"<ul> <li>fix some path discrepancies bugs</li> <li>fix new projects not being highlighted correctly</li> <li>fix some crashes on agent helper when switching away</li> <li>fix missing previews when adding a module to a project</li> <li>fix missing previews elsewhere</li> </ul>"},{"location":"release-notes/launcher/#0013","title":"0.0.13","text":"<ul> <li>modules can now specify executables to fix cross platform</li> </ul>"},{"location":"release-notes/launcher/#0012","title":"0.0.12","text":"<ul> <li>initial sample viewer for modules</li> <li>display project + sample preview images</li> <li>fix multiple outlines in a single version</li> </ul>"},{"location":"release-notes/launcher/#0011","title":"0.0.11","text":"<ul> <li>fixes for renaming user</li> </ul>"},{"location":"release-notes/launcher/#009-0010","title":"0.0.9 - 0.0.10","text":"<ul> <li>agent fixes for sorting versions</li> </ul>"},{"location":"release-notes/launcher/#006-008","title":"0.0.6 - 0.0.8","text":"<ul> <li>add initial agent support </li> <li>download/manage tools are now present when viewing a module</li> <li>added more logging for certain issues </li> <li>added settings (currently only one dev related setting)</li> </ul>"},{"location":"release-notes/launcher/#005","title":"0.0.5","text":"<ul> <li>fix text rendering on some GPUs (ronja)</li> <li>latest luxe (2020.2.0)</li> </ul>"},{"location":"release-notes/launcher/#004","title":"0.0.4","text":"<ul> <li>uses new luxe paths</li> <li>fix mac launching editor without opening project</li> <li>fix mac status for running editors</li> <li>fix string wrapping issues</li> <li>fixed missing modules not showing in project edit (brody)</li> <li>fixed missing modules using any installed dev version</li> <li>fix log locations for editor on mac (right click project)</li> <li>update editor/engine list on install/remove, so projects see it</li> </ul>"},{"location":"release-notes/launcher/#003","title":"0.0.3","text":"<ul> <li>add right click luxe version to set bin path</li> <li>add settings menu for set bin path</li> <li>fix bin path not activating post install</li> </ul>"},{"location":"tutorials/overview/","title":"overview","text":""},{"location":"tutorials/overview/#tutorials","title":"Tutorials","text":""},{"location":"tutorials/overview/#goals-and-overview","title":"Goals and overview","text":"<ul> <li>Learn the basics!</li> <li>But also, learn what tools luxe has available</li> <li>and learn idiomatic workflows to do things</li> <li>and learn about editor vs code workflows, and mixing</li> </ul>"},{"location":"tutorials/overview/#getting-started","title":"Getting started","text":"<p>These tutorials are set up in order, they're fairly short  and will teach you to useful concepts that will expand on each other.</p> <ul> <li>Hello luxe!</li> <li>Draw and Input</li> <li>The luxe world</li> <li>The luxe editor</li> <li>Deploy a build</li> <li>Playing Audio</li> </ul>"},{"location":"tutorials/audio/","title":"playing audio","text":""},{"location":"tutorials/audio/#audio","title":"Audio","text":"<p>Audio is a major and important part of making a game feel good.  It is often underlooked and can make a huge difference in how a game feels.</p> <p>outcome</p> <p>In this tutorial we'll add audio to our bee game.  We'll see how to import audio content, play sounds and use audio buses for volume control.</p>"},{"location":"tutorials/audio/#audio-roadmap","title":"Audio Roadmap","text":"<p>While the basic audio system is usable and works, there's a more extensive version we are implementing. It was designed/spec'ed with the good folks at A Shell In The Pit as they have a lot of experience doing and implementing audio at our target scale. </p>"},{"location":"tutorials/audio/#importing-audio-content","title":"Importing audio content","text":"<p>Since audio tends to be fairly straight forward from a content perspective, all we need to do is drop some audio assets into our project. When we build, the asset pipeline will automatically generate the necessary <code>audio.lx</code> metadata files for us to use!</p> <p>For our bee game example, we're going to use a useful website called Freesound.org - they provide an invaluable service for getting audio to prototype with or use for your game. Make sure you pay attention to the requirements for each sound that you download!. </p> <p>It is good practice to credit every sound properly as well, even if it doesn't require it.</p>"},{"location":"tutorials/audio/#sounds-well-use","title":"Sounds we'll use","text":"<p>Instead of music, we're going to be using ambience. We know our game takes place above the rooftops, so we'd like a sort of city atmosphere. We also have a bouncing sound - one when the bee bounces without a flower, and one when we do bounce on the flower. In our case, we aim to find some sounds that don't require editing, and can be used roughly as is. </p> <ul> <li>City sound - author </li> <li>Flower bounce - author</li> <li>Bee bounce - author</li> </ul> <p>We'll bring these into a folder called <code>audio/</code> along with the credits file (this way when it's time to credit properly we can make sure we didn't forget anything):</p> <p></p> <p>If we run a build, we can see that the asset pipeline took care of generating the data needed to load + use the audio already:</p> <p></p>"},{"location":"tutorials/audio/#playing-some-audio","title":"Playing some audio","text":"<p>The background sound is an easy one - we simply play it in the <code>ready</code> function in our game. </p> <p>Import the audio API in game.wren if it isn't there</p> <pre><code>import \"luxe: audio\" for Audio\n</code></pre>"},{"location":"tutorials/audio/#looping-a-sound","title":"Looping a sound","text":"<p>Often we'll want a sound to loop continously - the API makes this easy with <code>Audio.loop(...)</code>. Like with other assets, we should see them in code completion when we go reach for one using the <code>Asset.audio</code> api like this:</p> <p></p> <p>That's it really! The basic usage of audio is really simple. There's also <code>Audio.play</code> for one shot sounds.</p> <p>Play the background sound right before you load the scene in your game!</p> <pre><code>var bg_sound = Asset.audio(\"audio/city\") \nAudio.loop(bg_sound)\n\nScene.create(world, Asset.scene(\"scene/level\"))\n</code></pre>"},{"location":"tutorials/audio/#bounce-sound","title":"Bounce sound","text":"<p>When the bee collides with something, we'll play our bounce sound. We already have a function that does stuff when we collide with something, so for now we just play our sound in here.</p> <pre><code>handle_collision() {\n\n  Arcade.add_collision_callback(player) {|entity_a, entity_b, state, normal, overlap_dist|\n    if(state != CollisionEvent.begin) return\n\n    Audio.play(Asset.audio(\"audio/bounce.bee\"))\n\n  ...\n\n  }\n} //handle_collision\n</code></pre>"},{"location":"tutorials/audio/#sound-spam","title":"Sound spam","text":"<p>If you play the game and bounce around, you should hear the sound playing. This works well, but sometimes we land on a surface and it plays the sound way too many times in rapid succession! This is a common problem with audio, so we need to not play it too frequently. We'll do a very simple timer to prevent it spamming the sound.</p> <p>To do that we'll add a new variable to our class:</p> <pre><code>var last_bounce: Num = 0\n</code></pre> <p>And change our audio play line to check how much time has passed, and don't play it if it was already played recently (we use 0.25 seconds):</p> <pre><code>if(World.time(world) &gt; last_bounce + 0.25) {\n  last_bounce = World.time(world)\n  Audio.play(Asset.audio(\"audio/bounce.bee\"))\n}\n</code></pre>"},{"location":"tutorials/audio/#flower-sound","title":"Flower sound","text":"<p>We also play an additional sound when we bounce on the flower. The sounds combining is intentional, as it should create a nice mix of sound in this case.</p> <p>We already have code handling what happens when you bounce on a flower, so it's as easy as adding one line:</p> <pre><code>if(Tags.has_tag(entity_b, \"flower\")) {\n  Anim.play(entity_b, \"anim/bounce\")\n  Audio.play(Asset.audio(\"audio/bounce.flower\"))\n}\n</code></pre>"},{"location":"tutorials/audio/#the-audio-bus","title":"The audio bus","text":"<p>It's common for games to have a volume slider for Sounds, Music and Voices as separate sliders. The term for that is \"audio bus\", we play sounds on the SFX bus and so on. We always have global volume control as well, as everything will eventually come out the main bus (global bus). So how do we do that in luxe?</p> <p>It's possible your outline has created default buses for you! We'll cover how they're made either way.</p>"},{"location":"tutorials/audio/#creating-a-bus-asset","title":"Creating a bus asset","text":"<p>Defining a bus is often done as an asset so it can be referenced easily in the Audio API.  We'll do that inside <code>audio/bus/</code> by creating a <code>sounds.bus.lx</code> and <code>ambience.bus.lx</code>.</p> <p>Create a file called <code>audio/bus/sounds.bus.lx</code></p> <p>Create a file called <code>audio/bus/ambience.bus.lx</code></p> <p>Inside both files, we have a very simple volume value! </p> <p>Typically, we don't default sounds to 100% - this is bad practice. The user can adjust the audio themselves as needed.</p> <pre><code>bus = {\n  volume = 0.75\n}\n</code></pre>"},{"location":"tutorials/audio/#using-a-bus-asset","title":"Using a bus asset","text":"<p>There should be a simpler API for playing the sound on a bus without many args, and the function to move a sound to a bus is missing on the Wren side of the API. This is a WIP!</p> <p>Here's the variant of <code>Audio.play</code> (and <code>Audio.loop</code>) that accepts a bus:</p> <p><code>Audio.play(source: AudioAsset, as3D: Bool, bus: AudioBus, volume: Num)</code></p> <p>Like before, we get the completion since our bus is an asset, and we grab it from <code>Audio.bus</code>:</p> <p></p> <p>Change your sound effects to use the sounds bus, and the city ambience to use the ambience bus!</p> <pre><code>if(World.time(world) &gt; last_bounce + 0.25) {\n  last_bounce = World.time(world)\n  Audio.play(Asset.audio(\"audio/bounce.bee\"), false, Asset.bus(\"audio/bus/sounds\"), 1)\n}\n</code></pre> <p>And the ambience:</p> <pre><code>Audio.loop(bg_sound, false, Asset.bus(\"audio/bus/ambience\"), 1)\n</code></pre> <p>Notice that each sound has it's own relative volume as well! The flower bounce sound, sounds a bit too loud compared to the bounce, so the flower bounce volume when playing the sound can be tweaked in the play call e.g to <code>0.5</code> volume.</p>"},{"location":"tutorials/audio/#setting-the-volumes","title":"Setting the volumes","text":"<p>So we have a few layers of sound volumes to control:</p>"},{"location":"tutorials/audio/#individual-sound-volume","title":"Individual sound volume","text":"<p>There's two places typically, on <code>play/loop</code> you can specify a volume to start with or you can use the audio api to change the volume after playing it:</p> <pre><code>//change flower bounce audio manually\nvar sound = Audio.play(...)\nAudio.volume(sound, 0.5)\n</code></pre>"},{"location":"tutorials/audio/#bus-volume","title":"Bus volume","text":"<p>To control the bus volume for <code>sounds</code> or <code>ambience</code> (as you might do in a UI!) we use the <code>Bus</code> API.</p> <pre><code>import \"luxe: audio\" for Audio, Bus\n</code></pre> <p>And then we can call the set (or get) the volume:</p> <pre><code>Bus.set_volume(Asset.bus(\"audio/bus/ambience\"), 0.75)\nBus.set_volume(Asset.bus(\"audio/bus/sounds\"), 0.75)\n</code></pre> <p>If you'd like to experiment, add this to your <code>tick</code> method in your game. What this does is calculate a <code>0...1</code> value (ratio) of where your mouse is horizontally on the window. The further left the mouse is the quieter the volume of the ambience, and the further right the louder it will be.</p> <pre><code>var dx = Input.mouse_x() / width \nBus.set_volume(Asset.bus(\"audio/bus/ambience\"), dx)\n</code></pre> <p>When you do this, you'll notice the sounds are unaffected by the volume change.</p>"},{"location":"tutorials/audio/#global-volume","title":"Global volume","text":"<p>Woops! The global volume API wasn't exposed to Wren - it will be in the next build</p>"},{"location":"tutorials/audio/#try-this","title":"Try this","text":"<p>Experiment with the audio api using the sound instances returned by playing a sound</p>"},{"location":"tutorials/deploy/","title":"deploy a build","text":""},{"location":"tutorials/deploy/#deploying-a-build","title":"Deploying a build","text":"<p>A quick look at making a build for a luxe game that you can share.</p> <p>outcome</p> <p>In this tutorial we'll make a build of our bee game.  We'll see how to use the editor, vscode, and the terminal to do it.</p>"},{"location":"tutorials/deploy/#the-_luxedeploy-folder","title":"The <code>_luxe.deploy/</code> folder","text":"<p>When you deploy a build with luxe, currently it places the builds into a folder called <code>_luxe.deploy/</code> inside the project.</p> <p></p> <p>The contents of the folder is a versioned build separated by build target/platform. This makes it easy to zip a folder (e.g <code>beeluxe-0.0.1-windows</code> -&gt; <code>beeluxe-0.0.1-windows.zip</code>) and upload the file directly or share with a friend.</p> <p>You'll notice that we have multiple platforms here - You can build for other platforms from the one you are on, as long as you're on the main path. </p> <p>The build is cross platform - but there are some nuances (e.g executable flag on linux/mac) to beware of when sharing a build.</p>"},{"location":"tutorials/deploy/#itchio","title":"itch.io","text":"<p>A common place to share your games with others is https://itch.io - which is free and allows making your game available for others to play. </p> <p></p> <p>Their system deals with cross platform details mentioned above, so if you made a zip of each of these folders and uploaded it to itch.io following their documentation and guidelines, you're good to go. You can also join game jams or host one and a lot more.</p>"},{"location":"tutorials/deploy/#versioning","title":"Versioning","text":"<p>Note that the builds use the project version number in the folder - but will overwrrite the existing build if you build multiple times with the same version number.</p> <p>Versioning is important</p> <p>Update your version inside <code>luxe.project/version.lx</code> each time you build, or back up your builds! You can also automate the version number changing every time you deploy - see this dev log for now.</p>"},{"location":"tutorials/deploy/#deploy-from-visual-studio-code","title":"Deploy from Visual Studio Code","text":"<p>Currently, deploying from vscode only deploys for the target you are developing on</p> <p>If you visit the <code>Terminal</code> menu on the main menu bar, you'll find a <code>Run Task...</code> menu option:</p> <p></p> <p>Inside it, there's a category for <code>luxe</code>, as well as previously used ones if any (usually none at first). </p> <p></p> <p>And inside the luxe folder, we have some options, one of which is <code>luxe: deploy - Deploy the project</code>.</p> <p></p> <p>Selecting this option will drop the latest build for the platform you're using into the folder and print some info:</p> <p></p>"},{"location":"tutorials/deploy/#deploy-from-the-luxe-editor","title":"Deploy from the luxe editor","text":"<p>Inside the editor in the project context (the default one you start on), there's a section for deploying a build for various targets.</p> <p></p> <p>If you hit deploy, give it a few seconds to finish up and it should open the folder containing the builds.</p>"},{"location":"tutorials/deploy/#deploy-from-a-terminal","title":"Deploy from a terminal","text":"<p>You can also deploy from the terminal or command line. The syntax is <code>luxe deploy</code> with <code>--target &lt;platform&gt;</code>.</p> <p>By default, luxe creates a shortcut to the latest luxe binary inside your user folder, such as:</p> <ul> <li><code>~/.luxe/bin/luxe</code></li> <li><code>C:\\Users\\USER\\.luxe\\bin\\luxe</code></li> </ul> <p>We can use this to always find a luxe binary typically. We can specify more than one target as well, by specifying <code>--target</code> multiple times. You can enter something like this into your terminal of choice, and hit enter to deploy the build. </p> <p><code>c:\\Users\\ruby\\.luxe\\bin\\luxe deploy --target mac --target windows --target linux</code></p> <p>Or on mac/linux:</p> <p><code>~/.luxe/bin/luxe deploy --target mac --target windows --target linux</code></p> <p></p>"},{"location":"tutorials/deploy/#additional-flags","title":"Additional flags","text":"<p>Any flags passed to the deploy action will be available inside your <code>project.luxe</code> file, allowing you to do different things for different builds. </p> <p>For example we use a <code>--steam</code> flag to signal that we want to copy additional binaries and bump the version explicitly when deploying for Steam.</p> <p>See this dev log for now but here is an example of accessing the flags:</p> <pre><code>postdeploy() {\n\n  import \"luxe: io\" for IO\n  var flags: Flags = IO.flags()\n  var do_copy = flags.has(\"copy\")\n\n  if(do_copy) {\n    //do something\n  }\n\n} //postdeploy\n</code></pre>"},{"location":"tutorials/deploy/#try-this","title":"Try this","text":"<p>Make a build</p> <p>Make a build of your tutorial progress and share it with a friend or community.</p>"},{"location":"tutorials/draw-and-input/","title":"drawing + input","text":""},{"location":"tutorials/draw-and-input/#draw-input","title":"Draw + Input","text":"<p>Drawing primitives and handling basic input.</p> <p>outcome</p> <p>In this tutorial we'll use the Draw api to put something on screen.  We'll also use the Input Query API for handling prototype style input.</p> <p>We'll make a simple game where pressing a key will drop  a pebble from a random position at the top of the screen.  The player will have to catch that pebble with the mouse.</p>"},{"location":"tutorials/draw-and-input/#play-it","title":"Play it","text":"<p>Click first, then press Space to create pebbles.</p>"},{"location":"tutorials/draw-and-input/#preparation","title":"Preparation","text":"<p>We'll continue from our empty project before, and make it even emptier. We'll take away the logo and the color changing background!</p> <p>do this</p> <p>Remove all of these highlighted lines from your <code>game.wren</code> file.</p> <pre><code>class Game is Ready {\n\n  var logo = Entity.none\n\n  construct ready() {\n\n    super(\"ready! %(width) x %(height) @ %(scale)x\")\n\n    logo = Entity.create(world)\n    Transform.create(logo)\n    Sprite.create(logo, Assets.material(\"luxe: material/logo\"), 128, 128)\n\n  } //ready\n\n  tick(delta: Num) {\n\n    Transform.set_pos(logo, mouse.x, mouse.y)\n\n    if(Input.key_state_released(Key.escape)) {\n      IO.shutdown()\n    }\n\n    color.r = color.g = color.b = (IO.timestamp()/40 % 0.15)\n\n  } //tick\n\n} //Game\n</code></pre> <p>imports</p> <p>When you want to use a tool (an API) in luxe, you need to import it first.  Since we're about to use the color API, we'll add an import for it at the top of our <code>game.wren</code> file with the other imports.</p> <pre><code>import \"luxe: color\" for Color\n</code></pre> <p>Next, we'll add one line to the background color, and this is what it should look like:</p> <pre><code>class Game is Ready {\n\n  construct ready() {\n\n    super(\"ready! %(width) x %(height) @ %(scale)x\")\n\n    color = Color.white\n\n  } //ready\n\n  tick(delta: Num) {\n\n    if(Input.key_state_released(Key.escape)) {\n      IO.shutdown()\n    }\n\n  } //tick\n\n} //Game\n</code></pre>"},{"location":"tutorials/draw-and-input/#game-variables","title":"Game variables","text":"<p>Our game is going to need a few variables to store information, so let's create some. Class variables go before anything else in the class (after the first <code>{</code>) and look like this:</p> <pre><code>var name: Type = value\n</code></pre> <p>The type is optional, as it can know the type of a lot of the time. For example, <code>var number = 3</code> will show up as <code>var number: Num = 3</code> with what is called an \"inlay hint\" telling you it knows that number is well, a number!</p> <p>Add a variable called pebbles, as a list. The syntax for a list is <code>[]</code> which just means, a list with nothing in it (yet).</p> <p>We'll also add one for our drawing context, which we'll talk about next.</p> <p>And lastly, we need a random number generator. Let's make one right here, because you can run code to initialize values.</p> <p>variables must be initialized to some value!</p> <pre><code>class Game is Ready {\n\n  //A list of pebbles on screen\n  var pebbles: List = []\n  //Our drawing context\n  var draw: Draw = null \n  //A random number generator\n  var random = Random.new()\n\n  construct ready() {\n</code></pre> <p>import random</p> <p>Before this code will run, we need to import the random module from Wren.  This one module is a bit different and is imported as <code>import \"random\" for Random</code></p> <p>Add this line at the top of your file.</p>"},{"location":"tutorials/draw-and-input/#the-draw-tool","title":"The <code>Draw</code> tool","text":"<p>With luxe, there are a bunch of tools and services available to quickly explore ideas and try things out. </p> <p>One of those, is called <code>Draw</code>, it provides shape drawing, text drawing and more. It can be used for debug visualization, for whole games, and for immediate or cached rendering both.</p>"},{"location":"tutorials/draw-and-input/#creating-a-draw-context","title":"Creating a <code>Draw</code> context","text":"<p>A context is a bit like a canvas, it remembers the things you drew, and when you're done you can commit the changes to it, which will display it. To create one, we'll have to ask the world for a render set - something you'll learn more about in future - but for now, this is how you do it.</p> <p>Add a line that initializes our draw variable, to a new <code>Draw</code> context.</p> <pre><code>  construct ready() {\n\n    super(\"ready! %(width) x %(height) @ %(scale)x\")\n\n    color = Color.white\n\n    draw = Draw.create(World.render_set(world))\n\n  } //ready\n</code></pre>"},{"location":"tutorials/draw-and-input/#the-tick-method","title":"The <code>tick</code> method","text":"<p>The <code>tick</code> method in our class is called once every frame the game runs. In here, we can do things like, draw our pebbles, check if they went off screen or hit the player, and check if there was any input.</p> <p>To explore this, let's draw a pebble in the middle of the screen.</p> <pre><code>  tick(delta: Num) {\n\n    var x = width / 2\n    var y = height / 2\n    var z = 0\n    var radius = 16\n    var smooth = 6\n\n    Draw.circle(draw, x, y, z, radius+4, smooth, Color.black)\n    Draw.circle(draw, x, y, z, radius, smooth, Color.pink)\n\n    if(Input.key_state_released(Key.escape)) {\n      IO.shutdown()\n    }\n\n    Draw.commit(draw)\n\n  } //tick\n</code></pre> <p></p> <p>ideas to try</p> <ul> <li>Try using <code>mouse.x</code> and <code>mouse.y</code> as the x and y values.   </li> <li>What happens if you comment out the commit line? like this: <code>// Draw.commit(draw)</code></li> </ul> <p>We can remove this code from <code>tick</code> for now, as we'll build up our game code next.</p>"},{"location":"tutorials/draw-and-input/#the-game-code","title":"The game code","text":"<p>To start with our game code, we'll block out a few lines of code:</p> <ul> <li>Add an empty <code>create_pebble</code> and <code>update_pebbles</code> method</li> <li>Add an empty <code>update_player</code> method</li> <li>Check if the player pressed the Space key, call <code>create_pebble()</code></li> <li>call <code>update_pebbles</code> to make them move</li> <li>commit our Draw context</li> </ul> <p>First add <code>create_pebble</code> as an empty method. This is where we will add our code later. And hey, we can already see how to query if a key was released! Let's copy that and and call our new method.</p> <p>Add the highlighted code changes</p> <pre><code>  create_pebble() {}\n\n  update_pebbles(delta: Num) {}\n\n  update_player() {}\n\n  tick(delta: Num) {\n\n    if(Input.key_state_released(Key.space)) {\n      create_pebble()\n    }\n\n    update_pebbles(delta)\n    update_player()\n\n    Draw.commit(draw)\n\n    if(Input.key_state_released(Key.escape)) {\n      IO.shutdown()\n    }\n\n  } //tick\n</code></pre>"},{"location":"tutorials/draw-and-input/#creating-a-pebble","title":"Creating a pebble","text":"<p>Since we're making a simple game in one file, we can use a simple class in the same file to represent a pebble. A pebble is just a few values for now, so just above our game class, we'll add a pebble class:</p> <pre><code>class Pebble {\n  var x = 0\n  var y = 0\n  var speed = 20\n  var color = Color.pink\n  var active = true\n  construct new() {}\n}\n\nclass Game is Ready {\n</code></pre> <p>Another tool we have in luxe, is the <code>Log.print()</code> API, which allows to write information into the log window (and file). This can be very handy for debugging values and figuring out what's happening in our code.</p> <p>using <code>%( )</code> we can insert variables into a string to see their contents. This is called string interpolation</p> <p>Let's fill in the blank <code>create_pebble()</code> method we made! </p> <p>Add the highlighted code changes</p> <pre><code>create_pebble() {\n\n  var pebble = Pebble.new()\n\n  // set it up using a random color, \n  // and a random position on the top of the screen\n  pebble.color = Color.color_from_hue(random.float())\n  pebble.speed = random.int(20, 150)\n  pebble.x = random.int(width)\n  pebble.y = height - 8\n\n  // add to the list of pebbles\n  pebbles.add(pebble)\n\n  Log.print(\"creating a pebble at `%(pebble.x) , %(pebble.y)`...\")\n\n} //create_pebble\n</code></pre>"},{"location":"tutorials/draw-and-input/#drawing-the-pebbles","title":"Drawing the pebbles","text":"<p>If we ran that code, and press space bar, we'd see the log message but no pebbles yet. Let's redo our drawing inside <code>update_pebbles</code> but this time, we'll draw the pebbles in our list using a <code>for</code> loop, as we'll see.</p> <p>Add the highlighted code changes</p> <pre><code>update_pebbles(delta: Num) {\n\n  var z = 0\n  var radius = 16\n  var smooth = 6\n\n  for(pebble: Pebble in pebbles) {\n    Draw.circle(draw, pebble.x, pebble.y, z, radius+4, smooth, Color.black)\n    Draw.circle(draw, pebble.x, pebble.y, z, radius, smooth, pebble.color)\n  }\n\n} //update_pebbles\n</code></pre> <p>for loop</p> <p>A <code>for</code> loop will run the code inside the <code>{ }</code> for each pebble in the list. If there are none in the list, nothing happens</p> <p>We added a <code>pebble: Pebble</code> to our loop variable, this gives us code completion on the pebble variable</p> <p>This is how it should look, after hitting Space a bunch of times.</p> <p></p>"},{"location":"tutorials/draw-and-input/#moving-the-pebbles","title":"Moving the pebbles","text":"<p>Now we can update our pebbles to fall downward. </p> <p>To do this, we'll move the y position of our pebble every update, by <code>pebble.speed</code> amount. </p> <p>delta time (detailed video on the concept)</p> <p>When we do <code>y = y - speed</code> the value is in world units. We're moving <code>speed</code> world units every update.   How often does it update? We don't know, it depends on the computer it is running on! </p> <p>In our empty project, world units = window pixel, so we could say it moves at <code>20 pixels every update</code>.   What we really want is this value to be the same for every player, we want <code>20 pixels per second</code> instead. </p> <p>To do that, we use that <code>delta</code> variable we handed to our method.   If we multiply <code>speed</code> by <code>delta</code> time, we get <code>units per second</code> instead of just <code>units</code>. </p> <p>Add the highlighted line</p> <pre><code>update_pebbles(delta: Num) {\n\n  var z = 0\n  var radius = 16\n  var smooth = 6\n\n  for(pebble: Pebble in pebbles) {\n\n    pebble.y = pebble.y - (pebble.speed * delta)\n\n    Draw.circle(draw, pebble.x, pebble.y, z, radius+4, smooth, Color.black)\n    Draw.circle(draw, pebble.x, pebble.y, z, radius, smooth, pebble.color)\n  }\n\n}\n</code></pre> <p>And now the pebbles fall!</p> <p></p>"},{"location":"tutorials/draw-and-input/#player-paddle","title":"Player paddle","text":"<p>The player will be a rectangle near the bottom of the screen, and will try to catch the falling pebbles with their paddle. Let's start with drawing the player.</p> <p>Add the highlighted code changes</p> <pre><code>update_player() {\n\n  //player width and height\n  var w = 128\n  var h = 32\n\n  //centered on the mouse\n  var x = (mouse.x - w/2)\n  //stop at the right edge of the window\n  x = x.min(width - w)\n  //stop at the left edge of the window\n  x = x.max(0)\n\n  var y = 16\n  var z = 0\n  var angle = 0\n  var radius = [8,8,8,8]\n  var smooth = [4,4,4,4]\n\n  Draw.quad_detailed(draw, x, y, z, w, h, angle, radius, smooth, Color.pink)\n\n} //update_player\n</code></pre> <p></p>"},{"location":"tutorials/draw-and-input/#player-collision","title":"Player collision","text":"<p>Nothing happens when the pebbles hit the player, so we'll have to add a check for that. We're going to keep it really simple and do basic checks to see if the pebble would be overlapping with the player.</p> <p>Here's how we'll approach it: - If the <code>pebble x &gt; player x</code> - and <code>pebble x &lt; player x + player width</code> - we know that the pebble is in line with the player horizontally. - Now we just need to know if the <code>pebble y &lt; player y + player height</code></p> <p></p> <p>We'll mark the pebble as inactive so we can ignore it next time.</p> <p>Add the highlighted lines, at the end of update_player()</p> <pre><code>update_player() {\n\n  ... //player drawing\n\n  for(pebble: Pebble in pebbles) {\n\n    var inside_x = pebble.x &gt;= x &amp;&amp; pebble.x &lt;= x + w\n    var inside_y = pebble.y &lt;= y + h\n    var was_collected = pebble.active &amp;&amp; inside_x &amp;&amp; inside_y\n\n    if(was_collected) {\n      pebble.color = Color.black\n      pebble.active = false\n    }\n\n  } //for each pebble\n\n} //update_player\n</code></pre> <p>And with that, we can see the pebbles turn black when we collect them. Next we'll clean up pebbles we've collected or that have hit the ground below the player.</p> <p></p>"},{"location":"tutorials/draw-and-input/#pebble-cleanup","title":"Pebble cleanup","text":"<p>We can easily tell when a pebble has been missed by using <code>inside_y</code> when <code>inside_x</code> is false. When that happens, we'll turn the pebble white instead of black.</p> <p>And, when any pebble hits the edge of the screen, we'll remove it from the game.</p> <p>Add the highlighted lines</p> <pre><code>update_player() {\n\n  ... //player drawing\n\n  var to_remove = []\n  for(pebble: Pebble in pebbles) {\n\n    var inside_x = pebble.x &gt;= x &amp;&amp; pebble.x &lt;= x + w\n    var inside_y = pebble.y &lt;= y + h\n    var was_collected = pebble.active &amp;&amp; inside_x &amp;&amp; inside_y \n    var was_missed = pebble.active &amp;&amp; inside_x == false &amp;&amp; inside_y == true\n    var off_screen = pebble.y &lt; -16\n\n    if(was_collected) {\n      pebble.color = Color.black\n      pebble.active = false\n    } else if(was_missed) {\n      pebble.color = Color.white\n      pebble.active = false\n    } else if(off_screen) {\n      to_remove.add(pebble)\n    }\n\n  } //for each pebble\n\n  for(pebble: Pebble in to_remove) {\n    pebbles.remove(pebble)\n  }\n\n} //update_player\n</code></pre>"},{"location":"tutorials/draw-and-input/#try-this","title":"Try this","text":"<p>Add score</p> <p>Add a <code>score</code> variable to the game class, add <code>1</code> to it each time a pebble is collected. Display the score using <code>Draw.text</code> and <code>Asset.font(\"luxe: font/lato\")</code>.</p> <p>Add pause</p> <p>Add a <code>var paused = false</code> boolean. This can stop the pebbles from moving and pause the game e.g <code>if(paused) return</code>. You can stop the player moving and display the paused state on screen.</p> <p>Add game over</p> <p>Add a losing condition, like if you have 5 lives and each time you miss, you lose one. When you have 0, display a game over message. You'll probably want to want make Space key restart the game, which will require resetting the state and <code>pebbles.clear()</code> </p> <p>Add win state</p> <p>Add a win condition, like if you collect 20 pebbles or survive for a certain amount of time. You can use <code>IO.timestamp()</code> to get a time in seconds and display it (once at the beginning of the game and then <code>now - start</code>)</p> <p>Automatic pebbles</p> <p>Try making a <code>var timer = 0</code> and <code>if(timer_ready) { create_pebble() }</code> with a random time value each time. The random time can get faster the more you play. </p>"},{"location":"tutorials/draw-and-input/#full-code","title":"Full code","text":"<pre><code>import \"luxe: draw\" for Draw, PathStyle\nimport \"luxe: world\" for World, TextAlign\nimport \"luxe: color\" for Color\nimport \"luxe: input\" for Input, Key\nimport \"luxe: asset\" for Asset\nimport \"luxe: io\" for IO\nimport \"random\" for Random\n\nimport \"outline/ready\" for Ready\n\nclass Pebble {\n  var x = 0\n  var y = 0\n  var speed = 10\n  var color = Color.pink\n  var active = true\n  construct new() {}\n}\n\nclass Game is Ready {\n\n  //A list of pebbles on screen\n  var pebbles: List = []\n  //Our drawing context\n  var draw: Draw = null \n  //A random number generator\n  var random = Random.new()\n\n  construct ready() {\n\n    super(\"ready! %(width) x %(height) @ %(scale)x\")\n\n    color = Color.white\n\n    draw = Draw.create(World.render_set(world))\n\n  } //ready\n\n  create_pebble() {\n\n    var pebble = Pebble.new()\n\n    //set it up using a random color, \n    //and a random position on the top of the screen\n    pebble.color = Color.color_from_hue(random.float())\n    pebble.speed = random.int(20, 150)\n    pebble.x = random.int(width)\n    pebble.y = height - 20\n\n    //add to the list of pebbles\n    pebbles.add(pebble)\n\n    Log.print(\"creating a pebble at `%(pebble.x) , %(pebble.y)`...\")\n\n  } //create_pebble\n\n  update_pebbles(delta: Num) {\n\n    var z = 0\n    var radius = 16\n    var smooth = 6\n\n    for(pebble: Pebble in pebbles) {\n\n      pebble.y = pebble.y - (pebble.speed * delta)\n\n      Draw.circle(draw, pebble.x, pebble.y, z, radius+4, smooth, Color.black)\n      Draw.circle(draw, pebble.x, pebble.y, z, radius, smooth, pebble.color)\n    }\n\n  } //update_pebbles\n\n  update_player() {\n\n    //player width and height\n    var w = 128\n    var h = 32\n\n    //centered on the mouse\n    var x = (mouse.x - w/2)\n    //stop at the right edge of the window\n    x = x.min(width - w)\n    //stop at the left edge of the window\n    x = x.max(0)\n\n    var y = 16\n    var z = 0\n    var angle = 0\n    var radius = [8,8,8,8]\n    var smooth = [4,4,4,4]\n\n    Draw.quad_detailed(draw, x, y, z, w, h, angle, radius, smooth, Color.pink)\n\n    var to_remove = []\n    for(pebble: Pebble in pebbles) {\n\n      var inside_x = pebble.x &gt;= x &amp;&amp; pebble.x &lt;= x + w\n      var inside_y = pebble.y &lt;= y + h\n      var was_collected = pebble.active &amp;&amp; inside_x &amp;&amp; inside_y \n      var was_missed = pebble.active &amp;&amp; inside_x == false &amp;&amp; inside_y == true\n      var off_screen = pebble.y &lt; -16\n\n      if(was_collected) {\n        pebble.color = Color.black\n        pebble.active = false\n      } else if(was_missed) {\n        pebble.color = Color.white\n        pebble.active = false\n      } else if(off_screen) {\n        to_remove.add(pebble)\n      }\n\n    }\n\n    for(pebble: Pebble in to_remove) {\n      pebbles.remove(pebble)\n    }\n\n  } //update_player\n\n  tick(delta: Num) {\n\n    if(Input.key_state_released(Key.space)) {\n      create_pebble()\n    }\n\n    update_pebbles(delta)\n    update_player()\n\n    Draw.commit(draw)\n\n    if(Input.key_state_released(Key.escape)) {\n      IO.shutdown()\n    }\n\n  } //tick\n\n} //Game\n</code></pre>"},{"location":"tutorials/editor/","title":"luxe editor","text":""},{"location":"tutorials/editor/#the-luxe-editor","title":"The luxe editor","text":"<p>This tutorial is an introduction to working with the luxe editor, not a complete guide.</p> <p>outcome</p> <p>In this tutorial we'll use the luxe editor to add content to our bee game.  We'll walk through opening a project, viewing content, creating a prototype and more. </p>"},{"location":"tutorials/editor/#opening-a-project-via-the-launcher","title":"Opening a project via the launcher","text":"<p>The typical workflow for opening a project in the editor is to click the project in the luxe launcher. As you hover a project it will show the path and 'select to open in editor' at the bottom.</p> <p></p> <p>Once you click, you should see the state change to be highlighted and show running in editor....</p> <p>Open your project in the editor</p> <p></p> <p>And when it launched, you should see the following screen. </p> <p>omni</p> <p>The sidebar on the right is called 'omni' because it's always around!</p> <p></p>"},{"location":"tutorials/editor/#open-a-project-manually","title":"Open a project manually","text":"<p>If you were to run the editor manually, you typically see the project context without omni open. If you hover the word omni you get a hint on what to do, but this is unclear and changing soon.</p> <p></p> <p>When you do open omni, the sidebar, you'll find the same list of projects sorted by most recent:</p> <p></p> <p>Clicking the name of the project will get you to the same screen as opening via the launcher.</p> <p>Sometimes it will take a second to open the project. A progress bar will be added.</p> <p></p>"},{"location":"tutorials/editor/#editor-contexts","title":"Editor Contexts","text":"<p>The luxe editor is based on contextual workflows.</p> <p>The world editor is a context that you work in when editing levels or scenes. Creating tilemaps, managing assets, changing settings: these are all different contexts, as they are contextually different things, and don't overlap with editing scenes. So we put them in separate contexts that you can switch between quickly.</p> <p>Contexts can be added by the game, or by modules, and allow a nice clean workflow separation for each distinct role or workflow.</p> <p>You can change context in two main ways. The first is the context drop down on the top bar:</p> <p></p> <p>The second behaves a lot like 'alt-tab' or app switching in your OS. When you press meta + backtick ('console key') (Win+` or Cmd+`) it will let you cycle through contexts, and will reorder them when switching. That allows switching back and forth between two workflows quickly.</p> <p>The video has flipping between contexts quickly, flashing between them.  </p> <p>Switch to the world context to continue</p>"},{"location":"tutorials/editor/#the-world-editor","title":"The world editor","text":"<p>A significant amount of time will probably be spent in the world editor, as this is where you build a lot of the primary content for games.</p> <p></p> <p>There are a three main actions that are easy to get to:</p> <ul> <li>Open content to edit</li> <li>Create new content to edit</li> <li>Attach modifiers to content being edited</li> </ul>"},{"location":"tutorials/editor/#opening-a-prototype","title":"Opening a prototype","text":"<p>Let's open an existing piece of content from our previous tutorial: A prototype. We first hit the Open button followed by the open button on the Prototype section:</p> <p></p> <p>When we do that, we're presented with a list of all the prototypes in the project we could open.</p> <p></p> <p>This list is searchable for quickly finding what we're after, and uses a fuzzy search to make it easier to find things:</p> <p></p> <p>Once we select the prototype we want (<code>prototype/bee</code> in this case) it should open for us to edit.</p> <p>Open the bee prototype</p>"},{"location":"tutorials/editor/#the-world-outliner","title":"The world outliner","text":"<p>Below the Primary buttons, we have the world outliner. This displays the content in the world and allows us to manage or modify it.</p> <p>Now that we have some content, we can see a single root entity for the prototype in the outliner:</p> <p></p> <p>If we click on the entity in the outliner, it will select it. </p> <p>Select the bee entity</p> <p></p> <p>Once selected you'll see the modifiers attached to the entity, if any, below the outliner. There's options on each to copy or paste them, remove them and more. </p>"},{"location":"tutorials/editor/#prototype-editing","title":"Prototype editing","text":"<p>We're not going to edit this particular entity yet, but we came here to learn about the way protoypes are edited in isolation.</p> <p>When we open a prototype (or create one) it does so in it's own world. There's a world editor for each one that's open, and one primary one for the scenes. So how do we get back to the main world editor? That's what these little breadcrumbs are here for:</p> <p></p> <p>If we select the left side picker, it'll drop down and show any open worlds we have at the moment, so we can switch easily between them:</p> <p>Another way to get back is to open or create a scene, as you can't open a scene inside a prototype world, it'll automatically switch to the expected world to edit from. Same goes if you open a prototype again, it'll switch to the right world if already open.</p> <p></p> <p>If we switch back manually we'll see the <code>world</code> selector is active on the left instead, and it shows 0 open scenes. </p> <p>Switch back to the main world</p> <p></p> <p>You can open a scene to inspect it.  </p> <p>Open the <code>scene/level</code> scene for editing</p> <p></p>"},{"location":"tutorials/editor/#extending-our-game","title":"Extending our game","text":"<p>Our goal for this tutorial is to create another pillar to use in our game, so that there's more variety. The project comes with a variety of images ready to use - it's up to your imagination to decide what kind of pillar you want to make, and what kind of collision it will have</p> <p>The typical workflow in luxe is to create an entity, and then attach modifiers to it to give it meaning. </p>"},{"location":"tutorials/editor/#creating-a-prototype","title":"Creating a prototype","text":"<p> Create a prototype, and name it <code>pillar.1</code></p> <p>We hit the create button:</p> <p></p> <p>Followed by searching for or scrolling to <code>Prototype</code> and selecting create:</p> <p></p> <p>Then we type the name we want to give it. </p> <p>The default location is convention, but you can of course set that somewhere else in your project.</p> <p></p> <p>This brings us back to our familar empty world, a new one for this prototype.</p> <p></p>"},{"location":"tutorials/editor/#creating-a-base-for-the-pillar","title":"Creating a base for the pillar","text":"<p>Create a blank entity using the create menu</p> <p>Now we'll rename out new entity. Select it first, and the rename button should highlight:</p> <p>sometimes the rename button doesn't enable on the first click, click again or reselect to try again</p> <p></p> <p>This presents an area to enter a new name:</p> <p></p> <p>We'll call ours <code>base</code>. Hit enter when done, or click the rename icon again.</p> <p></p>"},{"location":"tutorials/editor/#attaching-modifiers","title":"Attaching modifiers","text":"<p>Open the modifiers list by selecting the Attach button</p> <p></p> <p>This will present you with a list of all available modifiers in your project. </p> <p></p> <p>Like always, you can search in this list. We're looking for `Transform. </p> <p>Find and attach a <code>Transform</code> modifier by selecting it</p> <p></p> <p>Also attach a <code>Sprite</code> modifier</p> <p>Once we've attached both a <code>Sprite</code> and a <code>Transform</code> modifier, we're ready to customize it using the inspector.</p> <p></p>"},{"location":"tutorials/editor/#choosing-a-sprite-image","title":"Choosing a sprite image","text":"<p>Each modifier has their own properties, a sprite has an image field as the first option.</p> <p>We're going to customize it to be a wall for the base of our pillar.</p> <p>Select <code>image/prop/wall2</code> for the sprite image</p> <p>To do that we first look for the asset selector icon next to the field (It's a right arrow):</p> <p></p> <p>This will bring up a list of all the images the project can use:</p> <p></p> <p>As always this is searchable, we'll filter for wall and choose <code>wall2</code></p> <p></p> <p>This will change our sprite size + visuals to match the selected image:</p> <p></p>"},{"location":"tutorials/editor/#referencing-the-existing-content","title":"Referencing the existing content","text":"<p>In order to know what we're going for, we're going to look at the existing pillar.</p> <p>Open the <code>prototype/pillar.0</code> prototype for inspection.</p> <p>This will take us to another world, and we'll be able to switch back and forth between them to compare notes.</p> <p></p> <p>The first thing we'll note, is that the wall is aligned with the red axis marker. The top of the wall is around the 0 value on the Y axis.</p>"},{"location":"tutorials/editor/#transforming-entities","title":"Transforming entities","text":"<p>Because we attached a <code>Transform</code>, we can move the entity down to align (it doesn't really have to be perfect).</p> <p>First select the entity, either by clicking on the visuals in the world view, or using the outliner.</p> <p>Then we can press the W key to enter <code>Translate</code> mode for the Transform modifier.  </p> <p></p> <p>This presents us with a green and red arrow on the entity. This is the <code>Transform Gizmo</code>, and we can grab it by those red and green arrows to move things around. Since we're only interested in moving the sprite up and down, we'll grab the green arrow, and drag downwards:</p> <p></p> <p>Notice how the gizmo is in the center of the sprite. The sprite modifier has an alternative way to achieve what we want, by offseting the visuals instead. This is called the sprite origin, and makes the transform origin not centered. </p> <p>The values are <code>0 ... 1</code> range, where 0,0 is bottom or left, 0.5 is center, and 1 is top or right. </p> <p>If we change the y value of the origin to 1 (before we moved it), we'll notice that it is also roughly around the 0 point as well! And now the gizmo is on the top edge of the sprite. It's always situational which you use as we'll only be using this for visuals.</p> <p></p>"},{"location":"tutorials/editor/#instancing-a-prototype","title":"Instancing a prototype","text":"<p>The last piece we'll do step by step, is creating an instance of the flower prototype. The flower is part of the challenge in the game, to bounce on it, so we'll create one in our pillar. The game already has a prototype created and ready to use, so all we need to do is make an instance of it.</p> <p>Open the create menu, and select Instance</p> <p>If we open the create menu, we can find <code>Instance</code> in the list:</p> <p></p> <p>That will show a list of prototypes in our game, we'll pick the flower:</p> <p></p> <p>There we have it! It looks rather big. </p> <p></p> <p>We compare again with our previous pillar, and notice that the transform scale was set to <code>0.4</code> on the x and y value.</p> <p>Set the transform scale to <code>0.4 0.4 1</code> for the flower instance.</p> <p>Now as the last step we'll cover here, we can use the white square part of the gizmo to translate on the XY axis - both at the same time. We'll position our flower somewhere on the top of the pillar.</p>"},{"location":"tutorials/editor/#your-turn","title":"Your turn","text":"<p>Now it's up to you to finish the pillar and implement it into the game. Take a look at the existing one for reference in the editor. </p> <p>Move things around randomly, inspect all the properties, look at the collision modifiers. Use your imagination to make an interesting rooftop space!</p> <p></p>"},{"location":"tutorials/editor/#dont-forget-to-save","title":"Don't forget to save","text":"<p>When you create content, it often isn't saved automatically so you can experiment without saving. Make sure to save often!</p>"},{"location":"tutorials/editor/#try-this","title":"Try this","text":"<p>Implement the pillar</p> <p>In the game code, use the Random class to randomly pick a pillar to spawn instead of always spawning the same one.</p> <p>Make a few pillars</p> <p>Make a variety of pillars, some easy, some hard, experiment with multiple flowers, no flowers, tall or short collision etc.</p> <p>Use pillars as difficulty</p> <p>If you make several pillars, make them spawn progressively so it gets progressively more difficult. Include occasional easier ones for a rest period.</p> <p>Customize the scene</p> <p>Edit the <code>scene/level</code> scene to create various levels. If you implemented score, try change levels every 10 points. Try changing the sky color over time using the Sprite modifier HSV setting.</p>"},{"location":"tutorials/hello/","title":"create a project","text":""},{"location":"tutorials/hello/#hello-luxe","title":"Hello luxe","text":"<p>An introduction to working with luxe.</p> <p>setup steps</p> <p>Before we begin, make sure you've installed the extension for Visual Studio Code. Visit Installing IDE support.</p> <p>outcome</p> <p>In this tutorial we'll create a new project using the launcher.  Then, we'll see how to open + run it via Visual Studio Code.</p>"},{"location":"tutorials/hello/#creating-a-new-project","title":"Creating a new project","text":"<p>In the launcher, we'll find a create button in the middle near the top of the window.  Click this to choose a project outline to use for the new project.</p> <p></p> <p>For this tutorial, we'll make a new project using the <code>empty</code> outline. Select it to be taken to the outline config page. </p> <p></p> <p>In this outline, there aren't many settings! Just a name, and a location to save the project.</p> <p>folder</p> <p>Create a new folder, and then select it. You need a empty folder for your project root.  </p> <p></p> <p>Once you hit create, it will show the project in the project list. </p> <p></p>"},{"location":"tutorials/hello/#running-the-project","title":"Running the project","text":"<p>For the next step, we'll want to open the project in Visual Studio Code. You can use the small icon that is highlighted in the above image, or use <code>Open Folder...</code> in Visual Studio Code, and select the same folder you just created.</p> <p></p> <p>Once open, you should click on <code>game.wren</code> on the side so we can run the project.</p> <p></p> <p>build + run (default keys)</p> <p>Press Ctrl+Shift+B for Windows/Linux  Press Cmd+Shift+B for MacOS </p> <p>The first run might take a little bit to compile all the module content, but the next run will be much quicker.</p> <p>Try it!</p> <p></p> <p>If nothing went wrong you should see a window with the luxe logo that follows the mouse. </p>"},{"location":"tutorials/hello/#gamewren","title":"<code>game.wren</code>","text":"<p>Your main entry point for your game is a Wren script called <code>game.wren</code>.</p> <p>In that file you can see the <code>ready</code> function, and the <code>tick</code> function. This is the entry point of your game and controls what happens next. Here is where you'll load a level, or make a menu, or code the whole game.</p> <p>In the next tutorial, we'll learn about input and making a small game.</p>"},{"location":"tutorials/world/","title":"luxe world","text":""},{"location":"tutorials/world/#the-luxe-world","title":"The luxe world","text":"<p>An introduction to working with the luxe world APIs.</p> <p>outcome</p> <p>In this tutorial we'll use the World api to put something on screen.  We'll also use a module, called Arcade for handling physics + collision. We'll load scenes and create prototype instances to populate a world, and create a custom Modifier.</p> <p>We'll make a game where you play as a bee, and have to bounce on flowers.</p>"},{"location":"tutorials/world/#play-it","title":"Play it","text":"<p>Click first, then press Left Button, Up, W, X or Space to jump.  Press R key to reset.</p>"},{"location":"tutorials/world/#creating-the-project","title":"Creating the project","text":"<p>For this tutorial, create a new project using the launcher, and when choosing an outline, select the tutorial project outline. This project is pre-configured so we can dive right in.</p> <p>Create a new project from the tutorial project outline</p>"},{"location":"tutorials/world/#installing-a-module","title":"Installing a module","text":"<p>In order to run our project, we first need to install a module. If you don't, you'll get errors!</p> <p>You can use the launcher to install modules. Head over to the module page, and search for the arcade module. Once you find it, you can click through, and click the download arrow.</p> <p>The project is configured to use version <code>0.0.24</code>, install that version.</p> <p>Install <code>arcade</code> version <code>0.0.24</code> to continue!</p> <p> </p>"},{"location":"tutorials/world/#using-the-module-in-a-project","title":"Using the module in a project","text":"<p>If you look inside of the <code>luxe.project/modules.lx</code> file you'll find the <code>luxe</code> and <code>arcade</code> modules referenced by version. You can use the launcher to add a module to the project using the <code>+</code> icon, or you can manually add it to this file.</p> <p>In this case, it's already there from the outline, so let's move on!</p>"},{"location":"tutorials/world/#the-transform-api","title":"The <code>Transform</code> API","text":"<p>In the <code>Draw</code> tutorial, we drew a circle in the center of the screen using an immediate style API.</p> <p>With the world system, we can create things in the world that will continue to draw as long as they're alive. An Entity in the world can also have modifiers attached that perform logic, and run gameplay code.</p> <p>We saw this in the original empty project template, right before deleting it!</p> <p>To create an entity, we do <code>Entity.create(world)</code> - this gives us a blank entity, and is ready to be modified to give it meaning.</p> <p>The first thing we'll do, is attach a <code>Transform</code> modifier. Modifiers use the same <code>create</code> pattern, and some modifiers add <code>create</code> methods with convenience arguments, like we'll see below from <code>Sprite.create</code>.</p> <p>Let's create a new <code>player</code> variable in our game, and then inside ready we'll create an entity, attach a transform and a sprite to it.</p> <code>world_width/world_height</code> ? <p>Since our tutorial outline is based on the pixel outline, we have a fixed world size that will auto scale. This size is set in <code>outline/settings.settings.lx</code> and the size of the world is available in <code>world_width</code> and <code>world_height</code>. This is different from <code>width</code>/<code>height</code>, which is the window size.</p> <p>add the highlighted code to <code>ready</code></p> <pre><code>class Game is Ready {\n\n  var random = Random.new()\n  var draw: Draw = null\n\n  var player = Entity.none\n\n  construct ready() {\n\n    super(\"ready! %(width) x %(height) @ %(scale)x\")\n\n    draw = Draw.create(World.render_set(world))\n\n    player = Entity.create(world, \"player\")\n    Transform.create(player, world_width/2, world_height/2)\n    Sprite.create(player, Assets.image(\"image/bee\"), 64, 64)\n\n  } //ready\n</code></pre> <p>And just like that, we have our player in the middle of the screen.</p> <p></p>"},{"location":"tutorials/world/#arcade-physics","title":"Arcade physics","text":"<p>The <code>arcade</code> module provides collision + physics for a wide range of games, and comes with a bunch of ready to use tools.</p> <p>The first important one is the Arcade modifier, which gives an entity a collider shape, and allows you to choose flags like whether it's solid or a trigger, what shape it is, change the velocity and more. It also gives us a callback for when we collide with something, so we can implement a response to overlapping or colliding with something.</p>"},{"location":"tutorials/world/#arcade-import","title":"Arcade import","text":"<p>We're gonna use the <code>Arcade</code> modifier from the <code>arcade</code> module to make our bee interact with the world. We'll import that module into the top of our <code>game.wren</code> code like this:</p> <pre><code>import \"arcade: system/arcade.modifier\" for Arcade, CollisionEvent, ShapeType\n</code></pre> <p>You'll see the <code>arcade</code> prefix on the import, this should be familiar because <code>luxe</code> is also a module, and we've seen the <code>luxe: color</code> import before. Imports without a prefix are project local.</p>"},{"location":"tutorials/world/#attach-an-arcade-modifier","title":"Attach an arcade modifier","text":"<p>Much like a <code>Transform</code> or <code>Sprite</code>, we can attach <code>Arcade</code> to an entity using the same create pattern. Let's tidy up and make a <code>create_player()</code>  function, and move our player code into it.</p> <p>add the highlighted changes</p> <pre><code>construct ready() {\n\n  super(\"ready! %(width) x %(height) @ %(scale)x\")\n\n  draw = Draw.create(World.render_set(world))\n\n  create_player()\n\n} //ready\n\ncreate_player() {\n\n  player = Entity.create(world, \"player\")\n  Transform.create(player, world_width/2, world_height/2)\n  Sprite.create(player, Assets.image(\"image/bee\"), 64, 64)\n\n  Arcade.create(player)\n  Arcade.set_shape_type(player, ShapeType.circle)\n  Arcade.set_radius(player, 32)\n\n}\n</code></pre> <p>If we run this, it will look identical to before! That's because there's no gravity or anything on our entity. So how do we know it's working? How do we know the radius matches? We can ask <code>Arcade</code> to debug draw the physics state.</p> <p>add the highlighted line to <code>create_player</code></p> <pre><code>...\nArcade.set_radius(player, 32)\nArcade.set_debug_draw_enabled(world, true)\n</code></pre> <p></p> <p>Gravity is a constant acceleration, so we can use the <code>Arcade.set_acc</code> tool to add a downward acceleration. The value is relative to your world size, and is game specific. For this game, we'll pick <code>-200</code> as that feels good. You can make it whatever you want!</p> <p>add the highlighted line to <code>create_player</code></p> <pre><code>...\nArcade.set_radius(player, 32)\nArcade.set_acc(player, [0, -200])\nArcade.set_debug_draw_enabled(world, true)\n</code></pre> <p>If you run this now, you should see the bee falling off the bottom of the world!</p>"},{"location":"tutorials/world/#loading-a-scene","title":"Loading a scene","text":"<p>Our outline includes a scene that has been created for us. This scene includes some background details, and a floor collider which will keep our bee on screen.</p> <p>A scene is a kind of data based asset, a container for pre-configured entities with their modifiers already attached.</p> <p>A particular scene can only be loaded once into the same world, but you can load multiple scenes into the same world. This makes them useful as a tool to layer or keep things loaded in the world, and much more. Scenes are typically what you would use for stuff like a Menu, or Level based games.</p> <p>Scene assets</p> <p>Scenes are typically created with the luxe editor, but they're simple data inside of a folder. Take a look inside the <code>scene/level.scene/</code> folder, and look inside any <code>.entity.lx</code> file!</p> <p>With <code>Scene.create</code> we can load a scene from an asset. We'll use the <code>Asset.scene(id)</code> to grab the asset handle of the scene.</p> <p>Work In Progress Asset API</p> <p>The <code>Scene</code> API is available via <code>import \"luxe: world/scene\" for Scene</code> and is imported already.</p> <p>Some assets, like the image above, use the older <code>Assets.image(id)</code> API (plural), while the scene and newer assets use <code>Asset.scene(id)</code> API (singular). The reason both exist is because we're moving to the new system and some assets aren't done moving yet.</p> <p>Just before we create our player, we'll load our level scene into the world.</p> <p>Add the highlighted line in <code>ready</code></p> <pre><code>construct ready() {\n\n  super(\"ready! %(width) x %(height) @ %(scale)x\")\n\n  draw = Draw.create(World.render_set(world))\n\n  Scene.create(world, Asset.scene(\"scene/level\"))\n\n  create_player()\n\n} //ready\n</code></pre> <p>With that, we'll see the clouds, some buildings, a gradient and we'll see the floor collider. The bee will bounce off the floor, and we're ready for the next step.</p>"},{"location":"tutorials/world/#named-input-events","title":"Named input events","text":"<p>In the first tutorial, we used <code>Input.key_state_released</code> to directly query a key. This is great for quick prototypes but doesn't allow multiple keys, gamepads, or mouse inputs easily.</p> <p>For that we'll need to use named input events. A named input event is what it sounds like, a name assigned to one or more inputs! We have a few of these already defined by our project, if you look inside of <code>outline/inputs.input.lx</code> you'll see this:</p> <pre><code>jump = {\n  keys = [\"key_x\", \"up\", \"key_w\", \"space\"]\n  mouse = [\"left\"]\n  gamepad = [0]\n}\n</code></pre> <p>If we query this instead of the individual key, any of those inputs will trigger the event. Since these are named events we refer to them by a string value, \"jump\", but using strings all over our project can lead to code that can be difficult to change.</p> <p>Instead, what we'll do is make an enum-like class that makes our code easier to use, and gives us code completion and errors if we spell it wrong. The pattern is a static function that returns a string, so we'll make one called <code>In</code> and a method called <code>jump</code>, so we can use <code>In.jump</code> to refer to the event name.</p> <p></p> <pre><code>class In {\n  static jump { \"jump\" }\n}\n\nclass Game is Ready {\n...\n</code></pre>"},{"location":"tutorials/world/#implementing-jump","title":"Implementing jump","text":"<p>Now inside the <code>tick</code> method, we'll add a jump method to make the bee jump. To do that, we'll get the current bee velocity, add some to it, and then set it back. We'll also set the x velocity to 0, because we never want the bee to move horizontally.</p> <pre><code>jump() {\n\n  var velocity = Arcade.get_vel(player)\n\n  velocity.x = 0\n  velocity.y = velocity.y + 150\n\n  Arcade.set_vel(player, velocity)\n\n} //jump\n\ntick(delta: Num) {\n\n  if(Input.event_began(In.jump)) {\n    jump()\n  }\n\n...\n</code></pre> <p>Now when we run the game and press Up, W, X or Space the bee will jump upward.</p>"},{"location":"tutorials/world/#player-position-and-speed","title":"Player position and speed","text":"<p>The bee jump is a little easy to go off screen, so we'll make a minor change to <code>create_player()</code> to give them a max speed, and we'll also enforce that the bee is always in the same position on screen, about a quarter of the way in.</p> <pre><code>create_player() {\n\n  ...\n\n  Arcade.set_acc(player, [0, -200])\n  Arcade.set_max_speed(player, 150)\n  Arcade.set_debug_draw_enabled(world, true)\n\n}\n</code></pre> <p>Inside <code>tick</code>, we'll set the player position to <code>world_width / 4</code> every frame.</p> <pre><code>tick(delta: Num) {\n\n  Transform.set_pos_x(player, world_width / 4)\n\n  ...\n</code></pre> <p>Now when we play, we have a couple jumps before we leave the screen, and our bee is in a nice place for the game.</p>"},{"location":"tutorials/world/#create-a-prototype-instance","title":"Create a Prototype instance","text":"<p>Prototypes are similar to a <code>Scene</code>, they are pre-configured entities with their modifiers ready to create.</p> <p>Prototype vs Scene</p> <p>Prototypes are not limited to one per world like scenes. You can create an instance as many times as you need.</p> <p>They can be created dynamically like we will below, and they can be placed inside a scene, and inside of other prototypes. Each instance can have the values from the prototype overridden when placed that way.</p> <p>Our project includes a pillar ready to go as <code>prototype/pillar.0</code> (we'll make more with the luxe editor in the next tutorial).</p> <p>We'll create a <code>create_pillar</code> function, and we'll call it right after creating the player. To create a prototype we use <code>Prototype.create</code> and <code>Asset.prototype</code> similarly. This returns a <code>prototype root</code> entity, which allows us to move the whole instance as a single unit.</p> <pre><code>  ...\n  create_player()\n  create_pillar()\n\n} //ready\n\ncreate_pillar() {\n\n  var pillar = Prototype.create(world, Asset.prototype(\"prototype/pillar.0\"))\n  Transform.set_scale(pillar, 0.4, 0.4)\n  Transform.set_pos(pillar, world_width / 2, random.int(15, 170))\n\n} //create_pillar\n</code></pre> <p>With that, you should see a pillar spawned in the center of the world.</p> <p></p>"},{"location":"tutorials/world/#creating-a-custom-modifier","title":"Creating a custom modifier","text":"<p>The next step is to move the pillars across the screen, so the player will have to jump over them.</p> <p>There's a more detailed guide on custom modifiers here</p> <p>To do that, we want to make a modifier that will move any pillar that it is attached to, and when the pillar moves off the left of the screen, clean itself up.</p> <p>Create a folder called system/ in the project</p> <p>The convention for modifiers is to be in a folder called <code>system/</code>, they are a <code>wren</code> file with a <code>modifier</code> subtype extension. We're gonna make a modifier called pillar and copy paste the code below into it.</p> <p>Create an empty file called <code>system/pillar.modifier.wren</code> in the project</p> <pre><code>import \"system/pillar.modifier.api\" for API, Modifier, APIGet, APISet\nimport \"luxe: world\" for Entity, Transform\nimport \"luxe: render\" for Render, Geometry\nimport \"luxe.project/asset\" for Asset\nimport \"luxe: assets\" for Strings\nimport \"luxe: game\" for Frame\n\n#block = data\nclass Data {\n\n}\n\n#api\n#display = \"Pillar\"\n#icon = \"image/pillar.svg\"\n#desc = \"**A moving pillar**. Moves the pillar horizontally toward the player, then removes itself when offscreen.\"\nclass Pillar is API {\n\n}\n\n#system\n#phase(on, tick)\nclass System is Modifier {\n\n  init(world: World) {\n    Log.print(\"init `%(This)` in world `%(world)`\")\n  }\n\n  attach(entity: Entity, pillar: Data) {\n    Log.print(\"attached to `%(Strings.get(Entity.get_name(entity)))` `%(entity)`\")\n  }\n\n  detach(entity: Entity, pillar: Data) {\n    Log.print(\"detached from `%(Strings.get(Entity.get_name(entity)))` `%(entity)`\")\n  }\n\n  tick(delta: Num) {\n    each {|entity: Entity, pillar: Data|\n\n    }\n  }\n}\n</code></pre>"},{"location":"tutorials/world/#attach-the-modifier","title":"Attach the modifier","text":"<p>Now that we have a modifier, we can attach it in the same way that we do for the built in ones. We'll also modify our start position for the pillar, by setting it to <code>world_width + 128</code> instead.</p> <pre><code>import \"system/pillar.modifier\" for Pillar\n...\ncreate_pillar() {\n\n  var pillar = Prototype.create(world, Asset.prototype(\"prototype/pillar.0\"))\n  Transform.set_scale(pillar, 0.4, 0.4)\n  Transform.set_pos(pillar, world_width + 128, random.int(15, 170))\n  Pillar.create(pillar)\n\n} //create_pillar\n</code></pre> <p>When you run this, you'll also see the line in the log:</p> <p>[system/pillar.modifier line 29] - attached to <code>prototype/pillar.0</code> <code>42951770139</code></p> <p>You also won't see the pillar! So let's make it move.</p>"},{"location":"tutorials/world/#moving-the-pillars","title":"Moving the pillars","text":"<p>Inside our <code>pillar.modifier.wren</code> there's a <code>Data</code> class, which was empty at the time.</p> <p>For our pillar to move, we'll need a speed value and we can store the speed value in this class. The data class is per entity data, and is a little bit special. The fields require a type definition, and often have extra tags to configure how the data works.</p> <p>Add a <code>speed</code> variable like this with a default value of <code>100</code>:</p> <pre><code>class Data {\n  var speed: Num = 100\n}\n</code></pre> <p>Now we can use the <code>tick</code> method to move our pillar and destroy the pillar when it goes off screen.</p> <p>Systems are one per world</p> <p>A modifier system sees all entities that is attached to, rather than on an individual entity level. We can see this in the tick method, it has an <code>each</code> method which will hand us each entity and the data for that entity.</p> <p>Inside the tick method of our modifier, we are handed the entity that we're attached to. This entity is the prototype root of our instance, because that's the entity we attached it to.</p> <p>When the pillar goes off screen, we'll see this in the log:</p> <p>[system/pillar.modifier line 34] - detached from <code>prototype/pillar.0</code> <code>42951770139</code></p> <p>The <code>Frame.end {}</code> runs a function at the end of the frame. This is a WIP requirement for this <code>Entity.destroy</code></p> <pre><code>tick(delta: Num) {\n  each {|entity: Entity, pillar: Data|\n\n    var x_now = Transform.get_pos_x(entity) - pillar.speed * delta\n    Transform.set_pos_x(entity, x_now)\n\n    if(x_now &lt; -256) {\n      Frame.end { Entity.destroy(entity) }\n    }\n\n  } //each\n} //tick\n</code></pre>"},{"location":"tutorials/world/#more-pillars","title":"More pillars","text":"<p>We probably want more than one pillar to come across the level, so we'll use a tool called <code>World.schedule(world, time, fn)</code>. This calls a function every <code>time</code> seconds, but the important part is that it is affected by the world rate.</p> <p>If we used <code>Frame.schedule(time, fn)</code> it would be global, and not world specific. With <code>World.schedule</code> we can pause by setting the world rate to 0.</p> <pre><code>  ...\n\n  create_player()\n\n  create_pillar()\n  World.schedule(world, 6, 9999) {\n    create_pillar()\n  }\n\n} //ready\n</code></pre> <p>And with that change, we now get a constant stream of pillars to jump over! We have one more important thing to do to finish this tutorial.</p> <p></p>"},{"location":"tutorials/world/#handling-collision","title":"Handling collision","text":"<p>Our last step for this game is handling what happens when you hit something.</p> <p>If you saw the moving pillar video above, the player goes through the walls and keeps jumping forward because of our code to keep it in the same spot.</p> <p>Instead what we'll do is check the direction of the hit, and if you hit a wall (sideways), pause the game world.</p> <pre><code>  ...\n\n  handle_collision()\n\n} //ready\n\nhandle_collision() {\n\n  Arcade.add_collision_callback(player) {|entity_a, entity_b, state, normal, overlap_dist|\n    if(state != CollisionEvent.begin) return\n\n    var dot = Math.dot2D(normal, [0,1,0])\n\n    if(dot.abs &lt; 0.8) {\n      World.set_rate(world, 0)\n    }\n\n  } //collision callback\n\n} //handle_collision\n</code></pre> <p>You can see here we bounce off the top of things, but when we hit the side wall, we stop.</p>"},{"location":"tutorials/world/#polishing","title":"Polishing","text":"<p>The check is a little abrupt, and isn't very fun because it's super precise and you can fail easily.</p> <p>To make the game a bit more fun, we'll add some squishy behaviour. When we hit a collider, we get the height and check the distance. If the distance is less than 32 (half the radius of our bee), we've just hit the edge of the collider with the bottom of the bee and we can ignore it.</p> <p>Another tweak, we'll play a bounce animation when we hit a flower. This also uses the <code>Tags</code> modifier, which allows us to tag entities with specific tags and check for them. In this case, our flower entity inside the pillar prototype already has a tag.</p> <pre><code>handle_collision() {\n\n  Arcade.add_collision_callback(player) {|entity_a, entity_b, state, normal, overlap_dist|\n    if(state != CollisionEvent.begin) return\n\n    var dot = Math.dot2D(normal, [0,1,0])\n\n    var scale = Transform.get_scale_world(entity_b)\n    var height = Arcade.get_height(entity_b) * scale.y\n    var top = Transform.get_pos_y_world(entity_b) + (height * 0.5)\n    var dist = (top - (Transform.get_pos_y_world(player) - 32))\n\n    if(dot.abs &lt; 0.8 &amp;&amp; dist &gt; 32) {\n      World.set_rate(world, 0)\n    }\n\n    if(Tags.has_tag(entity_b, \"flower\")) {\n      Anim.play(entity_b, \"anim/bounce\")\n    }\n\n  } //collision callback\n\n} //handle_collision\n</code></pre>"},{"location":"tutorials/world/#reset","title":"Reset","text":"<p>One final task is to make it so you can reset the state so you can try again.</p> <p>We'll add a <code>reset()</code> method, first we reset the player position, and unpause the world. This is called from tick using a simple key check.</p> <pre><code>reset() {\n  Transform.set_pos(player, world_width/4, world_height/2, 0)\n  World.set_rate(world, 1)\n}\n\ntick(delta: Num) {\n\n  if(Input.key_state_released(Key.key_r)) {\n    reset()\n  }\n\n  ...\n</code></pre> <p>Now, our pillars will still be there, so we'll need to clear them up. We could keep an array of pillars we create, and then clean them up like we did in the draw tutorial? The modifer system we created already knows about all of our pillars though!</p> <p>We can add a public API to our pillar modifier, e.g <code>Pillar.reset(world)</code>. To do this, we'll add a method to the <code>API</code> class in our modifier. This method has access to a method called <code>system_in</code>, which gives us our system to call into.</p> <pre><code>class Pillar is API {\n\n  static reset(world: World) {\n    var system: System = system_in(world)\n    system.reset()\n  }\n\n}\n</code></pre> <p>Now inside of our system, we can add the reset method. This method will simply loop through each pillar, and destroy it.</p> <pre><code>class System is Modifier {\n\n  ...\n\n  reset() {\n    each {|entity: Entity, pillar: Data|\n      Frame.end { Entity.destroy(entity) }\n    }\n  }\n</code></pre> <p>And of course, don't forget to call it from our reset method:</p> <pre><code>reset() {\n  Pillar.reset(world)\n  Transform.set_pos(player, world_width/4, world_height/2, 0)\n  World.set_rate(world, 1)\n}\n</code></pre>"},{"location":"tutorials/world/#debug-off","title":"Debug off","text":"<p>One more tweak, now that we know it is working: turn off the debug drawer!</p> <pre><code>// Arcade.set_debug_draw_enabled(world, true)\n</code></pre>"},{"location":"tutorials/world/#try-this","title":"Try this","text":"<p>Add score</p> <p>Add a <code>score</code> variable to the game class, add <code>1</code> to it each time a flower is collected.</p> <p>Add Game Over and a Win condition</p> <p>Like before, make the experience more complete.</p> <p>Experiment with values</p> <p>Try randomizing pillar speeds, pillar schedule timing, bee velocities and more.</p>"},{"location":"tutorials/world/#final-code","title":"Final code","text":""},{"location":"tutorials/world/#gamewren","title":"<code>game.wren</code>","text":"<pre><code>import \"luxe: world\" for World, Entity, Transform, Sprite, Tags, Anim\nimport \"luxe: draw\" for Draw, PathStyle\nimport \"luxe: render\" for Material\nimport \"luxe: game\" for Frame\nimport \"luxe: input\" for Input, Key\nimport \"luxe: assets\" for Assets, Strings\nimport \"luxe: asset\" for Asset\nimport \"luxe: math\" for Math\nimport \"luxe: string\" for Str\nimport \"luxe: io\" for IO\nimport \"random\" for Random\n\nimport \"luxe: world/scene\" for Scene\nimport \"luxe: world/prototype\" for Prototype\nimport \"arcade: system/arcade.modifier\" for Arcade, CollisionEvent, ShapeType\nimport \"system/pillar.modifier\" for Pillar\n\nimport \"outline/ready\" for Ready\n\nclass In {\n  static jump { \"jump\" }\n}\n\nclass Game is Ready {\n\n  var random = Random.new()\n  var draw: Draw = null\n\n  var player = Entity.none\n\n  construct ready() {\n\n    super(\"ready! %(width) x %(height) @ %(scale)x\")\n\n    draw = Draw.create(World.render_set(world))\n\n    Scene.create(world, Asset.scene(\"scene/level\"))\n    create_player()\n\n    create_pillar()\n    World.schedule(world, 6, 9999) {\n      create_pillar()\n    }\n\n    handle_collision()\n\n  } //ready\n\n  handle_collision() {\n\n    Arcade.add_collision_callback(player) {|entity_a, entity_b, state, normal, overlap_dist|\n      if(state != CollisionEvent.begin) return\n\n      var dot = Math.dot2D(normal, [0,1,0])\n\n      var scale = Transform.get_scale_world(entity_b)\n      var height = Arcade.get_height(entity_b) * scale.y\n      var top = Transform.get_pos_y_world(entity_b) + (height * 0.5)\n      var dist = (top - (Transform.get_pos_y_world(player) - 32))\n\n      if(dot.abs &lt; 0.8 &amp;&amp; dist &gt; 32) {\n        World.set_rate(world, 0)\n      }\n\n      if(Tags.has_tag(entity_b, \"flower\")) {\n        Anim.play(entity_b, \"anim/bounce\")\n      }\n\n    } //collision callback\n\n  } //handle_collision\n\n  create_player() {\n\n    player = Entity.create(world, \"player\")\n    Transform.create(player, world_width/2, world_height/2)\n    Sprite.create(player, Assets.image(\"image/bee\"), 64, 64)\n\n    Arcade.create(player)\n    Arcade.set_shape_type(player, ShapeType.circle)\n    Arcade.set_radius(player, 32)\n    Arcade.set_acc(player, [0, -200])\n    Arcade.set_max_speed(player, 150)\n    // Arcade.set_debug_draw_enabled(world, true)\n\n  } //create_player\n\n  create_pillar() {\n\n    var pillar = Prototype.create(world, Asset.prototype(\"prototype/pillar.0\"))\n    Transform.set_scale(pillar, 0.4, 0.4)\n    Transform.set_pos(pillar, world_width + 128, random.int(15, 170))\n    Pillar.create(pillar)\n\n  } //create_pillar\n\n  jump() {\n\n    var velocity = Arcade.get_vel(player)\n\n    velocity.x = 0\n    velocity.y = velocity.y + 150\n\n    Arcade.set_vel(player, velocity)\n\n  } //jump\n\n  reset() {\n    Pillar.reset(world)\n    Transform.set_pos(player, world_width/4, world_height/2, 0)\n    World.set_rate(world, 1)\n  }\n\n  tick(delta: Num) {\n\n    if(Input.key_state_released(Key.key_r)) {\n      reset()\n    }\n\n    Transform.set_pos_x(player, world_width / 4)\n\n    if(Input.event_began(In.jump)) {\n      jump()\n    }\n\n    if(Input.key_state_released(Key.escape)) {\n      IO.shutdown()\n    }\n\n  } //tick\n\n} //Game\n</code></pre>"},{"location":"tutorials/world/#systempillarmodifierwren","title":"<code>system/pillar.modifier.wren</code>","text":"<pre><code>import \"system/pillar.modifier.api\" for API, Modifier, APIGet, APISet\nimport \"luxe: world\" for Entity, Transform\nimport \"luxe: render\" for Render, Geometry\nimport \"luxe.project/asset\" for Asset\nimport \"luxe: assets\" for Strings\nimport \"luxe: game\" for Frame\n\n#block = data\nclass Data {\n  var speed: Num = 100\n}\n\n#api\n#icon = \"image/pillar.svg\"\n#display = \"Pillar\"\n#desc = \"**A moving pillar**. Moves the pillar horizontally toward the player, then removes itself when offscreen.\"\nclass Pillar is API {\n\n  static reset(world: World) {\n    var system: System = system_in(world)\n    system.reset()\n  }\n\n}\n\n#system\n#phase(on, tick)\nclass System is Modifier {\n\n  init(world: World) {\n    Log.print(\"init `%(This)` in world `%(world)`\")\n  }\n\n  attach(entity: Entity, pillar: Data) {\n    Log.print(\"attached to `%(Strings.get(Entity.get_name(entity)))` `%(entity)`\")\n  }\n\n  detach(entity: Entity, pillar: Data) {\n    Log.print(\"detached from `%(Strings.get(Entity.get_name(entity)))` `%(entity)`\")\n  }\n\n  reset() {\n    each {|entity: Entity, pillar: Data|\n      Frame.end { Entity.destroy(entity) }\n    }\n  }\n\n  tick(delta: Num) {\n    each {|entity: Entity, pillar: Data|\n\n      var x_now = Transform.get_pos_x(entity) - pillar.speed * delta\n      Transform.set_pos_x(entity, x_now)\n\n      if(x_now &lt; -256) {\n        Frame.end { Entity.destroy(entity) }\n      }\n\n    } //each\n  } //tick\n\n}\n</code></pre>"}]}